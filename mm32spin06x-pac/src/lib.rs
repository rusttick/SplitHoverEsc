#![doc = "Peripheral access API for MM32F013X microcontrollers (generated using svd2rust v0.37.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.37.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 2;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG_IWDG();
    fn PVD();
    fn RTC_BKP();
    fn FLASH();
    fn RCC();
    fn EXTI0_1();
    fn EXTI2_3();
    fn EXTI4_15();
    fn HWDIV();
    fn DMA1_Channel1();
    fn DMA1_Channel2_3();
    fn DMA1_Channel4_5();
    fn ADC1_COMP();
    fn TIM1_BRK_UP_TRG_COM();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM14();
    fn TIM16();
    fn TIM17();
    fn I2C1();
    fn SPI1();
    fn SPI2();
    fn UART1();
    fn UART2();
    fn CAN();
    fn USB_FS();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[unsafe(no_mangle)]
pub static __INTERRUPTS: [Vector; 32] = [
    Vector {
        _handler: WWDG_IWDG,
    },
    Vector { _handler: PVD },
    Vector { _handler: RTC_BKP },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0_1 },
    Vector { _handler: EXTI2_3 },
    Vector { _handler: EXTI4_15 },
    Vector { _handler: HWDIV },
    Vector {
        _handler: DMA1_Channel1,
    },
    Vector {
        _handler: DMA1_Channel2_3,
    },
    Vector {
        _handler: DMA1_Channel4_5,
    },
    Vector {
        _handler: ADC1_COMP,
    },
    Vector {
        _handler: TIM1_BRK_UP_TRG_COM,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM14 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector { _handler: I2C1 },
    Vector { _reserved: 0 },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: UART1 },
    Vector { _handler: UART2 },
    Vector { _reserved: 0 },
    Vector { _handler: CAN },
    Vector { _handler: USB_FS },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Watchdog interrupt"]
    WWDG_IWDG = 0,
    #[doc = "1 - PVD through EXTI line detection interrupt"]
    PVD = 1,
    #[doc = "2 - RTC and BKP global interrupt"]
    RTC_BKP = 2,
    #[doc = "3 - Flash global interrupt"]
    FLASH = 3,
    #[doc = "4 - RCC global interrupt"]
    RCC = 4,
    #[doc = "5 - EXTI Line0_1 interrupt"]
    EXTI0_1 = 5,
    #[doc = "6 - EXTI Line2_3 interrupt"]
    EXTI2_3 = 6,
    #[doc = "7 - EXTI Line4_15 interrupt"]
    EXTI4_15 = 7,
    #[doc = "8 - HWDIV global interrupt"]
    HWDIV = 8,
    #[doc = "9 - DMA1 Channel1 global interrupt"]
    DMA1_Channel1 = 9,
    #[doc = "10 - DMA1 Channel2_3 global interrupt"]
    DMA1_Channel2_3 = 10,
    #[doc = "11 - DMA1 Channel4_5 global interrupt"]
    DMA1_Channel4_5 = 11,
    #[doc = "12 - ADC1 and compare global interrupt"]
    ADC1_COMP = 12,
    #[doc = "13 - TIM1 break,Update,Trigger and Commutation interrupt"]
    TIM1_BRK_UP_TRG_COM = 13,
    #[doc = "14 - TIM1 Capture Compare interrupt"]
    TIM1_CC = 14,
    #[doc = "15 - TIM2 global interrupt"]
    TIM2 = 15,
    #[doc = "16 - TIM3 global interrupt"]
    TIM3 = 16,
    #[doc = "19 - TIM14 global interrupt"]
    TIM14 = 19,
    #[doc = "21 - TIM16 global interrupt"]
    TIM16 = 21,
    #[doc = "22 - TIM17 global interrupt"]
    TIM17 = 22,
    #[doc = "23 - I2C1 interrupt"]
    I2C1 = 23,
    #[doc = "25 - SPI1 global interrupt"]
    SPI1 = 25,
    #[doc = "26 - SPI2 global interrupt"]
    SPI2 = 26,
    #[doc = "27 - UART1 global interrupt"]
    UART1 = 27,
    #[doc = "28 - UART2 global interrupt"]
    UART2 = 28,
    #[doc = "30 - CAN interrupts"]
    CAN = 30,
    #[doc = "31 - USB Device FS"]
    USB_FS = 31,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Analog to digital converter 1"]
pub type Adc1 = crate::Periph<adc1::RegisterBlock, 0x4001_2400>;
impl core::fmt::Debug for Adc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1").finish()
    }
}
#[doc = "Analog to digital converter 1"]
pub mod adc1;
#[doc = "Backup registers"]
pub type Bkp = crate::Periph<bkp::RegisterBlock, 0x4000_2840>;
impl core::fmt::Debug for Bkp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Bkp").finish()
    }
}
#[doc = "Backup registers"]
pub mod bkp;
#[doc = "Controller area network"]
pub type Can = crate::Periph<can::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for Can {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can").finish()
    }
}
#[doc = "Controller area network"]
pub mod can;
#[doc = "Comparator"]
pub type Comp = crate::Periph<comp::RegisterBlock, 0x4001_3c00>;
impl core::fmt::Debug for Comp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Comp").finish()
    }
}
#[doc = "Comparator"]
pub mod comp;
#[doc = "CRC calculation unit"]
pub type Crc = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
#[doc = "CRC calculation unit"]
pub mod crc;
#[doc = "Debug support"]
pub type Csm = crate::Periph<csm::RegisterBlock, 0x4000_6800>;
impl core::fmt::Debug for Csm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Csm").finish()
    }
}
#[doc = "Debug support"]
pub mod csm;
#[doc = "Debug support"]
pub type Dbg = crate::Periph<dbg::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for Dbg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dbg").finish()
    }
}
#[doc = "Debug support"]
pub mod dbg;
#[doc = "DEVICE"]
pub type Device = crate::Periph<device::RegisterBlock, 0x1fff_f7e8>;
impl core::fmt::Debug for Device {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Device").finish()
    }
}
#[doc = "DEVICE"]
pub mod device;
#[doc = "Direct Momory Accessuart"]
pub type Dma1 = crate::Periph<dma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for Dma1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma1").finish()
    }
}
#[doc = "Direct Momory Accessuart"]
pub mod dma1;
#[doc = "External interrupt/event controller"]
pub type Exti = crate::Periph<exti::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for Exti {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exti").finish()
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti;
#[doc = "FLASH"]
pub type Flash = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for Flash {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Flash").finish()
    }
}
#[doc = "FLASH"]
pub mod flash;
#[doc = "General purpose I/O"]
pub type Gpioa = crate::Periph<gpioa::RegisterBlock, 0x4800_0000>;
impl core::fmt::Debug for Gpioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioa").finish()
    }
}
#[doc = "General purpose I/O"]
pub mod gpioa;
#[doc = "General purpose I/O"]
pub type Gpiob = crate::Periph<gpioa::RegisterBlock, 0x4800_0400>;
impl core::fmt::Debug for Gpiob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiob").finish()
    }
}
#[doc = "General purpose I/O"]
pub use self::gpioa as gpiob;
#[doc = "General purpose I/O"]
pub type Gpioc = crate::Periph<gpioa::RegisterBlock, 0x4800_0800>;
impl core::fmt::Debug for Gpioc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioc").finish()
    }
}
#[doc = "General purpose I/O"]
pub use self::gpioa as gpioc;
#[doc = "General purpose I/O"]
pub type Gpiod = crate::Periph<gpioa::RegisterBlock, 0x4800_0c00>;
impl core::fmt::Debug for Gpiod {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiod").finish()
    }
}
#[doc = "General purpose I/O"]
pub use self::gpioa as gpiod;
#[doc = "Hardware divider"]
pub type Hwdiv = crate::Periph<hwdiv::RegisterBlock, 0x4003_0000>;
impl core::fmt::Debug for Hwdiv {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hwdiv").finish()
    }
}
#[doc = "Hardware divider"]
pub mod hwdiv;
#[doc = "Inter integrated circuit"]
pub type I2c1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub mod i2c1;
#[doc = "Independent watchdog"]
pub type Iwdg = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for Iwdg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iwdg").finish()
    }
}
#[doc = "Independent watchdog"]
pub mod iwdg;
#[doc = "Power control"]
pub type Pwr = crate::Periph<pwr::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for Pwr {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwr").finish()
    }
}
#[doc = "Power control"]
pub mod pwr;
#[doc = "Reset and clock control"]
pub type Rcc = crate::Periph<rcc::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for Rcc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rcc").finish()
    }
}
#[doc = "Reset and clock control"]
pub mod rcc;
#[doc = "Real time clock"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real time clock"]
pub mod rtc;
#[doc = "Serial peripheral interface"]
pub type Spi1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi1;
#[doc = "Serial peripheral interface"]
pub type Spi2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for Spi2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi2").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi2;
#[doc = "Advanced timer"]
pub type Tim1 = crate::Periph<tim1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for Tim1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim1").finish()
    }
}
#[doc = "Advanced timer"]
pub mod tim1;
#[doc = "General purpose timer"]
pub type Tim2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Tim2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim2").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tim2;
#[doc = "General purpose timer"]
pub type Tim3 = crate::Periph<tim3::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for Tim3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim3").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tim3;
#[doc = "Basic purpose timer"]
pub type Tim14 = crate::Periph<tim14::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for Tim14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim14").finish()
    }
}
#[doc = "Basic purpose timer"]
pub mod tim14;
#[doc = "Basic purpose timer"]
pub type Tim16 = crate::Periph<tim16::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for Tim16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim16").finish()
    }
}
#[doc = "Basic purpose timer"]
pub mod tim16;
#[doc = "Basic purpose timer"]
pub type Tim17 = crate::Periph<tim16::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for Tim17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim17").finish()
    }
}
#[doc = "Basic purpose timer"]
pub use self::tim16 as tim17;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart1 = crate::Periph<uart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for Uart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart1").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub mod uart1;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart2 = crate::Periph<uart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for Uart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart2").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub use self::uart1 as uart2;
#[doc = "Universal serial bus full-speed device interface"]
pub type Usb = crate::Periph<usb::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for Usb {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usb").finish()
    }
}
#[doc = "Universal serial bus full-speed device interface"]
pub mod usb;
#[doc = "Window watchdog"]
pub type Wwdg = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for Wwdg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wwdg").finish()
    }
}
#[doc = "Window watchdog"]
pub mod wwdg;
#[unsafe(no_mangle)]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "ADC1"]
    pub adc1: Adc1,
    #[doc = "BKP"]
    pub bkp: Bkp,
    #[doc = "CAN"]
    pub can: Can,
    #[doc = "COMP"]
    pub comp: Comp,
    #[doc = "CRC"]
    pub crc: Crc,
    #[doc = "CSM"]
    pub csm: Csm,
    #[doc = "DBG"]
    pub dbg: Dbg,
    #[doc = "DEVICE"]
    pub device: Device,
    #[doc = "DMA1"]
    pub dma1: Dma1,
    #[doc = "EXTI"]
    pub exti: Exti,
    #[doc = "FLASH"]
    pub flash: Flash,
    #[doc = "GPIOA"]
    pub gpioa: Gpioa,
    #[doc = "GPIOB"]
    pub gpiob: Gpiob,
    #[doc = "GPIOC"]
    pub gpioc: Gpioc,
    #[doc = "GPIOD"]
    pub gpiod: Gpiod,
    #[doc = "HWDIV"]
    pub hwdiv: Hwdiv,
    #[doc = "I2C1"]
    pub i2c1: I2c1,
    #[doc = "IWDG"]
    pub iwdg: Iwdg,
    #[doc = "PWR"]
    pub pwr: Pwr,
    #[doc = "RCC"]
    pub rcc: Rcc,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "SPI1"]
    pub spi1: Spi1,
    #[doc = "SPI2"]
    pub spi2: Spi2,
    #[doc = "TIM1"]
    pub tim1: Tim1,
    #[doc = "TIM2"]
    pub tim2: Tim2,
    #[doc = "TIM3"]
    pub tim3: Tim3,
    #[doc = "TIM14"]
    pub tim14: Tim14,
    #[doc = "TIM16"]
    pub tim16: Tim16,
    #[doc = "TIM17"]
    pub tim17: Tim17,
    #[doc = "UART1"]
    pub uart1: Uart1,
    #[doc = "UART2"]
    pub uart2: Uart2,
    #[doc = "USB"]
    pub usb: Usb,
    #[doc = "WWDG"]
    pub wwdg: Wwdg,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        unsafe {
            DEVICE_PERIPHERALS = true;
            Peripherals {
                adc1: Adc1::steal(),
                bkp: Bkp::steal(),
                can: Can::steal(),
                comp: Comp::steal(),
                crc: Crc::steal(),
                csm: Csm::steal(),
                dbg: Dbg::steal(),
                device: Device::steal(),
                dma1: Dma1::steal(),
                exti: Exti::steal(),
                flash: Flash::steal(),
                gpioa: Gpioa::steal(),
                gpiob: Gpiob::steal(),
                gpioc: Gpioc::steal(),
                gpiod: Gpiod::steal(),
                hwdiv: Hwdiv::steal(),
                i2c1: I2c1::steal(),
                iwdg: Iwdg::steal(),
                pwr: Pwr::steal(),
                rcc: Rcc::steal(),
                rtc: Rtc::steal(),
                spi1: Spi1::steal(),
                spi2: Spi2::steal(),
                tim1: Tim1::steal(),
                tim2: Tim2::steal(),
                tim3: Tim3::steal(),
                tim14: Tim14::steal(),
                tim16: Tim16::steal(),
                tim17: Tim17::steal(),
                uart1: Uart1::steal(),
                uart2: Uart2::steal(),
                usb: Usb::steal(),
                wwdg: Wwdg::steal(),
            }
        }
    }
}
