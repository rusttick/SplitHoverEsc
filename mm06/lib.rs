# ! [doc = "Peripheral access API for MM32F013X microcontrollers (generated using svd2rust v0.37.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.37.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"] # ! [allow (non_camel_case_types)] # ! [allow (non_snake_case)] # ! [no_std] # ! [cfg_attr (docsrs , feature (doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"] pub const NVIC_PRIO_BITS : u8 = 2 ;
#[allow (unused_imports)] use generic :: * ;
#[doc = r"Common register and bit access and modify traits"] pub mod generic { use core :: marker ;
#[doc = " Generic peripheral accessor"] pub struct Periph < RB , const A : usize > { _marker : marker :: PhantomData < RB > , } unsafe impl < RB , const A : usize > Send for Periph < RB , A > { } impl < RB , const A : usize > Periph < RB , A > {
#[doc = "Pointer to the register block"] pub const PTR : * const RB = A as * const _ ;
#[doc = "Return the pointer to the register block"]
#[inline (always)] pub const fn ptr () -> * const RB { Self :: PTR }
#[doc = " Steal an instance of this peripheral"]
#[doc = ""]
#[doc = " # Safety"]
#[doc = ""]
#[doc = " Ensure that the new instance of the peripheral cannot be used in a way"]
#[doc = " that may race with any existing instances, for example by only"]
#[doc = " accessing read-only or write-only registers, or by consuming the"]
#[doc = " original peripheral and using critical sections to coordinate"]
#[doc = " access between multiple new instances."]
#[doc = ""]
#[doc = " Additionally, other software such as HALs may rely on only one"]
#[doc = " peripheral instance existing to ensure memory safety; ensure"]
#[doc = " no stolen instances are passed to such software."] pub unsafe fn steal () -> Self { Self { _marker : marker :: PhantomData , } } } impl < RB , const A : usize > core :: ops :: Deref for Periph < RB , A > { type Target = RB ;
#[inline (always)] fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } }
#[doc = " Raw register type (`u8`, `u16`, `u32`, ...)"] pub trait RawReg : Copy + From < bool > + core :: ops :: BitOr < Output = Self > + core :: ops :: BitAnd < Output = Self > + core :: ops :: BitOrAssign + core :: ops :: BitAndAssign + core :: ops :: Not < Output = Self > + core :: ops :: Shl < u8 , Output = Self > {
#[doc = " Mask for bits of width `WI`"] fn mask < const WI : u8 > () -> Self ;
#[doc = " `0`"] const ZERO : Self ;
#[doc = " `1`"] const ONE : Self ; } macro_rules ! raw_reg { ($ U : ty , $ size : literal , $ mask : ident) => { impl RawReg for $ U {
#[inline (always)] fn mask < const WI : u8 > () -> Self { $ mask ::< WI > () } const ZERO : Self = 0 ; const ONE : Self = 1 ; } const fn $ mask < const WI : u8 > () -> $ U { <$ U >:: MAX >> ($ size - WI) } impl FieldSpec for $ U { type Ux = $ U ; } } ; } raw_reg ! (u8 , 8 , mask_u8) ; raw_reg ! (u16 , 16 , mask_u16) ; raw_reg ! (u32 , 32 , mask_u32) ; raw_reg ! (u64 , 64 , mask_u64) ;
#[doc = " Raw register type"] pub trait RegisterSpec {
#[doc = " Raw register type (`u8`, `u16`, `u32`, ...)."] type Ux : RawReg ; }
#[doc = " Raw field type"] pub trait FieldSpec : Sized {
#[doc = " Raw field type (`u8`, `u16`, `u32`, ...)."] type Ux : Copy + core :: fmt :: Debug + PartialEq + From < Self > ; }
#[doc = " Marker for fields with fixed values"] pub trait IsEnum : FieldSpec { }
#[doc = " Trait implemented by readable registers to enable the `read` method."]
#[doc = ""]
#[doc = " Registers marked with `Writable` can be also be `modify`'ed."] pub trait Readable : RegisterSpec { }
#[doc = " Trait implemented by writeable registers."]
#[doc = ""]
#[doc = " This enables the  `write`, `write_with_zero` and `reset` methods."]
#[doc = ""]
#[doc = " Registers marked with `Readable` can be also be `modify`'ed."] pub trait Writable : RegisterSpec {
#[doc = " Is it safe to write any bits to register"] type Safety ;
#[doc = " Specifies the register bits that are not changed if you pass `1` and are changed if you pass `0`"] const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = Self :: Ux :: ZERO ;
#[doc = " Specifies the register bits that are not changed if you pass `0` and are changed if you pass `1`"] const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = Self :: Ux :: ZERO ; }
#[doc = " Reset value of the register."]
#[doc = ""]
#[doc = " This value is the initial value for the `write` method. It can also be directly written to the"]
#[doc = " register by using the `reset` method."] pub trait Resettable : RegisterSpec {
#[doc = " Reset value of the register."] const RESET_VALUE : Self :: Ux = Self :: Ux :: ZERO ;
#[doc = " Reset value of the register."]
#[inline (always)] fn reset_value () -> Self :: Ux { Self :: RESET_VALUE } }
#[doc (hidden)] pub mod raw { use super :: { marker , BitM , FieldSpec , RegisterSpec , Unsafe , Writable } ; pub struct R < REG : RegisterSpec > { pub (crate) bits : REG :: Ux , pub (super) _reg : marker :: PhantomData < REG > , } pub struct W < REG : RegisterSpec > {
#[doc = "Writable bits"] pub (crate) bits : REG :: Ux , pub (super) _reg : marker :: PhantomData < REG > , } pub struct FieldReader < FI = u8 > where FI : FieldSpec , { pub (crate) bits : FI :: Ux , _reg : marker :: PhantomData < FI > , } impl < FI : FieldSpec > FieldReader < FI > {
#[doc = " Creates a new instance of the reader."]
#[allow (unused)]
#[inline (always)] pub (crate) const fn new (bits : FI :: Ux) -> Self { Self { bits , _reg : marker :: PhantomData , } } } pub struct BitReader < FI = bool > { pub (crate) bits : bool , _reg : marker :: PhantomData < FI > , } impl < FI > BitReader < FI > {
#[doc = " Creates a new instance of the reader."]
#[allow (unused)]
#[inline (always)] pub (crate) const fn new (bits : bool) -> Self { Self { bits , _reg : marker :: PhantomData , } } }
#[must_use = "after creating `FieldWriter` you need to call field value setting method"] pub struct FieldWriter < 'a , REG , const WI : u8 , FI = u8 , Safety = Unsafe > where REG : Writable + RegisterSpec , FI : FieldSpec , { pub (crate) w : & 'a mut W < REG > , pub (crate) o : u8 , _field : marker :: PhantomData < (FI , Safety) > , } impl < 'a , REG , const WI : u8 , FI , Safety > FieldWriter < 'a , REG , WI , FI , Safety > where REG : Writable + RegisterSpec , FI : FieldSpec , {
#[doc = " Creates a new instance of the writer"]
#[allow (unused)]
#[inline (always)] pub (crate) fn new (w : & 'a mut W < REG > , o : u8) -> Self { Self { w , o , _field : marker :: PhantomData , } } }
#[must_use = "after creating `BitWriter` you need to call bit setting method"] pub struct BitWriter < 'a , REG , FI = bool , M = BitM > where REG : Writable + RegisterSpec , bool : From < FI > , { pub (crate) w : & 'a mut W < REG > , pub (crate) o : u8 , _field : marker :: PhantomData < (FI , M) > , } impl < 'a , REG , FI , M > BitWriter < 'a , REG , FI , M > where REG : Writable + RegisterSpec , bool : From < FI > , {
#[doc = " Creates a new instance of the writer"]
#[allow (unused)]
#[inline (always)] pub (crate) fn new (w : & 'a mut W < REG > , o : u8) -> Self { Self { w , o , _field : marker :: PhantomData , } } } }
#[doc = " Register reader."]
#[doc = ""]
#[doc = " Result of the `read` methods of registers. Also used as a closure argument in the `modify`"]
#[doc = " method."] pub type R < REG > = raw :: R < REG > ; impl < REG : RegisterSpec > R < REG > {
#[doc = " Reads raw bits from register."]
#[inline (always)] pub const fn bits (& self) -> REG :: Ux { self . bits } } impl < REG : RegisterSpec , FI > PartialEq < FI > for R < REG > where REG :: Ux : PartialEq , FI : Copy , REG :: Ux : From < FI > , {
#[inline (always)] fn eq (& self , other : & FI) -> bool { self . bits . eq (& REG :: Ux :: from (* other)) } }
#[doc = " Register writer."]
#[doc = ""]
#[doc = " Used as an argument to the closures in the `write` and `modify` methods of the register."] pub type W < REG > = raw :: W < REG > ; impl < REG : Writable > W < REG > {
#[doc = " Writes raw bits to the register."]
#[doc = ""]
#[doc = " # Safety"]
#[doc = ""]
#[doc = " Passing incorrect value can cause undefined behaviour. See reference manual"]
#[inline (always)] pub unsafe fn bits (& mut self , bits : REG :: Ux) -> & mut Self { self . bits = bits ; self } } impl < REG > W < REG > where REG : Writable < Safety = Safe > , {
#[doc = " Writes raw bits to the register."]
#[inline (always)] pub fn set (& mut self , bits : REG :: Ux) -> & mut Self { self . bits = bits ; self } }
#[doc = " Field reader."]
#[doc = ""]
#[doc = " Result of the `read` methods of fields."] pub type FieldReader < FI = u8 > = raw :: FieldReader < FI > ;
#[doc = " Bit-wise field reader"] pub type BitReader < FI = bool > = raw :: BitReader < FI > ; impl < FI : FieldSpec > FieldReader < FI > {
#[doc = " Reads raw bits from field."]
#[inline (always)] pub const fn bits (& self) -> FI :: Ux { self . bits } } impl < FI : FieldSpec > core :: fmt :: Debug for FieldReader < FI > { fn fmt (& self , f : & mut core :: fmt :: Formatter < '_ >) -> core :: fmt :: Result { core :: fmt :: Debug :: fmt (& self . bits , f) } } impl < FI > PartialEq < FI > for FieldReader < FI > where FI : FieldSpec + Copy , {
#[inline (always)] fn eq (& self , other : & FI) -> bool { self . bits . eq (& FI :: Ux :: from (* other)) } } impl < FI > PartialEq < FI > for BitReader < FI > where FI : Copy , bool : From < FI > , {
#[inline (always)] fn eq (& self , other : & FI) -> bool { self . bits . eq (& bool :: from (* other)) } } impl < FI > BitReader < FI > {
#[doc = " Value of the field as raw bits."]
#[inline (always)] pub const fn bit (& self) -> bool { self . bits }
#[doc = " Returns `true` if the bit is clear (0)."]
#[inline (always)] pub const fn bit_is_clear (& self) -> bool { ! self . bit () }
#[doc = " Returns `true` if the bit is set (1)."]
#[inline (always)] pub const fn bit_is_set (& self) -> bool { self . bit () } } impl < FI > core :: fmt :: Debug for BitReader < FI > { fn fmt (& self , f : & mut core :: fmt :: Formatter < '_ >) -> core :: fmt :: Result { core :: fmt :: Debug :: fmt (& self . bits , f) } }
#[doc = " Marker for register/field writers which can take any value of specified width"] pub struct Safe ;
#[doc = " You should check that value is allowed to pass to register/field writer marked with this"] pub struct Unsafe ;
#[doc = " Marker for field writers are safe to write in specified inclusive range"] pub struct Range < const MIN : u64 , const MAX : u64 > ;
#[doc = " Marker for field writers are safe to write in specified inclusive range"] pub struct RangeFrom < const MIN : u64 > ;
#[doc = " Marker for field writers are safe to write in specified inclusive range"] pub struct RangeTo < const MAX : u64 > ;
#[doc = " Write field Proxy"] pub type FieldWriter < 'a , REG , const WI : u8 , FI = u8 , Safety = Unsafe > = raw :: FieldWriter < 'a , REG , WI , FI , Safety > ; impl < REG , const WI : u8 , FI , Safety > FieldWriter < '_ , REG , WI , FI , Safety > where REG : Writable + RegisterSpec , FI : FieldSpec , {
#[doc = " Field width"] pub const WIDTH : u8 = WI ;
#[doc = " Field width"]
#[inline (always)] pub const fn width (& self) -> u8 { WI }
#[doc = " Field offset"]
#[inline (always)] pub const fn offset (& self) -> u8 { self . o } } impl < 'a , REG , const WI : u8 , FI , Safety > FieldWriter < 'a , REG , WI , FI , Safety > where REG : Writable + RegisterSpec , FI : FieldSpec , REG :: Ux : From < FI :: Ux > , {
#[doc = " Writes raw bits to the field"]
#[doc = ""]
#[doc = " # Safety"]
#[doc = ""]
#[doc = " Passing incorrect value can cause undefined behaviour. See reference manual"]
#[inline (always)] pub unsafe fn bits (self , value : FI :: Ux) -> & 'a mut W < REG > { self . w . bits &= ! (REG :: Ux :: mask :: < WI > () << self . o) ; self . w . bits |= (REG :: Ux :: from (value) & REG :: Ux :: mask :: < WI > ()) << self . o ; self . w } } impl < 'a , REG , const WI : u8 , FI > FieldWriter < 'a , REG , WI , FI , Safe > where REG : Writable + RegisterSpec , FI : FieldSpec , REG :: Ux : From < FI :: Ux > , {
#[doc = " Writes raw bits to the field"]
#[inline (always)] pub fn set (self , value : FI :: Ux) -> & 'a mut W < REG > { unsafe { self . bits (value) } } } impl < 'a , REG , const WI : u8 , FI , const MIN : u64 , const MAX : u64 > FieldWriter < 'a , REG , WI , FI , Range < MIN , MAX > > where REG : Writable + RegisterSpec , FI : FieldSpec , REG :: Ux : From < FI :: Ux > , u64 : From < FI :: Ux > , {
#[doc = " Writes raw bits to the field"]
#[inline (always)] pub fn set (self , value : FI :: Ux) -> & 'a mut W < REG > { { let value = u64 :: from (value) ; assert ! (value >= MIN && value <= MAX) ; } unsafe { self . bits (value) } } } impl < 'a , REG , const WI : u8 , FI , const MIN : u64 > FieldWriter < 'a , REG , WI , FI , RangeFrom < MIN > > where REG : Writable + RegisterSpec , FI : FieldSpec , REG :: Ux : From < FI :: Ux > , u64 : From < FI :: Ux > , {
#[doc = " Writes raw bits to the field"]
#[inline (always)] pub fn set (self , value : FI :: Ux) -> & 'a mut W < REG > { { let value = u64 :: from (value) ; assert ! (value >= MIN) ; } unsafe { self . bits (value) } } } impl < 'a , REG , const WI : u8 , FI , const MAX : u64 > FieldWriter < 'a , REG , WI , FI , RangeTo < MAX > > where REG : Writable + RegisterSpec , FI : FieldSpec , REG :: Ux : From < FI :: Ux > , u64 : From < FI :: Ux > , {
#[doc = " Writes raw bits to the field"]
#[inline (always)] pub fn set (self , value : FI :: Ux) -> & 'a mut W < REG > { { let value = u64 :: from (value) ; assert ! (value <= MAX) ; } unsafe { self . bits (value) } } } impl < 'a , REG , const WI : u8 , FI , Safety > FieldWriter < 'a , REG , WI , FI , Safety > where REG : Writable + RegisterSpec , FI : IsEnum , REG :: Ux : From < FI :: Ux > , {
#[doc = " Writes `variant` to the field"]
#[inline (always)] pub fn variant (self , variant : FI) -> & 'a mut W < REG > { unsafe { self . bits (FI :: Ux :: from (variant)) } } } macro_rules ! bit_proxy { ($ writer : ident , $ mwv : ident) => {
#[doc (hidden)] pub struct $ mwv ;
#[doc = " Bit-wise write field proxy"] pub type $ writer <'a , REG , FI = bool > = raw :: BitWriter <'a , REG , FI , $ mwv >; impl <'a , REG , FI > $ writer <'a , REG , FI > where REG : Writable + RegisterSpec , bool : From < FI >, {
#[doc = " Field width"] pub const WIDTH : u8 = 1 ;
#[doc = " Field width"]
#[inline (always)] pub const fn width (& self) -> u8 { Self :: WIDTH }
#[doc = " Field offset"]
#[inline (always)] pub const fn offset (& self) -> u8 { self . o }
#[doc = " Writes bit to the field"]
#[inline (always)] pub fn bit (self , value : bool) -> &'a mut W < REG > { self . w . bits &= ! (REG :: Ux :: ONE << self . o) ; self . w . bits |= (REG :: Ux :: from (value) & REG :: Ux :: ONE) << self . o ; self . w }
#[doc = " Writes `variant` to the field"]
#[inline (always)] pub fn variant (self , variant : FI) -> &'a mut W < REG > { self . bit (bool :: from (variant)) } } } ; } bit_proxy ! (BitWriter , BitM) ; bit_proxy ! (BitWriter1S , Bit1S) ; bit_proxy ! (BitWriter0C , Bit0C) ; bit_proxy ! (BitWriter1C , Bit1C) ; bit_proxy ! (BitWriter0S , Bit0S) ; bit_proxy ! (BitWriter1T , Bit1T) ; bit_proxy ! (BitWriter0T , Bit0T) ; impl < 'a , REG , FI > BitWriter < 'a , REG , FI > where REG : Writable + RegisterSpec , bool : From < FI > , {
#[doc = " Sets the field bit"]
#[inline (always)] pub fn set_bit (self) -> & 'a mut W < REG > { self . w . bits |= REG :: Ux :: ONE << self . o ; self . w }
#[doc = " Clears the field bit"]
#[inline (always)] pub fn clear_bit (self) -> & 'a mut W < REG > { self . w . bits &= ! (REG :: Ux :: ONE << self . o) ; self . w } } impl < 'a , REG , FI > BitWriter1S < 'a , REG , FI > where REG : Writable + RegisterSpec , bool : From < FI > , {
#[doc = " Sets the field bit"]
#[inline (always)] pub fn set_bit (self) -> & 'a mut W < REG > { self . w . bits |= REG :: Ux :: ONE << self . o ; self . w } } impl < 'a , REG , FI > BitWriter0C < 'a , REG , FI > where REG : Writable + RegisterSpec , bool : From < FI > , {
#[doc = " Clears the field bit"]
#[inline (always)] pub fn clear_bit (self) -> & 'a mut W < REG > { self . w . bits &= ! (REG :: Ux :: ONE << self . o) ; self . w } } impl < 'a , REG , FI > BitWriter1C < 'a , REG , FI > where REG : Writable + RegisterSpec , bool : From < FI > , {
#[doc = "Clears the field bit by passing one"]
#[inline (always)] pub fn clear_bit_by_one (self) -> & 'a mut W < REG > { self . w . bits |= REG :: Ux :: ONE << self . o ; self . w } } impl < 'a , REG , FI > BitWriter0S < 'a , REG , FI > where REG : Writable + RegisterSpec , bool : From < FI > , {
#[doc = "Sets the field bit by passing zero"]
#[inline (always)] pub fn set_bit_by_zero (self) -> & 'a mut W < REG > { self . w . bits &= ! (REG :: Ux :: ONE << self . o) ; self . w } } impl < 'a , REG , FI > BitWriter1T < 'a , REG , FI > where REG : Writable + RegisterSpec , bool : From < FI > , {
#[doc = "Toggle the field bit by passing one"]
#[inline (always)] pub fn toggle_bit (self) -> & 'a mut W < REG > { self . w . bits |= REG :: Ux :: ONE << self . o ; self . w } } impl < 'a , REG , FI > BitWriter0T < 'a , REG , FI > where REG : Writable + RegisterSpec , bool : From < FI > , {
#[doc = "Toggle the field bit by passing zero"]
#[inline (always)] pub fn toggle_bit (self) -> & 'a mut W < REG > { self . w . bits &= ! (REG :: Ux :: ONE << self . o) ; self . w } }
#[doc = " This structure provides volatile access to registers."]
#[repr (transparent)] pub struct Reg < REG : RegisterSpec > { register : vcell :: VolatileCell < REG :: Ux > , _marker : marker :: PhantomData < REG > , } unsafe impl < REG : RegisterSpec > Send for Reg < REG > where REG :: Ux : Send { } impl < REG : RegisterSpec > Reg < REG > {
#[doc = " Returns the underlying memory address of register."]
#[doc = ""]
#[doc = " ```ignore"]
#[doc = " let reg_ptr = periph.reg.as_ptr();"]
#[doc = " ```"]
#[inline (always)] pub fn as_ptr (& self) -> * mut REG :: Ux { self . register . as_ptr () } } impl < REG : Readable > Reg < REG > {
#[doc = " Reads the contents of a `Readable` register."]
#[doc = ""]
#[doc = " You can read the raw contents of a register by using `bits`:"]
#[doc = " ```ignore"]
#[doc = " let bits = periph.reg.read().bits();"]
#[doc = " ```"]
#[doc = " or get the content of a particular field of a register:"]
#[doc = " ```ignore"]
#[doc = " let reader = periph.reg.read();"]
#[doc = " let bits = reader.field1().bits();"]
#[doc = " let flag = reader.field2().bit_is_set();"]
#[doc = " ```"]
#[inline (always)] pub fn read (& self) -> R < REG > { R { bits : self . register . get () , _reg : marker :: PhantomData , } } } impl < REG : Resettable + Writable > Reg < REG > {
#[doc = " Writes the reset value to `Writable` register."]
#[doc = ""]
#[doc = " Resets the register to its initial state."]
#[inline (always)] pub fn reset (& self) { self . register . set (REG :: RESET_VALUE) }
#[doc = " Writes bits to a `Writable` register."]
#[doc = ""]
#[doc = " You can write raw bits into a register:"]
#[doc = " ```ignore"]
#[doc = " periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
#[doc = " ```"]
#[doc = " or write only the fields you need:"]
#[doc = " ```ignore"]
#[doc = " periph.reg.write(|w| w"]
#[doc = "     .field1().bits(newfield1bits)"]
#[doc = "     .field2().set_bit()"]
#[doc = "     .field3().variant(VARIANT)"]
#[doc = " );"]
#[doc = " ```"]
#[doc = " or an alternative way of saying the same:"]
#[doc = " ```ignore"]
#[doc = " periph.reg.write(|w| {"]
#[doc = "     w.field1().bits(newfield1bits);"]
#[doc = "     w.field2().set_bit();"]
#[doc = "     w.field3().variant(VARIANT)"]
#[doc = " });"]
#[doc = " ```"]
#[doc = " In the latter case, other fields will be set to their reset value."]
#[inline (always)] pub fn write < F > (& self , f : F) -> REG :: Ux where F : FnOnce (& mut W < REG >) -> & mut W < REG > , { let value = f (& mut W { bits : REG :: RESET_VALUE & ! REG :: ONE_TO_MODIFY_FIELDS_BITMAP | REG :: ZERO_TO_MODIFY_FIELDS_BITMAP , _reg : marker :: PhantomData , }) . bits ; self . register . set (value) ; value }
#[doc = " Writes bits to a `Writable` register and produce a value."]
#[doc = ""]
#[doc = " You can write raw bits into a register:"]
#[doc = " ```ignore"]
#[doc = " periph.reg.write_and(|w| unsafe { w.bits(rawbits); });"]
#[doc = " ```"]
#[doc = " or write only the fields you need:"]
#[doc = " ```ignore"]
#[doc = " periph.reg.write_and(|w| {"]
#[doc = "     w.field1().bits(newfield1bits)"]
#[doc = "         .field2().set_bit()"]
#[doc = "         .field3().variant(VARIANT);"]
#[doc = " });"]
#[doc = " ```"]
#[doc = " or an alternative way of saying the same:"]
#[doc = " ```ignore"]
#[doc = " periph.reg.write_and(|w| {"]
#[doc = "     w.field1().bits(newfield1bits);"]
#[doc = "     w.field2().set_bit();"]
#[doc = "     w.field3().variant(VARIANT);"]
#[doc = " });"]
#[doc = " ```"]
#[doc = " In the latter case, other fields will be set to their reset value."]
#[doc = ""]
#[doc = " Values can be returned from the closure:"]
#[doc = " ```ignore"]
#[doc = " let state = periph.reg.write_and(|w| State::set(w.field1()));"]
#[doc = " ```"]
#[inline (always)] pub fn from_write < F , T > (& self , f : F) -> T where F : FnOnce (& mut W < REG >) -> T , { let mut writer = W { bits : REG :: RESET_VALUE & ! REG :: ONE_TO_MODIFY_FIELDS_BITMAP | REG :: ZERO_TO_MODIFY_FIELDS_BITMAP , _reg : marker :: PhantomData , } ; let result = f (& mut writer) ; self . register . set (writer . bits) ; result } } impl < REG : Writable > Reg < REG > {
#[doc = " Writes 0 to a `Writable` register."]
#[doc = ""]
#[doc = " Similar to `write`, but unused bits will contain 0."]
#[doc = ""]
#[doc = " # Safety"]
#[doc = ""]
#[doc = " Unsafe to use with registers which don't allow to write 0."]
#[inline (always)] pub unsafe fn write_with_zero < F > (& self , f : F) -> REG :: Ux where F : FnOnce (& mut W < REG >) -> & mut W < REG > , { let value = f (& mut W { bits : REG :: Ux :: ZERO , _reg : marker :: PhantomData , }) . bits ; self . register . set (value) ; value }
#[doc = " Writes 0 to a `Writable` register and produces a value."]
#[doc = ""]
#[doc = " Similar to `write`, but unused bits will contain 0."]
#[doc = ""]
#[doc = " # Safety"]
#[doc = ""]
#[doc = " Unsafe to use with registers which don't allow to write 0."]
#[inline (always)] pub unsafe fn from_write_with_zero < F , T > (& self , f : F) -> T where F : FnOnce (& mut W < REG >) -> T , { let mut writer = W { bits : REG :: Ux :: ZERO , _reg : marker :: PhantomData , } ; let result = f (& mut writer) ; self . register . set (writer . bits) ; result } } impl < REG : Readable + Writable > Reg < REG > {
#[doc = " Modifies the contents of the register by reading and then writing it."]
#[doc = ""]
#[doc = " E.g. to do a read-modify-write sequence to change parts of a register:"]
#[doc = " ```ignore"]
#[doc = " periph.reg.modify(|r, w| unsafe { w.bits("]
#[doc = "    r.bits() | 3"]
#[doc = " ) });"]
#[doc = " ```"]
#[doc = " or"]
#[doc = " ```ignore"]
#[doc = " periph.reg.modify(|_, w| w"]
#[doc = "     .field1().bits(newfield1bits)"]
#[doc = "     .field2().set_bit()"]
#[doc = "     .field3().variant(VARIANT)"]
#[doc = " );"]
#[doc = " ```"]
#[doc = " or an alternative way of saying the same:"]
#[doc = " ```ignore"]
#[doc = " periph.reg.modify(|_, w| {"]
#[doc = "     w.field1().bits(newfield1bits);"]
#[doc = "     w.field2().set_bit();"]
#[doc = "     w.field3().variant(VARIANT)"]
#[doc = " });"]
#[doc = " ```"]
#[doc = " Other fields will have the value they had before the call to `modify`."]
#[inline (always)] pub fn modify < F > (& self , f : F) -> REG :: Ux where for < 'w > F : FnOnce (& R < REG > , & 'w mut W < REG >) -> & 'w mut W < REG > , { let bits = self . register . get () ; let value = f (& R { bits , _reg : marker :: PhantomData , } , & mut W { bits : bits & ! REG :: ONE_TO_MODIFY_FIELDS_BITMAP | REG :: ZERO_TO_MODIFY_FIELDS_BITMAP , _reg : marker :: PhantomData , } ,) . bits ; self . register . set (value) ; value }
#[doc = " Modifies the contents of the register by reading and then writing it"]
#[doc = " and produces a value."]
#[doc = ""]
#[doc = " E.g. to do a read-modify-write sequence to change parts of a register:"]
#[doc = " ```ignore"]
#[doc = " let bits = periph.reg.modify(|r, w| {"]
#[doc = "     let new_bits = r.bits() | 3;"]
#[doc = "     unsafe {"]
#[doc = "         w.bits(new_bits);"]
#[doc = "     }"]
#[doc = ""]
#[doc = "     new_bits"]
#[doc = " });"]
#[doc = " ```"]
#[doc = " or"]
#[doc = " ```ignore"]
#[doc = " periph.reg.modify(|_, w| {"]
#[doc = "     w.field1().bits(newfield1bits)"]
#[doc = "         .field2().set_bit()"]
#[doc = "         .field3().variant(VARIANT);"]
#[doc = " });"]
#[doc = " ```"]
#[doc = " or an alternative way of saying the same:"]
#[doc = " ```ignore"]
#[doc = " periph.reg.modify(|_, w| {"]
#[doc = "     w.field1().bits(newfield1bits);"]
#[doc = "     w.field2().set_bit();"]
#[doc = "     w.field3().variant(VARIANT);"]
#[doc = " });"]
#[doc = " ```"]
#[doc = " Other fields will have the value they had before the call to `modify`."]
#[inline (always)] pub fn from_modify < F , T > (& self , f : F) -> T where for < 'w > F : FnOnce (& R < REG > , & 'w mut W < REG >) -> T , { let bits = self . register . get () ; let mut writer = W { bits : bits & ! REG :: ONE_TO_MODIFY_FIELDS_BITMAP | REG :: ZERO_TO_MODIFY_FIELDS_BITMAP , _reg : marker :: PhantomData , } ; let result = f (& R { bits , _reg : marker :: PhantomData , } , & mut writer ,) ; self . register . set (writer . bits) ; result } } impl < REG : Readable > core :: fmt :: Debug for crate :: generic :: Reg < REG > where R < REG > : core :: fmt :: Debug , { fn fmt (& self , f : & mut core :: fmt :: Formatter < '_ >) -> core :: fmt :: Result { core :: fmt :: Debug :: fmt (& self . read () , f) } } }
#[cfg (feature = "rt")] extern "C" { fn WWDG_IWDG () ; fn PVD () ; fn RTC_BKP () ; fn FLASH () ; fn RCC () ; fn EXTI0_1 () ; fn EXTI2_3 () ; fn EXTI4_15 () ; fn HWDIV () ; fn DMA1_Channel1 () ; fn DMA1_Channel2_3 () ; fn DMA1_Channel4_5 () ; fn ADC1_COMP () ; fn TIM1_BRK_UP_TRG_COM () ; fn TIM1_CC () ; fn TIM2 () ; fn TIM3 () ; fn TIM14 () ; fn TIM16 () ; fn TIM17 () ; fn I2C1 () ; fn SPI1 () ; fn SPI2 () ; fn UART1 () ; fn UART2 () ; fn CAN () ; fn USB_FS () ; }
#[doc (hidden)]
#[repr (C)] pub union Vector { _handler : unsafe extern "C" fn () , _reserved : u32 , }
#[cfg (feature = "rt")]
#[doc (hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle] pub static __INTERRUPTS : [Vector ; 32] = [Vector { _handler : WWDG_IWDG } , Vector { _handler : PVD } , Vector { _handler : RTC_BKP } , Vector { _handler : FLASH } , Vector { _handler : RCC } , Vector { _handler : EXTI0_1 } , Vector { _handler : EXTI2_3 } , Vector { _handler : EXTI4_15 } , Vector { _handler : HWDIV } , Vector { _handler : DMA1_Channel1 } , Vector { _handler : DMA1_Channel2_3 } , Vector { _handler : DMA1_Channel4_5 } , Vector { _handler : ADC1_COMP } , Vector { _handler : TIM1_BRK_UP_TRG_COM } , Vector { _handler : TIM1_CC } , Vector { _handler : TIM2 } , Vector { _handler : TIM3 } , Vector { _reserved : 0 } , Vector { _reserved : 0 } , Vector { _handler : TIM14 } , Vector { _reserved : 0 } , Vector { _handler : TIM16 } , Vector { _handler : TIM17 } , Vector { _handler : I2C1 } , Vector { _reserved : 0 } , Vector { _handler : SPI1 } , Vector { _handler : SPI2 } , Vector { _handler : UART1 } , Vector { _handler : UART2 } , Vector { _reserved : 0 } , Vector { _handler : CAN } , Vector { _handler : USB_FS } ,] ;
#[doc = r"Enumeration of all the interrupts."]
#[derive (Copy , Clone , Debug , PartialEq , Eq)]
#[repr (u16)] pub enum Interrupt {
#[doc = "0 - Watchdog interrupt"] WWDG_IWDG = 0 ,
#[doc = "1 - PVD through EXTI line detection interrupt"] PVD = 1 ,
#[doc = "2 - RTC and BKP global interrupt"] RTC_BKP = 2 ,
#[doc = "3 - Flash global interrupt"] FLASH = 3 ,
#[doc = "4 - RCC global interrupt"] RCC = 4 ,
#[doc = "5 - EXTI Line0_1 interrupt"] EXTI0_1 = 5 ,
#[doc = "6 - EXTI Line2_3 interrupt"] EXTI2_3 = 6 ,
#[doc = "7 - EXTI Line4_15 interrupt"] EXTI4_15 = 7 ,
#[doc = "8 - HWDIV global interrupt"] HWDIV = 8 ,
#[doc = "9 - DMA1 Channel1 global interrupt"] DMA1_Channel1 = 9 ,
#[doc = "10 - DMA1 Channel2_3 global interrupt"] DMA1_Channel2_3 = 10 ,
#[doc = "11 - DMA1 Channel4_5 global interrupt"] DMA1_Channel4_5 = 11 ,
#[doc = "12 - ADC1 and compare global interrupt"] ADC1_COMP = 12 ,
#[doc = "13 - TIM1 break,Update,Trigger and Commutation interrupt"] TIM1_BRK_UP_TRG_COM = 13 ,
#[doc = "14 - TIM1 Capture Compare interrupt"] TIM1_CC = 14 ,
#[doc = "15 - TIM2 global interrupt"] TIM2 = 15 ,
#[doc = "16 - TIM3 global interrupt"] TIM3 = 16 ,
#[doc = "19 - TIM14 global interrupt"] TIM14 = 19 ,
#[doc = "21 - TIM16 global interrupt"] TIM16 = 21 ,
#[doc = "22 - TIM17 global interrupt"] TIM17 = 22 ,
#[doc = "23 - I2C1 interrupt"] I2C1 = 23 ,
#[doc = "25 - SPI1 global interrupt"] SPI1 = 25 ,
#[doc = "26 - SPI2 global interrupt"] SPI2 = 26 ,
#[doc = "27 - UART1 global interrupt"] UART1 = 27 ,
#[doc = "28 - UART2 global interrupt"] UART2 = 28 ,
#[doc = "30 - CAN interrupts"] CAN = 30 ,
#[doc = "31 - USB Device FS"] USB_FS = 31 , } unsafe impl cortex_m :: interrupt :: InterruptNumber for Interrupt {
#[inline (always)] fn number (self) -> u16 { self as u16 } }
#[doc = "Analog to digital converter 1"] pub type Adc1 = crate :: Periph < adc1 :: RegisterBlock , 0x4001_2400 > ; impl core :: fmt :: Debug for Adc1 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Adc1") . finish () } }
#[doc = "Analog to digital converter 1"] pub mod adc1 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { data : Data , cfgr : Cfgr , cr : Cr , chsr : Chsr , cmpr : Cmpr , sr : Sr , dr0 : Dr0 , dr1 : Dr1 , dr2 : Dr2 , dr3 : Dr3 , dr4 : Dr4 , dr5 : Dr5 , dr6 : Dr6 , dr7 : Dr7 , dr8 : Dr8 , dr9 : Dr9 , _reserved16 : [u8 ; 0x10] , dr14 : Dr14 , dr15 : Dr15 , sta_ext : StaExt , chany0 : Chany0 , chany1 : Chany1 , any_cfg : AnyCfg , any_cr : AnyCr , } impl RegisterBlock {
#[doc = "0x00 - Data register"]
#[inline (always)] pub const fn data (& self) -> & Data { & self . data }
#[doc = "0x04 - Configure register"]
#[inline (always)] pub const fn cfgr (& self) -> & Cfgr { & self . cfgr }
#[doc = "0x08 - Control register"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr }
#[doc = "0x0c - Channel select register"]
#[inline (always)] pub const fn chsr (& self) -> & Chsr { & self . chsr }
#[doc = "0x10 - Compare register"]
#[inline (always)] pub const fn cmpr (& self) -> & Cmpr { & self . cmpr }
#[doc = "0x14 - Status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x18 - Channel 0 data register"]
#[inline (always)] pub const fn dr0 (& self) -> & Dr0 { & self . dr0 }
#[doc = "0x1c - Channel 1 data register"]
#[inline (always)] pub const fn dr1 (& self) -> & Dr1 { & self . dr1 }
#[doc = "0x20 - Channel 2 data register"]
#[inline (always)] pub const fn dr2 (& self) -> & Dr2 { & self . dr2 }
#[doc = "0x24 - Channel 3 data register"]
#[inline (always)] pub const fn dr3 (& self) -> & Dr3 { & self . dr3 }
#[doc = "0x28 - Channel 4 data register"]
#[inline (always)] pub const fn dr4 (& self) -> & Dr4 { & self . dr4 }
#[doc = "0x2c - Channel 5 data register"]
#[inline (always)] pub const fn dr5 (& self) -> & Dr5 { & self . dr5 }
#[doc = "0x30 - Channel 6 data register"]
#[inline (always)] pub const fn dr6 (& self) -> & Dr6 { & self . dr6 }
#[doc = "0x34 - Channel 7 data register"]
#[inline (always)] pub const fn dr7 (& self) -> & Dr7 { & self . dr7 }
#[doc = "0x38 - Channel 8 data register"]
#[inline (always)] pub const fn dr8 (& self) -> & Dr8 { & self . dr8 }
#[doc = "0x3c - Channel 9 data register"]
#[inline (always)] pub const fn dr9 (& self) -> & Dr9 { & self . dr9 }
#[doc = "0x50 - Channel 14 data register"]
#[inline (always)] pub const fn dr14 (& self) -> & Dr14 { & self . dr14 }
#[doc = "0x54 - Channel 15 data register"]
#[inline (always)] pub const fn dr15 (& self) -> & Dr15 { & self . dr15 }
#[doc = "0x58 - Extended status register"]
#[inline (always)] pub const fn sta_ext (& self) -> & StaExt { & self . sta_ext }
#[doc = "0x5c - Arbitrary channel channel selection register 0"]
#[inline (always)] pub const fn chany0 (& self) -> & Chany0 { & self . chany0 }
#[doc = "0x60 - Arbitrary channel channel selection register 1"]
#[inline (always)] pub const fn chany1 (& self) -> & Chany1 { & self . chany1 }
#[doc = "0x64 - Arbitrary channel configuration register"]
#[inline (always)] pub const fn any_cfg (& self) -> & AnyCfg { & self . any_cfg }
#[doc = "0x68 - Arbitrary channel control register"]
#[inline (always)] pub const fn any_cr (& self) -> & AnyCr { & self . any_cr } }
#[doc = "DATA (r) register accessor: Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data`] module"]
#[doc (alias = "DATA")] pub type Data = crate :: Reg < data :: DataSpec > ;
#[doc = "Data register"] pub mod data {
#[doc = "Register `DATA` reader"] pub type R = crate :: R < DataSpec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `CH` reader - ADC current channel convert data"] pub type ChR = crate :: FieldReader ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bits 16:19 - ADC current channel convert data"]
#[inline (always)] pub fn ch (& self) -> ChR { ChR :: new (((self . bits >> 16) & 0x0f) as u8) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DataSpec ; impl crate :: RegisterSpec for DataSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`data::R`](R) reader structure"] impl crate :: Readable for DataSpec { }
#[doc = "`reset()` method sets DATA to value 0"] impl crate :: Resettable for DataSpec { } }
#[doc = "CFGR (rw) register accessor: Configure register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cfgr`] module"]
#[doc (alias = "CFGR")] pub type Cfgr = crate :: Reg < cfgr :: CfgrSpec > ;
#[doc = "Configure register"] pub mod cfgr {
#[doc = "Register `CFGR` reader"] pub type R = crate :: R < CfgrSpec > ;
#[doc = "Register `CFGR` writer"] pub type W = crate :: W < CfgrSpec > ;
#[doc = "Field `ADEN` reader - ADC enable"] pub type AdenR = crate :: BitReader ;
#[doc = "Field `ADEN` writer - ADC enable"] pub type AdenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ADWEN` reader - ADC window comparison enable"] pub type AdwenR = crate :: BitReader ;
#[doc = "Field `ADWEN` writer - ADC window comparison enable"] pub type AdwenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TSEN` reader - Temperature sensor enable"] pub type TsenR = crate :: BitReader ;
#[doc = "Field `TSEN` writer - Temperature sensor enable"] pub type TsenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `VSEN` reader - Reference voltage enable"] pub type VsenR = crate :: BitReader ;
#[doc = "Field `VSEN` writer - Reference voltage enable"] pub type VsenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ADCPREH` reader - ADC high prescaler coefficient"] pub type AdcprehR = crate :: FieldReader ;
#[doc = "Field `ADCPREH` writer - ADC high prescaler coefficient"] pub type AdcprehW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `RSLTCTL` reader - Resolution"] pub type RsltctlR = crate :: FieldReader ;
#[doc = "Field `RSLTCTL` writer - Resolution"] pub type RsltctlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `SAMCTL` reader - Channel x Sample time selection"] pub type SamctlR = crate :: FieldReader ;
#[doc = "Field `SAMCTL` writer - Channel x Sample time selection"] pub type SamctlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `ADCPREL` reader - ADC low prescaler coefficient"] pub type AdcprelR = crate :: BitReader ;
#[doc = "Field `ADCPREL` writer - ADC low prescaler coefficient"] pub type AdcprelW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - ADC enable"]
#[inline (always)] pub fn aden (& self) -> AdenR { AdenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - ADC window comparison enable"]
#[inline (always)] pub fn adwen (& self) -> AdwenR { AdwenR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Temperature sensor enable"]
#[inline (always)] pub fn tsen (& self) -> TsenR { TsenR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Reference voltage enable"]
#[inline (always)] pub fn vsen (& self) -> VsenR { VsenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - ADC high prescaler coefficient"]
#[inline (always)] pub fn adcpreh (& self) -> AdcprehR { AdcprehR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bits 7:9 - Resolution"]
#[inline (always)] pub fn rsltctl (& self) -> RsltctlR { RsltctlR :: new (((self . bits >> 7) & 7) as u8) }
#[doc = "Bits 10:13 - Channel x Sample time selection"]
#[inline (always)] pub fn samctl (& self) -> SamctlR { SamctlR :: new (((self . bits >> 10) & 0x0f) as u8) }
#[doc = "Bit 14 - ADC low prescaler coefficient"]
#[inline (always)] pub fn adcprel (& self) -> AdcprelR { AdcprelR :: new (((self . bits >> 14) & 1) != 0) } } impl W {
#[doc = "Bit 0 - ADC enable"]
#[inline (always)] pub fn aden (& mut self) -> AdenW < '_ , CfgrSpec > { AdenW :: new (self , 0) }
#[doc = "Bit 1 - ADC window comparison enable"]
#[inline (always)] pub fn adwen (& mut self) -> AdwenW < '_ , CfgrSpec > { AdwenW :: new (self , 1) }
#[doc = "Bit 2 - Temperature sensor enable"]
#[inline (always)] pub fn tsen (& mut self) -> TsenW < '_ , CfgrSpec > { TsenW :: new (self , 2) }
#[doc = "Bit 3 - Reference voltage enable"]
#[inline (always)] pub fn vsen (& mut self) -> VsenW < '_ , CfgrSpec > { VsenW :: new (self , 3) }
#[doc = "Bits 4:6 - ADC high prescaler coefficient"]
#[inline (always)] pub fn adcpreh (& mut self) -> AdcprehW < '_ , CfgrSpec > { AdcprehW :: new (self , 4) }
#[doc = "Bits 7:9 - Resolution"]
#[inline (always)] pub fn rsltctl (& mut self) -> RsltctlW < '_ , CfgrSpec > { RsltctlW :: new (self , 7) }
#[doc = "Bits 10:13 - Channel x Sample time selection"]
#[inline (always)] pub fn samctl (& mut self) -> SamctlW < '_ , CfgrSpec > { SamctlW :: new (self , 10) }
#[doc = "Bit 14 - ADC low prescaler coefficient"]
#[inline (always)] pub fn adcprel (& mut self) -> AdcprelW < '_ , CfgrSpec > { AdcprelW :: new (self , 14) } }
#[doc = "Configure register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CfgrSpec ; impl crate :: RegisterSpec for CfgrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cfgr::R`](R) reader structure"] impl crate :: Readable for CfgrSpec { }
#[doc = "`write(|w| ..)` method takes [`cfgr::W`](W) writer structure"] impl crate :: Writable for CfgrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CFGR to value 0"] impl crate :: Resettable for CfgrSpec { } }
#[doc = "CR (rw) register accessor: Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "Control register"] pub mod cr {
#[doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ;
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `ADIE` reader - ADC interrupt enable"] pub type AdieR = crate :: BitReader ;
#[doc = "Field `ADIE` writer - ADC interrupt enable"] pub type AdieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ADWIE` reader - ADC window comparator interrupt enable"] pub type AdwieR = crate :: BitReader ;
#[doc = "Field `ADWIE` writer - ADC window comparator interrupt enable"] pub type AdwieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TRGEN` reader - External trigger enable"] pub type TrgenR = crate :: BitReader ;
#[doc = "Field `TRGEN` writer - External trigger enable"] pub type TrgenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DMAEN` reader - Direct memory access enable"] pub type DmaenR = crate :: BitReader ;
#[doc = "Field `DMAEN` writer - Direct memory access enable"] pub type DmaenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TRGSELL` reader - External trigger selection low"] pub type TrgsellR = crate :: FieldReader ;
#[doc = "Field `TRGSELL` writer - External trigger selection low"] pub type TrgsellW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `ADST` reader - ADC start"] pub type AdstR = crate :: BitReader ;
#[doc = "Field `ADST` writer - ADC start"] pub type AdstW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ADMD` reader - ADC mode"] pub type AdmdR = crate :: FieldReader ;
#[doc = "Field `ADMD` writer - ADC mode"] pub type AdmdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `ALIGN` reader - Data alignment"] pub type AlignR = crate :: BitReader ;
#[doc = "Field `ALIGN` writer - Data alignment"] pub type AlignW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CMPCH` reader - Window comparison channel selection"] pub type CmpchR = crate :: FieldReader ;
#[doc = "Field `CMPCH` writer - Window comparison channel selection"] pub type CmpchW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `SCANDIR` reader - ADC scan direction"] pub type ScandirR = crate :: BitReader ;
#[doc = "Field `SCANDIR` writer - ADC scan direction"] pub type ScandirW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TRGSELH` reader - External trigger selection high"] pub type TrgselhR = crate :: FieldReader ;
#[doc = "Field `TRGSELH` writer - External trigger selection high"] pub type TrgselhW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `TRGSHIFT` reader - External trigger shift sample"] pub type TrgshiftR = crate :: FieldReader ;
#[doc = "Field `TRGSHIFT` writer - External trigger shift sample"] pub type TrgshiftW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `TRG_EDGE` reader - Trigger edge selection"] pub type TrgEdgeR = crate :: FieldReader ;
#[doc = "Field `TRG_EDGE` writer - Trigger edge selection"] pub type TrgEdgeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bit 0 - ADC interrupt enable"]
#[inline (always)] pub fn adie (& self) -> AdieR { AdieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - ADC window comparator interrupt enable"]
#[inline (always)] pub fn adwie (& self) -> AdwieR { AdwieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - External trigger enable"]
#[inline (always)] pub fn trgen (& self) -> TrgenR { TrgenR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Direct memory access enable"]
#[inline (always)] pub fn dmaen (& self) -> DmaenR { DmaenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - External trigger selection low"]
#[inline (always)] pub fn trgsell (& self) -> TrgsellR { TrgsellR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 8 - ADC start"]
#[inline (always)] pub fn adst (& self) -> AdstR { AdstR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bits 9:10 - ADC mode"]
#[inline (always)] pub fn admd (& self) -> AdmdR { AdmdR :: new (((self . bits >> 9) & 3) as u8) }
#[doc = "Bit 11 - Data alignment"]
#[inline (always)] pub fn align (& self) -> AlignR { AlignR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bits 12:15 - Window comparison channel selection"]
#[inline (always)] pub fn cmpch (& self) -> CmpchR { CmpchR :: new (((self . bits >> 12) & 0x0f) as u8) }
#[doc = "Bit 16 - ADC scan direction"]
#[inline (always)] pub fn scandir (& self) -> ScandirR { ScandirR :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bits 17:18 - External trigger selection high"]
#[inline (always)] pub fn trgselh (& self) -> TrgselhR { TrgselhR :: new (((self . bits >> 17) & 3) as u8) }
#[doc = "Bits 19:21 - External trigger shift sample"]
#[inline (always)] pub fn trgshift (& self) -> TrgshiftR { TrgshiftR :: new (((self . bits >> 19) & 7) as u8) }
#[doc = "Bits 24:25 - Trigger edge selection"]
#[inline (always)] pub fn trg_edge (& self) -> TrgEdgeR { TrgEdgeR :: new (((self . bits >> 24) & 3) as u8) } } impl W {
#[doc = "Bit 0 - ADC interrupt enable"]
#[inline (always)] pub fn adie (& mut self) -> AdieW < '_ , CrSpec > { AdieW :: new (self , 0) }
#[doc = "Bit 1 - ADC window comparator interrupt enable"]
#[inline (always)] pub fn adwie (& mut self) -> AdwieW < '_ , CrSpec > { AdwieW :: new (self , 1) }
#[doc = "Bit 2 - External trigger enable"]
#[inline (always)] pub fn trgen (& mut self) -> TrgenW < '_ , CrSpec > { TrgenW :: new (self , 2) }
#[doc = "Bit 3 - Direct memory access enable"]
#[inline (always)] pub fn dmaen (& mut self) -> DmaenW < '_ , CrSpec > { DmaenW :: new (self , 3) }
#[doc = "Bits 4:6 - External trigger selection low"]
#[inline (always)] pub fn trgsell (& mut self) -> TrgsellW < '_ , CrSpec > { TrgsellW :: new (self , 4) }
#[doc = "Bit 8 - ADC start"]
#[inline (always)] pub fn adst (& mut self) -> AdstW < '_ , CrSpec > { AdstW :: new (self , 8) }
#[doc = "Bits 9:10 - ADC mode"]
#[inline (always)] pub fn admd (& mut self) -> AdmdW < '_ , CrSpec > { AdmdW :: new (self , 9) }
#[doc = "Bit 11 - Data alignment"]
#[inline (always)] pub fn align (& mut self) -> AlignW < '_ , CrSpec > { AlignW :: new (self , 11) }
#[doc = "Bits 12:15 - Window comparison channel selection"]
#[inline (always)] pub fn cmpch (& mut self) -> CmpchW < '_ , CrSpec > { CmpchW :: new (self , 12) }
#[doc = "Bit 16 - ADC scan direction"]
#[inline (always)] pub fn scandir (& mut self) -> ScandirW < '_ , CrSpec > { ScandirW :: new (self , 16) }
#[doc = "Bits 17:18 - External trigger selection high"]
#[inline (always)] pub fn trgselh (& mut self) -> TrgselhW < '_ , CrSpec > { TrgselhW :: new (self , 17) }
#[doc = "Bits 19:21 - External trigger shift sample"]
#[inline (always)] pub fn trgshift (& mut self) -> TrgshiftW < '_ , CrSpec > { TrgshiftW :: new (self , 19) }
#[doc = "Bits 24:25 - Trigger edge selection"]
#[inline (always)] pub fn trg_edge (& mut self) -> TrgEdgeW < '_ , CrSpec > { TrgEdgeW :: new (self , 24) } }
#[doc = "Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0"] impl crate :: Resettable for CrSpec { } }
#[doc = "CHSR (rw) register accessor: Channel select register\n\nYou can [`read`](crate::Reg::read) this register and get [`chsr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chsr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chsr`] module"]
#[doc (alias = "CHSR")] pub type Chsr = crate :: Reg < chsr :: ChsrSpec > ;
#[doc = "Channel select register"] pub mod chsr {
#[doc = "Register `CHSR` reader"] pub type R = crate :: R < ChsrSpec > ;
#[doc = "Register `CHSR` writer"] pub type W = crate :: W < ChsrSpec > ;
#[doc = "Field `CHEN0` reader - Analog input channel 0 enable"] pub type Chen0R = crate :: BitReader ;
#[doc = "Field `CHEN0` writer - Analog input channel 0 enable"] pub type Chen0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHEN1` reader - Analog input channel 1 enable"] pub type Chen1R = crate :: BitReader ;
#[doc = "Field `CHEN1` writer - Analog input channel 1 enable"] pub type Chen1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHEN2` reader - Analog input channel 2 enable"] pub type Chen2R = crate :: BitReader ;
#[doc = "Field `CHEN2` writer - Analog input channel 2 enable"] pub type Chen2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHEN3` reader - Analog input channel 3 enable"] pub type Chen3R = crate :: BitReader ;
#[doc = "Field `CHEN3` writer - Analog input channel 3 enable"] pub type Chen3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHEN4` reader - Analog input channel 4 enable"] pub type Chen4R = crate :: BitReader ;
#[doc = "Field `CHEN4` writer - Analog input channel 4 enable"] pub type Chen4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHEN5` reader - Analog input channel 5 enable"] pub type Chen5R = crate :: BitReader ;
#[doc = "Field `CHEN5` writer - Analog input channel 5 enable"] pub type Chen5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHEN6` reader - Analog input channel 6 enable"] pub type Chen6R = crate :: BitReader ;
#[doc = "Field `CHEN6` writer - Analog input channel 6 enable"] pub type Chen6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHEN7` reader - Analog input channel 7 enable"] pub type Chen7R = crate :: BitReader ;
#[doc = "Field `CHEN7` writer - Analog input channel 7 enable"] pub type Chen7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHEN8` reader - Analog input channel 8 enable"] pub type Chen8R = crate :: BitReader ;
#[doc = "Field `CHEN8` writer - Analog input channel 8 enable"] pub type Chen8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHEN9` reader - Analog input channel 9 enable"] pub type Chen9R = crate :: BitReader ;
#[doc = "Field `CHEN9` writer - Analog input channel 9 enable"] pub type Chen9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHENTS` reader - Temperature Sensor channel enable"] pub type ChentsR = crate :: BitReader ;
#[doc = "Field `CHENTS` writer - Temperature Sensor channel enable"] pub type ChentsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHENVS` reader - Internal reference voltage channel enable"] pub type ChenvsR = crate :: BitReader ;
#[doc = "Field `CHENVS` writer - Internal reference voltage channel enable"] pub type ChenvsW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Analog input channel 0 enable"]
#[inline (always)] pub fn chen0 (& self) -> Chen0R { Chen0R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Analog input channel 1 enable"]
#[inline (always)] pub fn chen1 (& self) -> Chen1R { Chen1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Analog input channel 2 enable"]
#[inline (always)] pub fn chen2 (& self) -> Chen2R { Chen2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Analog input channel 3 enable"]
#[inline (always)] pub fn chen3 (& self) -> Chen3R { Chen3R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Analog input channel 4 enable"]
#[inline (always)] pub fn chen4 (& self) -> Chen4R { Chen4R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Analog input channel 5 enable"]
#[inline (always)] pub fn chen5 (& self) -> Chen5R { Chen5R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Analog input channel 6 enable"]
#[inline (always)] pub fn chen6 (& self) -> Chen6R { Chen6R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Analog input channel 7 enable"]
#[inline (always)] pub fn chen7 (& self) -> Chen7R { Chen7R :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Analog input channel 8 enable"]
#[inline (always)] pub fn chen8 (& self) -> Chen8R { Chen8R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Analog input channel 9 enable"]
#[inline (always)] pub fn chen9 (& self) -> Chen9R { Chen9R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 14 - Temperature Sensor channel enable"]
#[inline (always)] pub fn chents (& self) -> ChentsR { ChentsR :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Internal reference voltage channel enable"]
#[inline (always)] pub fn chenvs (& self) -> ChenvsR { ChenvsR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Analog input channel 0 enable"]
#[inline (always)] pub fn chen0 (& mut self) -> Chen0W < '_ , ChsrSpec > { Chen0W :: new (self , 0) }
#[doc = "Bit 1 - Analog input channel 1 enable"]
#[inline (always)] pub fn chen1 (& mut self) -> Chen1W < '_ , ChsrSpec > { Chen1W :: new (self , 1) }
#[doc = "Bit 2 - Analog input channel 2 enable"]
#[inline (always)] pub fn chen2 (& mut self) -> Chen2W < '_ , ChsrSpec > { Chen2W :: new (self , 2) }
#[doc = "Bit 3 - Analog input channel 3 enable"]
#[inline (always)] pub fn chen3 (& mut self) -> Chen3W < '_ , ChsrSpec > { Chen3W :: new (self , 3) }
#[doc = "Bit 4 - Analog input channel 4 enable"]
#[inline (always)] pub fn chen4 (& mut self) -> Chen4W < '_ , ChsrSpec > { Chen4W :: new (self , 4) }
#[doc = "Bit 5 - Analog input channel 5 enable"]
#[inline (always)] pub fn chen5 (& mut self) -> Chen5W < '_ , ChsrSpec > { Chen5W :: new (self , 5) }
#[doc = "Bit 6 - Analog input channel 6 enable"]
#[inline (always)] pub fn chen6 (& mut self) -> Chen6W < '_ , ChsrSpec > { Chen6W :: new (self , 6) }
#[doc = "Bit 7 - Analog input channel 7 enable"]
#[inline (always)] pub fn chen7 (& mut self) -> Chen7W < '_ , ChsrSpec > { Chen7W :: new (self , 7) }
#[doc = "Bit 8 - Analog input channel 8 enable"]
#[inline (always)] pub fn chen8 (& mut self) -> Chen8W < '_ , ChsrSpec > { Chen8W :: new (self , 8) }
#[doc = "Bit 9 - Analog input channel 9 enable"]
#[inline (always)] pub fn chen9 (& mut self) -> Chen9W < '_ , ChsrSpec > { Chen9W :: new (self , 9) }
#[doc = "Bit 14 - Temperature Sensor channel enable"]
#[inline (always)] pub fn chents (& mut self) -> ChentsW < '_ , ChsrSpec > { ChentsW :: new (self , 14) }
#[doc = "Bit 15 - Internal reference voltage channel enable"]
#[inline (always)] pub fn chenvs (& mut self) -> ChenvsW < '_ , ChsrSpec > { ChenvsW :: new (self , 15) } }
#[doc = "Channel select register\n\nYou can [`read`](crate::Reg::read) this register and get [`chsr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chsr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ChsrSpec ; impl crate :: RegisterSpec for ChsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`chsr::R`](R) reader structure"] impl crate :: Readable for ChsrSpec { }
#[doc = "`write(|w| ..)` method takes [`chsr::W`](W) writer structure"] impl crate :: Writable for ChsrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CHSR to value 0"] impl crate :: Resettable for ChsrSpec { } }
#[doc = "CMPR (rw) register accessor: Compare register\n\nYou can [`read`](crate::Reg::read) this register and get [`cmpr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmpr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cmpr`] module"]
#[doc (alias = "CMPR")] pub type Cmpr = crate :: Reg < cmpr :: CmprSpec > ;
#[doc = "Compare register"] pub mod cmpr {
#[doc = "Register `CMPR` reader"] pub type R = crate :: R < CmprSpec > ;
#[doc = "Register `CMPR` writer"] pub type W = crate :: W < CmprSpec > ;
#[doc = "Field `CMPLDATA` reader - Compare data low limit"] pub type CmpldataR = crate :: FieldReader < u16 > ;
#[doc = "Field `CMPLDATA` writer - Compare data low limit"] pub type CmpldataW < 'a , REG > = crate :: FieldWriter < 'a , REG , 12 , u16 > ;
#[doc = "Field `CMPHDATA` reader - Compare data high limit"] pub type CmphdataR = crate :: FieldReader < u16 > ;
#[doc = "Field `CMPHDATA` writer - Compare data high limit"] pub type CmphdataW < 'a , REG > = crate :: FieldWriter < 'a , REG , 12 , u16 > ; impl R {
#[doc = "Bits 0:11 - Compare data low limit"]
#[inline (always)] pub fn cmpldata (& self) -> CmpldataR { CmpldataR :: new ((self . bits & 0x0fff) as u16) }
#[doc = "Bits 16:27 - Compare data high limit"]
#[inline (always)] pub fn cmphdata (& self) -> CmphdataR { CmphdataR :: new (((self . bits >> 16) & 0x0fff) as u16) } } impl W {
#[doc = "Bits 0:11 - Compare data low limit"]
#[inline (always)] pub fn cmpldata (& mut self) -> CmpldataW < '_ , CmprSpec > { CmpldataW :: new (self , 0) }
#[doc = "Bits 16:27 - Compare data high limit"]
#[inline (always)] pub fn cmphdata (& mut self) -> CmphdataW < '_ , CmprSpec > { CmphdataW :: new (self , 16) } }
#[doc = "Compare register\n\nYou can [`read`](crate::Reg::read) this register and get [`cmpr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmpr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CmprSpec ; impl crate :: RegisterSpec for CmprSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cmpr::R`](R) reader structure"] impl crate :: Readable for CmprSpec { }
#[doc = "`write(|w| ..)` method takes [`cmpr::W`](W) writer structure"] impl crate :: Writable for CmprSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CMPR to value 0"] impl crate :: Resettable for CmprSpec { } }
#[doc = "SR (r) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "Status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Field `ADIF` reader - ADC interrupt flag"] pub type AdifR = crate :: BitReader ;
#[doc = "Field `ADWIF` reader - ADC window comparator interrupt flag"] pub type AdwifR = crate :: BitReader ;
#[doc = "Field `BUSY` reader - Busy"] pub type BusyR = crate :: BitReader ;
#[doc = "Field `CH` reader - Current conversion channel"] pub type ChR = crate :: FieldReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: FieldReader < u16 > ; impl R {
#[doc = "Bit 0 - ADC interrupt flag"]
#[inline (always)] pub fn adif (& self) -> AdifR { AdifR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - ADC window comparator interrupt flag"]
#[inline (always)] pub fn adwif (& self) -> AdwifR { AdwifR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Busy"]
#[inline (always)] pub fn busy (& self) -> BusyR { BusyR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bits 4:7 - Current conversion channel"]
#[inline (always)] pub fn ch (& self) -> ChR { ChR :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:17 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 8) & 0x03ff) as u16) }
#[doc = "Bits 20:29 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 0x03ff) as u16) } }
#[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } }
#[doc = "DR0 (r) register accessor: Channel 0 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr0::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr0`] module"]
#[doc (alias = "DR0")] pub type Dr0 = crate :: Reg < dr0 :: Dr0Spec > ;
#[doc = "Channel 0 data register"] pub mod dr0 {
#[doc = "Register `DR0` reader"] pub type R = crate :: R < Dr0Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 0 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr0::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr0Spec ; impl crate :: RegisterSpec for Dr0Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr0::R`](R) reader structure"] impl crate :: Readable for Dr0Spec { }
#[doc = "`reset()` method sets DR0 to value 0"] impl crate :: Resettable for Dr0Spec { } }
#[doc = "DR1 (r) register accessor: Channel 1 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr1`] module"]
#[doc (alias = "DR1")] pub type Dr1 = crate :: Reg < dr1 :: Dr1Spec > ;
#[doc = "Channel 1 data register"] pub mod dr1 {
#[doc = "Register `DR1` reader"] pub type R = crate :: R < Dr1Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 1 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr1Spec ; impl crate :: RegisterSpec for Dr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr1::R`](R) reader structure"] impl crate :: Readable for Dr1Spec { }
#[doc = "`reset()` method sets DR1 to value 0"] impl crate :: Resettable for Dr1Spec { } }
#[doc = "DR2 (r) register accessor: Channel 2 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr2`] module"]
#[doc (alias = "DR2")] pub type Dr2 = crate :: Reg < dr2 :: Dr2Spec > ;
#[doc = "Channel 2 data register"] pub mod dr2 {
#[doc = "Register `DR2` reader"] pub type R = crate :: R < Dr2Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 2 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr2::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr2Spec ; impl crate :: RegisterSpec for Dr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr2::R`](R) reader structure"] impl crate :: Readable for Dr2Spec { }
#[doc = "`reset()` method sets DR2 to value 0"] impl crate :: Resettable for Dr2Spec { } }
#[doc = "DR3 (r) register accessor: Channel 3 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr3::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr3`] module"]
#[doc (alias = "DR3")] pub type Dr3 = crate :: Reg < dr3 :: Dr3Spec > ;
#[doc = "Channel 3 data register"] pub mod dr3 {
#[doc = "Register `DR3` reader"] pub type R = crate :: R < Dr3Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 3 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr3::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr3Spec ; impl crate :: RegisterSpec for Dr3Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr3::R`](R) reader structure"] impl crate :: Readable for Dr3Spec { }
#[doc = "`reset()` method sets DR3 to value 0"] impl crate :: Resettable for Dr3Spec { } }
#[doc = "DR4 (r) register accessor: Channel 4 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr4::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr4`] module"]
#[doc (alias = "DR4")] pub type Dr4 = crate :: Reg < dr4 :: Dr4Spec > ;
#[doc = "Channel 4 data register"] pub mod dr4 {
#[doc = "Register `DR4` reader"] pub type R = crate :: R < Dr4Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 4 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr4::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr4Spec ; impl crate :: RegisterSpec for Dr4Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr4::R`](R) reader structure"] impl crate :: Readable for Dr4Spec { }
#[doc = "`reset()` method sets DR4 to value 0"] impl crate :: Resettable for Dr4Spec { } }
#[doc = "DR5 (r) register accessor: Channel 5 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr5::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr5`] module"]
#[doc (alias = "DR5")] pub type Dr5 = crate :: Reg < dr5 :: Dr5Spec > ;
#[doc = "Channel 5 data register"] pub mod dr5 {
#[doc = "Register `DR5` reader"] pub type R = crate :: R < Dr5Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 5 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr5::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr5Spec ; impl crate :: RegisterSpec for Dr5Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr5::R`](R) reader structure"] impl crate :: Readable for Dr5Spec { }
#[doc = "`reset()` method sets DR5 to value 0"] impl crate :: Resettable for Dr5Spec { } }
#[doc = "DR6 (r) register accessor: Channel 6 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr6::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr6`] module"]
#[doc (alias = "DR6")] pub type Dr6 = crate :: Reg < dr6 :: Dr6Spec > ;
#[doc = "Channel 6 data register"] pub mod dr6 {
#[doc = "Register `DR6` reader"] pub type R = crate :: R < Dr6Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 6 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr6::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr6Spec ; impl crate :: RegisterSpec for Dr6Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr6::R`](R) reader structure"] impl crate :: Readable for Dr6Spec { }
#[doc = "`reset()` method sets DR6 to value 0"] impl crate :: Resettable for Dr6Spec { } }
#[doc = "DR7 (r) register accessor: Channel 7 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr7::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr7`] module"]
#[doc (alias = "DR7")] pub type Dr7 = crate :: Reg < dr7 :: Dr7Spec > ;
#[doc = "Channel 7 data register"] pub mod dr7 {
#[doc = "Register `DR7` reader"] pub type R = crate :: R < Dr7Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 7 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr7::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr7Spec ; impl crate :: RegisterSpec for Dr7Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr7::R`](R) reader structure"] impl crate :: Readable for Dr7Spec { }
#[doc = "`reset()` method sets DR7 to value 0"] impl crate :: Resettable for Dr7Spec { } }
#[doc = "DR8 (r) register accessor: Channel 8 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr8::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr8`] module"]
#[doc (alias = "DR8")] pub type Dr8 = crate :: Reg < dr8 :: Dr8Spec > ;
#[doc = "Channel 8 data register"] pub mod dr8 {
#[doc = "Register `DR8` reader"] pub type R = crate :: R < Dr8Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 8 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr8::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr8Spec ; impl crate :: RegisterSpec for Dr8Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr8::R`](R) reader structure"] impl crate :: Readable for Dr8Spec { }
#[doc = "`reset()` method sets DR8 to value 0"] impl crate :: Resettable for Dr8Spec { } }
#[doc = "DR9 (r) register accessor: Channel 9 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr9::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr9`] module"]
#[doc (alias = "DR9")] pub type Dr9 = crate :: Reg < dr9 :: Dr9Spec > ;
#[doc = "Channel 9 data register"] pub mod dr9 {
#[doc = "Register `DR9` reader"] pub type R = crate :: R < Dr9Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 9 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr9::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr9Spec ; impl crate :: RegisterSpec for Dr9Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr9::R`](R) reader structure"] impl crate :: Readable for Dr9Spec { }
#[doc = "`reset()` method sets DR9 to value 0"] impl crate :: Resettable for Dr9Spec { } }
#[doc = "DR14 (r) register accessor: Channel 14 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr14::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr14`] module"]
#[doc (alias = "DR14")] pub type Dr14 = crate :: Reg < dr14 :: Dr14Spec > ;
#[doc = "Channel 14 data register"] pub mod dr14 {
#[doc = "Register `DR14` reader"] pub type R = crate :: R < Dr14Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 14 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr14::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr14Spec ; impl crate :: RegisterSpec for Dr14Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr14::R`](R) reader structure"] impl crate :: Readable for Dr14Spec { }
#[doc = "`reset()` method sets DR14 to value 0"] impl crate :: Resettable for Dr14Spec { } }
#[doc = "DR15 (r) register accessor: Channel 15 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr15::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr15`] module"]
#[doc (alias = "DR15")] pub type Dr15 = crate :: Reg < dr15 :: Dr15Spec > ;
#[doc = "Channel 15 data register"] pub mod dr15 {
#[doc = "Register `DR15` reader"] pub type R = crate :: R < Dr15Spec > ;
#[doc = "Field `DATA` reader - Transfer data"] pub type DataR = crate :: FieldReader < u16 > ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: BitReader ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: BitReader ; impl R {
#[doc = "Bits 0:15 - Transfer data"]
#[inline (always)] pub fn data (& self) -> DataR { DataR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 20 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 21 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 21) & 1) != 0) } }
#[doc = "Channel 15 data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr15::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr15Spec ; impl crate :: RegisterSpec for Dr15Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr15::R`](R) reader structure"] impl crate :: Readable for Dr15Spec { }
#[doc = "`reset()` method sets DR15 to value 0"] impl crate :: Resettable for Dr15Spec { } }
#[doc = "STA_EXT (r) register accessor: Extended status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sta_ext::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sta_ext`] module"]
#[doc (alias = "STA_EXT")] pub type StaExt = crate :: Reg < sta_ext :: StaExtSpec > ;
#[doc = "Extended status register"] pub mod sta_ext {
#[doc = "Register `STA_EXT` reader"] pub type R = crate :: R < StaExtSpec > ;
#[doc = "Field `VALID` reader - Valid flag"] pub type ValidR = crate :: FieldReader ;
#[doc = "Field `OVERRUN` reader - Overrun flag"] pub type OverrunR = crate :: FieldReader ; impl R {
#[doc = "Bits 2:3 - Valid flag"]
#[inline (always)] pub fn valid (& self) -> ValidR { ValidR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 6:7 - Overrun flag"]
#[inline (always)] pub fn overrun (& self) -> OverrunR { OverrunR :: new (((self . bits >> 6) & 3) as u8) } }
#[doc = "Extended status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sta_ext::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct StaExtSpec ; impl crate :: RegisterSpec for StaExtSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sta_ext::R`](R) reader structure"] impl crate :: Readable for StaExtSpec { }
#[doc = "`reset()` method sets STA_EXT to value 0"] impl crate :: Resettable for StaExtSpec { } }
#[doc = "CHANY0 (rw) register accessor: Arbitrary channel channel selection register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`chany0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chany0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chany0`] module"]
#[doc (alias = "CHANY0")] pub type Chany0 = crate :: Reg < chany0 :: Chany0Spec > ;
#[doc = "Arbitrary channel channel selection register 0"] pub mod chany0 {
#[doc = "Register `CHANY0` reader"] pub type R = crate :: R < Chany0Spec > ;
#[doc = "Register `CHANY0` writer"] pub type W = crate :: W < Chany0Spec > ;
#[doc = "Field `CHANY_SEL0` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel0R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL0` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL1` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel1R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL1` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL2` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel2R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL2` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL3` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel3R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL3` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL4` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel4R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL4` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL5` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel5R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL5` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel5W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL6` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel6R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL6` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel6W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL7` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel7R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL7` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel7W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel0 (& self) -> ChanySel0R { ChanySel0R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel1 (& self) -> ChanySel1R { ChanySel1R :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:11 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel2 (& self) -> ChanySel2R { ChanySel2R :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:15 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel3 (& self) -> ChanySel3R { ChanySel3R :: new (((self . bits >> 12) & 0x0f) as u8) }
#[doc = "Bits 16:19 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel4 (& self) -> ChanySel4R { ChanySel4R :: new (((self . bits >> 16) & 0x0f) as u8) }
#[doc = "Bits 20:23 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel5 (& self) -> ChanySel5R { ChanySel5R :: new (((self . bits >> 20) & 0x0f) as u8) }
#[doc = "Bits 24:27 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel6 (& self) -> ChanySel6R { ChanySel6R :: new (((self . bits >> 24) & 0x0f) as u8) }
#[doc = "Bits 28:31 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel7 (& self) -> ChanySel7R { ChanySel7R :: new (((self . bits >> 28) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel0 (& mut self) -> ChanySel0W < '_ , Chany0Spec > { ChanySel0W :: new (self , 0) }
#[doc = "Bits 4:7 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel1 (& mut self) -> ChanySel1W < '_ , Chany0Spec > { ChanySel1W :: new (self , 4) }
#[doc = "Bits 8:11 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel2 (& mut self) -> ChanySel2W < '_ , Chany0Spec > { ChanySel2W :: new (self , 8) }
#[doc = "Bits 12:15 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel3 (& mut self) -> ChanySel3W < '_ , Chany0Spec > { ChanySel3W :: new (self , 12) }
#[doc = "Bits 16:19 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel4 (& mut self) -> ChanySel4W < '_ , Chany0Spec > { ChanySel4W :: new (self , 16) }
#[doc = "Bits 20:23 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel5 (& mut self) -> ChanySel5W < '_ , Chany0Spec > { ChanySel5W :: new (self , 20) }
#[doc = "Bits 24:27 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel6 (& mut self) -> ChanySel6W < '_ , Chany0Spec > { ChanySel6W :: new (self , 24) }
#[doc = "Bits 28:31 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel7 (& mut self) -> ChanySel7W < '_ , Chany0Spec > { ChanySel7W :: new (self , 28) } }
#[doc = "Arbitrary channel channel selection register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`chany0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chany0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Chany0Spec ; impl crate :: RegisterSpec for Chany0Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`chany0::R`](R) reader structure"] impl crate :: Readable for Chany0Spec { }
#[doc = "`write(|w| ..)` method takes [`chany0::W`](W) writer structure"] impl crate :: Writable for Chany0Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CHANY0 to value 0"] impl crate :: Resettable for Chany0Spec { } }
#[doc = "CHANY1 (rw) register accessor: Arbitrary channel channel selection register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`chany1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chany1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chany1`] module"]
#[doc (alias = "CHANY1")] pub type Chany1 = crate :: Reg < chany1 :: Chany1Spec > ;
#[doc = "Arbitrary channel channel selection register 1"] pub mod chany1 {
#[doc = "Register `CHANY1` reader"] pub type R = crate :: R < Chany1Spec > ;
#[doc = "Register `CHANY1` writer"] pub type W = crate :: W < Chany1Spec > ;
#[doc = "Field `CHANY_SEL8` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel8R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL8` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel8W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL9` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel9R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL9` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel9W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL14` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel14R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL14` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel14W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CHANY_SEL15` reader - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel15R = crate :: FieldReader ;
#[doc = "Field `CHANY_SEL15` writer - Can be configured as any channel from ch0 to 9, 14 to 15."] pub type ChanySel15W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel8 (& self) -> ChanySel8R { ChanySel8R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel9 (& self) -> ChanySel9R { ChanySel9R :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 24:27 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel14 (& self) -> ChanySel14R { ChanySel14R :: new (((self . bits >> 24) & 0x0f) as u8) }
#[doc = "Bits 28:31 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel15 (& self) -> ChanySel15R { ChanySel15R :: new (((self . bits >> 28) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel8 (& mut self) -> ChanySel8W < '_ , Chany1Spec > { ChanySel8W :: new (self , 0) }
#[doc = "Bits 4:7 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel9 (& mut self) -> ChanySel9W < '_ , Chany1Spec > { ChanySel9W :: new (self , 4) }
#[doc = "Bits 24:27 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel14 (& mut self) -> ChanySel14W < '_ , Chany1Spec > { ChanySel14W :: new (self , 24) }
#[doc = "Bits 28:31 - Can be configured as any channel from ch0 to 9, 14 to 15."]
#[inline (always)] pub fn chany_sel15 (& mut self) -> ChanySel15W < '_ , Chany1Spec > { ChanySel15W :: new (self , 28) } }
#[doc = "Arbitrary channel channel selection register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`chany1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chany1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Chany1Spec ; impl crate :: RegisterSpec for Chany1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`chany1::R`](R) reader structure"] impl crate :: Readable for Chany1Spec { }
#[doc = "`write(|w| ..)` method takes [`chany1::W`](W) writer structure"] impl crate :: Writable for Chany1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CHANY1 to value 0"] impl crate :: Resettable for Chany1Spec { } }
#[doc = "ANY_CFG (rw) register accessor: Arbitrary channel configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`any_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`any_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@any_cfg`] module"]
#[doc (alias = "ANY_CFG")] pub type AnyCfg = crate :: Reg < any_cfg :: AnyCfgSpec > ;
#[doc = "Arbitrary channel configuration register"] pub mod any_cfg {
#[doc = "Register `ANY_CFG` reader"] pub type R = crate :: R < AnyCfgSpec > ;
#[doc = "Register `ANY_CFG` writer"] pub type W = crate :: W < AnyCfgSpec > ;
#[doc = "Field `CHANY_NUM` reader - channel number configuration"] pub type ChanyNumR = crate :: FieldReader ;
#[doc = "Field `CHANY_NUM` writer - channel number configuration"] pub type ChanyNumW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - channel number configuration"]
#[inline (always)] pub fn chany_num (& self) -> ChanyNumR { ChanyNumR :: new ((self . bits & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - channel number configuration"]
#[inline (always)] pub fn chany_num (& mut self) -> ChanyNumW < '_ , AnyCfgSpec > { ChanyNumW :: new (self , 0) } }
#[doc = "Arbitrary channel configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`any_cfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`any_cfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AnyCfgSpec ; impl crate :: RegisterSpec for AnyCfgSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`any_cfg::R`](R) reader structure"] impl crate :: Readable for AnyCfgSpec { }
#[doc = "`write(|w| ..)` method takes [`any_cfg::W`](W) writer structure"] impl crate :: Writable for AnyCfgSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ANY_CFG to value 0"] impl crate :: Resettable for AnyCfgSpec { } }
#[doc = "ANY_CR (rw) register accessor: Arbitrary channel control register\n\nYou can [`read`](crate::Reg::read) this register and get [`any_cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`any_cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@any_cr`] module"]
#[doc (alias = "ANY_CR")] pub type AnyCr = crate :: Reg < any_cr :: AnyCrSpec > ;
#[doc = "Arbitrary channel control register"] pub mod any_cr {
#[doc = "Register `ANY_CR` reader"] pub type R = crate :: R < AnyCrSpec > ;
#[doc = "Register `ANY_CR` writer"] pub type W = crate :: W < AnyCrSpec > ;
#[doc = "Field `CHANY_MDEN` reader - Any channel configuration mode enable bit"] pub type ChanyMdenR = crate :: BitReader ;
#[doc = "Field `CHANY_MDEN` writer - Any channel configuration mode enable bit"] pub type ChanyMdenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Any channel configuration mode enable bit"]
#[inline (always)] pub fn chany_mden (& self) -> ChanyMdenR { ChanyMdenR :: new ((self . bits & 1) != 0) } } impl W {
#[doc = "Bit 0 - Any channel configuration mode enable bit"]
#[inline (always)] pub fn chany_mden (& mut self) -> ChanyMdenW < '_ , AnyCrSpec > { ChanyMdenW :: new (self , 0) } }
#[doc = "Arbitrary channel control register\n\nYou can [`read`](crate::Reg::read) this register and get [`any_cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`any_cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AnyCrSpec ; impl crate :: RegisterSpec for AnyCrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`any_cr::R`](R) reader structure"] impl crate :: Readable for AnyCrSpec { }
#[doc = "`write(|w| ..)` method takes [`any_cr::W`](W) writer structure"] impl crate :: Writable for AnyCrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ANY_CR to value 0"] impl crate :: Resettable for AnyCrSpec { } } }
#[doc = "Backup registers"] pub type Bkp = crate :: Periph < bkp :: RegisterBlock , 0x4000_2840 > ; impl core :: fmt :: Debug for Bkp { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Bkp") . finish () } }
#[doc = "Backup registers"] pub mod bkp {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { rtccr : Rtccr , _reserved1 : [u8 ; 0x02] , cr : Cr , _reserved2 : [u8 ; 0x02] , csr : Csr , _reserved3 : [u8 ; 0x06] , dr1 : Dr1 , dr2 : Dr2 , dr3 : Dr3 , dr4 : Dr4 , dr5 : Dr5 , dr6 : Dr6 , dr7 : Dr7 , dr8 : Dr8 , dr9 : Dr9 , dr10 : Dr10 , dr11 : Dr11 , dr12 : Dr12 , dr13 : Dr13 , dr14 : Dr14 , dr15 : Dr15 , dr16 : Dr16 , dr17 : Dr17 , dr18 : Dr18 , dr19 : Dr19 , dr20 : Dr20 , } impl RegisterBlock {
#[doc = "0x00 - RTC clock calibration register"]
#[inline (always)] pub const fn rtccr (& self) -> & Rtccr { & self . rtccr }
#[doc = "0x04 - Backup control register"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr }
#[doc = "0x08 - BKP control/status register"]
#[inline (always)] pub const fn csr (& self) -> & Csr { & self . csr }
#[doc = "0x10 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr1 (& self) -> & Dr1 { & self . dr1 }
#[doc = "0x14 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr2 (& self) -> & Dr2 { & self . dr2 }
#[doc = "0x18 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr3 (& self) -> & Dr3 { & self . dr3 }
#[doc = "0x1c - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr4 (& self) -> & Dr4 { & self . dr4 }
#[doc = "0x20 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr5 (& self) -> & Dr5 { & self . dr5 }
#[doc = "0x24 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr6 (& self) -> & Dr6 { & self . dr6 }
#[doc = "0x28 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr7 (& self) -> & Dr7 { & self . dr7 }
#[doc = "0x2c - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr8 (& self) -> & Dr8 { & self . dr8 }
#[doc = "0x30 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr9 (& self) -> & Dr9 { & self . dr9 }
#[doc = "0x34 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr10 (& self) -> & Dr10 { & self . dr10 }
#[doc = "0x38 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr11 (& self) -> & Dr11 { & self . dr11 }
#[doc = "0x3c - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr12 (& self) -> & Dr12 { & self . dr12 }
#[doc = "0x40 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr13 (& self) -> & Dr13 { & self . dr13 }
#[doc = "0x44 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr14 (& self) -> & Dr14 { & self . dr14 }
#[doc = "0x48 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr15 (& self) -> & Dr15 { & self . dr15 }
#[doc = "0x4c - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr16 (& self) -> & Dr16 { & self . dr16 }
#[doc = "0x50 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr17 (& self) -> & Dr17 { & self . dr17 }
#[doc = "0x54 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr18 (& self) -> & Dr18 { & self . dr18 }
#[doc = "0x58 - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr19 (& self) -> & Dr19 { & self . dr19 }
#[doc = "0x5c - Backup data register(BKP_DR)"]
#[inline (always)] pub const fn dr20 (& self) -> & Dr20 { & self . dr20 } }
#[doc = "RTCCR (rw) register accessor: RTC clock calibration register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtccr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtccr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtccr`] module"]
#[doc (alias = "RTCCR")] pub type Rtccr = crate :: Reg < rtccr :: RtccrSpec > ;
#[doc = "RTC clock calibration register"] pub mod rtccr {
#[doc = "Register `RTCCR` reader"] pub type R = crate :: R < RtccrSpec > ;
#[doc = "Register `RTCCR` writer"] pub type W = crate :: W < RtccrSpec > ;
#[doc = "Field `CAL` reader - Calibration value"] pub type CalR = crate :: FieldReader ;
#[doc = "Field `CAL` writer - Calibration value"] pub type CalW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ;
#[doc = "Field `CCO` reader - Calibration clock output"] pub type CcoR = crate :: BitReader ;
#[doc = "Field `CCO` writer - Calibration clock output"] pub type CcoW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ASOE` reader - Alarm or second output enable"] pub type AsoeR = crate :: BitReader ;
#[doc = "Field `ASOE` writer - Alarm or second output enable"] pub type AsoeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ASOS` reader - Alarm or second output selection"] pub type AsosR = crate :: BitReader ;
#[doc = "Field `ASOS` writer - Alarm or second output selection"] pub type AsosW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:6 - Calibration value"]
#[inline (always)] pub fn cal (& self) -> CalR { CalR :: new ((self . bits & 0x7f) as u8) }
#[doc = "Bit 7 - Calibration clock output"]
#[inline (always)] pub fn cco (& self) -> CcoR { CcoR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Alarm or second output enable"]
#[inline (always)] pub fn asoe (& self) -> AsoeR { AsoeR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Alarm or second output selection"]
#[inline (always)] pub fn asos (& self) -> AsosR { AsosR :: new (((self . bits >> 9) & 1) != 0) } } impl W {
#[doc = "Bits 0:6 - Calibration value"]
#[inline (always)] pub fn cal (& mut self) -> CalW < '_ , RtccrSpec > { CalW :: new (self , 0) }
#[doc = "Bit 7 - Calibration clock output"]
#[inline (always)] pub fn cco (& mut self) -> CcoW < '_ , RtccrSpec > { CcoW :: new (self , 7) }
#[doc = "Bit 8 - Alarm or second output enable"]
#[inline (always)] pub fn asoe (& mut self) -> AsoeW < '_ , RtccrSpec > { AsoeW :: new (self , 8) }
#[doc = "Bit 9 - Alarm or second output selection"]
#[inline (always)] pub fn asos (& mut self) -> AsosW < '_ , RtccrSpec > { AsosW :: new (self , 9) } }
#[doc = "RTC clock calibration register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtccr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtccr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtccrSpec ; impl crate :: RegisterSpec for RtccrSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtccr::R`](R) reader structure"] impl crate :: Readable for RtccrSpec { }
#[doc = "`write(|w| ..)` method takes [`rtccr::W`](W) writer structure"] impl crate :: Writable for RtccrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTCCR to value 0"] impl crate :: Resettable for RtccrSpec { } }
#[doc = "CR (rw) register accessor: Backup control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "Backup control register"] pub mod cr {
#[doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ;
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `TPE` reader - TAMPER pin enable"] pub type TpeR = crate :: BitReader ;
#[doc = "Field `TPE` writer - TAMPER pin enable"] pub type TpeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TPAL` reader - TAMPER pin active level"] pub type TpalR = crate :: BitReader ;
#[doc = "Field `TPAL` writer - TAMPER pin active level"] pub type TpalW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - TAMPER pin enable"]
#[inline (always)] pub fn tpe (& self) -> TpeR { TpeR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - TAMPER pin active level"]
#[inline (always)] pub fn tpal (& self) -> TpalR { TpalR :: new (((self . bits >> 1) & 1) != 0) } } impl W {
#[doc = "Bit 0 - TAMPER pin enable"]
#[inline (always)] pub fn tpe (& mut self) -> TpeW < '_ , CrSpec > { TpeW :: new (self , 0) }
#[doc = "Bit 1 - TAMPER pin active level"]
#[inline (always)] pub fn tpal (& mut self) -> TpalW < '_ , CrSpec > { TpalW :: new (self , 1) } }
#[doc = "Backup control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0"] impl crate :: Resettable for CrSpec { } }
#[doc = "CSR (rw) register accessor: BKP control/status register\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`csr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@csr`] module"]
#[doc (alias = "CSR")] pub type Csr = crate :: Reg < csr :: CsrSpec > ;
#[doc = "BKP control/status register"] pub mod csr {
#[doc = "Register `CSR` reader"] pub type R = crate :: R < CsrSpec > ;
#[doc = "Register `CSR` writer"] pub type W = crate :: W < CsrSpec > ;
#[doc = "Field `CTE` reader - Clear tamper event"] pub type CteR = crate :: BitReader ;
#[doc = "Field `CTE` writer - Clear tamper event"] pub type CteW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTI` reader - Clear tamper interrupt"] pub type CtiR = crate :: BitReader ;
#[doc = "Field `CTI` writer - Clear tamper interrupt"] pub type CtiW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TPIE` reader - TAMPER pin interrupt enable"] pub type TpieR = crate :: BitReader ;
#[doc = "Field `TPIE` writer - TAMPER pin interrupt enable"] pub type TpieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TEF` reader - Tamper event flag"] pub type TefR = crate :: BitReader ;
#[doc = "Field `TEF` writer - Tamper event flag"] pub type TefW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIF` reader - Tamper interrupt flag"] pub type TifR = crate :: BitReader ;
#[doc = "Field `TIF` writer - Tamper interrupt flag"] pub type TifW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Clear tamper event"]
#[inline (always)] pub fn cte (& self) -> CteR { CteR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Clear tamper interrupt"]
#[inline (always)] pub fn cti (& self) -> CtiR { CtiR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - TAMPER pin interrupt enable"]
#[inline (always)] pub fn tpie (& self) -> TpieR { TpieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 8 - Tamper event flag"]
#[inline (always)] pub fn tef (& self) -> TefR { TefR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Tamper interrupt flag"]
#[inline (always)] pub fn tif (& self) -> TifR { TifR :: new (((self . bits >> 9) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Clear tamper event"]
#[inline (always)] pub fn cte (& mut self) -> CteW < '_ , CsrSpec > { CteW :: new (self , 0) }
#[doc = "Bit 1 - Clear tamper interrupt"]
#[inline (always)] pub fn cti (& mut self) -> CtiW < '_ , CsrSpec > { CtiW :: new (self , 1) }
#[doc = "Bit 2 - TAMPER pin interrupt enable"]
#[inline (always)] pub fn tpie (& mut self) -> TpieW < '_ , CsrSpec > { TpieW :: new (self , 2) }
#[doc = "Bit 8 - Tamper event flag"]
#[inline (always)] pub fn tef (& mut self) -> TefW < '_ , CsrSpec > { TefW :: new (self , 8) }
#[doc = "Bit 9 - Tamper interrupt flag"]
#[inline (always)] pub fn tif (& mut self) -> TifW < '_ , CsrSpec > { TifW :: new (self , 9) } }
#[doc = "BKP control/status register\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`csr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CsrSpec ; impl crate :: RegisterSpec for CsrSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`csr::R`](R) reader structure"] impl crate :: Readable for CsrSpec { }
#[doc = "`write(|w| ..)` method takes [`csr::W`](W) writer structure"] impl crate :: Writable for CsrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CSR to value 0"] impl crate :: Resettable for CsrSpec { } }
#[doc = "DR1 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr1`] module"]
#[doc (alias = "DR1")] pub type Dr1 = crate :: Reg < dr1 :: Dr1Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr1 {
#[doc = "Register `DR1` reader"] pub type R = crate :: R < Dr1Spec > ;
#[doc = "Register `DR1` writer"] pub type W = crate :: W < Dr1Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr1Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr1Spec ; impl crate :: RegisterSpec for Dr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr1::R`](R) reader structure"] impl crate :: Readable for Dr1Spec { }
#[doc = "`write(|w| ..)` method takes [`dr1::W`](W) writer structure"] impl crate :: Writable for Dr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR1 to value 0"] impl crate :: Resettable for Dr1Spec { } }
#[doc = "DR2 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr2`] module"]
#[doc (alias = "DR2")] pub type Dr2 = crate :: Reg < dr2 :: Dr2Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr2 {
#[doc = "Register `DR2` reader"] pub type R = crate :: R < Dr2Spec > ;
#[doc = "Register `DR2` writer"] pub type W = crate :: W < Dr2Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr2Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr2Spec ; impl crate :: RegisterSpec for Dr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr2::R`](R) reader structure"] impl crate :: Readable for Dr2Spec { }
#[doc = "`write(|w| ..)` method takes [`dr2::W`](W) writer structure"] impl crate :: Writable for Dr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR2 to value 0"] impl crate :: Resettable for Dr2Spec { } }
#[doc = "DR3 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr3`] module"]
#[doc (alias = "DR3")] pub type Dr3 = crate :: Reg < dr3 :: Dr3Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr3 {
#[doc = "Register `DR3` reader"] pub type R = crate :: R < Dr3Spec > ;
#[doc = "Register `DR3` writer"] pub type W = crate :: W < Dr3Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr3Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr3Spec ; impl crate :: RegisterSpec for Dr3Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr3::R`](R) reader structure"] impl crate :: Readable for Dr3Spec { }
#[doc = "`write(|w| ..)` method takes [`dr3::W`](W) writer structure"] impl crate :: Writable for Dr3Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR3 to value 0"] impl crate :: Resettable for Dr3Spec { } }
#[doc = "DR4 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr4`] module"]
#[doc (alias = "DR4")] pub type Dr4 = crate :: Reg < dr4 :: Dr4Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr4 {
#[doc = "Register `DR4` reader"] pub type R = crate :: R < Dr4Spec > ;
#[doc = "Register `DR4` writer"] pub type W = crate :: W < Dr4Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr4Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr4::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr4::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr4Spec ; impl crate :: RegisterSpec for Dr4Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr4::R`](R) reader structure"] impl crate :: Readable for Dr4Spec { }
#[doc = "`write(|w| ..)` method takes [`dr4::W`](W) writer structure"] impl crate :: Writable for Dr4Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR4 to value 0"] impl crate :: Resettable for Dr4Spec { } }
#[doc = "DR5 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr5::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr5::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr5`] module"]
#[doc (alias = "DR5")] pub type Dr5 = crate :: Reg < dr5 :: Dr5Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr5 {
#[doc = "Register `DR5` reader"] pub type R = crate :: R < Dr5Spec > ;
#[doc = "Register `DR5` writer"] pub type W = crate :: W < Dr5Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr5Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr5::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr5::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr5Spec ; impl crate :: RegisterSpec for Dr5Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr5::R`](R) reader structure"] impl crate :: Readable for Dr5Spec { }
#[doc = "`write(|w| ..)` method takes [`dr5::W`](W) writer structure"] impl crate :: Writable for Dr5Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR5 to value 0"] impl crate :: Resettable for Dr5Spec { } }
#[doc = "DR6 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr6::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr6::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr6`] module"]
#[doc (alias = "DR6")] pub type Dr6 = crate :: Reg < dr6 :: Dr6Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr6 {
#[doc = "Register `DR6` reader"] pub type R = crate :: R < Dr6Spec > ;
#[doc = "Register `DR6` writer"] pub type W = crate :: W < Dr6Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr6Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr6::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr6::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr6Spec ; impl crate :: RegisterSpec for Dr6Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr6::R`](R) reader structure"] impl crate :: Readable for Dr6Spec { }
#[doc = "`write(|w| ..)` method takes [`dr6::W`](W) writer structure"] impl crate :: Writable for Dr6Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR6 to value 0"] impl crate :: Resettable for Dr6Spec { } }
#[doc = "DR7 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr7::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr7::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr7`] module"]
#[doc (alias = "DR7")] pub type Dr7 = crate :: Reg < dr7 :: Dr7Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr7 {
#[doc = "Register `DR7` reader"] pub type R = crate :: R < Dr7Spec > ;
#[doc = "Register `DR7` writer"] pub type W = crate :: W < Dr7Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr7Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr7::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr7::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr7Spec ; impl crate :: RegisterSpec for Dr7Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr7::R`](R) reader structure"] impl crate :: Readable for Dr7Spec { }
#[doc = "`write(|w| ..)` method takes [`dr7::W`](W) writer structure"] impl crate :: Writable for Dr7Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR7 to value 0"] impl crate :: Resettable for Dr7Spec { } }
#[doc = "DR8 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr8::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr8::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr8`] module"]
#[doc (alias = "DR8")] pub type Dr8 = crate :: Reg < dr8 :: Dr8Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr8 {
#[doc = "Register `DR8` reader"] pub type R = crate :: R < Dr8Spec > ;
#[doc = "Register `DR8` writer"] pub type W = crate :: W < Dr8Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr8Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr8::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr8::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr8Spec ; impl crate :: RegisterSpec for Dr8Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr8::R`](R) reader structure"] impl crate :: Readable for Dr8Spec { }
#[doc = "`write(|w| ..)` method takes [`dr8::W`](W) writer structure"] impl crate :: Writable for Dr8Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR8 to value 0"] impl crate :: Resettable for Dr8Spec { } }
#[doc = "DR9 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr9::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr9::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr9`] module"]
#[doc (alias = "DR9")] pub type Dr9 = crate :: Reg < dr9 :: Dr9Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr9 {
#[doc = "Register `DR9` reader"] pub type R = crate :: R < Dr9Spec > ;
#[doc = "Register `DR9` writer"] pub type W = crate :: W < Dr9Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr9Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr9::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr9::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr9Spec ; impl crate :: RegisterSpec for Dr9Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr9::R`](R) reader structure"] impl crate :: Readable for Dr9Spec { }
#[doc = "`write(|w| ..)` method takes [`dr9::W`](W) writer structure"] impl crate :: Writable for Dr9Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR9 to value 0"] impl crate :: Resettable for Dr9Spec { } }
#[doc = "DR10 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr10::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr10::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr10`] module"]
#[doc (alias = "DR10")] pub type Dr10 = crate :: Reg < dr10 :: Dr10Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr10 {
#[doc = "Register `DR10` reader"] pub type R = crate :: R < Dr10Spec > ;
#[doc = "Register `DR10` writer"] pub type W = crate :: W < Dr10Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr10Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr10::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr10::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr10Spec ; impl crate :: RegisterSpec for Dr10Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr10::R`](R) reader structure"] impl crate :: Readable for Dr10Spec { }
#[doc = "`write(|w| ..)` method takes [`dr10::W`](W) writer structure"] impl crate :: Writable for Dr10Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR10 to value 0"] impl crate :: Resettable for Dr10Spec { } }
#[doc = "DR11 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr11::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr11::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr11`] module"]
#[doc (alias = "DR11")] pub type Dr11 = crate :: Reg < dr11 :: Dr11Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr11 {
#[doc = "Register `DR11` reader"] pub type R = crate :: R < Dr11Spec > ;
#[doc = "Register `DR11` writer"] pub type W = crate :: W < Dr11Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr11Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr11::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr11::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr11Spec ; impl crate :: RegisterSpec for Dr11Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr11::R`](R) reader structure"] impl crate :: Readable for Dr11Spec { }
#[doc = "`write(|w| ..)` method takes [`dr11::W`](W) writer structure"] impl crate :: Writable for Dr11Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR11 to value 0"] impl crate :: Resettable for Dr11Spec { } }
#[doc = "DR12 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr12::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr12::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr12`] module"]
#[doc (alias = "DR12")] pub type Dr12 = crate :: Reg < dr12 :: Dr12Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr12 {
#[doc = "Register `DR12` reader"] pub type R = crate :: R < Dr12Spec > ;
#[doc = "Register `DR12` writer"] pub type W = crate :: W < Dr12Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr12Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr12::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr12::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr12Spec ; impl crate :: RegisterSpec for Dr12Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr12::R`](R) reader structure"] impl crate :: Readable for Dr12Spec { }
#[doc = "`write(|w| ..)` method takes [`dr12::W`](W) writer structure"] impl crate :: Writable for Dr12Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR12 to value 0"] impl crate :: Resettable for Dr12Spec { } }
#[doc = "DR13 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr13::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr13::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr13`] module"]
#[doc (alias = "DR13")] pub type Dr13 = crate :: Reg < dr13 :: Dr13Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr13 {
#[doc = "Register `DR13` reader"] pub type R = crate :: R < Dr13Spec > ;
#[doc = "Register `DR13` writer"] pub type W = crate :: W < Dr13Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr13Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr13::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr13::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr13Spec ; impl crate :: RegisterSpec for Dr13Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr13::R`](R) reader structure"] impl crate :: Readable for Dr13Spec { }
#[doc = "`write(|w| ..)` method takes [`dr13::W`](W) writer structure"] impl crate :: Writable for Dr13Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR13 to value 0"] impl crate :: Resettable for Dr13Spec { } }
#[doc = "DR14 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr14::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr14::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr14`] module"]
#[doc (alias = "DR14")] pub type Dr14 = crate :: Reg < dr14 :: Dr14Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr14 {
#[doc = "Register `DR14` reader"] pub type R = crate :: R < Dr14Spec > ;
#[doc = "Register `DR14` writer"] pub type W = crate :: W < Dr14Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr14Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr14::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr14::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr14Spec ; impl crate :: RegisterSpec for Dr14Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr14::R`](R) reader structure"] impl crate :: Readable for Dr14Spec { }
#[doc = "`write(|w| ..)` method takes [`dr14::W`](W) writer structure"] impl crate :: Writable for Dr14Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR14 to value 0"] impl crate :: Resettable for Dr14Spec { } }
#[doc = "DR15 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr15::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr15::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr15`] module"]
#[doc (alias = "DR15")] pub type Dr15 = crate :: Reg < dr15 :: Dr15Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr15 {
#[doc = "Register `DR15` reader"] pub type R = crate :: R < Dr15Spec > ;
#[doc = "Register `DR15` writer"] pub type W = crate :: W < Dr15Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr15Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr15::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr15::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr15Spec ; impl crate :: RegisterSpec for Dr15Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr15::R`](R) reader structure"] impl crate :: Readable for Dr15Spec { }
#[doc = "`write(|w| ..)` method takes [`dr15::W`](W) writer structure"] impl crate :: Writable for Dr15Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR15 to value 0"] impl crate :: Resettable for Dr15Spec { } }
#[doc = "DR16 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr16::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr16::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr16`] module"]
#[doc (alias = "DR16")] pub type Dr16 = crate :: Reg < dr16 :: Dr16Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr16 {
#[doc = "Register `DR16` reader"] pub type R = crate :: R < Dr16Spec > ;
#[doc = "Register `DR16` writer"] pub type W = crate :: W < Dr16Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr16Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr16::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr16::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr16Spec ; impl crate :: RegisterSpec for Dr16Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr16::R`](R) reader structure"] impl crate :: Readable for Dr16Spec { }
#[doc = "`write(|w| ..)` method takes [`dr16::W`](W) writer structure"] impl crate :: Writable for Dr16Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR16 to value 0"] impl crate :: Resettable for Dr16Spec { } }
#[doc = "DR17 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr17::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr17::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr17`] module"]
#[doc (alias = "DR17")] pub type Dr17 = crate :: Reg < dr17 :: Dr17Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr17 {
#[doc = "Register `DR17` reader"] pub type R = crate :: R < Dr17Spec > ;
#[doc = "Register `DR17` writer"] pub type W = crate :: W < Dr17Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr17Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr17::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr17::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr17Spec ; impl crate :: RegisterSpec for Dr17Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr17::R`](R) reader structure"] impl crate :: Readable for Dr17Spec { }
#[doc = "`write(|w| ..)` method takes [`dr17::W`](W) writer structure"] impl crate :: Writable for Dr17Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR17 to value 0"] impl crate :: Resettable for Dr17Spec { } }
#[doc = "DR18 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr18::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr18::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr18`] module"]
#[doc (alias = "DR18")] pub type Dr18 = crate :: Reg < dr18 :: Dr18Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr18 {
#[doc = "Register `DR18` reader"] pub type R = crate :: R < Dr18Spec > ;
#[doc = "Register `DR18` writer"] pub type W = crate :: W < Dr18Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr18Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr18::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr18::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr18Spec ; impl crate :: RegisterSpec for Dr18Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr18::R`](R) reader structure"] impl crate :: Readable for Dr18Spec { }
#[doc = "`write(|w| ..)` method takes [`dr18::W`](W) writer structure"] impl crate :: Writable for Dr18Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR18 to value 0"] impl crate :: Resettable for Dr18Spec { } }
#[doc = "DR19 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr19::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr19::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr19`] module"]
#[doc (alias = "DR19")] pub type Dr19 = crate :: Reg < dr19 :: Dr19Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr19 {
#[doc = "Register `DR19` reader"] pub type R = crate :: R < Dr19Spec > ;
#[doc = "Register `DR19` writer"] pub type W = crate :: W < Dr19Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr19Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr19::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr19::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr19Spec ; impl crate :: RegisterSpec for Dr19Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr19::R`](R) reader structure"] impl crate :: Readable for Dr19Spec { }
#[doc = "`write(|w| ..)` method takes [`dr19::W`](W) writer structure"] impl crate :: Writable for Dr19Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR19 to value 0"] impl crate :: Resettable for Dr19Spec { } }
#[doc = "DR20 (rw) register accessor: Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr20::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr20::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr20`] module"]
#[doc (alias = "DR20")] pub type Dr20 = crate :: Reg < dr20 :: Dr20Spec > ;
#[doc = "Backup data register(BKP_DR)"] pub mod dr20 {
#[doc = "Register `DR20` reader"] pub type R = crate :: R < Dr20Spec > ;
#[doc = "Register `DR20` writer"] pub type W = crate :: W < Dr20Spec > ;
#[doc = "Field `D` reader - Backup data"] pub type DR = crate :: FieldReader < u16 > ;
#[doc = "Field `D` writer - Backup data"] pub type DW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& self) -> DR { DR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Backup data"]
#[inline (always)] pub fn d (& mut self) -> DW < '_ , Dr20Spec > { DW :: new (self , 0) } }
#[doc = "Backup data register(BKP_DR)\n\nYou can [`read`](crate::Reg::read) this register and get [`dr20::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr20::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr20Spec ; impl crate :: RegisterSpec for Dr20Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr20::R`](R) reader structure"] impl crate :: Readable for Dr20Spec { }
#[doc = "`write(|w| ..)` method takes [`dr20::W`](W) writer structure"] impl crate :: Writable for Dr20Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR20 to value 0"] impl crate :: Resettable for Dr20Spec { } } }
#[doc = "Controller area network"] pub type Can = crate :: Periph < can :: RegisterBlock , 0x4000_6400 > ; impl core :: fmt :: Debug for Can { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Can") . finish () } }
#[doc = "Controller area network"] pub mod can {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { _reserved_0_cr_b : [u8 ; 0x04] , _reserved_1_cmr : [u8 ; 0x04] , sr : Sr , _reserved_3_ir : [u8 ; 0x04] , _reserved_4_ier_p : [u8 ; 0x04] , group0_amr_b : Group0AmrB , btr0 : Btr0 , btr1 : Btr1 , _reserved8 : [u8 ; 0x08] , txid0_b : Txid0B , _reserved_9_alc_p : [u8 ; 0x04] , _reserved_10_ecc_p : [u8 ; 0x04] , _reserved_11_ewlr_p : [u8 ; 0x04] , _reserved_12_rxerr_p : [u8 ; 0x04] , _reserved_13_txdr3_b : [u8 ; 0x04] , _reserved_14_sff_p : [u8 ; 0x04] , _reserved_15_txdr5_b : [u8 ; 0x04] , _reserved_16_txdr6_b : [u8 ; 0x04] , _reserved_17_txdr7_b : [u8 ; 0x04] , _reserved_18_txdata1_p : [u8 ; 0x04] , _reserved_19_txdata2_p : [u8 ; 0x04] , _reserved_20_txdata3_p : [u8 ; 0x04] , _reserved_21_txdata4_p : [u8 ; 0x04] , txdata5_p : Txdata5P , txdata6_p : Txdata6P , txdata7_p : Txdata7P , txdata8_p : Txdata8P , txdata9_p : Txdata9P , _reserved27 : [u8 ; 0x08] , cdr : Cdr , afm0 : Afm0 , afm1 : Afm1 , afm2 : Afm2 , fga0 : Fga0 , fga1 : Fga1 , fga2 : Fga2 , _reserved_34_group1_acr : [u8 ; 0x04] , group1_acr1_p : Group1Acr1P , group1_acr2_p : Group1Acr2P , group1_acr3_p : Group1Acr3P , _reserved_38_group1_amr : [u8 ; 0x04] , group1_amr1_p : Group1Amr1P , group1_amr2_p : Group1Amr2P , group1_amr3_p : Group1Amr3P , _reserved_42_group2_acr : [u8 ; 0x04] , group2_acr1_p : Group2Acr1P , group2_acr2_p : Group2Acr2P , group2_acr3_p : Group2Acr3P , _reserved_46_group2_amr : [u8 ; 0x04] , group2_amr1_p : Group2Amr1P , group2_amr2_p : Group2Amr2P , group2_amr3_p : Group2Amr3P , _reserved_50_group3_acr : [u8 ; 0x04] , group3_acr1_p : Group3Acr1P , group3_acr2_p : Group3Acr2P , group3_acr3_p : Group3Acr3P , _reserved_54_group3_amr : [u8 ; 0x04] , group3_amr1_p : Group3Amr1P , group3_amr2_p : Group3Amr2P , group3_amr3_p : Group3Amr3P , _reserved_58_group4_acr : [u8 ; 0x04] , group4_acr1_p : Group4Acr1P , group4_acr2_p : Group4Acr2P , group4_acr3_p : Group4Acr3P , _reserved_62_group4_amr : [u8 ; 0x04] , group4_amr1_p : Group4Amr1P , group4_amr2_p : Group4Amr2P , group4_amr3_p : Group4Amr3P , _reserved_66_group5_acr : [u8 ; 0x04] , group5_acr1_p : Group5Acr1P , group5_acr2_p : Group5Acr2P , group5_acr3_p : Group5Acr3P , _reserved_70_group5_amr : [u8 ; 0x04] , group5_amr1_p : Group5Amr1P , group5_amr2_p : Group5Amr2P , group5_amr3_p : Group5Amr3P , _reserved_74_group6_acr : [u8 ; 0x04] , group6_acr1_p : Group6Acr1P , group6_acr2_p : Group6Acr2P , group6_acr3_p : Group6Acr3P , _reserved_78_group6_amr : [u8 ; 0x04] , group6_amr1_p : Group6Amr1P , group6_amr2_p : Group6Amr2P , group6_amr3_p : Group6Amr3P , _reserved_82_group7_acr : [u8 ; 0x04] , group7_acr1_p : Group7Acr1P , group7_acr2_p : Group7Acr2P , group7_acr3_p : Group7Acr3P , _reserved_86_group7_amr : [u8 ; 0x04] , group7_amr1_p : Group7Amr1P , group7_amr2_p : Group7Amr2P , group7_amr3_p : Group7Amr3P , _reserved_90_group8_acr : [u8 ; 0x04] , group8_acr1_p : Group8Acr1P , group8_acr2_p : Group8Acr2P , group8_acr3_p : Group8Acr3P , _reserved_94_group8_amr : [u8 ; 0x04] , group8_amr1_p : Group8Amr1P , group8_amr2_p : Group8Amr2P , group8_amr3_p : Group8Amr3P , _reserved_98_group9_acr : [u8 ; 0x04] , group9_acr1_p : Group9Acr1P , group9_acr2_p : Group9Acr2P , group9_acr3_p : Group9Acr3P , _reserved_102_group9_amr : [u8 ; 0x04] , group9_amr1_p : Group9Amr1P , group9_amr2_p : Group9Amr2P , group9_amr3_p : Group9Amr3P , _reserved_106_group10_acr : [u8 ; 0x04] , group10_acr1_p : Group10Acr1P , group10_acr2_p : Group10Acr2P , group10_acr3_p : Group10Acr3P , _reserved_110_group10_amr : [u8 ; 0x04] , group10_amr1_p : Group10Amr1P , group10_amr2_p : Group10Amr2P , group10_amr3_p : Group10Amr3P , _reserved_114_group11_acr : [u8 ; 0x04] , group11_acr1_p : Group11Acr1P , group11_acr2_p : Group11Acr2P , group11_acr3_p : Group11Acr3P , _reserved_118_group11_amr : [u8 ; 0x04] , group11_amr1_p : Group11Amr1P , group11_amr2_p : Group11Amr2P , group11_amr3_p : Group11Amr3P , _reserved_122_group12_acr : [u8 ; 0x04] , group12_acr1_p : Group12Acr1P , group12_acr2_p : Group12Acr2P , group12_acr3_p : Group12Acr3P , _reserved_126_group12_amr : [u8 ; 0x04] , group12_amr1_p : Group12Amr1P , group12_amr2_p : Group12Amr2P , group12_amr3_p : Group12Amr3P , _reserved_130_group13_acr : [u8 ; 0x04] , group13_acr1_p : Group13Acr1P , group13_acr2_p : Group13Acr2P , group13_acr3_p : Group13Acr3P , _reserved_134_group13_amr : [u8 ; 0x04] , group13_amr1_p : Group13Amr1P , group13_amr2_p : Group13Amr2P , group13_amr3_p : Group13Amr3P , _reserved_138_group14_acr : [u8 ; 0x04] , group14_acr1_p : Group14Acr1P , group14_acr2_p : Group14Acr2P , group14_acr3_p : Group14Acr3P , _reserved_142_group14_amr : [u8 ; 0x04] , group14_amr1_p : Group14Amr1P , group14_amr2_p : Group14Amr2P , group14_amr3_p : Group14Amr3P , _reserved_146_group15_acr : [u8 ; 0x04] , group15_acr1_p : Group15Acr1P , group15_acr2_p : Group15Acr2P , group15_acr3_p : Group15Acr3P , _reserved_150_group15_amr : [u8 ; 0x04] , group15_amr1_p : Group15Amr1P , group15_amr2_p : Group15Amr2P , group15_amr3_p : Group15Amr3P , _reserved_154_group16_acr : [u8 ; 0x04] , group16_acr1_p : Group16Acr1P , group16_acr2_p : Group16Acr2P , group16_acr3_p : Group16Acr3P , _reserved_158_group16_amr : [u8 ; 0x04] , group16_amr1_p : Group16Amr1P , group16_amr2_p : Group16Amr2P , group16_amr3_p : Group16Amr3P , _reserved_162_group17_acr : [u8 ; 0x04] , group17_acr1_p : Group17Acr1P , group17_acr2_p : Group17Acr2P , group17_acr3_p : Group17Acr3P , _reserved_166_group17_amr : [u8 ; 0x04] , group17_amr1_p : Group17Amr1P , group17_amr2_p : Group17Amr2P , group17_amr3_p : Group17Amr3P , _reserved_170_group18_acr : [u8 ; 0x04] , group18_acr1_p : Group18Acr1P , group18_acr2_p : Group18Acr2P , group18_acr3_p : Group18Acr3P , _reserved_174_group18_amr : [u8 ; 0x04] , group18_amr1_p : Group18Amr1P , group18_amr2_p : Group18Amr2P , group18_amr3_p : Group18Amr3P , _reserved_178_group19_acr : [u8 ; 0x04] , group19_acr1_p : Group19Acr1P , group19_acr2_p : Group19Acr2P , group19_acr3_p : Group19Acr3P , _reserved_182_group19_amr : [u8 ; 0x04] , group19_amr1_p : Group19Amr1P , group19_amr2_p : Group19Amr2P , group19_amr3_p : Group19Amr3P , } impl RegisterBlock {
#[doc = "0x00 - Peli Mode register"]
#[inline (always)] pub const fn mod_p (& self) -> & ModP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . cast () } }
#[doc = "0x00 - Basic control register"]
#[inline (always)] pub const fn cr_b (& self) -> & CrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . cast () } }
#[doc = "0x04 - Peli Command register"]
#[inline (always)] pub const fn cmr_p (& self) -> & CmrP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (4) . cast () } }
#[doc = "0x04 - Basic Command register"]
#[inline (always)] pub const fn cmr_b (& self) -> & CmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (4) . cast () } }
#[doc = "0x08 - Status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x0c - Interrupt register"]
#[inline (always)] pub const fn ir_p (& self) -> & IrP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (12) . cast () } }
#[doc = "0x0c - Interrupt register"]
#[inline (always)] pub const fn ir_b (& self) -> & IrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (12) . cast () } }
#[doc = "0x10 - Peli Interrupt Enable register"]
#[inline (always)] pub const fn ier_p (& self) -> & IerP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (16) . cast () } }
#[doc = "0x10 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group0_acr_b (& self) -> & Group0AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (16) . cast () } }
#[doc = "0x14 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group0_amr_b (& self) -> & Group0AmrB { & self . group0_amr_b }
#[doc = "0x18 - Bus Timing register 0"]
#[inline (always)] pub const fn btr0 (& self) -> & Btr0 { & self . btr0 }
#[doc = "0x1c - Bus Timing register 1"]
#[inline (always)] pub const fn btr1 (& self) -> & Btr1 { & self . btr1 }
#[doc = "0x28 - Basic TX ID register 0"]
#[inline (always)] pub const fn txid0_b (& self) -> & Txid0B { & self . txid0_b }
#[doc = "0x2c - Peli Arbitration Lost Capture register"]
#[inline (always)] pub const fn alc_p (& self) -> & AlcP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (44) . cast () } }
#[doc = "0x2c - Basic TX ID register 1"]
#[inline (always)] pub const fn txid1_b (& self) -> & Txid1B { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (44) . cast () } }
#[doc = "0x30 - Peli Error Code Capture register"]
#[inline (always)] pub const fn ecc_p (& self) -> & EccP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (48) . cast () } }
#[doc = "0x30 - Basic TX Data register 0"]
#[inline (always)] pub const fn txdr0_b (& self) -> & Txdr0B { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (48) . cast () } }
#[doc = "0x34 - Peli Error Warning Limit register"]
#[inline (always)] pub const fn ewlr_p (& self) -> & EwlrP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (52) . cast () } }
#[doc = "0x34 - Basic TX Data register 1"]
#[inline (always)] pub const fn txdr1_b (& self) -> & Txdr1B { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (52) . cast () } }
#[doc = "0x38 - Peli RX Error Counter register"]
#[inline (always)] pub const fn rxerr_p (& self) -> & RxerrP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (56) . cast () } }
#[doc = "0x38 - Basic Send Data register 2"]
#[inline (always)] pub const fn txdr2_b (& self) -> & Txdr2B { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (56) . cast () } }
#[doc = "0x3c - Peli TX Error Counter register"]
#[inline (always)] pub const fn txerr_p (& self) -> & TxerrP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (60) . cast () } }
#[doc = "0x3c - Basic TX Data register 3"]
#[inline (always)] pub const fn txdr3_b (& self) -> & Txdr3B { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (60) . cast () } }
#[doc = "0x40 - Peli Acceptance Code register 0"]
#[inline (always)] pub const fn group0_acr0_p (& self) -> & Group0Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (64) . cast () } }
#[doc = "0x40 - Peli Send Frame Format register"]
#[inline (always)] pub const fn sff_p (& self) -> & SffP { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (64) . cast () } }
#[doc = "0x40 - Basic TX Data register 4"]
#[inline (always)] pub const fn txdr4_b (& self) -> & Txdr4B { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (64) . cast () } }
#[doc = "0x44 - Peli Acceptance Code register 1"]
#[inline (always)] pub const fn group0_acr1_p (& self) -> & Group0Acr1P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (68) . cast () } }
#[doc = "0x44 - Peli TX ID register 0"]
#[inline (always)] pub const fn txid0_p (& self) -> & Txid0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (68) . cast () } }
#[doc = "0x44 - Basic TX Data register 5"]
#[inline (always)] pub const fn txdr5_b (& self) -> & Txdr5B { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (68) . cast () } }
#[doc = "0x48 - Peli Acceptance Code register 2"]
#[inline (always)] pub const fn group0_acr2_p (& self) -> & Group0Acr2P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (72) . cast () } }
#[doc = "0x48 - Peli TX ID register 1"]
#[inline (always)] pub const fn txid1_p (& self) -> & Txid1P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (72) . cast () } }
#[doc = "0x48 - Basic TX Data register 6"]
#[inline (always)] pub const fn txdr6_b (& self) -> & Txdr6B { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (72) . cast () } }
#[doc = "0x4c - Peli Acceptance Code register 3"]
#[inline (always)] pub const fn group0_acr3_p (& self) -> & Group0Acr3P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (76) . cast () } }
#[doc = "0x4c - Peli TX Data register 0"]
#[inline (always)] pub const fn txdata0_p (& self) -> & Txdata0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (76) . cast () } }
#[doc = "0x4c - Basic TX Data register 7"]
#[inline (always)] pub const fn txdr7_b (& self) -> & Txdr7B { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (76) . cast () } }
#[doc = "0x50 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group0_amr0_p (& self) -> & Group0Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (80) . cast () } }
#[doc = "0x50 - Peli TX Data register 1"]
#[inline (always)] pub const fn txdata1_p (& self) -> & Txdata1P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (80) . cast () } }
#[doc = "0x54 - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group0_amr1_p (& self) -> & Group0Amr1P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (84) . cast () } }
#[doc = "0x54 - Peli TX Data register 2"]
#[inline (always)] pub const fn txdata2_p (& self) -> & Txdata2P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (84) . cast () } }
#[doc = "0x58 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group0_amr2_p (& self) -> & Group0Amr2P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (88) . cast () } }
#[doc = "0x58 - Peli TX Data register 3"]
#[inline (always)] pub const fn txdata3_p (& self) -> & Txdata3P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (88) . cast () } }
#[doc = "0x5c - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group0_amr3_p (& self) -> & Group0Amr3P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (92) . cast () } }
#[doc = "0x5c - Peli TX Data register 4"]
#[inline (always)] pub const fn txdata4_p (& self) -> & Txdata4P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (92) . cast () } }
#[doc = "0x60 - Peli TX Data register 5"]
#[inline (always)] pub const fn txdata5_p (& self) -> & Txdata5P { & self . txdata5_p }
#[doc = "0x64 - Peli TX Data register 6"]
#[inline (always)] pub const fn txdata6_p (& self) -> & Txdata6P { & self . txdata6_p }
#[doc = "0x68 - Peli TX Data register 7"]
#[inline (always)] pub const fn txdata7_p (& self) -> & Txdata7P { & self . txdata7_p }
#[doc = "0x6c - Peli TX Data register 8"]
#[inline (always)] pub const fn txdata8_p (& self) -> & Txdata8P { & self . txdata8_p }
#[doc = "0x70 - Peli TX Data register 9"]
#[inline (always)] pub const fn txdata9_p (& self) -> & Txdata9P { & self . txdata9_p }
#[doc = "0x7c - Clock Divider register"]
#[inline (always)] pub const fn cdr (& self) -> & Cdr { & self . cdr }
#[doc = "0x80 - Filter Mode register 0"]
#[inline (always)] pub const fn afm0 (& self) -> & Afm0 { & self . afm0 }
#[doc = "0x84 - Filter Mode register 1"]
#[inline (always)] pub const fn afm1 (& self) -> & Afm1 { & self . afm1 }
#[doc = "0x88 - Filter Mode register 2"]
#[inline (always)] pub const fn afm2 (& self) -> & Afm2 { & self . afm2 }
#[doc = "0x8c - Filter Group Enable Register 0"]
#[inline (always)] pub const fn fga0 (& self) -> & Fga0 { & self . fga0 }
#[doc = "0x90 - Filter Group Enable Register 1"]
#[inline (always)] pub const fn fga1 (& self) -> & Fga1 { & self . fga1 }
#[doc = "0x94 - Filter Group Enable Register 2"]
#[inline (always)] pub const fn fga2 (& self) -> & Fga2 { & self . fga2 }
#[doc = "0x98 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group1_acr0_p (& self) -> & Group1Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (152) . cast () } }
#[doc = "0x98 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group1_acr_b (& self) -> & Group1AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (152) . cast () } }
#[doc = "0x9c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group1_acr1_p (& self) -> & Group1Acr1P { & self . group1_acr1_p }
#[doc = "0xa0 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group1_acr2_p (& self) -> & Group1Acr2P { & self . group1_acr2_p }
#[doc = "0xa4 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group1_acr3_p (& self) -> & Group1Acr3P { & self . group1_acr3_p }
#[doc = "0xa8 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group1_amr0_p (& self) -> & Group1Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (168) . cast () } }
#[doc = "0xa8 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group1_amr_b (& self) -> & Group1AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (168) . cast () } }
#[doc = "0xac - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group1_amr1_p (& self) -> & Group1Amr1P { & self . group1_amr1_p }
#[doc = "0xb0 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group1_amr2_p (& self) -> & Group1Amr2P { & self . group1_amr2_p }
#[doc = "0xb4 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group1_amr3_p (& self) -> & Group1Amr3P { & self . group1_amr3_p }
#[doc = "0xb8 - Peli Acceptance Code register"]
#[inline (always)] pub const fn group2_acr0_p (& self) -> & Group2Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (184) . cast () } }
#[doc = "0xb8 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group2_acr_b (& self) -> & Group2AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (184) . cast () } }
#[doc = "0xbc - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group2_acr1_p (& self) -> & Group2Acr1P { & self . group2_acr1_p }
#[doc = "0xc0 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group2_acr2_p (& self) -> & Group2Acr2P { & self . group2_acr2_p }
#[doc = "0xc4 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group2_acr3_p (& self) -> & Group2Acr3P { & self . group2_acr3_p }
#[doc = "0xc8 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group2_amr0_p (& self) -> & Group2Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (200) . cast () } }
#[doc = "0xc8 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group2_amr_b (& self) -> & Group2AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (200) . cast () } }
#[doc = "0xcc - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group2_amr1_p (& self) -> & Group2Amr1P { & self . group2_amr1_p }
#[doc = "0xd0 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group2_amr2_p (& self) -> & Group2Amr2P { & self . group2_amr2_p }
#[doc = "0xd4 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group2_amr3_p (& self) -> & Group2Amr3P { & self . group2_amr3_p }
#[doc = "0xd8 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group3_acr0_p (& self) -> & Group3Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (216) . cast () } }
#[doc = "0xd8 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group3_acr_b (& self) -> & Group3AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (216) . cast () } }
#[doc = "0xdc - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group3_acr1_p (& self) -> & Group3Acr1P { & self . group3_acr1_p }
#[doc = "0xe0 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group3_acr2_p (& self) -> & Group3Acr2P { & self . group3_acr2_p }
#[doc = "0xe4 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group3_acr3_p (& self) -> & Group3Acr3P { & self . group3_acr3_p }
#[doc = "0xe8 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group3_amr0_p (& self) -> & Group3Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (232) . cast () } }
#[doc = "0xe8 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group3_amr_b (& self) -> & Group3AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (232) . cast () } }
#[doc = "0xec - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group3_amr1_p (& self) -> & Group3Amr1P { & self . group3_amr1_p }
#[doc = "0xf0 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group3_amr2_p (& self) -> & Group3Amr2P { & self . group3_amr2_p }
#[doc = "0xf4 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group3_amr3_p (& self) -> & Group3Amr3P { & self . group3_amr3_p }
#[doc = "0xf8 - Peli Acceptance Code register"]
#[inline (always)] pub const fn group4_acr0_p (& self) -> & Group4Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (248) . cast () } }
#[doc = "0xf8 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group4_acr_b (& self) -> & Group4AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (248) . cast () } }
#[doc = "0xfc - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group4_acr1_p (& self) -> & Group4Acr1P { & self . group4_acr1_p }
#[doc = "0x100 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group4_acr2_p (& self) -> & Group4Acr2P { & self . group4_acr2_p }
#[doc = "0x104 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group4_acr3_p (& self) -> & Group4Acr3P { & self . group4_acr3_p }
#[doc = "0x108 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group4_amr0_p (& self) -> & Group4Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (264) . cast () } }
#[doc = "0x108 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group4_amr_b (& self) -> & Group4AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (264) . cast () } }
#[doc = "0x10c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group4_amr1_p (& self) -> & Group4Amr1P { & self . group4_amr1_p }
#[doc = "0x110 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group4_amr2_p (& self) -> & Group4Amr2P { & self . group4_amr2_p }
#[doc = "0x114 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group4_amr3_p (& self) -> & Group4Amr3P { & self . group4_amr3_p }
#[doc = "0x118 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group5_acr0_p (& self) -> & Group5Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (280) . cast () } }
#[doc = "0x118 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group5_acr_b (& self) -> & Group5AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (280) . cast () } }
#[doc = "0x11c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group5_acr1_p (& self) -> & Group5Acr1P { & self . group5_acr1_p }
#[doc = "0x120 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group5_acr2_p (& self) -> & Group5Acr2P { & self . group5_acr2_p }
#[doc = "0x124 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group5_acr3_p (& self) -> & Group5Acr3P { & self . group5_acr3_p }
#[doc = "0x128 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group5_amr0_p (& self) -> & Group5Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (296) . cast () } }
#[doc = "0x128 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group5_amr_b (& self) -> & Group5AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (296) . cast () } }
#[doc = "0x12c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group5_amr1_p (& self) -> & Group5Amr1P { & self . group5_amr1_p }
#[doc = "0x130 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group5_amr2_p (& self) -> & Group5Amr2P { & self . group5_amr2_p }
#[doc = "0x134 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group5_amr3_p (& self) -> & Group5Amr3P { & self . group5_amr3_p }
#[doc = "0x138 - Peli Acceptance Code register"]
#[inline (always)] pub const fn group6_acr0_p (& self) -> & Group6Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (312) . cast () } }
#[doc = "0x138 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group6_acr_b (& self) -> & Group6AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (312) . cast () } }
#[doc = "0x13c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group6_acr1_p (& self) -> & Group6Acr1P { & self . group6_acr1_p }
#[doc = "0x140 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group6_acr2_p (& self) -> & Group6Acr2P { & self . group6_acr2_p }
#[doc = "0x144 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group6_acr3_p (& self) -> & Group6Acr3P { & self . group6_acr3_p }
#[doc = "0x148 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group6_amr0_p (& self) -> & Group6Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (328) . cast () } }
#[doc = "0x148 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group6_amr_b (& self) -> & Group6AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (328) . cast () } }
#[doc = "0x14c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group6_amr1_p (& self) -> & Group6Amr1P { & self . group6_amr1_p }
#[doc = "0x150 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group6_amr2_p (& self) -> & Group6Amr2P { & self . group6_amr2_p }
#[doc = "0x154 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group6_amr3_p (& self) -> & Group6Amr3P { & self . group6_amr3_p }
#[doc = "0x158 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group7_acr0_p (& self) -> & Group7Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (344) . cast () } }
#[doc = "0x158 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group7_acr_b (& self) -> & Group7AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (344) . cast () } }
#[doc = "0x15c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group7_acr1_p (& self) -> & Group7Acr1P { & self . group7_acr1_p }
#[doc = "0x160 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group7_acr2_p (& self) -> & Group7Acr2P { & self . group7_acr2_p }
#[doc = "0x164 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group7_acr3_p (& self) -> & Group7Acr3P { & self . group7_acr3_p }
#[doc = "0x168 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group7_amr0_p (& self) -> & Group7Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (360) . cast () } }
#[doc = "0x168 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group7_amr_b (& self) -> & Group7AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (360) . cast () } }
#[doc = "0x16c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group7_amr1_p (& self) -> & Group7Amr1P { & self . group7_amr1_p }
#[doc = "0x170 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group7_amr2_p (& self) -> & Group7Amr2P { & self . group7_amr2_p }
#[doc = "0x174 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group7_amr3_p (& self) -> & Group7Amr3P { & self . group7_amr3_p }
#[doc = "0x178 - Peli Acceptance Code register"]
#[inline (always)] pub const fn group8_acr0_p (& self) -> & Group8Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (376) . cast () } }
#[doc = "0x178 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group8_acr_b (& self) -> & Group8AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (376) . cast () } }
#[doc = "0x17c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group8_acr1_p (& self) -> & Group8Acr1P { & self . group8_acr1_p }
#[doc = "0x180 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group8_acr2_p (& self) -> & Group8Acr2P { & self . group8_acr2_p }
#[doc = "0x184 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group8_acr3_p (& self) -> & Group8Acr3P { & self . group8_acr3_p }
#[doc = "0x188 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group8_amr0_p (& self) -> & Group8Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (392) . cast () } }
#[doc = "0x188 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group8_amr_b (& self) -> & Group8AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (392) . cast () } }
#[doc = "0x18c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group8_amr1_p (& self) -> & Group8Amr1P { & self . group8_amr1_p }
#[doc = "0x190 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group8_amr2_p (& self) -> & Group8Amr2P { & self . group8_amr2_p }
#[doc = "0x194 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group8_amr3_p (& self) -> & Group8Amr3P { & self . group8_amr3_p }
#[doc = "0x198 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group9_acr0_p (& self) -> & Group9Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (408) . cast () } }
#[doc = "0x198 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group9_acr_b (& self) -> & Group9AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (408) . cast () } }
#[doc = "0x19c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group9_acr1_p (& self) -> & Group9Acr1P { & self . group9_acr1_p }
#[doc = "0x1a0 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group9_acr2_p (& self) -> & Group9Acr2P { & self . group9_acr2_p }
#[doc = "0x1a4 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group9_acr3_p (& self) -> & Group9Acr3P { & self . group9_acr3_p }
#[doc = "0x1a8 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group9_amr0_p (& self) -> & Group9Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (424) . cast () } }
#[doc = "0x1a8 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group9_amr_b (& self) -> & Group9AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (424) . cast () } }
#[doc = "0x1ac - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group9_amr1_p (& self) -> & Group9Amr1P { & self . group9_amr1_p }
#[doc = "0x1b0 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group9_amr2_p (& self) -> & Group9Amr2P { & self . group9_amr2_p }
#[doc = "0x1b4 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group9_amr3_p (& self) -> & Group9Amr3P { & self . group9_amr3_p }
#[doc = "0x1b8 - Peli Acceptance Code register"]
#[inline (always)] pub const fn group10_acr0_p (& self) -> & Group10Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (440) . cast () } }
#[doc = "0x1b8 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group10_acr_b (& self) -> & Group10AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (440) . cast () } }
#[doc = "0x1bc - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group10_acr1_p (& self) -> & Group10Acr1P { & self . group10_acr1_p }
#[doc = "0x1c0 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group10_acr2_p (& self) -> & Group10Acr2P { & self . group10_acr2_p }
#[doc = "0x1c4 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group10_acr3_p (& self) -> & Group10Acr3P { & self . group10_acr3_p }
#[doc = "0x1c8 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group10_amr0_p (& self) -> & Group10Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (456) . cast () } }
#[doc = "0x1c8 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group10_amr_b (& self) -> & Group10AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (456) . cast () } }
#[doc = "0x1cc - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group10_amr1_p (& self) -> & Group10Amr1P { & self . group10_amr1_p }
#[doc = "0x1d0 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group10_amr2_p (& self) -> & Group10Amr2P { & self . group10_amr2_p }
#[doc = "0x1d4 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group10_amr3_p (& self) -> & Group10Amr3P { & self . group10_amr3_p }
#[doc = "0x1d8 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group11_acr0_p (& self) -> & Group11Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (472) . cast () } }
#[doc = "0x1d8 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group11_acr_b (& self) -> & Group11AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (472) . cast () } }
#[doc = "0x1dc - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group11_acr1_p (& self) -> & Group11Acr1P { & self . group11_acr1_p }
#[doc = "0x1e0 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group11_acr2_p (& self) -> & Group11Acr2P { & self . group11_acr2_p }
#[doc = "0x1e4 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group11_acr3_p (& self) -> & Group11Acr3P { & self . group11_acr3_p }
#[doc = "0x1e8 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group11_amr0_p (& self) -> & Group11Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (488) . cast () } }
#[doc = "0x1e8 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group11_amr_b (& self) -> & Group11AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (488) . cast () } }
#[doc = "0x1ec - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group11_amr1_p (& self) -> & Group11Amr1P { & self . group11_amr1_p }
#[doc = "0x1f0 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group11_amr2_p (& self) -> & Group11Amr2P { & self . group11_amr2_p }
#[doc = "0x1f4 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group11_amr3_p (& self) -> & Group11Amr3P { & self . group11_amr3_p }
#[doc = "0x1f8 - Peli Acceptance Code register"]
#[inline (always)] pub const fn group12_acr0_p (& self) -> & Group12Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (504) . cast () } }
#[doc = "0x1f8 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group12_acr_b (& self) -> & Group12AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (504) . cast () } }
#[doc = "0x1fc - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group12_acr1_p (& self) -> & Group12Acr1P { & self . group12_acr1_p }
#[doc = "0x200 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group12_acr2_p (& self) -> & Group12Acr2P { & self . group12_acr2_p }
#[doc = "0x204 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group12_acr3_p (& self) -> & Group12Acr3P { & self . group12_acr3_p }
#[doc = "0x208 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group12_amr0_p (& self) -> & Group12Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (520) . cast () } }
#[doc = "0x208 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group12_amr_b (& self) -> & Group12AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (520) . cast () } }
#[doc = "0x20c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group12_amr1_p (& self) -> & Group12Amr1P { & self . group12_amr1_p }
#[doc = "0x210 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group12_amr2_p (& self) -> & Group12Amr2P { & self . group12_amr2_p }
#[doc = "0x214 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group12_amr3_p (& self) -> & Group12Amr3P { & self . group12_amr3_p }
#[doc = "0x218 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group13_acr0_p (& self) -> & Group13Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (536) . cast () } }
#[doc = "0x218 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group13_acr_b (& self) -> & Group13AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (536) . cast () } }
#[doc = "0x21c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group13_acr1_p (& self) -> & Group13Acr1P { & self . group13_acr1_p }
#[doc = "0x220 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group13_acr2_p (& self) -> & Group13Acr2P { & self . group13_acr2_p }
#[doc = "0x224 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group13_acr3_p (& self) -> & Group13Acr3P { & self . group13_acr3_p }
#[doc = "0x228 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group13_amr0_p (& self) -> & Group13Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (552) . cast () } }
#[doc = "0x228 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group13_amr_b (& self) -> & Group13AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (552) . cast () } }
#[doc = "0x22c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group13_amr1_p (& self) -> & Group13Amr1P { & self . group13_amr1_p }
#[doc = "0x230 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group13_amr2_p (& self) -> & Group13Amr2P { & self . group13_amr2_p }
#[doc = "0x234 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group13_amr3_p (& self) -> & Group13Amr3P { & self . group13_amr3_p }
#[doc = "0x238 - Peli Acceptance Code register"]
#[inline (always)] pub const fn group14_acr0_p (& self) -> & Group14Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (568) . cast () } }
#[doc = "0x238 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group14_acr_b (& self) -> & Group14AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (568) . cast () } }
#[doc = "0x23c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group14_acr1_p (& self) -> & Group14Acr1P { & self . group14_acr1_p }
#[doc = "0x240 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group14_acr2_p (& self) -> & Group14Acr2P { & self . group14_acr2_p }
#[doc = "0x244 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group14_acr3_p (& self) -> & Group14Acr3P { & self . group14_acr3_p }
#[doc = "0x248 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group14_amr0_p (& self) -> & Group14Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (584) . cast () } }
#[doc = "0x248 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group14_amr_b (& self) -> & Group14AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (584) . cast () } }
#[doc = "0x24c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group14_amr1_p (& self) -> & Group14Amr1P { & self . group14_amr1_p }
#[doc = "0x250 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group14_amr2_p (& self) -> & Group14Amr2P { & self . group14_amr2_p }
#[doc = "0x254 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group14_amr3_p (& self) -> & Group14Amr3P { & self . group14_amr3_p }
#[doc = "0x258 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group15_acr0_p (& self) -> & Group15Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (600) . cast () } }
#[doc = "0x258 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group15_acr_b (& self) -> & Group15AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (600) . cast () } }
#[doc = "0x25c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group15_acr1_p (& self) -> & Group15Acr1P { & self . group15_acr1_p }
#[doc = "0x260 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group15_acr2_p (& self) -> & Group15Acr2P { & self . group15_acr2_p }
#[doc = "0x264 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group15_acr3_p (& self) -> & Group15Acr3P { & self . group15_acr3_p }
#[doc = "0x268 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group15_amr0_p (& self) -> & Group15Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (616) . cast () } }
#[doc = "0x268 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group15_amr_b (& self) -> & Group15AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (616) . cast () } }
#[doc = "0x26c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group15_amr1_p (& self) -> & Group15Amr1P { & self . group15_amr1_p }
#[doc = "0x270 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group15_amr2_p (& self) -> & Group15Amr2P { & self . group15_amr2_p }
#[doc = "0x274 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group15_amr3_p (& self) -> & Group15Amr3P { & self . group15_amr3_p }
#[doc = "0x278 - Peli Acceptance Code register"]
#[inline (always)] pub const fn group16_acr0_p (& self) -> & Group16Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (632) . cast () } }
#[doc = "0x278 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group16_acr_b (& self) -> & Group16AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (632) . cast () } }
#[doc = "0x27c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group16_acr1_p (& self) -> & Group16Acr1P { & self . group16_acr1_p }
#[doc = "0x280 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group16_acr2_p (& self) -> & Group16Acr2P { & self . group16_acr2_p }
#[doc = "0x284 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group16_acr3_p (& self) -> & Group16Acr3P { & self . group16_acr3_p }
#[doc = "0x288 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group16_amr0_p (& self) -> & Group16Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (648) . cast () } }
#[doc = "0x288 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group16_amr_b (& self) -> & Group16AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (648) . cast () } }
#[doc = "0x28c - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group16_amr1_p (& self) -> & Group16Amr1P { & self . group16_amr1_p }
#[doc = "0x290 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group16_amr2_p (& self) -> & Group16Amr2P { & self . group16_amr2_p }
#[doc = "0x294 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group16_amr3_p (& self) -> & Group16Amr3P { & self . group16_amr3_p }
#[doc = "0x298 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group17_acr0_p (& self) -> & Group17Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (664) . cast () } }
#[doc = "0x298 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group17_acr_b (& self) -> & Group17AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (664) . cast () } }
#[doc = "0x29c - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group17_acr1_p (& self) -> & Group17Acr1P { & self . group17_acr1_p }
#[doc = "0x2a0 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group17_acr2_p (& self) -> & Group17Acr2P { & self . group17_acr2_p }
#[doc = "0x2a4 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group17_acr3_p (& self) -> & Group17Acr3P { & self . group17_acr3_p }
#[doc = "0x2a8 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group17_amr0_p (& self) -> & Group17Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (680) . cast () } }
#[doc = "0x2a8 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group17_amr_b (& self) -> & Group17AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (680) . cast () } }
#[doc = "0x2ac - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group17_amr1_p (& self) -> & Group17Amr1P { & self . group17_amr1_p }
#[doc = "0x2b0 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group17_amr2_p (& self) -> & Group17Amr2P { & self . group17_amr2_p }
#[doc = "0x2b4 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group17_amr3_p (& self) -> & Group17Amr3P { & self . group17_amr3_p }
#[doc = "0x2b8 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group18_acr0_p (& self) -> & Group18Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (696) . cast () } }
#[doc = "0x2b8 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group18_acr_b (& self) -> & Group18AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (696) . cast () } }
#[doc = "0x2bc - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group18_acr1_p (& self) -> & Group18Acr1P { & self . group18_acr1_p }
#[doc = "0x2c0 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group18_acr2_p (& self) -> & Group18Acr2P { & self . group18_acr2_p }
#[doc = "0x2c4 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group18_acr3_p (& self) -> & Group18Acr3P { & self . group18_acr3_p }
#[doc = "0x2c8 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group18_amr0_p (& self) -> & Group18Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (712) . cast () } }
#[doc = "0x2c8 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group18_amr_b (& self) -> & Group18AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (712) . cast () } }
#[doc = "0x2cc - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group18_amr1_p (& self) -> & Group18Amr1P { & self . group18_amr1_p }
#[doc = "0x2d0 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group18_amr2_p (& self) -> & Group18Amr2P { & self . group18_amr2_p }
#[doc = "0x2d4 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group18_amr3_p (& self) -> & Group18Amr3P { & self . group18_amr3_p }
#[doc = "0x2d8 - Peli Acceptance Code register0"]
#[inline (always)] pub const fn group19_acr0_p (& self) -> & Group19Acr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (728) . cast () } }
#[doc = "0x2d8 - Basic Acceptance Code register"]
#[inline (always)] pub const fn group19_acr_b (& self) -> & Group19AcrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (728) . cast () } }
#[doc = "0x2dc - Peli Acceptance Code register1"]
#[inline (always)] pub const fn group19_acr1_p (& self) -> & Group19Acr1P { & self . group19_acr1_p }
#[doc = "0x2e0 - Peli Acceptance Code register2"]
#[inline (always)] pub const fn group19_acr2_p (& self) -> & Group19Acr2P { & self . group19_acr2_p }
#[doc = "0x2e4 - Peli Acceptance Code register3"]
#[inline (always)] pub const fn group19_acr3_p (& self) -> & Group19Acr3P { & self . group19_acr3_p }
#[doc = "0x2e8 - Peli Acceptance Mask register 0"]
#[inline (always)] pub const fn group19_amr0_p (& self) -> & Group19Amr0P { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (744) . cast () } }
#[doc = "0x2e8 - Basic Acceptance Mask register"]
#[inline (always)] pub const fn group19_amr_b (& self) -> & Group19AmrB { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (744) . cast () } }
#[doc = "0x2ec - Peli Acceptance Mask register 1"]
#[inline (always)] pub const fn group19_amr1_p (& self) -> & Group19Amr1P { & self . group19_amr1_p }
#[doc = "0x2f0 - Peli Acceptance Mask register 2"]
#[inline (always)] pub const fn group19_amr2_p (& self) -> & Group19Amr2P { & self . group19_amr2_p }
#[doc = "0x2f4 - Peli Acceptance Mask register 3"]
#[inline (always)] pub const fn group19_amr3_p (& self) -> & Group19Amr3P { & self . group19_amr3_p } }
#[doc = "CR_B (rw) register accessor: Basic control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr_b`] module"]
#[doc (alias = "CR_B")] pub type CrB = crate :: Reg < cr_b :: CrBSpec > ;
#[doc = "Basic control register"] pub mod cr_b {
#[doc = "Register `CR_B` reader"] pub type R = crate :: R < CrBSpec > ;
#[doc = "Register `CR_B` writer"] pub type W = crate :: W < CrBSpec > ;
#[doc = "Field `RR` reader - Reset request"] pub type RrR = crate :: BitReader ;
#[doc = "Field `RR` writer - Reset request"] pub type RrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RIE` reader - Receive interrupt enable"] pub type RieR = crate :: BitReader ;
#[doc = "Field `RIE` writer - Receive interrupt enable"] pub type RieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIE` reader - Transmit interrupt enable"] pub type TieR = crate :: BitReader ;
#[doc = "Field `TIE` writer - Transmit interrupt enable"] pub type TieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EIE` reader - Error interrupt enable"] pub type EieR = crate :: BitReader ;
#[doc = "Field `EIE` writer - Error interrupt enable"] pub type EieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIE` reader - Overflow interrupt enable"] pub type OieR = crate :: BitReader ;
#[doc = "Field `OIE` writer - Overflow interrupt enable"] pub type OieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Reset request"]
#[inline (always)] pub fn rr (& self) -> RrR { RrR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive interrupt enable"]
#[inline (always)] pub fn rie (& self) -> RieR { RieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmit interrupt enable"]
#[inline (always)] pub fn tie (& self) -> TieR { TieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Error interrupt enable"]
#[inline (always)] pub fn eie (& self) -> EieR { EieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Overflow interrupt enable"]
#[inline (always)] pub fn oie (& self) -> OieR { OieR :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Reset request"]
#[inline (always)] pub fn rr (& mut self) -> RrW < '_ , CrBSpec > { RrW :: new (self , 0) }
#[doc = "Bit 1 - Receive interrupt enable"]
#[inline (always)] pub fn rie (& mut self) -> RieW < '_ , CrBSpec > { RieW :: new (self , 1) }
#[doc = "Bit 2 - Transmit interrupt enable"]
#[inline (always)] pub fn tie (& mut self) -> TieW < '_ , CrBSpec > { TieW :: new (self , 2) }
#[doc = "Bit 3 - Error interrupt enable"]
#[inline (always)] pub fn eie (& mut self) -> EieW < '_ , CrBSpec > { EieW :: new (self , 3) }
#[doc = "Bit 4 - Overflow interrupt enable"]
#[inline (always)] pub fn oie (& mut self) -> OieW < '_ , CrBSpec > { OieW :: new (self , 4) } }
#[doc = "Basic control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrBSpec ; impl crate :: RegisterSpec for CrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr_b::R`](R) reader structure"] impl crate :: Readable for CrBSpec { }
#[doc = "`write(|w| ..)` method takes [`cr_b::W`](W) writer structure"] impl crate :: Writable for CrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR_B to value 0x21"] impl crate :: Resettable for CrBSpec { const RESET_VALUE : u32 = 0x21 ; } }
#[doc = "MOD_P (rw) register accessor: Peli Mode register\n\nYou can [`read`](crate::Reg::read) this register and get [`mod_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`mod_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mod_p`] module"]
#[doc (alias = "MOD_P")] pub type ModP = crate :: Reg < mod_p :: ModPSpec > ;
#[doc = "Peli Mode register"] pub mod mod_p {
#[doc = "Register `MOD_P` reader"] pub type R = crate :: R < ModPSpec > ;
#[doc = "Register `MOD_P` writer"] pub type W = crate :: W < ModPSpec > ;
#[doc = "Field `RM` reader - Reset mode"] pub type RmR = crate :: BitReader ;
#[doc = "Field `RM` writer - Reset mode"] pub type RmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LOM` reader - Listen only mode"] pub type LomR = crate :: BitReader ;
#[doc = "Field `LOM` writer - Listen only mode"] pub type LomW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `STM` reader - Self test mode"] pub type StmR = crate :: BitReader ;
#[doc = "Field `STM` writer - Self test mode"] pub type StmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `AFM` reader - Acceptance filter mode"] pub type AfmR = crate :: BitReader ;
#[doc = "Field `AFM` writer - Acceptance filter mode"] pub type AfmW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Reset mode"]
#[inline (always)] pub fn rm (& self) -> RmR { RmR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Listen only mode"]
#[inline (always)] pub fn lom (& self) -> LomR { LomR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Self test mode"]
#[inline (always)] pub fn stm (& self) -> StmR { StmR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Acceptance filter mode"]
#[inline (always)] pub fn afm (& self) -> AfmR { AfmR :: new (((self . bits >> 3) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Reset mode"]
#[inline (always)] pub fn rm (& mut self) -> RmW < '_ , ModPSpec > { RmW :: new (self , 0) }
#[doc = "Bit 1 - Listen only mode"]
#[inline (always)] pub fn lom (& mut self) -> LomW < '_ , ModPSpec > { LomW :: new (self , 1) }
#[doc = "Bit 2 - Self test mode"]
#[inline (always)] pub fn stm (& mut self) -> StmW < '_ , ModPSpec > { StmW :: new (self , 2) }
#[doc = "Bit 3 - Acceptance filter mode"]
#[inline (always)] pub fn afm (& mut self) -> AfmW < '_ , ModPSpec > { AfmW :: new (self , 3) } }
#[doc = "Peli Mode register\n\nYou can [`read`](crate::Reg::read) this register and get [`mod_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`mod_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ModPSpec ; impl crate :: RegisterSpec for ModPSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`mod_p::R`](R) reader structure"] impl crate :: Readable for ModPSpec { }
#[doc = "`write(|w| ..)` method takes [`mod_p::W`](W) writer structure"] impl crate :: Writable for ModPSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets MOD_P to value 0x01"] impl crate :: Resettable for ModPSpec { const RESET_VALUE : u32 = 0x01 ; } }
#[doc = "CMR_B (w) register accessor: Basic Command register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmr_b::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cmr_b`] module"]
#[doc (alias = "CMR_B")] pub type CmrB = crate :: Reg < cmr_b :: CmrBSpec > ;
#[doc = "Basic Command register"] pub mod cmr_b {
#[doc = "Register `CMR_B` writer"] pub type W = crate :: W < CmrBSpec > ;
#[doc = "Field `TR` writer - Transmission request"] pub type TrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `AT` writer - Abort transmission"] pub type AtW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RRB` writer - Release receive buffer"] pub type RrbW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CDO` writer - Clear data overrun"] pub type CdoW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ERB` writer - Empty Rxbuffer"] pub type ErbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - Transmission request"]
#[inline (always)] pub fn tr (& mut self) -> TrW < '_ , CmrBSpec > { TrW :: new (self , 0) }
#[doc = "Bit 1 - Abort transmission"]
#[inline (always)] pub fn at (& mut self) -> AtW < '_ , CmrBSpec > { AtW :: new (self , 1) }
#[doc = "Bit 2 - Release receive buffer"]
#[inline (always)] pub fn rrb (& mut self) -> RrbW < '_ , CmrBSpec > { RrbW :: new (self , 2) }
#[doc = "Bit 3 - Clear data overrun"]
#[inline (always)] pub fn cdo (& mut self) -> CdoW < '_ , CmrBSpec > { CdoW :: new (self , 3) }
#[doc = "Bit 5 - Empty Rxbuffer"]
#[inline (always)] pub fn erb (& mut self) -> ErbW < '_ , CmrBSpec > { ErbW :: new (self , 5) } }
#[doc = "Basic Command register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmr_b::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CmrBSpec ; impl crate :: RegisterSpec for CmrBSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`cmr_b::W`](W) writer structure"] impl crate :: Writable for CmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CMR_B to value 0xff"] impl crate :: Resettable for CmrBSpec { const RESET_VALUE : u32 = 0xff ; } }
#[doc = "CMR_P (w) register accessor: Peli Command register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmr_p::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cmr_p`] module"]
#[doc (alias = "CMR_P")] pub type CmrP = crate :: Reg < cmr_p :: CmrPSpec > ;
#[doc = "Peli Command register"] pub mod cmr_p {
#[doc = "Register `CMR_P` writer"] pub type W = crate :: W < CmrPSpec > ;
#[doc = "Field `TR` writer - Transmission request"] pub type TrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `AT` writer - Abort transmission"] pub type AtW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RRB` writer - Release receive buffer"] pub type RrbW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CDO` writer - Clear data overrun"] pub type CdoW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SRR` writer - Self reset request"] pub type SrrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ERB` writer - Empty Rxbuffer"] pub type ErbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - Transmission request"]
#[inline (always)] pub fn tr (& mut self) -> TrW < '_ , CmrPSpec > { TrW :: new (self , 0) }
#[doc = "Bit 1 - Abort transmission"]
#[inline (always)] pub fn at (& mut self) -> AtW < '_ , CmrPSpec > { AtW :: new (self , 1) }
#[doc = "Bit 2 - Release receive buffer"]
#[inline (always)] pub fn rrb (& mut self) -> RrbW < '_ , CmrPSpec > { RrbW :: new (self , 2) }
#[doc = "Bit 3 - Clear data overrun"]
#[inline (always)] pub fn cdo (& mut self) -> CdoW < '_ , CmrPSpec > { CdoW :: new (self , 3) }
#[doc = "Bit 4 - Self reset request"]
#[inline (always)] pub fn srr (& mut self) -> SrrW < '_ , CmrPSpec > { SrrW :: new (self , 4) }
#[doc = "Bit 5 - Empty Rxbuffer"]
#[inline (always)] pub fn erb (& mut self) -> ErbW < '_ , CmrPSpec > { ErbW :: new (self , 5) } }
#[doc = "Peli Command register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmr_p::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CmrPSpec ; impl crate :: RegisterSpec for CmrPSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`cmr_p::W`](W) writer structure"] impl crate :: Writable for CmrPSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CMR_P to value 0"] impl crate :: Resettable for CmrPSpec { } }
#[doc = "SR (rw) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "Status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ;
#[doc = "Field `RBS` reader - Receive buffer status"] pub type RbsR = crate :: BitReader ;
#[doc = "Field `RBS` writer - Receive buffer status"] pub type RbsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DOS` reader - Data overrun status"] pub type DosR = crate :: BitReader ;
#[doc = "Field `DOS` writer - Data overrun status"] pub type DosW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TBS` reader - Transmit buffer status"] pub type TbsR = crate :: BitReader ;
#[doc = "Field `TBS` writer - Transmit buffer status"] pub type TbsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TCS` reader - Transmission complete status"] pub type TcsR = crate :: BitReader ;
#[doc = "Field `TCS` writer - Transmission complete status"] pub type TcsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RS` reader - Receive status"] pub type RsR = crate :: BitReader ;
#[doc = "Field `RS` writer - Receive status"] pub type RsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TS` reader - Transmit status"] pub type TsR = crate :: BitReader ;
#[doc = "Field `TS` writer - Transmit status"] pub type TsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ES` reader - Error status"] pub type EsR = crate :: BitReader ;
#[doc = "Field `ES` writer - Error status"] pub type EsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS` reader - Bus status"] pub type BsR = crate :: BitReader ;
#[doc = "Field `BS` writer - Bus status"] pub type BsW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Receive buffer status"]
#[inline (always)] pub fn rbs (& self) -> RbsR { RbsR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Data overrun status"]
#[inline (always)] pub fn dos (& self) -> DosR { DosR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmit buffer status"]
#[inline (always)] pub fn tbs (& self) -> TbsR { TbsR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Transmission complete status"]
#[inline (always)] pub fn tcs (& self) -> TcsR { TcsR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Receive status"]
#[inline (always)] pub fn rs (& self) -> RsR { RsR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Transmit status"]
#[inline (always)] pub fn ts (& self) -> TsR { TsR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Error status"]
#[inline (always)] pub fn es (& self) -> EsR { EsR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Bus status"]
#[inline (always)] pub fn bs (& self) -> BsR { BsR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Receive buffer status"]
#[inline (always)] pub fn rbs (& mut self) -> RbsW < '_ , SrSpec > { RbsW :: new (self , 0) }
#[doc = "Bit 1 - Data overrun status"]
#[inline (always)] pub fn dos (& mut self) -> DosW < '_ , SrSpec > { DosW :: new (self , 1) }
#[doc = "Bit 2 - Transmit buffer status"]
#[inline (always)] pub fn tbs (& mut self) -> TbsW < '_ , SrSpec > { TbsW :: new (self , 2) }
#[doc = "Bit 3 - Transmission complete status"]
#[inline (always)] pub fn tcs (& mut self) -> TcsW < '_ , SrSpec > { TcsW :: new (self , 3) }
#[doc = "Bit 4 - Receive status"]
#[inline (always)] pub fn rs (& mut self) -> RsW < '_ , SrSpec > { RsW :: new (self , 4) }
#[doc = "Bit 5 - Transmit status"]
#[inline (always)] pub fn ts (& mut self) -> TsW < '_ , SrSpec > { TsW :: new (self , 5) }
#[doc = "Bit 6 - Error status"]
#[inline (always)] pub fn es (& mut self) -> EsW < '_ , SrSpec > { EsW :: new (self , 6) }
#[doc = "Bit 7 - Bus status"]
#[inline (always)] pub fn bs (& mut self) -> BsW < '_ , SrSpec > { BsW :: new (self , 7) } }
#[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SR to value 0x0c"] impl crate :: Resettable for SrSpec { const RESET_VALUE : u32 = 0x0c ; } }
#[doc = "IR_B (r) register accessor: Interrupt register\n\nYou can [`read`](crate::Reg::read) this register and get [`ir_b::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ir_b`] module"]
#[doc (alias = "IR_B")] pub type IrB = crate :: Reg < ir_b :: IrBSpec > ;
#[doc = "Interrupt register"] pub mod ir_b {
#[doc = "Register `IR_B` reader"] pub type R = crate :: R < IrBSpec > ;
#[doc = "Field `RI` reader - Receive interrupt"] pub type RiR = crate :: BitReader ;
#[doc = "Field `TI` reader - Transmit interrupt"] pub type TiR = crate :: BitReader ;
#[doc = "Field `EI` reader - Error interrupt"] pub type EiR = crate :: BitReader ;
#[doc = "Field `DOI` reader - Data overrun interrupt"] pub type DoiR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Receive interrupt"]
#[inline (always)] pub fn ri (& self) -> RiR { RiR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Transmit interrupt"]
#[inline (always)] pub fn ti (& self) -> TiR { TiR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Error interrupt"]
#[inline (always)] pub fn ei (& self) -> EiR { EiR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Data overrun interrupt"]
#[inline (always)] pub fn doi (& self) -> DoiR { DoiR :: new (((self . bits >> 3) & 1) != 0) } }
#[doc = "Interrupt register\n\nYou can [`read`](crate::Reg::read) this register and get [`ir_b::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IrBSpec ; impl crate :: RegisterSpec for IrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ir_b::R`](R) reader structure"] impl crate :: Readable for IrBSpec { }
#[doc = "`reset()` method sets IR_B to value 0xe0"] impl crate :: Resettable for IrBSpec { const RESET_VALUE : u32 = 0xe0 ; } }
#[doc = "IR_P (r) register accessor: Interrupt register\n\nYou can [`read`](crate::Reg::read) this register and get [`ir_p::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ir_p`] module"]
#[doc (alias = "IR_P")] pub type IrP = crate :: Reg < ir_p :: IrPSpec > ;
#[doc = "Interrupt register"] pub mod ir_p {
#[doc = "Register `IR_P` reader"] pub type R = crate :: R < IrPSpec > ;
#[doc = "Field `RI` reader - Receive interrupt"] pub type RiR = crate :: BitReader ;
#[doc = "Field `TI` reader - Transmit interrupt"] pub type TiR = crate :: BitReader ;
#[doc = "Field `EI` reader - Error interrupt"] pub type EiR = crate :: BitReader ;
#[doc = "Field `DOI` reader - Data overrun interrupt"] pub type DoiR = crate :: BitReader ;
#[doc = "Field `EPI` reader - Error passive interrupt"] pub type EpiR = crate :: BitReader ;
#[doc = "Field `ALI` reader - Arbitration lost interrupt"] pub type AliR = crate :: BitReader ;
#[doc = "Field `BEI` reader - Bus error interrupt"] pub type BeiR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Receive interrupt"]
#[inline (always)] pub fn ri (& self) -> RiR { RiR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Transmit interrupt"]
#[inline (always)] pub fn ti (& self) -> TiR { TiR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Error interrupt"]
#[inline (always)] pub fn ei (& self) -> EiR { EiR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Data overrun interrupt"]
#[inline (always)] pub fn doi (& self) -> DoiR { DoiR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 5 - Error passive interrupt"]
#[inline (always)] pub fn epi (& self) -> EpiR { EpiR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Arbitration lost interrupt"]
#[inline (always)] pub fn ali (& self) -> AliR { AliR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Bus error interrupt"]
#[inline (always)] pub fn bei (& self) -> BeiR { BeiR :: new (((self . bits >> 7) & 1) != 0) } }
#[doc = "Interrupt register\n\nYou can [`read`](crate::Reg::read) this register and get [`ir_p::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IrPSpec ; impl crate :: RegisterSpec for IrPSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ir_p::R`](R) reader structure"] impl crate :: Readable for IrPSpec { }
#[doc = "`reset()` method sets IR_P to value 0"] impl crate :: Resettable for IrPSpec { } }
#[doc = "GROUP0_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_acr_b`] module"]
#[doc (alias = "GROUP0_ACR_B")] pub type Group0AcrB = crate :: Reg < group0_acr_b :: Group0AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group0_acr_b {
#[doc = "Register `GROUP0_ACR_B` reader"] pub type R = crate :: R < Group0AcrBSpec > ;
#[doc = "Register `GROUP0_ACR_B` writer"] pub type W = crate :: W < Group0AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group0AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0AcrBSpec ; impl crate :: RegisterSpec for Group0AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_acr_b::R`](R) reader structure"] impl crate :: Readable for Group0AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_acr_b::W`](W) writer structure"] impl crate :: Writable for Group0AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_ACR_B to value 0"] impl crate :: Resettable for Group0AcrBSpec { } }
#[doc = "IER_P (rw) register accessor: Peli Interrupt Enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ier_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ier_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ier_p`] module"]
#[doc (alias = "IER_P")] pub type IerP = crate :: Reg < ier_p :: IerPSpec > ;
#[doc = "Peli Interrupt Enable register"] pub mod ier_p {
#[doc = "Register `IER_P` reader"] pub type R = crate :: R < IerPSpec > ;
#[doc = "Register `IER_P` writer"] pub type W = crate :: W < IerPSpec > ;
#[doc = "Field `RIE` reader - Receive interrupt enable"] pub type RieR = crate :: BitReader ;
#[doc = "Field `RIE` writer - Receive interrupt enable"] pub type RieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIE` reader - Transmit interrupt enable"] pub type TieR = crate :: BitReader ;
#[doc = "Field `TIE` writer - Transmit interrupt enable"] pub type TieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EIE` reader - Error interrupt enable"] pub type EieR = crate :: BitReader ;
#[doc = "Field `EIE` writer - Error interrupt enable"] pub type EieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DOIE` reader - Data overrun interrupt enable"] pub type DoieR = crate :: BitReader ;
#[doc = "Field `DOIE` writer - Data overrun interrupt enable"] pub type DoieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EPIE` reader - Error passive interrupt enable"] pub type EpieR = crate :: BitReader ;
#[doc = "Field `EPIE` writer - Error passive interrupt enable"] pub type EpieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ALIE` reader - Arbitration lost interrupt enable"] pub type AlieR = crate :: BitReader ;
#[doc = "Field `ALIE` writer - Arbitration lost interrupt enable"] pub type AlieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BEIE` reader - Bus error interrupt enable"] pub type BeieR = crate :: BitReader ;
#[doc = "Field `BEIE` writer - Bus error interrupt enable"] pub type BeieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Receive interrupt enable"]
#[inline (always)] pub fn rie (& self) -> RieR { RieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Transmit interrupt enable"]
#[inline (always)] pub fn tie (& self) -> TieR { TieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Error interrupt enable"]
#[inline (always)] pub fn eie (& self) -> EieR { EieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Data overrun interrupt enable"]
#[inline (always)] pub fn doie (& self) -> DoieR { DoieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 5 - Error passive interrupt enable"]
#[inline (always)] pub fn epie (& self) -> EpieR { EpieR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Arbitration lost interrupt enable"]
#[inline (always)] pub fn alie (& self) -> AlieR { AlieR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Bus error interrupt enable"]
#[inline (always)] pub fn beie (& self) -> BeieR { BeieR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Receive interrupt enable"]
#[inline (always)] pub fn rie (& mut self) -> RieW < '_ , IerPSpec > { RieW :: new (self , 0) }
#[doc = "Bit 1 - Transmit interrupt enable"]
#[inline (always)] pub fn tie (& mut self) -> TieW < '_ , IerPSpec > { TieW :: new (self , 1) }
#[doc = "Bit 2 - Error interrupt enable"]
#[inline (always)] pub fn eie (& mut self) -> EieW < '_ , IerPSpec > { EieW :: new (self , 2) }
#[doc = "Bit 3 - Data overrun interrupt enable"]
#[inline (always)] pub fn doie (& mut self) -> DoieW < '_ , IerPSpec > { DoieW :: new (self , 3) }
#[doc = "Bit 5 - Error passive interrupt enable"]
#[inline (always)] pub fn epie (& mut self) -> EpieW < '_ , IerPSpec > { EpieW :: new (self , 5) }
#[doc = "Bit 6 - Arbitration lost interrupt enable"]
#[inline (always)] pub fn alie (& mut self) -> AlieW < '_ , IerPSpec > { AlieW :: new (self , 6) }
#[doc = "Bit 7 - Bus error interrupt enable"]
#[inline (always)] pub fn beie (& mut self) -> BeieW < '_ , IerPSpec > { BeieW :: new (self , 7) } }
#[doc = "Peli Interrupt Enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ier_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ier_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IerPSpec ; impl crate :: RegisterSpec for IerPSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ier_p::R`](R) reader structure"] impl crate :: Readable for IerPSpec { }
#[doc = "`write(|w| ..)` method takes [`ier_p::W`](W) writer structure"] impl crate :: Writable for IerPSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets IER_P to value 0"] impl crate :: Resettable for IerPSpec { } }
#[doc = "GROUP0_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_amr_b`] module"]
#[doc (alias = "GROUP0_AMR_B")] pub type Group0AmrB = crate :: Reg < group0_amr_b :: Group0AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group0_amr_b {
#[doc = "Register `GROUP0_AMR_B` reader"] pub type R = crate :: R < Group0AmrBSpec > ;
#[doc = "Register `GROUP0_AMR_B` writer"] pub type W = crate :: W < Group0AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group0AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0AmrBSpec ; impl crate :: RegisterSpec for Group0AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_amr_b::R`](R) reader structure"] impl crate :: Readable for Group0AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_amr_b::W`](W) writer structure"] impl crate :: Writable for Group0AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_AMR_B to value 0"] impl crate :: Resettable for Group0AmrBSpec { } }
#[doc = "BTR0 (rw) register accessor: Bus Timing register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`btr0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`btr0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@btr0`] module"]
#[doc (alias = "BTR0")] pub type Btr0 = crate :: Reg < btr0 :: Btr0Spec > ;
#[doc = "Bus Timing register 0"] pub mod btr0 {
#[doc = "Register `BTR0` reader"] pub type R = crate :: R < Btr0Spec > ;
#[doc = "Register `BTR0` writer"] pub type W = crate :: W < Btr0Spec > ;
#[doc = "Field `BRP` reader - Baud rate prescaler"] pub type BrpR = crate :: FieldReader ;
#[doc = "Field `BRP` writer - Baud rate prescaler"] pub type BrpW < 'a , REG > = crate :: FieldWriter < 'a , REG , 6 > ;
#[doc = "Field `SJW` reader - Synchronization jump width"] pub type SjwR = crate :: FieldReader ;
#[doc = "Field `SJW` writer - Synchronization jump width"] pub type SjwW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bits 0:5 - Baud rate prescaler"]
#[inline (always)] pub fn brp (& self) -> BrpR { BrpR :: new ((self . bits & 0x3f) as u8) }
#[doc = "Bits 6:7 - Synchronization jump width"]
#[inline (always)] pub fn sjw (& self) -> SjwR { SjwR :: new (((self . bits >> 6) & 3) as u8) } } impl W {
#[doc = "Bits 0:5 - Baud rate prescaler"]
#[inline (always)] pub fn brp (& mut self) -> BrpW < '_ , Btr0Spec > { BrpW :: new (self , 0) }
#[doc = "Bits 6:7 - Synchronization jump width"]
#[inline (always)] pub fn sjw (& mut self) -> SjwW < '_ , Btr0Spec > { SjwW :: new (self , 6) } }
#[doc = "Bus Timing register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`btr0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`btr0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Btr0Spec ; impl crate :: RegisterSpec for Btr0Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`btr0::R`](R) reader structure"] impl crate :: Readable for Btr0Spec { }
#[doc = "`write(|w| ..)` method takes [`btr0::W`](W) writer structure"] impl crate :: Writable for Btr0Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets BTR0 to value 0"] impl crate :: Resettable for Btr0Spec { } }
#[doc = "BTR1 (rw) register accessor: Bus Timing register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`btr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`btr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@btr1`] module"]
#[doc (alias = "BTR1")] pub type Btr1 = crate :: Reg < btr1 :: Btr1Spec > ;
#[doc = "Bus Timing register 1"] pub mod btr1 {
#[doc = "Register `BTR1` reader"] pub type R = crate :: R < Btr1Spec > ;
#[doc = "Register `BTR1` writer"] pub type W = crate :: W < Btr1Spec > ;
#[doc = "Field `TSEG1` reader - Time segment 1"] pub type Tseg1R = crate :: FieldReader ;
#[doc = "Field `TSEG1` writer - Time segment 1"] pub type Tseg1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `TSEG2` reader - Time segment 2"] pub type Tseg2R = crate :: FieldReader ;
#[doc = "Field `TSEG2` writer - Time segment 2"] pub type Tseg2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `SAM` reader - Sampling"] pub type SamR = crate :: BitReader ;
#[doc = "Field `SAM` writer - Sampling"] pub type SamW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:3 - Time segment 1"]
#[inline (always)] pub fn tseg1 (& self) -> Tseg1R { Tseg1R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:6 - Time segment 2"]
#[inline (always)] pub fn tseg2 (& self) -> Tseg2R { Tseg2R :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Sampling"]
#[inline (always)] pub fn sam (& self) -> SamR { SamR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bits 0:3 - Time segment 1"]
#[inline (always)] pub fn tseg1 (& mut self) -> Tseg1W < '_ , Btr1Spec > { Tseg1W :: new (self , 0) }
#[doc = "Bits 4:6 - Time segment 2"]
#[inline (always)] pub fn tseg2 (& mut self) -> Tseg2W < '_ , Btr1Spec > { Tseg2W :: new (self , 4) }
#[doc = "Bit 7 - Sampling"]
#[inline (always)] pub fn sam (& mut self) -> SamW < '_ , Btr1Spec > { SamW :: new (self , 7) } }
#[doc = "Bus Timing register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`btr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`btr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Btr1Spec ; impl crate :: RegisterSpec for Btr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`btr1::R`](R) reader structure"] impl crate :: Readable for Btr1Spec { }
#[doc = "`write(|w| ..)` method takes [`btr1::W`](W) writer structure"] impl crate :: Writable for Btr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets BTR1 to value 0"] impl crate :: Resettable for Btr1Spec { } }
#[doc = "TXID0_B (rw) register accessor: Basic TX ID register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`txid0_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txid0_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txid0_b`] module"]
#[doc (alias = "TXID0_B")] pub type Txid0B = crate :: Reg < txid0_b :: Txid0BSpec > ;
#[doc = "Basic TX ID register 0"] pub mod txid0_b {
#[doc = "Register `TXID0_B` reader"] pub type R = crate :: R < Txid0BSpec > ;
#[doc = "Register `TXID0_B` writer"] pub type W = crate :: W < Txid0BSpec > ;
#[doc = "Field `ID3` reader - Identifier bit 3"] pub type Id3R = crate :: BitReader ;
#[doc = "Field `ID3` writer - Identifier bit 3"] pub type Id3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID4` reader - Identifier bit 4"] pub type Id4R = crate :: BitReader ;
#[doc = "Field `ID4` writer - Identifier bit 4"] pub type Id4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID5` reader - Identifier bit 5"] pub type Id5R = crate :: BitReader ;
#[doc = "Field `ID5` writer - Identifier bit 5"] pub type Id5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID6` reader - Identifier bit 6"] pub type Id6R = crate :: BitReader ;
#[doc = "Field `ID6` writer - Identifier bit 6"] pub type Id6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID7` reader - Identifier bit 7"] pub type Id7R = crate :: BitReader ;
#[doc = "Field `ID7` writer - Identifier bit 7"] pub type Id7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID8` reader - Identifier bit 8"] pub type Id8R = crate :: BitReader ;
#[doc = "Field `ID8` writer - Identifier bit 8"] pub type Id8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID9` reader - Identifier bit 9"] pub type Id9R = crate :: BitReader ;
#[doc = "Field `ID9` writer - Identifier bit 9"] pub type Id9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID10` reader - Identifier bit 10"] pub type Id10R = crate :: BitReader ;
#[doc = "Field `ID10` writer - Identifier bit 10"] pub type Id10W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Identifier bit 3"]
#[inline (always)] pub fn id3 (& self) -> Id3R { Id3R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Identifier bit 4"]
#[inline (always)] pub fn id4 (& self) -> Id4R { Id4R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Identifier bit 5"]
#[inline (always)] pub fn id5 (& self) -> Id5R { Id5R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Identifier bit 6"]
#[inline (always)] pub fn id6 (& self) -> Id6R { Id6R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Identifier bit 7"]
#[inline (always)] pub fn id7 (& self) -> Id7R { Id7R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Identifier bit 8"]
#[inline (always)] pub fn id8 (& self) -> Id8R { Id8R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Identifier bit 9"]
#[inline (always)] pub fn id9 (& self) -> Id9R { Id9R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Identifier bit 10"]
#[inline (always)] pub fn id10 (& self) -> Id10R { Id10R :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Identifier bit 3"]
#[inline (always)] pub fn id3 (& mut self) -> Id3W < '_ , Txid0BSpec > { Id3W :: new (self , 0) }
#[doc = "Bit 1 - Identifier bit 4"]
#[inline (always)] pub fn id4 (& mut self) -> Id4W < '_ , Txid0BSpec > { Id4W :: new (self , 1) }
#[doc = "Bit 2 - Identifier bit 5"]
#[inline (always)] pub fn id5 (& mut self) -> Id5W < '_ , Txid0BSpec > { Id5W :: new (self , 2) }
#[doc = "Bit 3 - Identifier bit 6"]
#[inline (always)] pub fn id6 (& mut self) -> Id6W < '_ , Txid0BSpec > { Id6W :: new (self , 3) }
#[doc = "Bit 4 - Identifier bit 7"]
#[inline (always)] pub fn id7 (& mut self) -> Id7W < '_ , Txid0BSpec > { Id7W :: new (self , 4) }
#[doc = "Bit 5 - Identifier bit 8"]
#[inline (always)] pub fn id8 (& mut self) -> Id8W < '_ , Txid0BSpec > { Id8W :: new (self , 5) }
#[doc = "Bit 6 - Identifier bit 9"]
#[inline (always)] pub fn id9 (& mut self) -> Id9W < '_ , Txid0BSpec > { Id9W :: new (self , 6) }
#[doc = "Bit 7 - Identifier bit 10"]
#[inline (always)] pub fn id10 (& mut self) -> Id10W < '_ , Txid0BSpec > { Id10W :: new (self , 7) } }
#[doc = "Basic TX ID register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`txid0_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txid0_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txid0BSpec ; impl crate :: RegisterSpec for Txid0BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txid0_b::R`](R) reader structure"] impl crate :: Readable for Txid0BSpec { }
#[doc = "`write(|w| ..)` method takes [`txid0_b::W`](W) writer structure"] impl crate :: Writable for Txid0BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXID0_B to value 0"] impl crate :: Resettable for Txid0BSpec { } }
#[doc = "TXID1_B (rw) register accessor: Basic TX ID register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txid1_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txid1_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txid1_b`] module"]
#[doc (alias = "TXID1_B")] pub type Txid1B = crate :: Reg < txid1_b :: Txid1BSpec > ;
#[doc = "Basic TX ID register 1"] pub mod txid1_b {
#[doc = "Register `TXID1_B` reader"] pub type R = crate :: R < Txid1BSpec > ;
#[doc = "Register `TXID1_B` writer"] pub type W = crate :: W < Txid1BSpec > ;
#[doc = "Field `DLC` reader - Data length code"] pub type DlcR = crate :: FieldReader ;
#[doc = "Field `DLC` writer - Data length code"] pub type DlcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `RTR` reader - Remote transmission request"] pub type RtrR = crate :: BitReader ;
#[doc = "Field `RTR` writer - Remote transmission request"] pub type RtrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID0` reader - Identifier bit 0"] pub type Id0R = crate :: BitReader ;
#[doc = "Field `ID0` writer - Identifier bit 0"] pub type Id0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID1` reader - Identifier bit 1"] pub type Id1R = crate :: BitReader ;
#[doc = "Field `ID1` writer - Identifier bit 1"] pub type Id1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID2` reader - Identifier bit 2"] pub type Id2R = crate :: BitReader ;
#[doc = "Field `ID2` writer - Identifier bit 2"] pub type Id2W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:3 - Data length code"]
#[inline (always)] pub fn dlc (& self) -> DlcR { DlcR :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bit 4 - Remote transmission request"]
#[inline (always)] pub fn rtr (& self) -> RtrR { RtrR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Identifier bit 0"]
#[inline (always)] pub fn id0 (& self) -> Id0R { Id0R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Identifier bit 1"]
#[inline (always)] pub fn id1 (& self) -> Id1R { Id1R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Identifier bit 2"]
#[inline (always)] pub fn id2 (& self) -> Id2R { Id2R :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bits 0:3 - Data length code"]
#[inline (always)] pub fn dlc (& mut self) -> DlcW < '_ , Txid1BSpec > { DlcW :: new (self , 0) }
#[doc = "Bit 4 - Remote transmission request"]
#[inline (always)] pub fn rtr (& mut self) -> RtrW < '_ , Txid1BSpec > { RtrW :: new (self , 4) }
#[doc = "Bit 5 - Identifier bit 0"]
#[inline (always)] pub fn id0 (& mut self) -> Id0W < '_ , Txid1BSpec > { Id0W :: new (self , 5) }
#[doc = "Bit 6 - Identifier bit 1"]
#[inline (always)] pub fn id1 (& mut self) -> Id1W < '_ , Txid1BSpec > { Id1W :: new (self , 6) }
#[doc = "Bit 7 - Identifier bit 2"]
#[inline (always)] pub fn id2 (& mut self) -> Id2W < '_ , Txid1BSpec > { Id2W :: new (self , 7) } }
#[doc = "Basic TX ID register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txid1_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txid1_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txid1BSpec ; impl crate :: RegisterSpec for Txid1BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txid1_b::R`](R) reader structure"] impl crate :: Readable for Txid1BSpec { }
#[doc = "`write(|w| ..)` method takes [`txid1_b::W`](W) writer structure"] impl crate :: Writable for Txid1BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXID1_B to value 0"] impl crate :: Resettable for Txid1BSpec { } }
#[doc = "ALC_P (rw) register accessor: Peli Arbitration Lost Capture register\n\nYou can [`read`](crate::Reg::read) this register and get [`alc_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`alc_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@alc_p`] module"]
#[doc (alias = "ALC_P")] pub type AlcP = crate :: Reg < alc_p :: AlcPSpec > ;
#[doc = "Peli Arbitration Lost Capture register"] pub mod alc_p {
#[doc = "Register `ALC_P` reader"] pub type R = crate :: R < AlcPSpec > ;
#[doc = "Register `ALC_P` writer"] pub type W = crate :: W < AlcPSpec > ;
#[doc = "Field `BITNO` reader - Bit number"] pub type BitnoR = crate :: FieldReader ;
#[doc = "Field `BITNO` writer - Bit number"] pub type BitnoW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ; impl R {
#[doc = "Bits 0:4 - Bit number"]
#[inline (always)] pub fn bitno (& self) -> BitnoR { BitnoR :: new ((self . bits & 0x1f) as u8) } } impl W {
#[doc = "Bits 0:4 - Bit number"]
#[inline (always)] pub fn bitno (& mut self) -> BitnoW < '_ , AlcPSpec > { BitnoW :: new (self , 0) } }
#[doc = "Peli Arbitration Lost Capture register\n\nYou can [`read`](crate::Reg::read) this register and get [`alc_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`alc_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AlcPSpec ; impl crate :: RegisterSpec for AlcPSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`alc_p::R`](R) reader structure"] impl crate :: Readable for AlcPSpec { }
#[doc = "`write(|w| ..)` method takes [`alc_p::W`](W) writer structure"] impl crate :: Writable for AlcPSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ALC_P to value 0"] impl crate :: Resettable for AlcPSpec { } }
#[doc = "TXDR0_B (rw) register accessor: Basic TX Data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr0_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr0_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdr0_b`] module"]
#[doc (alias = "TXDR0_B")] pub type Txdr0B = crate :: Reg < txdr0_b :: Txdr0BSpec > ;
#[doc = "Basic TX Data register 0"] pub mod txdr0_b {
#[doc = "Register `TXDR0_B` reader"] pub type R = crate :: R < Txdr0BSpec > ;
#[doc = "Register `TXDR0_B` writer"] pub type W = crate :: W < Txdr0BSpec > ;
#[doc = "Field `TXDR0` reader - Transmit data register"] pub type Txdr0R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXDR0` writer - Transmit data register"] pub type Txdr0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr0 (& self) -> Txdr0R { Txdr0R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr0 (& mut self) -> Txdr0W < '_ , Txdr0BSpec > { Txdr0W :: new (self , 0) } }
#[doc = "Basic TX Data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr0_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr0_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdr0BSpec ; impl crate :: RegisterSpec for Txdr0BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdr0_b::R`](R) reader structure"] impl crate :: Readable for Txdr0BSpec { }
#[doc = "`write(|w| ..)` method takes [`txdr0_b::W`](W) writer structure"] impl crate :: Writable for Txdr0BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDR0_B to value 0"] impl crate :: Resettable for Txdr0BSpec { } }
#[doc = "ECC_P (r) register accessor: Peli Error Code Capture register\n\nYou can [`read`](crate::Reg::read) this register and get [`ecc_p::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ecc_p`] module"]
#[doc (alias = "ECC_P")] pub type EccP = crate :: Reg < ecc_p :: EccPSpec > ;
#[doc = "Peli Error Code Capture register"] pub mod ecc_p {
#[doc = "Register `ECC_P` reader"] pub type R = crate :: R < EccPSpec > ;
#[doc = "Field `SEG` reader - SEG"] pub type SegR = crate :: FieldReader ;
#[doc = "Field `DIR` reader - Direction"] pub type DirR = crate :: BitReader ;
#[doc = "Field `ERRC` reader - Error code"] pub type ErrcR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:4 - SEG"]
#[inline (always)] pub fn seg (& self) -> SegR { SegR :: new ((self . bits & 0x1f) as u8) }
#[doc = "Bit 5 - Direction"]
#[inline (always)] pub fn dir (& self) -> DirR { DirR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bits 6:7 - Error code"]
#[inline (always)] pub fn errc (& self) -> ErrcR { ErrcR :: new (((self . bits >> 6) & 3) as u8) } }
#[doc = "Peli Error Code Capture register\n\nYou can [`read`](crate::Reg::read) this register and get [`ecc_p::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EccPSpec ; impl crate :: RegisterSpec for EccPSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ecc_p::R`](R) reader structure"] impl crate :: Readable for EccPSpec { }
#[doc = "`reset()` method sets ECC_P to value 0"] impl crate :: Resettable for EccPSpec { } }
#[doc = "TXDR1_B (rw) register accessor: Basic TX Data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr1_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr1_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdr1_b`] module"]
#[doc (alias = "TXDR1_B")] pub type Txdr1B = crate :: Reg < txdr1_b :: Txdr1BSpec > ;
#[doc = "Basic TX Data register 1"] pub mod txdr1_b {
#[doc = "Register `TXDR1_B` reader"] pub type R = crate :: R < Txdr1BSpec > ;
#[doc = "Register `TXDR1_B` writer"] pub type W = crate :: W < Txdr1BSpec > ;
#[doc = "Field `TXDR1` reader - Transmit data register"] pub type Txdr1R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXDR1` writer - Transmit data register"] pub type Txdr1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr1 (& self) -> Txdr1R { Txdr1R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr1 (& mut self) -> Txdr1W < '_ , Txdr1BSpec > { Txdr1W :: new (self , 0) } }
#[doc = "Basic TX Data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr1_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr1_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdr1BSpec ; impl crate :: RegisterSpec for Txdr1BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdr1_b::R`](R) reader structure"] impl crate :: Readable for Txdr1BSpec { }
#[doc = "`write(|w| ..)` method takes [`txdr1_b::W`](W) writer structure"] impl crate :: Writable for Txdr1BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDR1_B to value 0"] impl crate :: Resettable for Txdr1BSpec { } }
#[doc = "EWLR_P (rw) register accessor: Peli Error Warning Limit register\n\nYou can [`read`](crate::Reg::read) this register and get [`ewlr_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ewlr_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ewlr_p`] module"]
#[doc (alias = "EWLR_P")] pub type EwlrP = crate :: Reg < ewlr_p :: EwlrPSpec > ;
#[doc = "Peli Error Warning Limit register"] pub mod ewlr_p {
#[doc = "Register `EWLR_P` reader"] pub type R = crate :: R < EwlrPSpec > ;
#[doc = "Register `EWLR_P` writer"] pub type W = crate :: W < EwlrPSpec > ;
#[doc = "Field `EWL` reader - Programmable error warning limit"] pub type EwlR = crate :: FieldReader ;
#[doc = "Field `EWL` writer - Programmable error warning limit"] pub type EwlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Programmable error warning limit"]
#[inline (always)] pub fn ewl (& self) -> EwlR { EwlR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Programmable error warning limit"]
#[inline (always)] pub fn ewl (& mut self) -> EwlW < '_ , EwlrPSpec > { EwlW :: new (self , 0) } }
#[doc = "Peli Error Warning Limit register\n\nYou can [`read`](crate::Reg::read) this register and get [`ewlr_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ewlr_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EwlrPSpec ; impl crate :: RegisterSpec for EwlrPSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ewlr_p::R`](R) reader structure"] impl crate :: Readable for EwlrPSpec { }
#[doc = "`write(|w| ..)` method takes [`ewlr_p::W`](W) writer structure"] impl crate :: Writable for EwlrPSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EWLR_P to value 0x60"] impl crate :: Resettable for EwlrPSpec { const RESET_VALUE : u32 = 0x60 ; } }
#[doc = "TXDR2_B (rw) register accessor: Basic Send Data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr2_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr2_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdr2_b`] module"]
#[doc (alias = "TXDR2_B")] pub type Txdr2B = crate :: Reg < txdr2_b :: Txdr2BSpec > ;
#[doc = "Basic Send Data register 2"] pub mod txdr2_b {
#[doc = "Register `TXDR2_B` reader"] pub type R = crate :: R < Txdr2BSpec > ;
#[doc = "Register `TXDR2_B` writer"] pub type W = crate :: W < Txdr2BSpec > ;
#[doc = "Field `TXDR2` reader - Transmit data register"] pub type Txdr2R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXDR2` writer - Transmit data register"] pub type Txdr2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr2 (& self) -> Txdr2R { Txdr2R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr2 (& mut self) -> Txdr2W < '_ , Txdr2BSpec > { Txdr2W :: new (self , 0) } }
#[doc = "Basic Send Data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr2_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr2_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdr2BSpec ; impl crate :: RegisterSpec for Txdr2BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdr2_b::R`](R) reader structure"] impl crate :: Readable for Txdr2BSpec { }
#[doc = "`write(|w| ..)` method takes [`txdr2_b::W`](W) writer structure"] impl crate :: Writable for Txdr2BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDR2_B to value 0"] impl crate :: Resettable for Txdr2BSpec { } }
#[doc = "RXERR_P (rw) register accessor: Peli RX Error Counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`rxerr_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxerr_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxerr_p`] module"]
#[doc (alias = "RXERR_P")] pub type RxerrP = crate :: Reg < rxerr_p :: RxerrPSpec > ;
#[doc = "Peli RX Error Counter register"] pub mod rxerr_p {
#[doc = "Register `RXERR_P` reader"] pub type R = crate :: R < RxerrPSpec > ;
#[doc = "Register `RXERR_P` writer"] pub type W = crate :: W < RxerrPSpec > ;
#[doc = "Field `RXERR` reader - RX error counter register"] pub type RxerrR = crate :: FieldReader ;
#[doc = "Field `RXERR` writer - RX error counter register"] pub type RxerrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - RX error counter register"]
#[inline (always)] pub fn rxerr (& self) -> RxerrR { RxerrR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - RX error counter register"]
#[inline (always)] pub fn rxerr (& mut self) -> RxerrW < '_ , RxerrPSpec > { RxerrW :: new (self , 0) } }
#[doc = "Peli RX Error Counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`rxerr_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxerr_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxerrPSpec ; impl crate :: RegisterSpec for RxerrPSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rxerr_p::R`](R) reader structure"] impl crate :: Readable for RxerrPSpec { }
#[doc = "`write(|w| ..)` method takes [`rxerr_p::W`](W) writer structure"] impl crate :: Writable for RxerrPSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RXERR_P to value 0"] impl crate :: Resettable for RxerrPSpec { } }
#[doc = "TXDR3_B (rw) register accessor: Basic TX Data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr3_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr3_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdr3_b`] module"]
#[doc (alias = "TXDR3_B")] pub type Txdr3B = crate :: Reg < txdr3_b :: Txdr3BSpec > ;
#[doc = "Basic TX Data register 3"] pub mod txdr3_b {
#[doc = "Register `TXDR3_B` reader"] pub type R = crate :: R < Txdr3BSpec > ;
#[doc = "Register `TXDR3_B` writer"] pub type W = crate :: W < Txdr3BSpec > ;
#[doc = "Field `TXDR3` reader - Transmit data register"] pub type Txdr3R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXDR3` writer - Transmit data register"] pub type Txdr3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr3 (& self) -> Txdr3R { Txdr3R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr3 (& mut self) -> Txdr3W < '_ , Txdr3BSpec > { Txdr3W :: new (self , 0) } }
#[doc = "Basic TX Data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr3_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr3_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdr3BSpec ; impl crate :: RegisterSpec for Txdr3BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdr3_b::R`](R) reader structure"] impl crate :: Readable for Txdr3BSpec { }
#[doc = "`write(|w| ..)` method takes [`txdr3_b::W`](W) writer structure"] impl crate :: Writable for Txdr3BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDR3_B to value 0"] impl crate :: Resettable for Txdr3BSpec { } }
#[doc = "TXERR_P (rw) register accessor: Peli TX Error Counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`txerr_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txerr_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txerr_p`] module"]
#[doc (alias = "TXERR_P")] pub type TxerrP = crate :: Reg < txerr_p :: TxerrPSpec > ;
#[doc = "Peli TX Error Counter register"] pub mod txerr_p {
#[doc = "Register `TXERR_P` reader"] pub type R = crate :: R < TxerrPSpec > ;
#[doc = "Register `TXERR_P` writer"] pub type W = crate :: W < TxerrPSpec > ;
#[doc = "Field `TXERR` reader - TX error counter register"] pub type TxerrR = crate :: FieldReader ;
#[doc = "Field `TXERR` writer - TX error counter register"] pub type TxerrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - TX error counter register"]
#[inline (always)] pub fn txerr (& self) -> TxerrR { TxerrR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - TX error counter register"]
#[inline (always)] pub fn txerr (& mut self) -> TxerrW < '_ , TxerrPSpec > { TxerrW :: new (self , 0) } }
#[doc = "Peli TX Error Counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`txerr_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txerr_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TxerrPSpec ; impl crate :: RegisterSpec for TxerrPSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txerr_p::R`](R) reader structure"] impl crate :: Readable for TxerrPSpec { }
#[doc = "`write(|w| ..)` method takes [`txerr_p::W`](W) writer structure"] impl crate :: Writable for TxerrPSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXERR_P to value 0"] impl crate :: Resettable for TxerrPSpec { } }
#[doc = "TXDR4_B (rw) register accessor: Basic TX Data register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr4_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr4_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdr4_b`] module"]
#[doc (alias = "TXDR4_B")] pub type Txdr4B = crate :: Reg < txdr4_b :: Txdr4BSpec > ;
#[doc = "Basic TX Data register 4"] pub mod txdr4_b {
#[doc = "Register `TXDR4_B` reader"] pub type R = crate :: R < Txdr4BSpec > ;
#[doc = "Register `TXDR4_B` writer"] pub type W = crate :: W < Txdr4BSpec > ;
#[doc = "Field `TXDR4` reader - Transmit data register"] pub type Txdr4R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXDR4` writer - Transmit data register"] pub type Txdr4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr4 (& self) -> Txdr4R { Txdr4R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr4 (& mut self) -> Txdr4W < '_ , Txdr4BSpec > { Txdr4W :: new (self , 0) } }
#[doc = "Basic TX Data register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr4_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr4_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdr4BSpec ; impl crate :: RegisterSpec for Txdr4BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdr4_b::R`](R) reader structure"] impl crate :: Readable for Txdr4BSpec { }
#[doc = "`write(|w| ..)` method takes [`txdr4_b::W`](W) writer structure"] impl crate :: Writable for Txdr4BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDR4_B to value 0"] impl crate :: Resettable for Txdr4BSpec { } }
#[doc = "SFF_P (rw) register accessor: Peli Send Frame Format register\n\nYou can [`read`](crate::Reg::read) this register and get [`sff_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sff_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sff_p`] module"]
#[doc (alias = "SFF_P")] pub type SffP = crate :: Reg < sff_p :: SffPSpec > ;
#[doc = "Peli Send Frame Format register"] pub mod sff_p {
#[doc = "Register `SFF_P` reader"] pub type R = crate :: R < SffPSpec > ;
#[doc = "Register `SFF_P` writer"] pub type W = crate :: W < SffPSpec > ;
#[doc = "Field `DLC` reader - Data length code bit"] pub type DlcR = crate :: FieldReader ;
#[doc = "Field `DLC` writer - Data length code bit"] pub type DlcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `RTR` reader - Remote transmission request"] pub type RtrR = crate :: BitReader ;
#[doc = "Field `RTR` writer - Remote transmission request"] pub type RtrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `FF` reader - Frame format"] pub type FfR = crate :: BitReader ;
#[doc = "Field `FF` writer - Frame format"] pub type FfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:3 - Data length code bit"]
#[inline (always)] pub fn dlc (& self) -> DlcR { DlcR :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bit 6 - Remote transmission request"]
#[inline (always)] pub fn rtr (& self) -> RtrR { RtrR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Frame format"]
#[inline (always)] pub fn ff (& self) -> FfR { FfR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bits 0:3 - Data length code bit"]
#[inline (always)] pub fn dlc (& mut self) -> DlcW < '_ , SffPSpec > { DlcW :: new (self , 0) }
#[doc = "Bit 6 - Remote transmission request"]
#[inline (always)] pub fn rtr (& mut self) -> RtrW < '_ , SffPSpec > { RtrW :: new (self , 6) }
#[doc = "Bit 7 - Frame format"]
#[inline (always)] pub fn ff (& mut self) -> FfW < '_ , SffPSpec > { FfW :: new (self , 7) } }
#[doc = "Peli Send Frame Format register\n\nYou can [`read`](crate::Reg::read) this register and get [`sff_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sff_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SffPSpec ; impl crate :: RegisterSpec for SffPSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sff_p::R`](R) reader structure"] impl crate :: Readable for SffPSpec { }
#[doc = "`write(|w| ..)` method takes [`sff_p::W`](W) writer structure"] impl crate :: Writable for SffPSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SFF_P to value 0"] impl crate :: Resettable for SffPSpec { } }
#[doc = "GROUP0_ACR0_P (rw) register accessor: Peli Acceptance Code register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_acr0_p`] module"]
#[doc (alias = "GROUP0_ACR0_P")] pub type Group0Acr0P = crate :: Reg < group0_acr0_p :: Group0Acr0PSpec > ;
#[doc = "Peli Acceptance Code register 0"] pub mod group0_acr0_p {
#[doc = "Register `GROUP0_ACR0_P` reader"] pub type R = crate :: R < Group0Acr0PSpec > ;
#[doc = "Register `GROUP0_ACR0_P` writer"] pub type W = crate :: W < Group0Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group0Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0Acr0PSpec ; impl crate :: RegisterSpec for Group0Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group0Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group0Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_ACR0_P to value 0"] impl crate :: Resettable for Group0Acr0PSpec { } }
#[doc = "TXDR5_B (rw) register accessor: Basic TX Data register 5\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr5_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr5_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdr5_b`] module"]
#[doc (alias = "TXDR5_B")] pub type Txdr5B = crate :: Reg < txdr5_b :: Txdr5BSpec > ;
#[doc = "Basic TX Data register 5"] pub mod txdr5_b {
#[doc = "Register `TXDR5_B` reader"] pub type R = crate :: R < Txdr5BSpec > ;
#[doc = "Register `TXDR5_B` writer"] pub type W = crate :: W < Txdr5BSpec > ;
#[doc = "Field `TXDR5` reader - Transmit data register"] pub type Txdr5R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXDR5` writer - Transmit data register"] pub type Txdr5W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr5 (& self) -> Txdr5R { Txdr5R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr5 (& mut self) -> Txdr5W < '_ , Txdr5BSpec > { Txdr5W :: new (self , 0) } }
#[doc = "Basic TX Data register 5\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr5_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr5_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdr5BSpec ; impl crate :: RegisterSpec for Txdr5BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdr5_b::R`](R) reader structure"] impl crate :: Readable for Txdr5BSpec { }
#[doc = "`write(|w| ..)` method takes [`txdr5_b::W`](W) writer structure"] impl crate :: Writable for Txdr5BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDR5_B to value 0"] impl crate :: Resettable for Txdr5BSpec { } }
#[doc = "TXID0_P (rw) register accessor: Peli TX ID register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`txid0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txid0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txid0_p`] module"]
#[doc (alias = "TXID0_P")] pub type Txid0P = crate :: Reg < txid0_p :: Txid0PSpec > ;
#[doc = "Peli TX ID register 0"] pub mod txid0_p {
#[doc = "Register `TXID0_P` reader"] pub type R = crate :: R < Txid0PSpec > ;
#[doc = "Register `TXID0_P` writer"] pub type W = crate :: W < Txid0PSpec > ;
#[doc = "Field `ID21` reader - Identifier bit 21"] pub type Id21R = crate :: BitReader ;
#[doc = "Field `ID21` writer - Identifier bit 21"] pub type Id21W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID22` reader - Identifier bit 22"] pub type Id22R = crate :: BitReader ;
#[doc = "Field `ID22` writer - Identifier bit 22"] pub type Id22W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID23` reader - Identifier bit 23"] pub type Id23R = crate :: BitReader ;
#[doc = "Field `ID23` writer - Identifier bit 23"] pub type Id23W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID24` reader - Identifier bit 24"] pub type Id24R = crate :: BitReader ;
#[doc = "Field `ID24` writer - Identifier bit 24"] pub type Id24W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID25` reader - Identifier bit 25"] pub type Id25R = crate :: BitReader ;
#[doc = "Field `ID25` writer - Identifier bit 25"] pub type Id25W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID26` reader - Identifier bit 26"] pub type Id26R = crate :: BitReader ;
#[doc = "Field `ID26` writer - Identifier bit 26"] pub type Id26W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID27` reader - Identifier bit 27"] pub type Id27R = crate :: BitReader ;
#[doc = "Field `ID27` writer - Identifier bit 27"] pub type Id27W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID28` reader - Identifier bit 28"] pub type Id28R = crate :: BitReader ;
#[doc = "Field `ID28` writer - Identifier bit 28"] pub type Id28W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Identifier bit 21"]
#[inline (always)] pub fn id21 (& self) -> Id21R { Id21R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Identifier bit 22"]
#[inline (always)] pub fn id22 (& self) -> Id22R { Id22R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Identifier bit 23"]
#[inline (always)] pub fn id23 (& self) -> Id23R { Id23R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Identifier bit 24"]
#[inline (always)] pub fn id24 (& self) -> Id24R { Id24R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Identifier bit 25"]
#[inline (always)] pub fn id25 (& self) -> Id25R { Id25R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Identifier bit 26"]
#[inline (always)] pub fn id26 (& self) -> Id26R { Id26R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Identifier bit 27"]
#[inline (always)] pub fn id27 (& self) -> Id27R { Id27R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Identifier bit 28"]
#[inline (always)] pub fn id28 (& self) -> Id28R { Id28R :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Identifier bit 21"]
#[inline (always)] pub fn id21 (& mut self) -> Id21W < '_ , Txid0PSpec > { Id21W :: new (self , 0) }
#[doc = "Bit 1 - Identifier bit 22"]
#[inline (always)] pub fn id22 (& mut self) -> Id22W < '_ , Txid0PSpec > { Id22W :: new (self , 1) }
#[doc = "Bit 2 - Identifier bit 23"]
#[inline (always)] pub fn id23 (& mut self) -> Id23W < '_ , Txid0PSpec > { Id23W :: new (self , 2) }
#[doc = "Bit 3 - Identifier bit 24"]
#[inline (always)] pub fn id24 (& mut self) -> Id24W < '_ , Txid0PSpec > { Id24W :: new (self , 3) }
#[doc = "Bit 4 - Identifier bit 25"]
#[inline (always)] pub fn id25 (& mut self) -> Id25W < '_ , Txid0PSpec > { Id25W :: new (self , 4) }
#[doc = "Bit 5 - Identifier bit 26"]
#[inline (always)] pub fn id26 (& mut self) -> Id26W < '_ , Txid0PSpec > { Id26W :: new (self , 5) }
#[doc = "Bit 6 - Identifier bit 27"]
#[inline (always)] pub fn id27 (& mut self) -> Id27W < '_ , Txid0PSpec > { Id27W :: new (self , 6) }
#[doc = "Bit 7 - Identifier bit 28"]
#[inline (always)] pub fn id28 (& mut self) -> Id28W < '_ , Txid0PSpec > { Id28W :: new (self , 7) } }
#[doc = "Peli TX ID register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`txid0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txid0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txid0PSpec ; impl crate :: RegisterSpec for Txid0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txid0_p::R`](R) reader structure"] impl crate :: Readable for Txid0PSpec { }
#[doc = "`write(|w| ..)` method takes [`txid0_p::W`](W) writer structure"] impl crate :: Writable for Txid0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXID0_P to value 0"] impl crate :: Resettable for Txid0PSpec { } }
#[doc = "GROUP0_ACR1_P (rw) register accessor: Peli Acceptance Code register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_acr1_p`] module"]
#[doc (alias = "GROUP0_ACR1_P")] pub type Group0Acr1P = crate :: Reg < group0_acr1_p :: Group0Acr1PSpec > ;
#[doc = "Peli Acceptance Code register 1"] pub mod group0_acr1_p {
#[doc = "Register `GROUP0_ACR1_P` reader"] pub type R = crate :: R < Group0Acr1PSpec > ;
#[doc = "Register `GROUP0_ACR1_P` writer"] pub type W = crate :: W < Group0Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group0Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0Acr1PSpec ; impl crate :: RegisterSpec for Group0Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group0Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group0Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_ACR1_P to value 0"] impl crate :: Resettable for Group0Acr1PSpec { } }
#[doc = "TXDR6_B (rw) register accessor: Basic TX Data register 6\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr6_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr6_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdr6_b`] module"]
#[doc (alias = "TXDR6_B")] pub type Txdr6B = crate :: Reg < txdr6_b :: Txdr6BSpec > ;
#[doc = "Basic TX Data register 6"] pub mod txdr6_b {
#[doc = "Register `TXDR6_B` reader"] pub type R = crate :: R < Txdr6BSpec > ;
#[doc = "Register `TXDR6_B` writer"] pub type W = crate :: W < Txdr6BSpec > ;
#[doc = "Field `TXDR6` reader - Transmit data register"] pub type Txdr6R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXDR6` writer - Transmit data register"] pub type Txdr6W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr6 (& self) -> Txdr6R { Txdr6R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr6 (& mut self) -> Txdr6W < '_ , Txdr6BSpec > { Txdr6W :: new (self , 0) } }
#[doc = "Basic TX Data register 6\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr6_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr6_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdr6BSpec ; impl crate :: RegisterSpec for Txdr6BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdr6_b::R`](R) reader structure"] impl crate :: Readable for Txdr6BSpec { }
#[doc = "`write(|w| ..)` method takes [`txdr6_b::W`](W) writer structure"] impl crate :: Writable for Txdr6BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDR6_B to value 0"] impl crate :: Resettable for Txdr6BSpec { } }
#[doc = "TXID1_P (rw) register accessor: Peli TX ID register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txid1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txid1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txid1_p`] module"]
#[doc (alias = "TXID1_P")] pub type Txid1P = crate :: Reg < txid1_p :: Txid1PSpec > ;
#[doc = "Peli TX ID register 1"] pub mod txid1_p {
#[doc = "Register `TXID1_P` reader"] pub type R = crate :: R < Txid1PSpec > ;
#[doc = "Register `TXID1_P` writer"] pub type W = crate :: W < Txid1PSpec > ;
#[doc = "Field `ID13` reader - Identifier bit 13"] pub type Id13R = crate :: BitReader ;
#[doc = "Field `ID13` writer - Identifier bit 13"] pub type Id13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID14` reader - Identifier bit 14"] pub type Id14R = crate :: BitReader ;
#[doc = "Field `ID14` writer - Identifier bit 14"] pub type Id14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID15` reader - Identifier bit 15"] pub type Id15R = crate :: BitReader ;
#[doc = "Field `ID15` writer - Identifier bit 15"] pub type Id15W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID16` reader - Identifier bit 16"] pub type Id16R = crate :: BitReader ;
#[doc = "Field `ID16` writer - Identifier bit 16"] pub type Id16W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID17` reader - Identifier bit 17"] pub type Id17R = crate :: BitReader ;
#[doc = "Field `ID17` writer - Identifier bit 17"] pub type Id17W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID18` reader - Identifier bit 18"] pub type Id18R = crate :: BitReader ;
#[doc = "Field `ID18` writer - Identifier bit 18"] pub type Id18W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID19` reader - Identifier bit 19"] pub type Id19R = crate :: BitReader ;
#[doc = "Field `ID19` writer - Identifier bit 19"] pub type Id19W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ID20` reader - Identifier bit 20"] pub type Id20R = crate :: BitReader ;
#[doc = "Field `ID20` writer - Identifier bit 20"] pub type Id20W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Identifier bit 13"]
#[inline (always)] pub fn id13 (& self) -> Id13R { Id13R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Identifier bit 14"]
#[inline (always)] pub fn id14 (& self) -> Id14R { Id14R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Identifier bit 15"]
#[inline (always)] pub fn id15 (& self) -> Id15R { Id15R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Identifier bit 16"]
#[inline (always)] pub fn id16 (& self) -> Id16R { Id16R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Identifier bit 17"]
#[inline (always)] pub fn id17 (& self) -> Id17R { Id17R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Identifier bit 18"]
#[inline (always)] pub fn id18 (& self) -> Id18R { Id18R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Identifier bit 19"]
#[inline (always)] pub fn id19 (& self) -> Id19R { Id19R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Identifier bit 20"]
#[inline (always)] pub fn id20 (& self) -> Id20R { Id20R :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Identifier bit 13"]
#[inline (always)] pub fn id13 (& mut self) -> Id13W < '_ , Txid1PSpec > { Id13W :: new (self , 0) }
#[doc = "Bit 1 - Identifier bit 14"]
#[inline (always)] pub fn id14 (& mut self) -> Id14W < '_ , Txid1PSpec > { Id14W :: new (self , 1) }
#[doc = "Bit 2 - Identifier bit 15"]
#[inline (always)] pub fn id15 (& mut self) -> Id15W < '_ , Txid1PSpec > { Id15W :: new (self , 2) }
#[doc = "Bit 3 - Identifier bit 16"]
#[inline (always)] pub fn id16 (& mut self) -> Id16W < '_ , Txid1PSpec > { Id16W :: new (self , 3) }
#[doc = "Bit 4 - Identifier bit 17"]
#[inline (always)] pub fn id17 (& mut self) -> Id17W < '_ , Txid1PSpec > { Id17W :: new (self , 4) }
#[doc = "Bit 5 - Identifier bit 18"]
#[inline (always)] pub fn id18 (& mut self) -> Id18W < '_ , Txid1PSpec > { Id18W :: new (self , 5) }
#[doc = "Bit 6 - Identifier bit 19"]
#[inline (always)] pub fn id19 (& mut self) -> Id19W < '_ , Txid1PSpec > { Id19W :: new (self , 6) }
#[doc = "Bit 7 - Identifier bit 20"]
#[inline (always)] pub fn id20 (& mut self) -> Id20W < '_ , Txid1PSpec > { Id20W :: new (self , 7) } }
#[doc = "Peli TX ID register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txid1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txid1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txid1PSpec ; impl crate :: RegisterSpec for Txid1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txid1_p::R`](R) reader structure"] impl crate :: Readable for Txid1PSpec { }
#[doc = "`write(|w| ..)` method takes [`txid1_p::W`](W) writer structure"] impl crate :: Writable for Txid1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXID1_P to value 0"] impl crate :: Resettable for Txid1PSpec { } }
#[doc = "GROUP0_ACR2_P (rw) register accessor: Peli Acceptance Code register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_acr2_p`] module"]
#[doc (alias = "GROUP0_ACR2_P")] pub type Group0Acr2P = crate :: Reg < group0_acr2_p :: Group0Acr2PSpec > ;
#[doc = "Peli Acceptance Code register 2"] pub mod group0_acr2_p {
#[doc = "Register `GROUP0_ACR2_P` reader"] pub type R = crate :: R < Group0Acr2PSpec > ;
#[doc = "Register `GROUP0_ACR2_P` writer"] pub type W = crate :: W < Group0Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group0Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0Acr2PSpec ; impl crate :: RegisterSpec for Group0Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group0Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group0Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_ACR2_P to value 0"] impl crate :: Resettable for Group0Acr2PSpec { } }
#[doc = "TXDR7_B (rw) register accessor: Basic TX Data register 7\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr7_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr7_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdr7_b`] module"]
#[doc (alias = "TXDR7_B")] pub type Txdr7B = crate :: Reg < txdr7_b :: Txdr7BSpec > ;
#[doc = "Basic TX Data register 7"] pub mod txdr7_b {
#[doc = "Register `TXDR7_B` reader"] pub type R = crate :: R < Txdr7BSpec > ;
#[doc = "Register `TXDR7_B` writer"] pub type W = crate :: W < Txdr7BSpec > ;
#[doc = "Field `TXDR7` reader - Transmit data register"] pub type Txdr7R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXDR7` writer - Transmit data register"] pub type Txdr7W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr7 (& self) -> Txdr7R { Txdr7R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txdr7 (& mut self) -> Txdr7W < '_ , Txdr7BSpec > { Txdr7W :: new (self , 0) } }
#[doc = "Basic TX Data register 7\n\nYou can [`read`](crate::Reg::read) this register and get [`txdr7_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdr7_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdr7BSpec ; impl crate :: RegisterSpec for Txdr7BSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdr7_b::R`](R) reader structure"] impl crate :: Readable for Txdr7BSpec { }
#[doc = "`write(|w| ..)` method takes [`txdr7_b::W`](W) writer structure"] impl crate :: Writable for Txdr7BSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDR7_B to value 0"] impl crate :: Resettable for Txdr7BSpec { } }
#[doc = "TXDATA0_P (rw) register accessor: Peli TX Data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata0_p`] module"]
#[doc (alias = "TXDATA0_P")] pub type Txdata0P = crate :: Reg < txdata0_p :: Txdata0PSpec > ;
#[doc = "Peli TX Data register 0"] pub mod txdata0_p {
#[doc = "Register `TXDATA0_P` reader"] pub type R = crate :: R < Txdata0PSpec > ;
#[doc = "Register `TXDATA0_P` writer"] pub type W = crate :: W < Txdata0PSpec > ;
#[doc = "Field `DATA0` reader - DATA0"] pub type Data0R = crate :: FieldReader ;
#[doc = "Field `DATA0` writer - DATA0"] pub type Data0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA0"]
#[inline (always)] pub fn data0 (& self) -> Data0R { Data0R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA0"]
#[inline (always)] pub fn data0 (& mut self) -> Data0W < '_ , Txdata0PSpec > { Data0W :: new (self , 0) } }
#[doc = "Peli TX Data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata0PSpec ; impl crate :: RegisterSpec for Txdata0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata0_p::R`](R) reader structure"] impl crate :: Readable for Txdata0PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata0_p::W`](W) writer structure"] impl crate :: Writable for Txdata0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA0_P to value 0"] impl crate :: Resettable for Txdata0PSpec { } }
#[doc = "GROUP0_ACR3_P (rw) register accessor: Peli Acceptance Code register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_acr3_p`] module"]
#[doc (alias = "GROUP0_ACR3_P")] pub type Group0Acr3P = crate :: Reg < group0_acr3_p :: Group0Acr3PSpec > ;
#[doc = "Peli Acceptance Code register 3"] pub mod group0_acr3_p {
#[doc = "Register `GROUP0_ACR3_P` reader"] pub type R = crate :: R < Group0Acr3PSpec > ;
#[doc = "Register `GROUP0_ACR3_P` writer"] pub type W = crate :: W < Group0Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group0Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0Acr3PSpec ; impl crate :: RegisterSpec for Group0Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group0Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group0Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_ACR3_P to value 0"] impl crate :: Resettable for Group0Acr3PSpec { } }
#[doc = "TXDATA1_P (rw) register accessor: Peli TX Data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata1_p`] module"]
#[doc (alias = "TXDATA1_P")] pub type Txdata1P = crate :: Reg < txdata1_p :: Txdata1PSpec > ;
#[doc = "Peli TX Data register 1"] pub mod txdata1_p {
#[doc = "Register `TXDATA1_P` reader"] pub type R = crate :: R < Txdata1PSpec > ;
#[doc = "Register `TXDATA1_P` writer"] pub type W = crate :: W < Txdata1PSpec > ;
#[doc = "Field `DATA1` reader - DATA1"] pub type Data1R = crate :: FieldReader ;
#[doc = "Field `DATA1` writer - DATA1"] pub type Data1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA1"]
#[inline (always)] pub fn data1 (& self) -> Data1R { Data1R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA1"]
#[inline (always)] pub fn data1 (& mut self) -> Data1W < '_ , Txdata1PSpec > { Data1W :: new (self , 0) } }
#[doc = "Peli TX Data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata1PSpec ; impl crate :: RegisterSpec for Txdata1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata1_p::R`](R) reader structure"] impl crate :: Readable for Txdata1PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata1_p::W`](W) writer structure"] impl crate :: Writable for Txdata1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA1_P to value 0"] impl crate :: Resettable for Txdata1PSpec { } }
#[doc = "GROUP0_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_amr0_p`] module"]
#[doc (alias = "GROUP0_AMR0_P")] pub type Group0Amr0P = crate :: Reg < group0_amr0_p :: Group0Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group0_amr0_p {
#[doc = "Register `GROUP0_AMR0_P` reader"] pub type R = crate :: R < Group0Amr0PSpec > ;
#[doc = "Register `GROUP0_AMR0_P` writer"] pub type W = crate :: W < Group0Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group0Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0Amr0PSpec ; impl crate :: RegisterSpec for Group0Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group0Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group0Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_AMR0_P to value 0"] impl crate :: Resettable for Group0Amr0PSpec { } }
#[doc = "TXDATA2_P (rw) register accessor: Peli TX Data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata2_p`] module"]
#[doc (alias = "TXDATA2_P")] pub type Txdata2P = crate :: Reg < txdata2_p :: Txdata2PSpec > ;
#[doc = "Peli TX Data register 2"] pub mod txdata2_p {
#[doc = "Register `TXDATA2_P` reader"] pub type R = crate :: R < Txdata2PSpec > ;
#[doc = "Register `TXDATA2_P` writer"] pub type W = crate :: W < Txdata2PSpec > ;
#[doc = "Field `DATA2` reader - DATA2"] pub type Data2R = crate :: FieldReader ;
#[doc = "Field `DATA2` writer - DATA2"] pub type Data2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA2"]
#[inline (always)] pub fn data2 (& self) -> Data2R { Data2R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA2"]
#[inline (always)] pub fn data2 (& mut self) -> Data2W < '_ , Txdata2PSpec > { Data2W :: new (self , 0) } }
#[doc = "Peli TX Data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata2PSpec ; impl crate :: RegisterSpec for Txdata2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata2_p::R`](R) reader structure"] impl crate :: Readable for Txdata2PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata2_p::W`](W) writer structure"] impl crate :: Writable for Txdata2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA2_P to value 0"] impl crate :: Resettable for Txdata2PSpec { } }
#[doc = "GROUP0_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_amr1_p`] module"]
#[doc (alias = "GROUP0_AMR1_P")] pub type Group0Amr1P = crate :: Reg < group0_amr1_p :: Group0Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group0_amr1_p {
#[doc = "Register `GROUP0_AMR1_P` reader"] pub type R = crate :: R < Group0Amr1PSpec > ;
#[doc = "Register `GROUP0_AMR1_P` writer"] pub type W = crate :: W < Group0Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group0Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0Amr1PSpec ; impl crate :: RegisterSpec for Group0Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group0Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group0Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_AMR1_P to value 0"] impl crate :: Resettable for Group0Amr1PSpec { } }
#[doc = "TXDATA3_P (rw) register accessor: Peli TX Data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata3_p`] module"]
#[doc (alias = "TXDATA3_P")] pub type Txdata3P = crate :: Reg < txdata3_p :: Txdata3PSpec > ;
#[doc = "Peli TX Data register 3"] pub mod txdata3_p {
#[doc = "Register `TXDATA3_P` reader"] pub type R = crate :: R < Txdata3PSpec > ;
#[doc = "Register `TXDATA3_P` writer"] pub type W = crate :: W < Txdata3PSpec > ;
#[doc = "Field `DATA3` reader - DATA3"] pub type Data3R = crate :: FieldReader ;
#[doc = "Field `DATA3` writer - DATA3"] pub type Data3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA3"]
#[inline (always)] pub fn data3 (& self) -> Data3R { Data3R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA3"]
#[inline (always)] pub fn data3 (& mut self) -> Data3W < '_ , Txdata3PSpec > { Data3W :: new (self , 0) } }
#[doc = "Peli TX Data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata3PSpec ; impl crate :: RegisterSpec for Txdata3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata3_p::R`](R) reader structure"] impl crate :: Readable for Txdata3PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata3_p::W`](W) writer structure"] impl crate :: Writable for Txdata3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA3_P to value 0"] impl crate :: Resettable for Txdata3PSpec { } }
#[doc = "GROUP0_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_amr2_p`] module"]
#[doc (alias = "GROUP0_AMR2_P")] pub type Group0Amr2P = crate :: Reg < group0_amr2_p :: Group0Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group0_amr2_p {
#[doc = "Register `GROUP0_AMR2_P` reader"] pub type R = crate :: R < Group0Amr2PSpec > ;
#[doc = "Register `GROUP0_AMR2_P` writer"] pub type W = crate :: W < Group0Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group0Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0Amr2PSpec ; impl crate :: RegisterSpec for Group0Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group0Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group0Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_AMR2_P to value 0"] impl crate :: Resettable for Group0Amr2PSpec { } }
#[doc = "TXDATA4_P (rw) register accessor: Peli TX Data register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata4_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata4_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata4_p`] module"]
#[doc (alias = "TXDATA4_P")] pub type Txdata4P = crate :: Reg < txdata4_p :: Txdata4PSpec > ;
#[doc = "Peli TX Data register 4"] pub mod txdata4_p {
#[doc = "Register `TXDATA4_P` reader"] pub type R = crate :: R < Txdata4PSpec > ;
#[doc = "Register `TXDATA4_P` writer"] pub type W = crate :: W < Txdata4PSpec > ;
#[doc = "Field `DATA4` reader - DATA4"] pub type Data4R = crate :: FieldReader ;
#[doc = "Field `DATA4` writer - DATA4"] pub type Data4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA4"]
#[inline (always)] pub fn data4 (& self) -> Data4R { Data4R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA4"]
#[inline (always)] pub fn data4 (& mut self) -> Data4W < '_ , Txdata4PSpec > { Data4W :: new (self , 0) } }
#[doc = "Peli TX Data register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata4_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata4_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata4PSpec ; impl crate :: RegisterSpec for Txdata4PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata4_p::R`](R) reader structure"] impl crate :: Readable for Txdata4PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata4_p::W`](W) writer structure"] impl crate :: Writable for Txdata4PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA4_P to value 0"] impl crate :: Resettable for Txdata4PSpec { } }
#[doc = "GROUP0_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group0_amr3_p`] module"]
#[doc (alias = "GROUP0_AMR3_P")] pub type Group0Amr3P = crate :: Reg < group0_amr3_p :: Group0Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group0_amr3_p {
#[doc = "Register `GROUP0_AMR3_P` reader"] pub type R = crate :: R < Group0Amr3PSpec > ;
#[doc = "Register `GROUP0_AMR3_P` writer"] pub type W = crate :: W < Group0Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group0Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group0_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group0_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group0Amr3PSpec ; impl crate :: RegisterSpec for Group0Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group0_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group0Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group0_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group0Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP0_AMR3_P to value 0"] impl crate :: Resettable for Group0Amr3PSpec { } }
#[doc = "TXDATA5_P (rw) register accessor: Peli TX Data register 5\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata5_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata5_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata5_p`] module"]
#[doc (alias = "TXDATA5_P")] pub type Txdata5P = crate :: Reg < txdata5_p :: Txdata5PSpec > ;
#[doc = "Peli TX Data register 5"] pub mod txdata5_p {
#[doc = "Register `TXDATA5_P` reader"] pub type R = crate :: R < Txdata5PSpec > ;
#[doc = "Register `TXDATA5_P` writer"] pub type W = crate :: W < Txdata5PSpec > ;
#[doc = "Field `DATA5` reader - DATA5"] pub type Data5R = crate :: FieldReader ;
#[doc = "Field `DATA5` writer - DATA5"] pub type Data5W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA5"]
#[inline (always)] pub fn data5 (& self) -> Data5R { Data5R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA5"]
#[inline (always)] pub fn data5 (& mut self) -> Data5W < '_ , Txdata5PSpec > { Data5W :: new (self , 0) } }
#[doc = "Peli TX Data register 5\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata5_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata5_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata5PSpec ; impl crate :: RegisterSpec for Txdata5PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata5_p::R`](R) reader structure"] impl crate :: Readable for Txdata5PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata5_p::W`](W) writer structure"] impl crate :: Writable for Txdata5PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA5_P to value 0"] impl crate :: Resettable for Txdata5PSpec { } }
#[doc = "TXDATA6_P (rw) register accessor: Peli TX Data register 6\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata6_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata6_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata6_p`] module"]
#[doc (alias = "TXDATA6_P")] pub type Txdata6P = crate :: Reg < txdata6_p :: Txdata6PSpec > ;
#[doc = "Peli TX Data register 6"] pub mod txdata6_p {
#[doc = "Register `TXDATA6_P` reader"] pub type R = crate :: R < Txdata6PSpec > ;
#[doc = "Register `TXDATA6_P` writer"] pub type W = crate :: W < Txdata6PSpec > ;
#[doc = "Field `DATA6` reader - DATA6"] pub type Data6R = crate :: FieldReader ;
#[doc = "Field `DATA6` writer - DATA6"] pub type Data6W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA6"]
#[inline (always)] pub fn data6 (& self) -> Data6R { Data6R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA6"]
#[inline (always)] pub fn data6 (& mut self) -> Data6W < '_ , Txdata6PSpec > { Data6W :: new (self , 0) } }
#[doc = "Peli TX Data register 6\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata6_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata6_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata6PSpec ; impl crate :: RegisterSpec for Txdata6PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata6_p::R`](R) reader structure"] impl crate :: Readable for Txdata6PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata6_p::W`](W) writer structure"] impl crate :: Writable for Txdata6PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA6_P to value 0"] impl crate :: Resettable for Txdata6PSpec { } }
#[doc = "TXDATA7_P (rw) register accessor: Peli TX Data register 7\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata7_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata7_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata7_p`] module"]
#[doc (alias = "TXDATA7_P")] pub type Txdata7P = crate :: Reg < txdata7_p :: Txdata7PSpec > ;
#[doc = "Peli TX Data register 7"] pub mod txdata7_p {
#[doc = "Register `TXDATA7_P` reader"] pub type R = crate :: R < Txdata7PSpec > ;
#[doc = "Register `TXDATA7_P` writer"] pub type W = crate :: W < Txdata7PSpec > ;
#[doc = "Field `DATA7` reader - DATA7"] pub type Data7R = crate :: FieldReader ;
#[doc = "Field `DATA7` writer - DATA7"] pub type Data7W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA7"]
#[inline (always)] pub fn data7 (& self) -> Data7R { Data7R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA7"]
#[inline (always)] pub fn data7 (& mut self) -> Data7W < '_ , Txdata7PSpec > { Data7W :: new (self , 0) } }
#[doc = "Peli TX Data register 7\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata7_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata7_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata7PSpec ; impl crate :: RegisterSpec for Txdata7PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata7_p::R`](R) reader structure"] impl crate :: Readable for Txdata7PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata7_p::W`](W) writer structure"] impl crate :: Writable for Txdata7PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA7_P to value 0"] impl crate :: Resettable for Txdata7PSpec { } }
#[doc = "TXDATA8_P (rw) register accessor: Peli TX Data register 8\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata8_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata8_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata8_p`] module"]
#[doc (alias = "TXDATA8_P")] pub type Txdata8P = crate :: Reg < txdata8_p :: Txdata8PSpec > ;
#[doc = "Peli TX Data register 8"] pub mod txdata8_p {
#[doc = "Register `TXDATA8_P` reader"] pub type R = crate :: R < Txdata8PSpec > ;
#[doc = "Register `TXDATA8_P` writer"] pub type W = crate :: W < Txdata8PSpec > ;
#[doc = "Field `DATA8` reader - DATA8"] pub type Data8R = crate :: FieldReader ;
#[doc = "Field `DATA8` writer - DATA8"] pub type Data8W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA8"]
#[inline (always)] pub fn data8 (& self) -> Data8R { Data8R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA8"]
#[inline (always)] pub fn data8 (& mut self) -> Data8W < '_ , Txdata8PSpec > { Data8W :: new (self , 0) } }
#[doc = "Peli TX Data register 8\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata8_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata8_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata8PSpec ; impl crate :: RegisterSpec for Txdata8PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata8_p::R`](R) reader structure"] impl crate :: Readable for Txdata8PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata8_p::W`](W) writer structure"] impl crate :: Writable for Txdata8PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA8_P to value 0"] impl crate :: Resettable for Txdata8PSpec { } }
#[doc = "TXDATA9_P (rw) register accessor: Peli TX Data register 9\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata9_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata9_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdata9_p`] module"]
#[doc (alias = "TXDATA9_P")] pub type Txdata9P = crate :: Reg < txdata9_p :: Txdata9PSpec > ;
#[doc = "Peli TX Data register 9"] pub mod txdata9_p {
#[doc = "Register `TXDATA9_P` reader"] pub type R = crate :: R < Txdata9PSpec > ;
#[doc = "Register `TXDATA9_P` writer"] pub type W = crate :: W < Txdata9PSpec > ;
#[doc = "Field `DATA9` reader - DATA9"] pub type Data9R = crate :: FieldReader ;
#[doc = "Field `DATA9` writer - DATA9"] pub type Data9W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - DATA9"]
#[inline (always)] pub fn data9 (& self) -> Data9R { Data9R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - DATA9"]
#[inline (always)] pub fn data9 (& mut self) -> Data9W < '_ , Txdata9PSpec > { Data9W :: new (self , 0) } }
#[doc = "Peli TX Data register 9\n\nYou can [`read`](crate::Reg::read) this register and get [`txdata9_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txdata9_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txdata9PSpec ; impl crate :: RegisterSpec for Txdata9PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txdata9_p::R`](R) reader structure"] impl crate :: Readable for Txdata9PSpec { }
#[doc = "`write(|w| ..)` method takes [`txdata9_p::W`](W) writer structure"] impl crate :: Writable for Txdata9PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXDATA9_P to value 0"] impl crate :: Resettable for Txdata9PSpec { } }
#[doc = "CDR (rw) register accessor: Clock Divider register\n\nYou can [`read`](crate::Reg::read) this register and get [`cdr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cdr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cdr`] module"]
#[doc (alias = "CDR")] pub type Cdr = crate :: Reg < cdr :: CdrSpec > ;
#[doc = "Clock Divider register"] pub mod cdr {
#[doc = "Register `CDR` reader"] pub type R = crate :: R < CdrSpec > ;
#[doc = "Register `CDR` writer"] pub type W = crate :: W < CdrSpec > ;
#[doc = "Field `MODE` reader - CAN mode"] pub type ModeR = crate :: BitReader ;
#[doc = "Field `MODE` writer - CAN mode"] pub type ModeW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 7 - CAN mode"]
#[inline (always)] pub fn mode (& self) -> ModeR { ModeR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 7 - CAN mode"]
#[inline (always)] pub fn mode (& mut self) -> ModeW < '_ , CdrSpec > { ModeW :: new (self , 7) } }
#[doc = "Clock Divider register\n\nYou can [`read`](crate::Reg::read) this register and get [`cdr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cdr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CdrSpec ; impl crate :: RegisterSpec for CdrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cdr::R`](R) reader structure"] impl crate :: Readable for CdrSpec { }
#[doc = "`write(|w| ..)` method takes [`cdr::W`](W) writer structure"] impl crate :: Writable for CdrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CDR to value 0"] impl crate :: Resettable for CdrSpec { } }
#[doc = "AFM0 (rw) register accessor: Filter Mode register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`afm0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afm0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@afm0`] module"]
#[doc (alias = "AFM0")] pub type Afm0 = crate :: Reg < afm0 :: Afm0Spec > ;
#[doc = "Filter Mode register 0"] pub mod afm0 {
#[doc = "Register `AFM0` reader"] pub type R = crate :: R < Afm0Spec > ;
#[doc = "Register `AFM0` writer"] pub type W = crate :: W < Afm0Spec > ;
#[doc = "Field `AFM_7_1` reader - Acceptance filter mode"] pub type Afm7_1R = crate :: FieldReader ;
#[doc = "Field `AFM_7_1` writer - Acceptance filter mode"] pub type Afm7_1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ; impl R {
#[doc = "Bits 1:7 - Acceptance filter mode"]
#[inline (always)] pub fn afm_7_1 (& self) -> Afm7_1R { Afm7_1R :: new (((self . bits >> 1) & 0x7f) as u8) } } impl W {
#[doc = "Bits 1:7 - Acceptance filter mode"]
#[inline (always)] pub fn afm_7_1 (& mut self) -> Afm7_1W < '_ , Afm0Spec > { Afm7_1W :: new (self , 1) } }
#[doc = "Filter Mode register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`afm0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afm0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Afm0Spec ; impl crate :: RegisterSpec for Afm0Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`afm0::R`](R) reader structure"] impl crate :: Readable for Afm0Spec { }
#[doc = "`write(|w| ..)` method takes [`afm0::W`](W) writer structure"] impl crate :: Writable for Afm0Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets AFM0 to value 0"] impl crate :: Resettable for Afm0Spec { } }
#[doc = "AFM1 (rw) register accessor: Filter Mode register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`afm1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afm1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@afm1`] module"]
#[doc (alias = "AFM1")] pub type Afm1 = crate :: Reg < afm1 :: Afm1Spec > ;
#[doc = "Filter Mode register 1"] pub mod afm1 {
#[doc = "Register `AFM1` reader"] pub type R = crate :: R < Afm1Spec > ;
#[doc = "Register `AFM1` writer"] pub type W = crate :: W < Afm1Spec > ;
#[doc = "Field `AFM_15_8` reader - Acceptance filter mode"] pub type Afm15_8R = crate :: FieldReader ;
#[doc = "Field `AFM_15_8` writer - Acceptance filter mode"] pub type Afm15_8W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance filter mode"]
#[inline (always)] pub fn afm_15_8 (& self) -> Afm15_8R { Afm15_8R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance filter mode"]
#[inline (always)] pub fn afm_15_8 (& mut self) -> Afm15_8W < '_ , Afm1Spec > { Afm15_8W :: new (self , 0) } }
#[doc = "Filter Mode register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`afm1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afm1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Afm1Spec ; impl crate :: RegisterSpec for Afm1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`afm1::R`](R) reader structure"] impl crate :: Readable for Afm1Spec { }
#[doc = "`write(|w| ..)` method takes [`afm1::W`](W) writer structure"] impl crate :: Writable for Afm1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets AFM1 to value 0"] impl crate :: Resettable for Afm1Spec { } }
#[doc = "AFM2 (rw) register accessor: Filter Mode register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`afm2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afm2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@afm2`] module"]
#[doc (alias = "AFM2")] pub type Afm2 = crate :: Reg < afm2 :: Afm2Spec > ;
#[doc = "Filter Mode register 2"] pub mod afm2 {
#[doc = "Register `AFM2` reader"] pub type R = crate :: R < Afm2Spec > ;
#[doc = "Register `AFM2` writer"] pub type W = crate :: W < Afm2Spec > ;
#[doc = "Field `AFM_19_16` reader - Acceptance filter mode"] pub type Afm19_16R = crate :: FieldReader ;
#[doc = "Field `AFM_19_16` writer - Acceptance filter mode"] pub type Afm19_16W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - Acceptance filter mode"]
#[inline (always)] pub fn afm_19_16 (& self) -> Afm19_16R { Afm19_16R :: new ((self . bits & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - Acceptance filter mode"]
#[inline (always)] pub fn afm_19_16 (& mut self) -> Afm19_16W < '_ , Afm2Spec > { Afm19_16W :: new (self , 0) } }
#[doc = "Filter Mode register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`afm2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afm2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Afm2Spec ; impl crate :: RegisterSpec for Afm2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`afm2::R`](R) reader structure"] impl crate :: Readable for Afm2Spec { }
#[doc = "`write(|w| ..)` method takes [`afm2::W`](W) writer structure"] impl crate :: Writable for Afm2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets AFM2 to value 0"] impl crate :: Resettable for Afm2Spec { } }
#[doc = "FGA0 (rw) register accessor: Filter Group Enable Register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`fga0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fga0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fga0`] module"]
#[doc (alias = "FGA0")] pub type Fga0 = crate :: Reg < fga0 :: Fga0Spec > ;
#[doc = "Filter Group Enable Register 0"] pub mod fga0 {
#[doc = "Register `FGA0` reader"] pub type R = crate :: R < Fga0Spec > ;
#[doc = "Register `FGA0` writer"] pub type W = crate :: W < Fga0Spec > ;
#[doc = "Field `FGA_7_0` reader - Filter group enable"] pub type Fga7_0R = crate :: FieldReader ;
#[doc = "Field `FGA_7_0` writer - Filter group enable"] pub type Fga7_0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Filter group enable"]
#[inline (always)] pub fn fga_7_0 (& self) -> Fga7_0R { Fga7_0R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Filter group enable"]
#[inline (always)] pub fn fga_7_0 (& mut self) -> Fga7_0W < '_ , Fga0Spec > { Fga7_0W :: new (self , 0) } }
#[doc = "Filter Group Enable Register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`fga0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fga0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Fga0Spec ; impl crate :: RegisterSpec for Fga0Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`fga0::R`](R) reader structure"] impl crate :: Readable for Fga0Spec { }
#[doc = "`write(|w| ..)` method takes [`fga0::W`](W) writer structure"] impl crate :: Writable for Fga0Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets FGA0 to value 0"] impl crate :: Resettable for Fga0Spec { } }
#[doc = "FGA1 (rw) register accessor: Filter Group Enable Register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`fga1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fga1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fga1`] module"]
#[doc (alias = "FGA1")] pub type Fga1 = crate :: Reg < fga1 :: Fga1Spec > ;
#[doc = "Filter Group Enable Register 1"] pub mod fga1 {
#[doc = "Register `FGA1` reader"] pub type R = crate :: R < Fga1Spec > ;
#[doc = "Register `FGA1` writer"] pub type W = crate :: W < Fga1Spec > ;
#[doc = "Field `FGA_15_8` reader - Filter group enable"] pub type Fga15_8R = crate :: FieldReader ;
#[doc = "Field `FGA_15_8` writer - Filter group enable"] pub type Fga15_8W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Filter group enable"]
#[inline (always)] pub fn fga_15_8 (& self) -> Fga15_8R { Fga15_8R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Filter group enable"]
#[inline (always)] pub fn fga_15_8 (& mut self) -> Fga15_8W < '_ , Fga1Spec > { Fga15_8W :: new (self , 0) } }
#[doc = "Filter Group Enable Register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`fga1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fga1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Fga1Spec ; impl crate :: RegisterSpec for Fga1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`fga1::R`](R) reader structure"] impl crate :: Readable for Fga1Spec { }
#[doc = "`write(|w| ..)` method takes [`fga1::W`](W) writer structure"] impl crate :: Writable for Fga1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets FGA1 to value 0"] impl crate :: Resettable for Fga1Spec { } }
#[doc = "FGA2 (rw) register accessor: Filter Group Enable Register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`fga2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fga2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fga2`] module"]
#[doc (alias = "FGA2")] pub type Fga2 = crate :: Reg < fga2 :: Fga2Spec > ;
#[doc = "Filter Group Enable Register 2"] pub mod fga2 {
#[doc = "Register `FGA2` reader"] pub type R = crate :: R < Fga2Spec > ;
#[doc = "Register `FGA2` writer"] pub type W = crate :: W < Fga2Spec > ;
#[doc = "Field `FGA_19_16` reader - Filter group enable"] pub type Fga19_16R = crate :: FieldReader ;
#[doc = "Field `FGA_19_16` writer - Filter group enable"] pub type Fga19_16W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - Filter group enable"]
#[inline (always)] pub fn fga_19_16 (& self) -> Fga19_16R { Fga19_16R :: new ((self . bits & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - Filter group enable"]
#[inline (always)] pub fn fga_19_16 (& mut self) -> Fga19_16W < '_ , Fga2Spec > { Fga19_16W :: new (self , 0) } }
#[doc = "Filter Group Enable Register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`fga2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fga2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Fga2Spec ; impl crate :: RegisterSpec for Fga2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`fga2::R`](R) reader structure"] impl crate :: Readable for Fga2Spec { }
#[doc = "`write(|w| ..)` method takes [`fga2::W`](W) writer structure"] impl crate :: Writable for Fga2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets FGA2 to value 0"] impl crate :: Resettable for Fga2Spec { } }
#[doc = "GROUP1_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_acr_b`] module"]
#[doc (alias = "GROUP1_ACR_B")] pub type Group1AcrB = crate :: Reg < group1_acr_b :: Group1AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group1_acr_b {
#[doc = "Register `GROUP1_ACR_B` reader"] pub type R = crate :: R < Group1AcrBSpec > ;
#[doc = "Register `GROUP1_ACR_B` writer"] pub type W = crate :: W < Group1AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group1AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1AcrBSpec ; impl crate :: RegisterSpec for Group1AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_acr_b::R`](R) reader structure"] impl crate :: Readable for Group1AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_acr_b::W`](W) writer structure"] impl crate :: Writable for Group1AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_ACR_B to value 0"] impl crate :: Resettable for Group1AcrBSpec { } }
#[doc = "GROUP1_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_acr0_p`] module"]
#[doc (alias = "GROUP1_ACR0_P")] pub type Group1Acr0P = crate :: Reg < group1_acr0_p :: Group1Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group1_acr0_p {
#[doc = "Register `GROUP1_ACR0_P` reader"] pub type R = crate :: R < Group1Acr0PSpec > ;
#[doc = "Register `GROUP1_ACR0_P` writer"] pub type W = crate :: W < Group1Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group1Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1Acr0PSpec ; impl crate :: RegisterSpec for Group1Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group1Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group1Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_ACR0_P to value 0"] impl crate :: Resettable for Group1Acr0PSpec { } }
#[doc = "GROUP1_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_acr1_p`] module"]
#[doc (alias = "GROUP1_ACR1_P")] pub type Group1Acr1P = crate :: Reg < group1_acr1_p :: Group1Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group1_acr1_p {
#[doc = "Register `GROUP1_ACR1_P` reader"] pub type R = crate :: R < Group1Acr1PSpec > ;
#[doc = "Register `GROUP1_ACR1_P` writer"] pub type W = crate :: W < Group1Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group1Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1Acr1PSpec ; impl crate :: RegisterSpec for Group1Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group1Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group1Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_ACR1_P to value 0"] impl crate :: Resettable for Group1Acr1PSpec { } }
#[doc = "GROUP1_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_acr2_p`] module"]
#[doc (alias = "GROUP1_ACR2_P")] pub type Group1Acr2P = crate :: Reg < group1_acr2_p :: Group1Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group1_acr2_p {
#[doc = "Register `GROUP1_ACR2_P` reader"] pub type R = crate :: R < Group1Acr2PSpec > ;
#[doc = "Register `GROUP1_ACR2_P` writer"] pub type W = crate :: W < Group1Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group1Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1Acr2PSpec ; impl crate :: RegisterSpec for Group1Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group1Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group1Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_ACR2_P to value 0"] impl crate :: Resettable for Group1Acr2PSpec { } }
#[doc = "GROUP1_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_acr3_p`] module"]
#[doc (alias = "GROUP1_ACR3_P")] pub type Group1Acr3P = crate :: Reg < group1_acr3_p :: Group1Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group1_acr3_p {
#[doc = "Register `GROUP1_ACR3_P` reader"] pub type R = crate :: R < Group1Acr3PSpec > ;
#[doc = "Register `GROUP1_ACR3_P` writer"] pub type W = crate :: W < Group1Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group1Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1Acr3PSpec ; impl crate :: RegisterSpec for Group1Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group1Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group1Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_ACR3_P to value 0"] impl crate :: Resettable for Group1Acr3PSpec { } }
#[doc = "GROUP1_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_amr_b`] module"]
#[doc (alias = "GROUP1_AMR_B")] pub type Group1AmrB = crate :: Reg < group1_amr_b :: Group1AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group1_amr_b {
#[doc = "Register `GROUP1_AMR_B` reader"] pub type R = crate :: R < Group1AmrBSpec > ;
#[doc = "Register `GROUP1_AMR_B` writer"] pub type W = crate :: W < Group1AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group1AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1AmrBSpec ; impl crate :: RegisterSpec for Group1AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_amr_b::R`](R) reader structure"] impl crate :: Readable for Group1AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_amr_b::W`](W) writer structure"] impl crate :: Writable for Group1AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_AMR_B to value 0"] impl crate :: Resettable for Group1AmrBSpec { } }
#[doc = "GROUP1_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_amr0_p`] module"]
#[doc (alias = "GROUP1_AMR0_P")] pub type Group1Amr0P = crate :: Reg < group1_amr0_p :: Group1Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group1_amr0_p {
#[doc = "Register `GROUP1_AMR0_P` reader"] pub type R = crate :: R < Group1Amr0PSpec > ;
#[doc = "Register `GROUP1_AMR0_P` writer"] pub type W = crate :: W < Group1Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group1Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1Amr0PSpec ; impl crate :: RegisterSpec for Group1Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group1Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group1Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_AMR0_P to value 0"] impl crate :: Resettable for Group1Amr0PSpec { } }
#[doc = "GROUP1_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_amr1_p`] module"]
#[doc (alias = "GROUP1_AMR1_P")] pub type Group1Amr1P = crate :: Reg < group1_amr1_p :: Group1Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group1_amr1_p {
#[doc = "Register `GROUP1_AMR1_P` reader"] pub type R = crate :: R < Group1Amr1PSpec > ;
#[doc = "Register `GROUP1_AMR1_P` writer"] pub type W = crate :: W < Group1Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group1Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1Amr1PSpec ; impl crate :: RegisterSpec for Group1Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group1Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group1Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_AMR1_P to value 0"] impl crate :: Resettable for Group1Amr1PSpec { } }
#[doc = "GROUP1_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_amr2_p`] module"]
#[doc (alias = "GROUP1_AMR2_P")] pub type Group1Amr2P = crate :: Reg < group1_amr2_p :: Group1Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group1_amr2_p {
#[doc = "Register `GROUP1_AMR2_P` reader"] pub type R = crate :: R < Group1Amr2PSpec > ;
#[doc = "Register `GROUP1_AMR2_P` writer"] pub type W = crate :: W < Group1Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group1Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1Amr2PSpec ; impl crate :: RegisterSpec for Group1Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group1Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group1Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_AMR2_P to value 0"] impl crate :: Resettable for Group1Amr2PSpec { } }
#[doc = "GROUP1_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group1_amr3_p`] module"]
#[doc (alias = "GROUP1_AMR3_P")] pub type Group1Amr3P = crate :: Reg < group1_amr3_p :: Group1Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group1_amr3_p {
#[doc = "Register `GROUP1_AMR3_P` reader"] pub type R = crate :: R < Group1Amr3PSpec > ;
#[doc = "Register `GROUP1_AMR3_P` writer"] pub type W = crate :: W < Group1Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group1Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group1_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group1_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group1Amr3PSpec ; impl crate :: RegisterSpec for Group1Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group1_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group1Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group1_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group1Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP1_AMR3_P to value 0"] impl crate :: Resettable for Group1Amr3PSpec { } }
#[doc = "GROUP2_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_acr_b`] module"]
#[doc (alias = "GROUP2_ACR_B")] pub type Group2AcrB = crate :: Reg < group2_acr_b :: Group2AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group2_acr_b {
#[doc = "Register `GROUP2_ACR_B` reader"] pub type R = crate :: R < Group2AcrBSpec > ;
#[doc = "Register `GROUP2_ACR_B` writer"] pub type W = crate :: W < Group2AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group2AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2AcrBSpec ; impl crate :: RegisterSpec for Group2AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_acr_b::R`](R) reader structure"] impl crate :: Readable for Group2AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_acr_b::W`](W) writer structure"] impl crate :: Writable for Group2AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_ACR_B to value 0"] impl crate :: Resettable for Group2AcrBSpec { } }
#[doc = "GROUP2_ACR0_P (rw) register accessor: Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_acr0_p`] module"]
#[doc (alias = "GROUP2_ACR0_P")] pub type Group2Acr0P = crate :: Reg < group2_acr0_p :: Group2Acr0PSpec > ;
#[doc = "Peli Acceptance Code register"] pub mod group2_acr0_p {
#[doc = "Register `GROUP2_ACR0_P` reader"] pub type R = crate :: R < Group2Acr0PSpec > ;
#[doc = "Register `GROUP2_ACR0_P` writer"] pub type W = crate :: W < Group2Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group2Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2Acr0PSpec ; impl crate :: RegisterSpec for Group2Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group2Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group2Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_ACR0_P to value 0"] impl crate :: Resettable for Group2Acr0PSpec { } }
#[doc = "GROUP2_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_acr1_p`] module"]
#[doc (alias = "GROUP2_ACR1_P")] pub type Group2Acr1P = crate :: Reg < group2_acr1_p :: Group2Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group2_acr1_p {
#[doc = "Register `GROUP2_ACR1_P` reader"] pub type R = crate :: R < Group2Acr1PSpec > ;
#[doc = "Register `GROUP2_ACR1_P` writer"] pub type W = crate :: W < Group2Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group2Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2Acr1PSpec ; impl crate :: RegisterSpec for Group2Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group2Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group2Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_ACR1_P to value 0"] impl crate :: Resettable for Group2Acr1PSpec { } }
#[doc = "GROUP2_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_acr2_p`] module"]
#[doc (alias = "GROUP2_ACR2_P")] pub type Group2Acr2P = crate :: Reg < group2_acr2_p :: Group2Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group2_acr2_p {
#[doc = "Register `GROUP2_ACR2_P` reader"] pub type R = crate :: R < Group2Acr2PSpec > ;
#[doc = "Register `GROUP2_ACR2_P` writer"] pub type W = crate :: W < Group2Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group2Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2Acr2PSpec ; impl crate :: RegisterSpec for Group2Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group2Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group2Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_ACR2_P to value 0"] impl crate :: Resettable for Group2Acr2PSpec { } }
#[doc = "GROUP2_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_acr3_p`] module"]
#[doc (alias = "GROUP2_ACR3_P")] pub type Group2Acr3P = crate :: Reg < group2_acr3_p :: Group2Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group2_acr3_p {
#[doc = "Register `GROUP2_ACR3_P` reader"] pub type R = crate :: R < Group2Acr3PSpec > ;
#[doc = "Register `GROUP2_ACR3_P` writer"] pub type W = crate :: W < Group2Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group2Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2Acr3PSpec ; impl crate :: RegisterSpec for Group2Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group2Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group2Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_ACR3_P to value 0"] impl crate :: Resettable for Group2Acr3PSpec { } }
#[doc = "GROUP2_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_amr_b`] module"]
#[doc (alias = "GROUP2_AMR_B")] pub type Group2AmrB = crate :: Reg < group2_amr_b :: Group2AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group2_amr_b {
#[doc = "Register `GROUP2_AMR_B` reader"] pub type R = crate :: R < Group2AmrBSpec > ;
#[doc = "Register `GROUP2_AMR_B` writer"] pub type W = crate :: W < Group2AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group2AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2AmrBSpec ; impl crate :: RegisterSpec for Group2AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_amr_b::R`](R) reader structure"] impl crate :: Readable for Group2AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_amr_b::W`](W) writer structure"] impl crate :: Writable for Group2AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_AMR_B to value 0"] impl crate :: Resettable for Group2AmrBSpec { } }
#[doc = "GROUP2_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_amr0_p`] module"]
#[doc (alias = "GROUP2_AMR0_P")] pub type Group2Amr0P = crate :: Reg < group2_amr0_p :: Group2Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group2_amr0_p {
#[doc = "Register `GROUP2_AMR0_P` reader"] pub type R = crate :: R < Group2Amr0PSpec > ;
#[doc = "Register `GROUP2_AMR0_P` writer"] pub type W = crate :: W < Group2Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group2Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2Amr0PSpec ; impl crate :: RegisterSpec for Group2Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group2Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group2Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_AMR0_P to value 0"] impl crate :: Resettable for Group2Amr0PSpec { } }
#[doc = "GROUP2_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_amr1_p`] module"]
#[doc (alias = "GROUP2_AMR1_P")] pub type Group2Amr1P = crate :: Reg < group2_amr1_p :: Group2Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group2_amr1_p {
#[doc = "Register `GROUP2_AMR1_P` reader"] pub type R = crate :: R < Group2Amr1PSpec > ;
#[doc = "Register `GROUP2_AMR1_P` writer"] pub type W = crate :: W < Group2Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group2Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2Amr1PSpec ; impl crate :: RegisterSpec for Group2Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group2Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group2Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_AMR1_P to value 0"] impl crate :: Resettable for Group2Amr1PSpec { } }
#[doc = "GROUP2_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_amr2_p`] module"]
#[doc (alias = "GROUP2_AMR2_P")] pub type Group2Amr2P = crate :: Reg < group2_amr2_p :: Group2Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group2_amr2_p {
#[doc = "Register `GROUP2_AMR2_P` reader"] pub type R = crate :: R < Group2Amr2PSpec > ;
#[doc = "Register `GROUP2_AMR2_P` writer"] pub type W = crate :: W < Group2Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group2Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2Amr2PSpec ; impl crate :: RegisterSpec for Group2Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group2Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group2Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_AMR2_P to value 0"] impl crate :: Resettable for Group2Amr2PSpec { } }
#[doc = "GROUP2_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group2_amr3_p`] module"]
#[doc (alias = "GROUP2_AMR3_P")] pub type Group2Amr3P = crate :: Reg < group2_amr3_p :: Group2Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group2_amr3_p {
#[doc = "Register `GROUP2_AMR3_P` reader"] pub type R = crate :: R < Group2Amr3PSpec > ;
#[doc = "Register `GROUP2_AMR3_P` writer"] pub type W = crate :: W < Group2Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group2Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group2_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group2_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group2Amr3PSpec ; impl crate :: RegisterSpec for Group2Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group2_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group2Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group2_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group2Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP2_AMR3_P to value 0"] impl crate :: Resettable for Group2Amr3PSpec { } }
#[doc = "GROUP3_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_acr_b`] module"]
#[doc (alias = "GROUP3_ACR_B")] pub type Group3AcrB = crate :: Reg < group3_acr_b :: Group3AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group3_acr_b {
#[doc = "Register `GROUP3_ACR_B` reader"] pub type R = crate :: R < Group3AcrBSpec > ;
#[doc = "Register `GROUP3_ACR_B` writer"] pub type W = crate :: W < Group3AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group3AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3AcrBSpec ; impl crate :: RegisterSpec for Group3AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_acr_b::R`](R) reader structure"] impl crate :: Readable for Group3AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_acr_b::W`](W) writer structure"] impl crate :: Writable for Group3AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_ACR_B to value 0"] impl crate :: Resettable for Group3AcrBSpec { } }
#[doc = "GROUP3_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_acr0_p`] module"]
#[doc (alias = "GROUP3_ACR0_P")] pub type Group3Acr0P = crate :: Reg < group3_acr0_p :: Group3Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group3_acr0_p {
#[doc = "Register `GROUP3_ACR0_P` reader"] pub type R = crate :: R < Group3Acr0PSpec > ;
#[doc = "Register `GROUP3_ACR0_P` writer"] pub type W = crate :: W < Group3Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group3Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3Acr0PSpec ; impl crate :: RegisterSpec for Group3Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group3Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group3Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_ACR0_P to value 0"] impl crate :: Resettable for Group3Acr0PSpec { } }
#[doc = "GROUP3_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_acr1_p`] module"]
#[doc (alias = "GROUP3_ACR1_P")] pub type Group3Acr1P = crate :: Reg < group3_acr1_p :: Group3Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group3_acr1_p {
#[doc = "Register `GROUP3_ACR1_P` reader"] pub type R = crate :: R < Group3Acr1PSpec > ;
#[doc = "Register `GROUP3_ACR1_P` writer"] pub type W = crate :: W < Group3Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group3Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3Acr1PSpec ; impl crate :: RegisterSpec for Group3Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group3Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group3Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_ACR1_P to value 0"] impl crate :: Resettable for Group3Acr1PSpec { } }
#[doc = "GROUP3_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_acr2_p`] module"]
#[doc (alias = "GROUP3_ACR2_P")] pub type Group3Acr2P = crate :: Reg < group3_acr2_p :: Group3Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group3_acr2_p {
#[doc = "Register `GROUP3_ACR2_P` reader"] pub type R = crate :: R < Group3Acr2PSpec > ;
#[doc = "Register `GROUP3_ACR2_P` writer"] pub type W = crate :: W < Group3Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group3Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3Acr2PSpec ; impl crate :: RegisterSpec for Group3Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group3Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group3Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_ACR2_P to value 0"] impl crate :: Resettable for Group3Acr2PSpec { } }
#[doc = "GROUP3_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_acr3_p`] module"]
#[doc (alias = "GROUP3_ACR3_P")] pub type Group3Acr3P = crate :: Reg < group3_acr3_p :: Group3Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group3_acr3_p {
#[doc = "Register `GROUP3_ACR3_P` reader"] pub type R = crate :: R < Group3Acr3PSpec > ;
#[doc = "Register `GROUP3_ACR3_P` writer"] pub type W = crate :: W < Group3Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group3Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3Acr3PSpec ; impl crate :: RegisterSpec for Group3Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group3Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group3Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_ACR3_P to value 0"] impl crate :: Resettable for Group3Acr3PSpec { } }
#[doc = "GROUP3_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_amr_b`] module"]
#[doc (alias = "GROUP3_AMR_B")] pub type Group3AmrB = crate :: Reg < group3_amr_b :: Group3AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group3_amr_b {
#[doc = "Register `GROUP3_AMR_B` reader"] pub type R = crate :: R < Group3AmrBSpec > ;
#[doc = "Register `GROUP3_AMR_B` writer"] pub type W = crate :: W < Group3AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group3AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3AmrBSpec ; impl crate :: RegisterSpec for Group3AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_amr_b::R`](R) reader structure"] impl crate :: Readable for Group3AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_amr_b::W`](W) writer structure"] impl crate :: Writable for Group3AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_AMR_B to value 0"] impl crate :: Resettable for Group3AmrBSpec { } }
#[doc = "GROUP3_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_amr0_p`] module"]
#[doc (alias = "GROUP3_AMR0_P")] pub type Group3Amr0P = crate :: Reg < group3_amr0_p :: Group3Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group3_amr0_p {
#[doc = "Register `GROUP3_AMR0_P` reader"] pub type R = crate :: R < Group3Amr0PSpec > ;
#[doc = "Register `GROUP3_AMR0_P` writer"] pub type W = crate :: W < Group3Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group3Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3Amr0PSpec ; impl crate :: RegisterSpec for Group3Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group3Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group3Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_AMR0_P to value 0"] impl crate :: Resettable for Group3Amr0PSpec { } }
#[doc = "GROUP3_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_amr1_p`] module"]
#[doc (alias = "GROUP3_AMR1_P")] pub type Group3Amr1P = crate :: Reg < group3_amr1_p :: Group3Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group3_amr1_p {
#[doc = "Register `GROUP3_AMR1_P` reader"] pub type R = crate :: R < Group3Amr1PSpec > ;
#[doc = "Register `GROUP3_AMR1_P` writer"] pub type W = crate :: W < Group3Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group3Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3Amr1PSpec ; impl crate :: RegisterSpec for Group3Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group3Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group3Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_AMR1_P to value 0"] impl crate :: Resettable for Group3Amr1PSpec { } }
#[doc = "GROUP3_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_amr2_p`] module"]
#[doc (alias = "GROUP3_AMR2_P")] pub type Group3Amr2P = crate :: Reg < group3_amr2_p :: Group3Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group3_amr2_p {
#[doc = "Register `GROUP3_AMR2_P` reader"] pub type R = crate :: R < Group3Amr2PSpec > ;
#[doc = "Register `GROUP3_AMR2_P` writer"] pub type W = crate :: W < Group3Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group3Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3Amr2PSpec ; impl crate :: RegisterSpec for Group3Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group3Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group3Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_AMR2_P to value 0"] impl crate :: Resettable for Group3Amr2PSpec { } }
#[doc = "GROUP3_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group3_amr3_p`] module"]
#[doc (alias = "GROUP3_AMR3_P")] pub type Group3Amr3P = crate :: Reg < group3_amr3_p :: Group3Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group3_amr3_p {
#[doc = "Register `GROUP3_AMR3_P` reader"] pub type R = crate :: R < Group3Amr3PSpec > ;
#[doc = "Register `GROUP3_AMR3_P` writer"] pub type W = crate :: W < Group3Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group3Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group3_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group3_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group3Amr3PSpec ; impl crate :: RegisterSpec for Group3Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group3_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group3Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group3_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group3Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP3_AMR3_P to value 0"] impl crate :: Resettable for Group3Amr3PSpec { } }
#[doc = "GROUP4_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_acr_b`] module"]
#[doc (alias = "GROUP4_ACR_B")] pub type Group4AcrB = crate :: Reg < group4_acr_b :: Group4AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group4_acr_b {
#[doc = "Register `GROUP4_ACR_B` reader"] pub type R = crate :: R < Group4AcrBSpec > ;
#[doc = "Register `GROUP4_ACR_B` writer"] pub type W = crate :: W < Group4AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group4AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4AcrBSpec ; impl crate :: RegisterSpec for Group4AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_acr_b::R`](R) reader structure"] impl crate :: Readable for Group4AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_acr_b::W`](W) writer structure"] impl crate :: Writable for Group4AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_ACR_B to value 0"] impl crate :: Resettable for Group4AcrBSpec { } }
#[doc = "GROUP4_ACR0_P (rw) register accessor: Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_acr0_p`] module"]
#[doc (alias = "GROUP4_ACR0_P")] pub type Group4Acr0P = crate :: Reg < group4_acr0_p :: Group4Acr0PSpec > ;
#[doc = "Peli Acceptance Code register"] pub mod group4_acr0_p {
#[doc = "Register `GROUP4_ACR0_P` reader"] pub type R = crate :: R < Group4Acr0PSpec > ;
#[doc = "Register `GROUP4_ACR0_P` writer"] pub type W = crate :: W < Group4Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group4Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4Acr0PSpec ; impl crate :: RegisterSpec for Group4Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group4Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group4Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_ACR0_P to value 0"] impl crate :: Resettable for Group4Acr0PSpec { } }
#[doc = "GROUP4_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_acr1_p`] module"]
#[doc (alias = "GROUP4_ACR1_P")] pub type Group4Acr1P = crate :: Reg < group4_acr1_p :: Group4Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group4_acr1_p {
#[doc = "Register `GROUP4_ACR1_P` reader"] pub type R = crate :: R < Group4Acr1PSpec > ;
#[doc = "Register `GROUP4_ACR1_P` writer"] pub type W = crate :: W < Group4Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group4Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4Acr1PSpec ; impl crate :: RegisterSpec for Group4Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group4Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group4Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_ACR1_P to value 0"] impl crate :: Resettable for Group4Acr1PSpec { } }
#[doc = "GROUP4_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_acr2_p`] module"]
#[doc (alias = "GROUP4_ACR2_P")] pub type Group4Acr2P = crate :: Reg < group4_acr2_p :: Group4Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group4_acr2_p {
#[doc = "Register `GROUP4_ACR2_P` reader"] pub type R = crate :: R < Group4Acr2PSpec > ;
#[doc = "Register `GROUP4_ACR2_P` writer"] pub type W = crate :: W < Group4Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group4Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4Acr2PSpec ; impl crate :: RegisterSpec for Group4Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group4Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group4Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_ACR2_P to value 0"] impl crate :: Resettable for Group4Acr2PSpec { } }
#[doc = "GROUP4_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_acr3_p`] module"]
#[doc (alias = "GROUP4_ACR3_P")] pub type Group4Acr3P = crate :: Reg < group4_acr3_p :: Group4Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group4_acr3_p {
#[doc = "Register `GROUP4_ACR3_P` reader"] pub type R = crate :: R < Group4Acr3PSpec > ;
#[doc = "Register `GROUP4_ACR3_P` writer"] pub type W = crate :: W < Group4Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group4Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4Acr3PSpec ; impl crate :: RegisterSpec for Group4Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group4Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group4Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_ACR3_P to value 0"] impl crate :: Resettable for Group4Acr3PSpec { } }
#[doc = "GROUP4_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_amr_b`] module"]
#[doc (alias = "GROUP4_AMR_B")] pub type Group4AmrB = crate :: Reg < group4_amr_b :: Group4AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group4_amr_b {
#[doc = "Register `GROUP4_AMR_B` reader"] pub type R = crate :: R < Group4AmrBSpec > ;
#[doc = "Register `GROUP4_AMR_B` writer"] pub type W = crate :: W < Group4AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group4AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4AmrBSpec ; impl crate :: RegisterSpec for Group4AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_amr_b::R`](R) reader structure"] impl crate :: Readable for Group4AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_amr_b::W`](W) writer structure"] impl crate :: Writable for Group4AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_AMR_B to value 0"] impl crate :: Resettable for Group4AmrBSpec { } }
#[doc = "GROUP4_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_amr0_p`] module"]
#[doc (alias = "GROUP4_AMR0_P")] pub type Group4Amr0P = crate :: Reg < group4_amr0_p :: Group4Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group4_amr0_p {
#[doc = "Register `GROUP4_AMR0_P` reader"] pub type R = crate :: R < Group4Amr0PSpec > ;
#[doc = "Register `GROUP4_AMR0_P` writer"] pub type W = crate :: W < Group4Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group4Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4Amr0PSpec ; impl crate :: RegisterSpec for Group4Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group4Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group4Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_AMR0_P to value 0"] impl crate :: Resettable for Group4Amr0PSpec { } }
#[doc = "GROUP4_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_amr1_p`] module"]
#[doc (alias = "GROUP4_AMR1_P")] pub type Group4Amr1P = crate :: Reg < group4_amr1_p :: Group4Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group4_amr1_p {
#[doc = "Register `GROUP4_AMR1_P` reader"] pub type R = crate :: R < Group4Amr1PSpec > ;
#[doc = "Register `GROUP4_AMR1_P` writer"] pub type W = crate :: W < Group4Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group4Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4Amr1PSpec ; impl crate :: RegisterSpec for Group4Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group4Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group4Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_AMR1_P to value 0"] impl crate :: Resettable for Group4Amr1PSpec { } }
#[doc = "GROUP4_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_amr2_p`] module"]
#[doc (alias = "GROUP4_AMR2_P")] pub type Group4Amr2P = crate :: Reg < group4_amr2_p :: Group4Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group4_amr2_p {
#[doc = "Register `GROUP4_AMR2_P` reader"] pub type R = crate :: R < Group4Amr2PSpec > ;
#[doc = "Register `GROUP4_AMR2_P` writer"] pub type W = crate :: W < Group4Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group4Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4Amr2PSpec ; impl crate :: RegisterSpec for Group4Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group4Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group4Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_AMR2_P to value 0"] impl crate :: Resettable for Group4Amr2PSpec { } }
#[doc = "GROUP4_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group4_amr3_p`] module"]
#[doc (alias = "GROUP4_AMR3_P")] pub type Group4Amr3P = crate :: Reg < group4_amr3_p :: Group4Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group4_amr3_p {
#[doc = "Register `GROUP4_AMR3_P` reader"] pub type R = crate :: R < Group4Amr3PSpec > ;
#[doc = "Register `GROUP4_AMR3_P` writer"] pub type W = crate :: W < Group4Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group4Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group4_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group4_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group4Amr3PSpec ; impl crate :: RegisterSpec for Group4Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group4_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group4Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group4_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group4Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP4_AMR3_P to value 0"] impl crate :: Resettable for Group4Amr3PSpec { } }
#[doc = "GROUP5_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_acr_b`] module"]
#[doc (alias = "GROUP5_ACR_B")] pub type Group5AcrB = crate :: Reg < group5_acr_b :: Group5AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group5_acr_b {
#[doc = "Register `GROUP5_ACR_B` reader"] pub type R = crate :: R < Group5AcrBSpec > ;
#[doc = "Register `GROUP5_ACR_B` writer"] pub type W = crate :: W < Group5AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group5AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5AcrBSpec ; impl crate :: RegisterSpec for Group5AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_acr_b::R`](R) reader structure"] impl crate :: Readable for Group5AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_acr_b::W`](W) writer structure"] impl crate :: Writable for Group5AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_ACR_B to value 0"] impl crate :: Resettable for Group5AcrBSpec { } }
#[doc = "GROUP5_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_acr0_p`] module"]
#[doc (alias = "GROUP5_ACR0_P")] pub type Group5Acr0P = crate :: Reg < group5_acr0_p :: Group5Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group5_acr0_p {
#[doc = "Register `GROUP5_ACR0_P` reader"] pub type R = crate :: R < Group5Acr0PSpec > ;
#[doc = "Register `GROUP5_ACR0_P` writer"] pub type W = crate :: W < Group5Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group5Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5Acr0PSpec ; impl crate :: RegisterSpec for Group5Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group5Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group5Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_ACR0_P to value 0"] impl crate :: Resettable for Group5Acr0PSpec { } }
#[doc = "GROUP5_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_acr1_p`] module"]
#[doc (alias = "GROUP5_ACR1_P")] pub type Group5Acr1P = crate :: Reg < group5_acr1_p :: Group5Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group5_acr1_p {
#[doc = "Register `GROUP5_ACR1_P` reader"] pub type R = crate :: R < Group5Acr1PSpec > ;
#[doc = "Register `GROUP5_ACR1_P` writer"] pub type W = crate :: W < Group5Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group5Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5Acr1PSpec ; impl crate :: RegisterSpec for Group5Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group5Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group5Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_ACR1_P to value 0"] impl crate :: Resettable for Group5Acr1PSpec { } }
#[doc = "GROUP5_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_acr2_p`] module"]
#[doc (alias = "GROUP5_ACR2_P")] pub type Group5Acr2P = crate :: Reg < group5_acr2_p :: Group5Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group5_acr2_p {
#[doc = "Register `GROUP5_ACR2_P` reader"] pub type R = crate :: R < Group5Acr2PSpec > ;
#[doc = "Register `GROUP5_ACR2_P` writer"] pub type W = crate :: W < Group5Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group5Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5Acr2PSpec ; impl crate :: RegisterSpec for Group5Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group5Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group5Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_ACR2_P to value 0"] impl crate :: Resettable for Group5Acr2PSpec { } }
#[doc = "GROUP5_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_acr3_p`] module"]
#[doc (alias = "GROUP5_ACR3_P")] pub type Group5Acr3P = crate :: Reg < group5_acr3_p :: Group5Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group5_acr3_p {
#[doc = "Register `GROUP5_ACR3_P` reader"] pub type R = crate :: R < Group5Acr3PSpec > ;
#[doc = "Register `GROUP5_ACR3_P` writer"] pub type W = crate :: W < Group5Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group5Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5Acr3PSpec ; impl crate :: RegisterSpec for Group5Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group5Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group5Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_ACR3_P to value 0"] impl crate :: Resettable for Group5Acr3PSpec { } }
#[doc = "GROUP5_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_amr_b`] module"]
#[doc (alias = "GROUP5_AMR_B")] pub type Group5AmrB = crate :: Reg < group5_amr_b :: Group5AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group5_amr_b {
#[doc = "Register `GROUP5_AMR_B` reader"] pub type R = crate :: R < Group5AmrBSpec > ;
#[doc = "Register `GROUP5_AMR_B` writer"] pub type W = crate :: W < Group5AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group5AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5AmrBSpec ; impl crate :: RegisterSpec for Group5AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_amr_b::R`](R) reader structure"] impl crate :: Readable for Group5AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_amr_b::W`](W) writer structure"] impl crate :: Writable for Group5AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_AMR_B to value 0"] impl crate :: Resettable for Group5AmrBSpec { } }
#[doc = "GROUP5_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_amr0_p`] module"]
#[doc (alias = "GROUP5_AMR0_P")] pub type Group5Amr0P = crate :: Reg < group5_amr0_p :: Group5Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group5_amr0_p {
#[doc = "Register `GROUP5_AMR0_P` reader"] pub type R = crate :: R < Group5Amr0PSpec > ;
#[doc = "Register `GROUP5_AMR0_P` writer"] pub type W = crate :: W < Group5Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group5Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5Amr0PSpec ; impl crate :: RegisterSpec for Group5Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group5Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group5Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_AMR0_P to value 0"] impl crate :: Resettable for Group5Amr0PSpec { } }
#[doc = "GROUP5_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_amr1_p`] module"]
#[doc (alias = "GROUP5_AMR1_P")] pub type Group5Amr1P = crate :: Reg < group5_amr1_p :: Group5Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group5_amr1_p {
#[doc = "Register `GROUP5_AMR1_P` reader"] pub type R = crate :: R < Group5Amr1PSpec > ;
#[doc = "Register `GROUP5_AMR1_P` writer"] pub type W = crate :: W < Group5Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group5Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5Amr1PSpec ; impl crate :: RegisterSpec for Group5Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group5Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group5Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_AMR1_P to value 0"] impl crate :: Resettable for Group5Amr1PSpec { } }
#[doc = "GROUP5_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_amr2_p`] module"]
#[doc (alias = "GROUP5_AMR2_P")] pub type Group5Amr2P = crate :: Reg < group5_amr2_p :: Group5Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group5_amr2_p {
#[doc = "Register `GROUP5_AMR2_P` reader"] pub type R = crate :: R < Group5Amr2PSpec > ;
#[doc = "Register `GROUP5_AMR2_P` writer"] pub type W = crate :: W < Group5Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group5Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5Amr2PSpec ; impl crate :: RegisterSpec for Group5Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group5Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group5Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_AMR2_P to value 0"] impl crate :: Resettable for Group5Amr2PSpec { } }
#[doc = "GROUP5_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group5_amr3_p`] module"]
#[doc (alias = "GROUP5_AMR3_P")] pub type Group5Amr3P = crate :: Reg < group5_amr3_p :: Group5Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group5_amr3_p {
#[doc = "Register `GROUP5_AMR3_P` reader"] pub type R = crate :: R < Group5Amr3PSpec > ;
#[doc = "Register `GROUP5_AMR3_P` writer"] pub type W = crate :: W < Group5Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group5Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group5_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group5_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group5Amr3PSpec ; impl crate :: RegisterSpec for Group5Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group5_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group5Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group5_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group5Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP5_AMR3_P to value 0"] impl crate :: Resettable for Group5Amr3PSpec { } }
#[doc = "GROUP6_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_acr_b`] module"]
#[doc (alias = "GROUP6_ACR_B")] pub type Group6AcrB = crate :: Reg < group6_acr_b :: Group6AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group6_acr_b {
#[doc = "Register `GROUP6_ACR_B` reader"] pub type R = crate :: R < Group6AcrBSpec > ;
#[doc = "Register `GROUP6_ACR_B` writer"] pub type W = crate :: W < Group6AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group6AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6AcrBSpec ; impl crate :: RegisterSpec for Group6AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_acr_b::R`](R) reader structure"] impl crate :: Readable for Group6AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_acr_b::W`](W) writer structure"] impl crate :: Writable for Group6AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_ACR_B to value 0"] impl crate :: Resettable for Group6AcrBSpec { } }
#[doc = "GROUP6_ACR0_P (rw) register accessor: Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_acr0_p`] module"]
#[doc (alias = "GROUP6_ACR0_P")] pub type Group6Acr0P = crate :: Reg < group6_acr0_p :: Group6Acr0PSpec > ;
#[doc = "Peli Acceptance Code register"] pub mod group6_acr0_p {
#[doc = "Register `GROUP6_ACR0_P` reader"] pub type R = crate :: R < Group6Acr0PSpec > ;
#[doc = "Register `GROUP6_ACR0_P` writer"] pub type W = crate :: W < Group6Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group6Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6Acr0PSpec ; impl crate :: RegisterSpec for Group6Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group6Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group6Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_ACR0_P to value 0"] impl crate :: Resettable for Group6Acr0PSpec { } }
#[doc = "GROUP6_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_acr1_p`] module"]
#[doc (alias = "GROUP6_ACR1_P")] pub type Group6Acr1P = crate :: Reg < group6_acr1_p :: Group6Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group6_acr1_p {
#[doc = "Register `GROUP6_ACR1_P` reader"] pub type R = crate :: R < Group6Acr1PSpec > ;
#[doc = "Register `GROUP6_ACR1_P` writer"] pub type W = crate :: W < Group6Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group6Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6Acr1PSpec ; impl crate :: RegisterSpec for Group6Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group6Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group6Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_ACR1_P to value 0"] impl crate :: Resettable for Group6Acr1PSpec { } }
#[doc = "GROUP6_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_acr2_p`] module"]
#[doc (alias = "GROUP6_ACR2_P")] pub type Group6Acr2P = crate :: Reg < group6_acr2_p :: Group6Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group6_acr2_p {
#[doc = "Register `GROUP6_ACR2_P` reader"] pub type R = crate :: R < Group6Acr2PSpec > ;
#[doc = "Register `GROUP6_ACR2_P` writer"] pub type W = crate :: W < Group6Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group6Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6Acr2PSpec ; impl crate :: RegisterSpec for Group6Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group6Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group6Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_ACR2_P to value 0"] impl crate :: Resettable for Group6Acr2PSpec { } }
#[doc = "GROUP6_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_acr3_p`] module"]
#[doc (alias = "GROUP6_ACR3_P")] pub type Group6Acr3P = crate :: Reg < group6_acr3_p :: Group6Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group6_acr3_p {
#[doc = "Register `GROUP6_ACR3_P` reader"] pub type R = crate :: R < Group6Acr3PSpec > ;
#[doc = "Register `GROUP6_ACR3_P` writer"] pub type W = crate :: W < Group6Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group6Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6Acr3PSpec ; impl crate :: RegisterSpec for Group6Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group6Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group6Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_ACR3_P to value 0"] impl crate :: Resettable for Group6Acr3PSpec { } }
#[doc = "GROUP6_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_amr_b`] module"]
#[doc (alias = "GROUP6_AMR_B")] pub type Group6AmrB = crate :: Reg < group6_amr_b :: Group6AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group6_amr_b {
#[doc = "Register `GROUP6_AMR_B` reader"] pub type R = crate :: R < Group6AmrBSpec > ;
#[doc = "Register `GROUP6_AMR_B` writer"] pub type W = crate :: W < Group6AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group6AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6AmrBSpec ; impl crate :: RegisterSpec for Group6AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_amr_b::R`](R) reader structure"] impl crate :: Readable for Group6AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_amr_b::W`](W) writer structure"] impl crate :: Writable for Group6AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_AMR_B to value 0"] impl crate :: Resettable for Group6AmrBSpec { } }
#[doc = "GROUP6_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_amr0_p`] module"]
#[doc (alias = "GROUP6_AMR0_P")] pub type Group6Amr0P = crate :: Reg < group6_amr0_p :: Group6Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group6_amr0_p {
#[doc = "Register `GROUP6_AMR0_P` reader"] pub type R = crate :: R < Group6Amr0PSpec > ;
#[doc = "Register `GROUP6_AMR0_P` writer"] pub type W = crate :: W < Group6Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group6Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6Amr0PSpec ; impl crate :: RegisterSpec for Group6Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group6Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group6Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_AMR0_P to value 0"] impl crate :: Resettable for Group6Amr0PSpec { } }
#[doc = "GROUP6_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_amr1_p`] module"]
#[doc (alias = "GROUP6_AMR1_P")] pub type Group6Amr1P = crate :: Reg < group6_amr1_p :: Group6Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group6_amr1_p {
#[doc = "Register `GROUP6_AMR1_P` reader"] pub type R = crate :: R < Group6Amr1PSpec > ;
#[doc = "Register `GROUP6_AMR1_P` writer"] pub type W = crate :: W < Group6Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group6Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6Amr1PSpec ; impl crate :: RegisterSpec for Group6Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group6Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group6Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_AMR1_P to value 0"] impl crate :: Resettable for Group6Amr1PSpec { } }
#[doc = "GROUP6_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_amr2_p`] module"]
#[doc (alias = "GROUP6_AMR2_P")] pub type Group6Amr2P = crate :: Reg < group6_amr2_p :: Group6Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group6_amr2_p {
#[doc = "Register `GROUP6_AMR2_P` reader"] pub type R = crate :: R < Group6Amr2PSpec > ;
#[doc = "Register `GROUP6_AMR2_P` writer"] pub type W = crate :: W < Group6Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group6Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6Amr2PSpec ; impl crate :: RegisterSpec for Group6Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group6Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group6Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_AMR2_P to value 0"] impl crate :: Resettable for Group6Amr2PSpec { } }
#[doc = "GROUP6_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group6_amr3_p`] module"]
#[doc (alias = "GROUP6_AMR3_P")] pub type Group6Amr3P = crate :: Reg < group6_amr3_p :: Group6Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group6_amr3_p {
#[doc = "Register `GROUP6_AMR3_P` reader"] pub type R = crate :: R < Group6Amr3PSpec > ;
#[doc = "Register `GROUP6_AMR3_P` writer"] pub type W = crate :: W < Group6Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group6Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group6_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group6_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group6Amr3PSpec ; impl crate :: RegisterSpec for Group6Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group6_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group6Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group6_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group6Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP6_AMR3_P to value 0"] impl crate :: Resettable for Group6Amr3PSpec { } }
#[doc = "GROUP7_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_acr_b`] module"]
#[doc (alias = "GROUP7_ACR_B")] pub type Group7AcrB = crate :: Reg < group7_acr_b :: Group7AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group7_acr_b {
#[doc = "Register `GROUP7_ACR_B` reader"] pub type R = crate :: R < Group7AcrBSpec > ;
#[doc = "Register `GROUP7_ACR_B` writer"] pub type W = crate :: W < Group7AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group7AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7AcrBSpec ; impl crate :: RegisterSpec for Group7AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_acr_b::R`](R) reader structure"] impl crate :: Readable for Group7AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_acr_b::W`](W) writer structure"] impl crate :: Writable for Group7AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_ACR_B to value 0"] impl crate :: Resettable for Group7AcrBSpec { } }
#[doc = "GROUP7_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_acr0_p`] module"]
#[doc (alias = "GROUP7_ACR0_P")] pub type Group7Acr0P = crate :: Reg < group7_acr0_p :: Group7Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group7_acr0_p {
#[doc = "Register `GROUP7_ACR0_P` reader"] pub type R = crate :: R < Group7Acr0PSpec > ;
#[doc = "Register `GROUP7_ACR0_P` writer"] pub type W = crate :: W < Group7Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group7Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7Acr0PSpec ; impl crate :: RegisterSpec for Group7Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group7Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group7Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_ACR0_P to value 0"] impl crate :: Resettable for Group7Acr0PSpec { } }
#[doc = "GROUP7_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_acr1_p`] module"]
#[doc (alias = "GROUP7_ACR1_P")] pub type Group7Acr1P = crate :: Reg < group7_acr1_p :: Group7Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group7_acr1_p {
#[doc = "Register `GROUP7_ACR1_P` reader"] pub type R = crate :: R < Group7Acr1PSpec > ;
#[doc = "Register `GROUP7_ACR1_P` writer"] pub type W = crate :: W < Group7Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group7Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7Acr1PSpec ; impl crate :: RegisterSpec for Group7Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group7Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group7Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_ACR1_P to value 0"] impl crate :: Resettable for Group7Acr1PSpec { } }
#[doc = "GROUP7_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_acr2_p`] module"]
#[doc (alias = "GROUP7_ACR2_P")] pub type Group7Acr2P = crate :: Reg < group7_acr2_p :: Group7Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group7_acr2_p {
#[doc = "Register `GROUP7_ACR2_P` reader"] pub type R = crate :: R < Group7Acr2PSpec > ;
#[doc = "Register `GROUP7_ACR2_P` writer"] pub type W = crate :: W < Group7Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group7Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7Acr2PSpec ; impl crate :: RegisterSpec for Group7Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group7Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group7Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_ACR2_P to value 0"] impl crate :: Resettable for Group7Acr2PSpec { } }
#[doc = "GROUP7_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_acr3_p`] module"]
#[doc (alias = "GROUP7_ACR3_P")] pub type Group7Acr3P = crate :: Reg < group7_acr3_p :: Group7Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group7_acr3_p {
#[doc = "Register `GROUP7_ACR3_P` reader"] pub type R = crate :: R < Group7Acr3PSpec > ;
#[doc = "Register `GROUP7_ACR3_P` writer"] pub type W = crate :: W < Group7Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group7Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7Acr3PSpec ; impl crate :: RegisterSpec for Group7Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group7Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group7Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_ACR3_P to value 0"] impl crate :: Resettable for Group7Acr3PSpec { } }
#[doc = "GROUP7_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_amr_b`] module"]
#[doc (alias = "GROUP7_AMR_B")] pub type Group7AmrB = crate :: Reg < group7_amr_b :: Group7AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group7_amr_b {
#[doc = "Register `GROUP7_AMR_B` reader"] pub type R = crate :: R < Group7AmrBSpec > ;
#[doc = "Register `GROUP7_AMR_B` writer"] pub type W = crate :: W < Group7AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group7AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7AmrBSpec ; impl crate :: RegisterSpec for Group7AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_amr_b::R`](R) reader structure"] impl crate :: Readable for Group7AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_amr_b::W`](W) writer structure"] impl crate :: Writable for Group7AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_AMR_B to value 0"] impl crate :: Resettable for Group7AmrBSpec { } }
#[doc = "GROUP7_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_amr0_p`] module"]
#[doc (alias = "GROUP7_AMR0_P")] pub type Group7Amr0P = crate :: Reg < group7_amr0_p :: Group7Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group7_amr0_p {
#[doc = "Register `GROUP7_AMR0_P` reader"] pub type R = crate :: R < Group7Amr0PSpec > ;
#[doc = "Register `GROUP7_AMR0_P` writer"] pub type W = crate :: W < Group7Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group7Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7Amr0PSpec ; impl crate :: RegisterSpec for Group7Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group7Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group7Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_AMR0_P to value 0"] impl crate :: Resettable for Group7Amr0PSpec { } }
#[doc = "GROUP7_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_amr1_p`] module"]
#[doc (alias = "GROUP7_AMR1_P")] pub type Group7Amr1P = crate :: Reg < group7_amr1_p :: Group7Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group7_amr1_p {
#[doc = "Register `GROUP7_AMR1_P` reader"] pub type R = crate :: R < Group7Amr1PSpec > ;
#[doc = "Register `GROUP7_AMR1_P` writer"] pub type W = crate :: W < Group7Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group7Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7Amr1PSpec ; impl crate :: RegisterSpec for Group7Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group7Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group7Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_AMR1_P to value 0"] impl crate :: Resettable for Group7Amr1PSpec { } }
#[doc = "GROUP7_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_amr2_p`] module"]
#[doc (alias = "GROUP7_AMR2_P")] pub type Group7Amr2P = crate :: Reg < group7_amr2_p :: Group7Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group7_amr2_p {
#[doc = "Register `GROUP7_AMR2_P` reader"] pub type R = crate :: R < Group7Amr2PSpec > ;
#[doc = "Register `GROUP7_AMR2_P` writer"] pub type W = crate :: W < Group7Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group7Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7Amr2PSpec ; impl crate :: RegisterSpec for Group7Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group7Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group7Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_AMR2_P to value 0"] impl crate :: Resettable for Group7Amr2PSpec { } }
#[doc = "GROUP7_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group7_amr3_p`] module"]
#[doc (alias = "GROUP7_AMR3_P")] pub type Group7Amr3P = crate :: Reg < group7_amr3_p :: Group7Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group7_amr3_p {
#[doc = "Register `GROUP7_AMR3_P` reader"] pub type R = crate :: R < Group7Amr3PSpec > ;
#[doc = "Register `GROUP7_AMR3_P` writer"] pub type W = crate :: W < Group7Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group7Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group7_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group7_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group7Amr3PSpec ; impl crate :: RegisterSpec for Group7Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group7_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group7Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group7_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group7Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP7_AMR3_P to value 0"] impl crate :: Resettable for Group7Amr3PSpec { } }
#[doc = "GROUP8_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_acr_b`] module"]
#[doc (alias = "GROUP8_ACR_B")] pub type Group8AcrB = crate :: Reg < group8_acr_b :: Group8AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group8_acr_b {
#[doc = "Register `GROUP8_ACR_B` reader"] pub type R = crate :: R < Group8AcrBSpec > ;
#[doc = "Register `GROUP8_ACR_B` writer"] pub type W = crate :: W < Group8AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group8AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8AcrBSpec ; impl crate :: RegisterSpec for Group8AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_acr_b::R`](R) reader structure"] impl crate :: Readable for Group8AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_acr_b::W`](W) writer structure"] impl crate :: Writable for Group8AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_ACR_B to value 0"] impl crate :: Resettable for Group8AcrBSpec { } }
#[doc = "GROUP8_ACR0_P (rw) register accessor: Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_acr0_p`] module"]
#[doc (alias = "GROUP8_ACR0_P")] pub type Group8Acr0P = crate :: Reg < group8_acr0_p :: Group8Acr0PSpec > ;
#[doc = "Peli Acceptance Code register"] pub mod group8_acr0_p {
#[doc = "Register `GROUP8_ACR0_P` reader"] pub type R = crate :: R < Group8Acr0PSpec > ;
#[doc = "Register `GROUP8_ACR0_P` writer"] pub type W = crate :: W < Group8Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group8Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8Acr0PSpec ; impl crate :: RegisterSpec for Group8Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group8Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group8Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_ACR0_P to value 0"] impl crate :: Resettable for Group8Acr0PSpec { } }
#[doc = "GROUP8_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_acr1_p`] module"]
#[doc (alias = "GROUP8_ACR1_P")] pub type Group8Acr1P = crate :: Reg < group8_acr1_p :: Group8Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group8_acr1_p {
#[doc = "Register `GROUP8_ACR1_P` reader"] pub type R = crate :: R < Group8Acr1PSpec > ;
#[doc = "Register `GROUP8_ACR1_P` writer"] pub type W = crate :: W < Group8Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group8Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8Acr1PSpec ; impl crate :: RegisterSpec for Group8Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group8Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group8Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_ACR1_P to value 0"] impl crate :: Resettable for Group8Acr1PSpec { } }
#[doc = "GROUP8_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_acr2_p`] module"]
#[doc (alias = "GROUP8_ACR2_P")] pub type Group8Acr2P = crate :: Reg < group8_acr2_p :: Group8Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group8_acr2_p {
#[doc = "Register `GROUP8_ACR2_P` reader"] pub type R = crate :: R < Group8Acr2PSpec > ;
#[doc = "Register `GROUP8_ACR2_P` writer"] pub type W = crate :: W < Group8Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group8Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8Acr2PSpec ; impl crate :: RegisterSpec for Group8Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group8Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group8Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_ACR2_P to value 0"] impl crate :: Resettable for Group8Acr2PSpec { } }
#[doc = "GROUP8_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_acr3_p`] module"]
#[doc (alias = "GROUP8_ACR3_P")] pub type Group8Acr3P = crate :: Reg < group8_acr3_p :: Group8Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group8_acr3_p {
#[doc = "Register `GROUP8_ACR3_P` reader"] pub type R = crate :: R < Group8Acr3PSpec > ;
#[doc = "Register `GROUP8_ACR3_P` writer"] pub type W = crate :: W < Group8Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group8Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8Acr3PSpec ; impl crate :: RegisterSpec for Group8Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group8Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group8Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_ACR3_P to value 0"] impl crate :: Resettable for Group8Acr3PSpec { } }
#[doc = "GROUP8_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_amr_b`] module"]
#[doc (alias = "GROUP8_AMR_B")] pub type Group8AmrB = crate :: Reg < group8_amr_b :: Group8AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group8_amr_b {
#[doc = "Register `GROUP8_AMR_B` reader"] pub type R = crate :: R < Group8AmrBSpec > ;
#[doc = "Register `GROUP8_AMR_B` writer"] pub type W = crate :: W < Group8AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group8AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8AmrBSpec ; impl crate :: RegisterSpec for Group8AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_amr_b::R`](R) reader structure"] impl crate :: Readable for Group8AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_amr_b::W`](W) writer structure"] impl crate :: Writable for Group8AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_AMR_B to value 0"] impl crate :: Resettable for Group8AmrBSpec { } }
#[doc = "GROUP8_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_amr0_p`] module"]
#[doc (alias = "GROUP8_AMR0_P")] pub type Group8Amr0P = crate :: Reg < group8_amr0_p :: Group8Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group8_amr0_p {
#[doc = "Register `GROUP8_AMR0_P` reader"] pub type R = crate :: R < Group8Amr0PSpec > ;
#[doc = "Register `GROUP8_AMR0_P` writer"] pub type W = crate :: W < Group8Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group8Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8Amr0PSpec ; impl crate :: RegisterSpec for Group8Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group8Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group8Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_AMR0_P to value 0"] impl crate :: Resettable for Group8Amr0PSpec { } }
#[doc = "GROUP8_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_amr1_p`] module"]
#[doc (alias = "GROUP8_AMR1_P")] pub type Group8Amr1P = crate :: Reg < group8_amr1_p :: Group8Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group8_amr1_p {
#[doc = "Register `GROUP8_AMR1_P` reader"] pub type R = crate :: R < Group8Amr1PSpec > ;
#[doc = "Register `GROUP8_AMR1_P` writer"] pub type W = crate :: W < Group8Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group8Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8Amr1PSpec ; impl crate :: RegisterSpec for Group8Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group8Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group8Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_AMR1_P to value 0"] impl crate :: Resettable for Group8Amr1PSpec { } }
#[doc = "GROUP8_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_amr2_p`] module"]
#[doc (alias = "GROUP8_AMR2_P")] pub type Group8Amr2P = crate :: Reg < group8_amr2_p :: Group8Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group8_amr2_p {
#[doc = "Register `GROUP8_AMR2_P` reader"] pub type R = crate :: R < Group8Amr2PSpec > ;
#[doc = "Register `GROUP8_AMR2_P` writer"] pub type W = crate :: W < Group8Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group8Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8Amr2PSpec ; impl crate :: RegisterSpec for Group8Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group8Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group8Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_AMR2_P to value 0"] impl crate :: Resettable for Group8Amr2PSpec { } }
#[doc = "GROUP8_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group8_amr3_p`] module"]
#[doc (alias = "GROUP8_AMR3_P")] pub type Group8Amr3P = crate :: Reg < group8_amr3_p :: Group8Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group8_amr3_p {
#[doc = "Register `GROUP8_AMR3_P` reader"] pub type R = crate :: R < Group8Amr3PSpec > ;
#[doc = "Register `GROUP8_AMR3_P` writer"] pub type W = crate :: W < Group8Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group8Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group8_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group8_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group8Amr3PSpec ; impl crate :: RegisterSpec for Group8Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group8_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group8Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group8_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group8Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP8_AMR3_P to value 0"] impl crate :: Resettable for Group8Amr3PSpec { } }
#[doc = "GROUP9_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_acr_b`] module"]
#[doc (alias = "GROUP9_ACR_B")] pub type Group9AcrB = crate :: Reg < group9_acr_b :: Group9AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group9_acr_b {
#[doc = "Register `GROUP9_ACR_B` reader"] pub type R = crate :: R < Group9AcrBSpec > ;
#[doc = "Register `GROUP9_ACR_B` writer"] pub type W = crate :: W < Group9AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group9AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9AcrBSpec ; impl crate :: RegisterSpec for Group9AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_acr_b::R`](R) reader structure"] impl crate :: Readable for Group9AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_acr_b::W`](W) writer structure"] impl crate :: Writable for Group9AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_ACR_B to value 0"] impl crate :: Resettable for Group9AcrBSpec { } }
#[doc = "GROUP9_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_acr0_p`] module"]
#[doc (alias = "GROUP9_ACR0_P")] pub type Group9Acr0P = crate :: Reg < group9_acr0_p :: Group9Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group9_acr0_p {
#[doc = "Register `GROUP9_ACR0_P` reader"] pub type R = crate :: R < Group9Acr0PSpec > ;
#[doc = "Register `GROUP9_ACR0_P` writer"] pub type W = crate :: W < Group9Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group9Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9Acr0PSpec ; impl crate :: RegisterSpec for Group9Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group9Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group9Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_ACR0_P to value 0"] impl crate :: Resettable for Group9Acr0PSpec { } }
#[doc = "GROUP9_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_acr1_p`] module"]
#[doc (alias = "GROUP9_ACR1_P")] pub type Group9Acr1P = crate :: Reg < group9_acr1_p :: Group9Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group9_acr1_p {
#[doc = "Register `GROUP9_ACR1_P` reader"] pub type R = crate :: R < Group9Acr1PSpec > ;
#[doc = "Register `GROUP9_ACR1_P` writer"] pub type W = crate :: W < Group9Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group9Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9Acr1PSpec ; impl crate :: RegisterSpec for Group9Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group9Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group9Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_ACR1_P to value 0"] impl crate :: Resettable for Group9Acr1PSpec { } }
#[doc = "GROUP9_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_acr2_p`] module"]
#[doc (alias = "GROUP9_ACR2_P")] pub type Group9Acr2P = crate :: Reg < group9_acr2_p :: Group9Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group9_acr2_p {
#[doc = "Register `GROUP9_ACR2_P` reader"] pub type R = crate :: R < Group9Acr2PSpec > ;
#[doc = "Register `GROUP9_ACR2_P` writer"] pub type W = crate :: W < Group9Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group9Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9Acr2PSpec ; impl crate :: RegisterSpec for Group9Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group9Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group9Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_ACR2_P to value 0"] impl crate :: Resettable for Group9Acr2PSpec { } }
#[doc = "GROUP9_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_acr3_p`] module"]
#[doc (alias = "GROUP9_ACR3_P")] pub type Group9Acr3P = crate :: Reg < group9_acr3_p :: Group9Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group9_acr3_p {
#[doc = "Register `GROUP9_ACR3_P` reader"] pub type R = crate :: R < Group9Acr3PSpec > ;
#[doc = "Register `GROUP9_ACR3_P` writer"] pub type W = crate :: W < Group9Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group9Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9Acr3PSpec ; impl crate :: RegisterSpec for Group9Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group9Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group9Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_ACR3_P to value 0"] impl crate :: Resettable for Group9Acr3PSpec { } }
#[doc = "GROUP9_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_amr_b`] module"]
#[doc (alias = "GROUP9_AMR_B")] pub type Group9AmrB = crate :: Reg < group9_amr_b :: Group9AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group9_amr_b {
#[doc = "Register `GROUP9_AMR_B` reader"] pub type R = crate :: R < Group9AmrBSpec > ;
#[doc = "Register `GROUP9_AMR_B` writer"] pub type W = crate :: W < Group9AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group9AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9AmrBSpec ; impl crate :: RegisterSpec for Group9AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_amr_b::R`](R) reader structure"] impl crate :: Readable for Group9AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_amr_b::W`](W) writer structure"] impl crate :: Writable for Group9AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_AMR_B to value 0"] impl crate :: Resettable for Group9AmrBSpec { } }
#[doc = "GROUP9_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_amr0_p`] module"]
#[doc (alias = "GROUP9_AMR0_P")] pub type Group9Amr0P = crate :: Reg < group9_amr0_p :: Group9Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group9_amr0_p {
#[doc = "Register `GROUP9_AMR0_P` reader"] pub type R = crate :: R < Group9Amr0PSpec > ;
#[doc = "Register `GROUP9_AMR0_P` writer"] pub type W = crate :: W < Group9Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group9Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9Amr0PSpec ; impl crate :: RegisterSpec for Group9Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group9Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group9Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_AMR0_P to value 0"] impl crate :: Resettable for Group9Amr0PSpec { } }
#[doc = "GROUP9_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_amr1_p`] module"]
#[doc (alias = "GROUP9_AMR1_P")] pub type Group9Amr1P = crate :: Reg < group9_amr1_p :: Group9Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group9_amr1_p {
#[doc = "Register `GROUP9_AMR1_P` reader"] pub type R = crate :: R < Group9Amr1PSpec > ;
#[doc = "Register `GROUP9_AMR1_P` writer"] pub type W = crate :: W < Group9Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group9Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9Amr1PSpec ; impl crate :: RegisterSpec for Group9Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group9Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group9Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_AMR1_P to value 0"] impl crate :: Resettable for Group9Amr1PSpec { } }
#[doc = "GROUP9_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_amr2_p`] module"]
#[doc (alias = "GROUP9_AMR2_P")] pub type Group9Amr2P = crate :: Reg < group9_amr2_p :: Group9Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group9_amr2_p {
#[doc = "Register `GROUP9_AMR2_P` reader"] pub type R = crate :: R < Group9Amr2PSpec > ;
#[doc = "Register `GROUP9_AMR2_P` writer"] pub type W = crate :: W < Group9Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group9Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9Amr2PSpec ; impl crate :: RegisterSpec for Group9Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group9Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group9Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_AMR2_P to value 0"] impl crate :: Resettable for Group9Amr2PSpec { } }
#[doc = "GROUP9_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group9_amr3_p`] module"]
#[doc (alias = "GROUP9_AMR3_P")] pub type Group9Amr3P = crate :: Reg < group9_amr3_p :: Group9Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group9_amr3_p {
#[doc = "Register `GROUP9_AMR3_P` reader"] pub type R = crate :: R < Group9Amr3PSpec > ;
#[doc = "Register `GROUP9_AMR3_P` writer"] pub type W = crate :: W < Group9Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group9Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group9_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group9_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group9Amr3PSpec ; impl crate :: RegisterSpec for Group9Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group9_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group9Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group9_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group9Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP9_AMR3_P to value 0"] impl crate :: Resettable for Group9Amr3PSpec { } }
#[doc = "GROUP10_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_acr_b`] module"]
#[doc (alias = "GROUP10_ACR_B")] pub type Group10AcrB = crate :: Reg < group10_acr_b :: Group10AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group10_acr_b {
#[doc = "Register `GROUP10_ACR_B` reader"] pub type R = crate :: R < Group10AcrBSpec > ;
#[doc = "Register `GROUP10_ACR_B` writer"] pub type W = crate :: W < Group10AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group10AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10AcrBSpec ; impl crate :: RegisterSpec for Group10AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_acr_b::R`](R) reader structure"] impl crate :: Readable for Group10AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_acr_b::W`](W) writer structure"] impl crate :: Writable for Group10AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_ACR_B to value 0"] impl crate :: Resettable for Group10AcrBSpec { } }
#[doc = "GROUP10_ACR0_P (rw) register accessor: Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_acr0_p`] module"]
#[doc (alias = "GROUP10_ACR0_P")] pub type Group10Acr0P = crate :: Reg < group10_acr0_p :: Group10Acr0PSpec > ;
#[doc = "Peli Acceptance Code register"] pub mod group10_acr0_p {
#[doc = "Register `GROUP10_ACR0_P` reader"] pub type R = crate :: R < Group10Acr0PSpec > ;
#[doc = "Register `GROUP10_ACR0_P` writer"] pub type W = crate :: W < Group10Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group10Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10Acr0PSpec ; impl crate :: RegisterSpec for Group10Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group10Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group10Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_ACR0_P to value 0"] impl crate :: Resettable for Group10Acr0PSpec { } }
#[doc = "GROUP10_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_acr1_p`] module"]
#[doc (alias = "GROUP10_ACR1_P")] pub type Group10Acr1P = crate :: Reg < group10_acr1_p :: Group10Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group10_acr1_p {
#[doc = "Register `GROUP10_ACR1_P` reader"] pub type R = crate :: R < Group10Acr1PSpec > ;
#[doc = "Register `GROUP10_ACR1_P` writer"] pub type W = crate :: W < Group10Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group10Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10Acr1PSpec ; impl crate :: RegisterSpec for Group10Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group10Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group10Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_ACR1_P to value 0"] impl crate :: Resettable for Group10Acr1PSpec { } }
#[doc = "GROUP10_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_acr2_p`] module"]
#[doc (alias = "GROUP10_ACR2_P")] pub type Group10Acr2P = crate :: Reg < group10_acr2_p :: Group10Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group10_acr2_p {
#[doc = "Register `GROUP10_ACR2_P` reader"] pub type R = crate :: R < Group10Acr2PSpec > ;
#[doc = "Register `GROUP10_ACR2_P` writer"] pub type W = crate :: W < Group10Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group10Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10Acr2PSpec ; impl crate :: RegisterSpec for Group10Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group10Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group10Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_ACR2_P to value 0"] impl crate :: Resettable for Group10Acr2PSpec { } }
#[doc = "GROUP10_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_acr3_p`] module"]
#[doc (alias = "GROUP10_ACR3_P")] pub type Group10Acr3P = crate :: Reg < group10_acr3_p :: Group10Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group10_acr3_p {
#[doc = "Register `GROUP10_ACR3_P` reader"] pub type R = crate :: R < Group10Acr3PSpec > ;
#[doc = "Register `GROUP10_ACR3_P` writer"] pub type W = crate :: W < Group10Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group10Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10Acr3PSpec ; impl crate :: RegisterSpec for Group10Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group10Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group10Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_ACR3_P to value 0"] impl crate :: Resettable for Group10Acr3PSpec { } }
#[doc = "GROUP10_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_amr_b`] module"]
#[doc (alias = "GROUP10_AMR_B")] pub type Group10AmrB = crate :: Reg < group10_amr_b :: Group10AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group10_amr_b {
#[doc = "Register `GROUP10_AMR_B` reader"] pub type R = crate :: R < Group10AmrBSpec > ;
#[doc = "Register `GROUP10_AMR_B` writer"] pub type W = crate :: W < Group10AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group10AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10AmrBSpec ; impl crate :: RegisterSpec for Group10AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_amr_b::R`](R) reader structure"] impl crate :: Readable for Group10AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_amr_b::W`](W) writer structure"] impl crate :: Writable for Group10AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_AMR_B to value 0"] impl crate :: Resettable for Group10AmrBSpec { } }
#[doc = "GROUP10_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_amr0_p`] module"]
#[doc (alias = "GROUP10_AMR0_P")] pub type Group10Amr0P = crate :: Reg < group10_amr0_p :: Group10Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group10_amr0_p {
#[doc = "Register `GROUP10_AMR0_P` reader"] pub type R = crate :: R < Group10Amr0PSpec > ;
#[doc = "Register `GROUP10_AMR0_P` writer"] pub type W = crate :: W < Group10Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group10Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10Amr0PSpec ; impl crate :: RegisterSpec for Group10Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group10Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group10Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_AMR0_P to value 0"] impl crate :: Resettable for Group10Amr0PSpec { } }
#[doc = "GROUP10_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_amr1_p`] module"]
#[doc (alias = "GROUP10_AMR1_P")] pub type Group10Amr1P = crate :: Reg < group10_amr1_p :: Group10Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group10_amr1_p {
#[doc = "Register `GROUP10_AMR1_P` reader"] pub type R = crate :: R < Group10Amr1PSpec > ;
#[doc = "Register `GROUP10_AMR1_P` writer"] pub type W = crate :: W < Group10Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group10Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10Amr1PSpec ; impl crate :: RegisterSpec for Group10Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group10Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group10Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_AMR1_P to value 0"] impl crate :: Resettable for Group10Amr1PSpec { } }
#[doc = "GROUP10_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_amr2_p`] module"]
#[doc (alias = "GROUP10_AMR2_P")] pub type Group10Amr2P = crate :: Reg < group10_amr2_p :: Group10Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group10_amr2_p {
#[doc = "Register `GROUP10_AMR2_P` reader"] pub type R = crate :: R < Group10Amr2PSpec > ;
#[doc = "Register `GROUP10_AMR2_P` writer"] pub type W = crate :: W < Group10Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group10Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10Amr2PSpec ; impl crate :: RegisterSpec for Group10Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group10Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group10Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_AMR2_P to value 0"] impl crate :: Resettable for Group10Amr2PSpec { } }
#[doc = "GROUP10_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group10_amr3_p`] module"]
#[doc (alias = "GROUP10_AMR3_P")] pub type Group10Amr3P = crate :: Reg < group10_amr3_p :: Group10Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group10_amr3_p {
#[doc = "Register `GROUP10_AMR3_P` reader"] pub type R = crate :: R < Group10Amr3PSpec > ;
#[doc = "Register `GROUP10_AMR3_P` writer"] pub type W = crate :: W < Group10Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group10Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group10_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group10_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group10Amr3PSpec ; impl crate :: RegisterSpec for Group10Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group10_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group10Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group10_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group10Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP10_AMR3_P to value 0"] impl crate :: Resettable for Group10Amr3PSpec { } }
#[doc = "GROUP11_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_acr_b`] module"]
#[doc (alias = "GROUP11_ACR_B")] pub type Group11AcrB = crate :: Reg < group11_acr_b :: Group11AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group11_acr_b {
#[doc = "Register `GROUP11_ACR_B` reader"] pub type R = crate :: R < Group11AcrBSpec > ;
#[doc = "Register `GROUP11_ACR_B` writer"] pub type W = crate :: W < Group11AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group11AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11AcrBSpec ; impl crate :: RegisterSpec for Group11AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_acr_b::R`](R) reader structure"] impl crate :: Readable for Group11AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_acr_b::W`](W) writer structure"] impl crate :: Writable for Group11AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_ACR_B to value 0"] impl crate :: Resettable for Group11AcrBSpec { } }
#[doc = "GROUP11_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_acr0_p`] module"]
#[doc (alias = "GROUP11_ACR0_P")] pub type Group11Acr0P = crate :: Reg < group11_acr0_p :: Group11Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group11_acr0_p {
#[doc = "Register `GROUP11_ACR0_P` reader"] pub type R = crate :: R < Group11Acr0PSpec > ;
#[doc = "Register `GROUP11_ACR0_P` writer"] pub type W = crate :: W < Group11Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group11Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11Acr0PSpec ; impl crate :: RegisterSpec for Group11Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group11Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group11Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_ACR0_P to value 0"] impl crate :: Resettable for Group11Acr0PSpec { } }
#[doc = "GROUP11_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_acr1_p`] module"]
#[doc (alias = "GROUP11_ACR1_P")] pub type Group11Acr1P = crate :: Reg < group11_acr1_p :: Group11Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group11_acr1_p {
#[doc = "Register `GROUP11_ACR1_P` reader"] pub type R = crate :: R < Group11Acr1PSpec > ;
#[doc = "Register `GROUP11_ACR1_P` writer"] pub type W = crate :: W < Group11Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group11Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11Acr1PSpec ; impl crate :: RegisterSpec for Group11Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group11Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group11Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_ACR1_P to value 0"] impl crate :: Resettable for Group11Acr1PSpec { } }
#[doc = "GROUP11_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_acr2_p`] module"]
#[doc (alias = "GROUP11_ACR2_P")] pub type Group11Acr2P = crate :: Reg < group11_acr2_p :: Group11Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group11_acr2_p {
#[doc = "Register `GROUP11_ACR2_P` reader"] pub type R = crate :: R < Group11Acr2PSpec > ;
#[doc = "Register `GROUP11_ACR2_P` writer"] pub type W = crate :: W < Group11Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group11Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11Acr2PSpec ; impl crate :: RegisterSpec for Group11Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group11Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group11Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_ACR2_P to value 0"] impl crate :: Resettable for Group11Acr2PSpec { } }
#[doc = "GROUP11_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_acr3_p`] module"]
#[doc (alias = "GROUP11_ACR3_P")] pub type Group11Acr3P = crate :: Reg < group11_acr3_p :: Group11Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group11_acr3_p {
#[doc = "Register `GROUP11_ACR3_P` reader"] pub type R = crate :: R < Group11Acr3PSpec > ;
#[doc = "Register `GROUP11_ACR3_P` writer"] pub type W = crate :: W < Group11Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group11Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11Acr3PSpec ; impl crate :: RegisterSpec for Group11Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group11Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group11Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_ACR3_P to value 0"] impl crate :: Resettable for Group11Acr3PSpec { } }
#[doc = "GROUP11_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_amr_b`] module"]
#[doc (alias = "GROUP11_AMR_B")] pub type Group11AmrB = crate :: Reg < group11_amr_b :: Group11AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group11_amr_b {
#[doc = "Register `GROUP11_AMR_B` reader"] pub type R = crate :: R < Group11AmrBSpec > ;
#[doc = "Register `GROUP11_AMR_B` writer"] pub type W = crate :: W < Group11AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group11AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11AmrBSpec ; impl crate :: RegisterSpec for Group11AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_amr_b::R`](R) reader structure"] impl crate :: Readable for Group11AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_amr_b::W`](W) writer structure"] impl crate :: Writable for Group11AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_AMR_B to value 0"] impl crate :: Resettable for Group11AmrBSpec { } }
#[doc = "GROUP11_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_amr0_p`] module"]
#[doc (alias = "GROUP11_AMR0_P")] pub type Group11Amr0P = crate :: Reg < group11_amr0_p :: Group11Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group11_amr0_p {
#[doc = "Register `GROUP11_AMR0_P` reader"] pub type R = crate :: R < Group11Amr0PSpec > ;
#[doc = "Register `GROUP11_AMR0_P` writer"] pub type W = crate :: W < Group11Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group11Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11Amr0PSpec ; impl crate :: RegisterSpec for Group11Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group11Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group11Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_AMR0_P to value 0"] impl crate :: Resettable for Group11Amr0PSpec { } }
#[doc = "GROUP11_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_amr1_p`] module"]
#[doc (alias = "GROUP11_AMR1_P")] pub type Group11Amr1P = crate :: Reg < group11_amr1_p :: Group11Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group11_amr1_p {
#[doc = "Register `GROUP11_AMR1_P` reader"] pub type R = crate :: R < Group11Amr1PSpec > ;
#[doc = "Register `GROUP11_AMR1_P` writer"] pub type W = crate :: W < Group11Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group11Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11Amr1PSpec ; impl crate :: RegisterSpec for Group11Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group11Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group11Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_AMR1_P to value 0"] impl crate :: Resettable for Group11Amr1PSpec { } }
#[doc = "GROUP11_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_amr2_p`] module"]
#[doc (alias = "GROUP11_AMR2_P")] pub type Group11Amr2P = crate :: Reg < group11_amr2_p :: Group11Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group11_amr2_p {
#[doc = "Register `GROUP11_AMR2_P` reader"] pub type R = crate :: R < Group11Amr2PSpec > ;
#[doc = "Register `GROUP11_AMR2_P` writer"] pub type W = crate :: W < Group11Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group11Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11Amr2PSpec ; impl crate :: RegisterSpec for Group11Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group11Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group11Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_AMR2_P to value 0"] impl crate :: Resettable for Group11Amr2PSpec { } }
#[doc = "GROUP11_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group11_amr3_p`] module"]
#[doc (alias = "GROUP11_AMR3_P")] pub type Group11Amr3P = crate :: Reg < group11_amr3_p :: Group11Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group11_amr3_p {
#[doc = "Register `GROUP11_AMR3_P` reader"] pub type R = crate :: R < Group11Amr3PSpec > ;
#[doc = "Register `GROUP11_AMR3_P` writer"] pub type W = crate :: W < Group11Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group11Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group11_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group11_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group11Amr3PSpec ; impl crate :: RegisterSpec for Group11Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group11_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group11Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group11_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group11Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP11_AMR3_P to value 0"] impl crate :: Resettable for Group11Amr3PSpec { } }
#[doc = "GROUP12_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_acr_b`] module"]
#[doc (alias = "GROUP12_ACR_B")] pub type Group12AcrB = crate :: Reg < group12_acr_b :: Group12AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group12_acr_b {
#[doc = "Register `GROUP12_ACR_B` reader"] pub type R = crate :: R < Group12AcrBSpec > ;
#[doc = "Register `GROUP12_ACR_B` writer"] pub type W = crate :: W < Group12AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group12AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12AcrBSpec ; impl crate :: RegisterSpec for Group12AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_acr_b::R`](R) reader structure"] impl crate :: Readable for Group12AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_acr_b::W`](W) writer structure"] impl crate :: Writable for Group12AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_ACR_B to value 0"] impl crate :: Resettable for Group12AcrBSpec { } }
#[doc = "GROUP12_ACR0_P (rw) register accessor: Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_acr0_p`] module"]
#[doc (alias = "GROUP12_ACR0_P")] pub type Group12Acr0P = crate :: Reg < group12_acr0_p :: Group12Acr0PSpec > ;
#[doc = "Peli Acceptance Code register"] pub mod group12_acr0_p {
#[doc = "Register `GROUP12_ACR0_P` reader"] pub type R = crate :: R < Group12Acr0PSpec > ;
#[doc = "Register `GROUP12_ACR0_P` writer"] pub type W = crate :: W < Group12Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group12Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12Acr0PSpec ; impl crate :: RegisterSpec for Group12Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group12Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group12Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_ACR0_P to value 0"] impl crate :: Resettable for Group12Acr0PSpec { } }
#[doc = "GROUP12_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_acr1_p`] module"]
#[doc (alias = "GROUP12_ACR1_P")] pub type Group12Acr1P = crate :: Reg < group12_acr1_p :: Group12Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group12_acr1_p {
#[doc = "Register `GROUP12_ACR1_P` reader"] pub type R = crate :: R < Group12Acr1PSpec > ;
#[doc = "Register `GROUP12_ACR1_P` writer"] pub type W = crate :: W < Group12Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group12Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12Acr1PSpec ; impl crate :: RegisterSpec for Group12Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group12Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group12Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_ACR1_P to value 0"] impl crate :: Resettable for Group12Acr1PSpec { } }
#[doc = "GROUP12_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_acr2_p`] module"]
#[doc (alias = "GROUP12_ACR2_P")] pub type Group12Acr2P = crate :: Reg < group12_acr2_p :: Group12Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group12_acr2_p {
#[doc = "Register `GROUP12_ACR2_P` reader"] pub type R = crate :: R < Group12Acr2PSpec > ;
#[doc = "Register `GROUP12_ACR2_P` writer"] pub type W = crate :: W < Group12Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group12Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12Acr2PSpec ; impl crate :: RegisterSpec for Group12Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group12Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group12Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_ACR2_P to value 0"] impl crate :: Resettable for Group12Acr2PSpec { } }
#[doc = "GROUP12_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_acr3_p`] module"]
#[doc (alias = "GROUP12_ACR3_P")] pub type Group12Acr3P = crate :: Reg < group12_acr3_p :: Group12Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group12_acr3_p {
#[doc = "Register `GROUP12_ACR3_P` reader"] pub type R = crate :: R < Group12Acr3PSpec > ;
#[doc = "Register `GROUP12_ACR3_P` writer"] pub type W = crate :: W < Group12Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group12Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12Acr3PSpec ; impl crate :: RegisterSpec for Group12Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group12Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group12Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_ACR3_P to value 0"] impl crate :: Resettable for Group12Acr3PSpec { } }
#[doc = "GROUP12_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_amr_b`] module"]
#[doc (alias = "GROUP12_AMR_B")] pub type Group12AmrB = crate :: Reg < group12_amr_b :: Group12AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group12_amr_b {
#[doc = "Register `GROUP12_AMR_B` reader"] pub type R = crate :: R < Group12AmrBSpec > ;
#[doc = "Register `GROUP12_AMR_B` writer"] pub type W = crate :: W < Group12AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group12AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12AmrBSpec ; impl crate :: RegisterSpec for Group12AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_amr_b::R`](R) reader structure"] impl crate :: Readable for Group12AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_amr_b::W`](W) writer structure"] impl crate :: Writable for Group12AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_AMR_B to value 0"] impl crate :: Resettable for Group12AmrBSpec { } }
#[doc = "GROUP12_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_amr0_p`] module"]
#[doc (alias = "GROUP12_AMR0_P")] pub type Group12Amr0P = crate :: Reg < group12_amr0_p :: Group12Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group12_amr0_p {
#[doc = "Register `GROUP12_AMR0_P` reader"] pub type R = crate :: R < Group12Amr0PSpec > ;
#[doc = "Register `GROUP12_AMR0_P` writer"] pub type W = crate :: W < Group12Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group12Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12Amr0PSpec ; impl crate :: RegisterSpec for Group12Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group12Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group12Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_AMR0_P to value 0"] impl crate :: Resettable for Group12Amr0PSpec { } }
#[doc = "GROUP12_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_amr1_p`] module"]
#[doc (alias = "GROUP12_AMR1_P")] pub type Group12Amr1P = crate :: Reg < group12_amr1_p :: Group12Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group12_amr1_p {
#[doc = "Register `GROUP12_AMR1_P` reader"] pub type R = crate :: R < Group12Amr1PSpec > ;
#[doc = "Register `GROUP12_AMR1_P` writer"] pub type W = crate :: W < Group12Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group12Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12Amr1PSpec ; impl crate :: RegisterSpec for Group12Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group12Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group12Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_AMR1_P to value 0"] impl crate :: Resettable for Group12Amr1PSpec { } }
#[doc = "GROUP12_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_amr2_p`] module"]
#[doc (alias = "GROUP12_AMR2_P")] pub type Group12Amr2P = crate :: Reg < group12_amr2_p :: Group12Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group12_amr2_p {
#[doc = "Register `GROUP12_AMR2_P` reader"] pub type R = crate :: R < Group12Amr2PSpec > ;
#[doc = "Register `GROUP12_AMR2_P` writer"] pub type W = crate :: W < Group12Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group12Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12Amr2PSpec ; impl crate :: RegisterSpec for Group12Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group12Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group12Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_AMR2_P to value 0"] impl crate :: Resettable for Group12Amr2PSpec { } }
#[doc = "GROUP12_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group12_amr3_p`] module"]
#[doc (alias = "GROUP12_AMR3_P")] pub type Group12Amr3P = crate :: Reg < group12_amr3_p :: Group12Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group12_amr3_p {
#[doc = "Register `GROUP12_AMR3_P` reader"] pub type R = crate :: R < Group12Amr3PSpec > ;
#[doc = "Register `GROUP12_AMR3_P` writer"] pub type W = crate :: W < Group12Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group12Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group12_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group12_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group12Amr3PSpec ; impl crate :: RegisterSpec for Group12Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group12_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group12Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group12_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group12Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP12_AMR3_P to value 0"] impl crate :: Resettable for Group12Amr3PSpec { } }
#[doc = "GROUP13_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_acr_b`] module"]
#[doc (alias = "GROUP13_ACR_B")] pub type Group13AcrB = crate :: Reg < group13_acr_b :: Group13AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group13_acr_b {
#[doc = "Register `GROUP13_ACR_B` reader"] pub type R = crate :: R < Group13AcrBSpec > ;
#[doc = "Register `GROUP13_ACR_B` writer"] pub type W = crate :: W < Group13AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group13AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13AcrBSpec ; impl crate :: RegisterSpec for Group13AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_acr_b::R`](R) reader structure"] impl crate :: Readable for Group13AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_acr_b::W`](W) writer structure"] impl crate :: Writable for Group13AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_ACR_B to value 0"] impl crate :: Resettable for Group13AcrBSpec { } }
#[doc = "GROUP13_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_acr0_p`] module"]
#[doc (alias = "GROUP13_ACR0_P")] pub type Group13Acr0P = crate :: Reg < group13_acr0_p :: Group13Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group13_acr0_p {
#[doc = "Register `GROUP13_ACR0_P` reader"] pub type R = crate :: R < Group13Acr0PSpec > ;
#[doc = "Register `GROUP13_ACR0_P` writer"] pub type W = crate :: W < Group13Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group13Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13Acr0PSpec ; impl crate :: RegisterSpec for Group13Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group13Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group13Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_ACR0_P to value 0"] impl crate :: Resettable for Group13Acr0PSpec { } }
#[doc = "GROUP13_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_acr1_p`] module"]
#[doc (alias = "GROUP13_ACR1_P")] pub type Group13Acr1P = crate :: Reg < group13_acr1_p :: Group13Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group13_acr1_p {
#[doc = "Register `GROUP13_ACR1_P` reader"] pub type R = crate :: R < Group13Acr1PSpec > ;
#[doc = "Register `GROUP13_ACR1_P` writer"] pub type W = crate :: W < Group13Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group13Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13Acr1PSpec ; impl crate :: RegisterSpec for Group13Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group13Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group13Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_ACR1_P to value 0"] impl crate :: Resettable for Group13Acr1PSpec { } }
#[doc = "GROUP13_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_acr2_p`] module"]
#[doc (alias = "GROUP13_ACR2_P")] pub type Group13Acr2P = crate :: Reg < group13_acr2_p :: Group13Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group13_acr2_p {
#[doc = "Register `GROUP13_ACR2_P` reader"] pub type R = crate :: R < Group13Acr2PSpec > ;
#[doc = "Register `GROUP13_ACR2_P` writer"] pub type W = crate :: W < Group13Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group13Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13Acr2PSpec ; impl crate :: RegisterSpec for Group13Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group13Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group13Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_ACR2_P to value 0"] impl crate :: Resettable for Group13Acr2PSpec { } }
#[doc = "GROUP13_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_acr3_p`] module"]
#[doc (alias = "GROUP13_ACR3_P")] pub type Group13Acr3P = crate :: Reg < group13_acr3_p :: Group13Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group13_acr3_p {
#[doc = "Register `GROUP13_ACR3_P` reader"] pub type R = crate :: R < Group13Acr3PSpec > ;
#[doc = "Register `GROUP13_ACR3_P` writer"] pub type W = crate :: W < Group13Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group13Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13Acr3PSpec ; impl crate :: RegisterSpec for Group13Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group13Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group13Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_ACR3_P to value 0"] impl crate :: Resettable for Group13Acr3PSpec { } }
#[doc = "GROUP13_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_amr_b`] module"]
#[doc (alias = "GROUP13_AMR_B")] pub type Group13AmrB = crate :: Reg < group13_amr_b :: Group13AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group13_amr_b {
#[doc = "Register `GROUP13_AMR_B` reader"] pub type R = crate :: R < Group13AmrBSpec > ;
#[doc = "Register `GROUP13_AMR_B` writer"] pub type W = crate :: W < Group13AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group13AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13AmrBSpec ; impl crate :: RegisterSpec for Group13AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_amr_b::R`](R) reader structure"] impl crate :: Readable for Group13AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_amr_b::W`](W) writer structure"] impl crate :: Writable for Group13AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_AMR_B to value 0"] impl crate :: Resettable for Group13AmrBSpec { } }
#[doc = "GROUP13_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_amr0_p`] module"]
#[doc (alias = "GROUP13_AMR0_P")] pub type Group13Amr0P = crate :: Reg < group13_amr0_p :: Group13Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group13_amr0_p {
#[doc = "Register `GROUP13_AMR0_P` reader"] pub type R = crate :: R < Group13Amr0PSpec > ;
#[doc = "Register `GROUP13_AMR0_P` writer"] pub type W = crate :: W < Group13Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group13Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13Amr0PSpec ; impl crate :: RegisterSpec for Group13Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group13Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group13Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_AMR0_P to value 0"] impl crate :: Resettable for Group13Amr0PSpec { } }
#[doc = "GROUP13_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_amr1_p`] module"]
#[doc (alias = "GROUP13_AMR1_P")] pub type Group13Amr1P = crate :: Reg < group13_amr1_p :: Group13Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group13_amr1_p {
#[doc = "Register `GROUP13_AMR1_P` reader"] pub type R = crate :: R < Group13Amr1PSpec > ;
#[doc = "Register `GROUP13_AMR1_P` writer"] pub type W = crate :: W < Group13Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group13Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13Amr1PSpec ; impl crate :: RegisterSpec for Group13Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group13Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group13Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_AMR1_P to value 0"] impl crate :: Resettable for Group13Amr1PSpec { } }
#[doc = "GROUP13_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_amr2_p`] module"]
#[doc (alias = "GROUP13_AMR2_P")] pub type Group13Amr2P = crate :: Reg < group13_amr2_p :: Group13Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group13_amr2_p {
#[doc = "Register `GROUP13_AMR2_P` reader"] pub type R = crate :: R < Group13Amr2PSpec > ;
#[doc = "Register `GROUP13_AMR2_P` writer"] pub type W = crate :: W < Group13Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group13Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13Amr2PSpec ; impl crate :: RegisterSpec for Group13Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group13Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group13Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_AMR2_P to value 0"] impl crate :: Resettable for Group13Amr2PSpec { } }
#[doc = "GROUP13_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group13_amr3_p`] module"]
#[doc (alias = "GROUP13_AMR3_P")] pub type Group13Amr3P = crate :: Reg < group13_amr3_p :: Group13Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group13_amr3_p {
#[doc = "Register `GROUP13_AMR3_P` reader"] pub type R = crate :: R < Group13Amr3PSpec > ;
#[doc = "Register `GROUP13_AMR3_P` writer"] pub type W = crate :: W < Group13Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group13Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group13_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group13_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group13Amr3PSpec ; impl crate :: RegisterSpec for Group13Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group13_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group13Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group13_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group13Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP13_AMR3_P to value 0"] impl crate :: Resettable for Group13Amr3PSpec { } }
#[doc = "GROUP14_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_acr_b`] module"]
#[doc (alias = "GROUP14_ACR_B")] pub type Group14AcrB = crate :: Reg < group14_acr_b :: Group14AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group14_acr_b {
#[doc = "Register `GROUP14_ACR_B` reader"] pub type R = crate :: R < Group14AcrBSpec > ;
#[doc = "Register `GROUP14_ACR_B` writer"] pub type W = crate :: W < Group14AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group14AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14AcrBSpec ; impl crate :: RegisterSpec for Group14AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_acr_b::R`](R) reader structure"] impl crate :: Readable for Group14AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_acr_b::W`](W) writer structure"] impl crate :: Writable for Group14AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_ACR_B to value 0"] impl crate :: Resettable for Group14AcrBSpec { } }
#[doc = "GROUP14_ACR0_P (rw) register accessor: Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_acr0_p`] module"]
#[doc (alias = "GROUP14_ACR0_P")] pub type Group14Acr0P = crate :: Reg < group14_acr0_p :: Group14Acr0PSpec > ;
#[doc = "Peli Acceptance Code register"] pub mod group14_acr0_p {
#[doc = "Register `GROUP14_ACR0_P` reader"] pub type R = crate :: R < Group14Acr0PSpec > ;
#[doc = "Register `GROUP14_ACR0_P` writer"] pub type W = crate :: W < Group14Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group14Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14Acr0PSpec ; impl crate :: RegisterSpec for Group14Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group14Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group14Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_ACR0_P to value 0"] impl crate :: Resettable for Group14Acr0PSpec { } }
#[doc = "GROUP14_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_acr1_p`] module"]
#[doc (alias = "GROUP14_ACR1_P")] pub type Group14Acr1P = crate :: Reg < group14_acr1_p :: Group14Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group14_acr1_p {
#[doc = "Register `GROUP14_ACR1_P` reader"] pub type R = crate :: R < Group14Acr1PSpec > ;
#[doc = "Register `GROUP14_ACR1_P` writer"] pub type W = crate :: W < Group14Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group14Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14Acr1PSpec ; impl crate :: RegisterSpec for Group14Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group14Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group14Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_ACR1_P to value 0"] impl crate :: Resettable for Group14Acr1PSpec { } }
#[doc = "GROUP14_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_acr2_p`] module"]
#[doc (alias = "GROUP14_ACR2_P")] pub type Group14Acr2P = crate :: Reg < group14_acr2_p :: Group14Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group14_acr2_p {
#[doc = "Register `GROUP14_ACR2_P` reader"] pub type R = crate :: R < Group14Acr2PSpec > ;
#[doc = "Register `GROUP14_ACR2_P` writer"] pub type W = crate :: W < Group14Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group14Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14Acr2PSpec ; impl crate :: RegisterSpec for Group14Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group14Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group14Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_ACR2_P to value 0"] impl crate :: Resettable for Group14Acr2PSpec { } }
#[doc = "GROUP14_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_acr3_p`] module"]
#[doc (alias = "GROUP14_ACR3_P")] pub type Group14Acr3P = crate :: Reg < group14_acr3_p :: Group14Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group14_acr3_p {
#[doc = "Register `GROUP14_ACR3_P` reader"] pub type R = crate :: R < Group14Acr3PSpec > ;
#[doc = "Register `GROUP14_ACR3_P` writer"] pub type W = crate :: W < Group14Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group14Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14Acr3PSpec ; impl crate :: RegisterSpec for Group14Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group14Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group14Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_ACR3_P to value 0"] impl crate :: Resettable for Group14Acr3PSpec { } }
#[doc = "GROUP14_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_amr_b`] module"]
#[doc (alias = "GROUP14_AMR_B")] pub type Group14AmrB = crate :: Reg < group14_amr_b :: Group14AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group14_amr_b {
#[doc = "Register `GROUP14_AMR_B` reader"] pub type R = crate :: R < Group14AmrBSpec > ;
#[doc = "Register `GROUP14_AMR_B` writer"] pub type W = crate :: W < Group14AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group14AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14AmrBSpec ; impl crate :: RegisterSpec for Group14AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_amr_b::R`](R) reader structure"] impl crate :: Readable for Group14AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_amr_b::W`](W) writer structure"] impl crate :: Writable for Group14AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_AMR_B to value 0"] impl crate :: Resettable for Group14AmrBSpec { } }
#[doc = "GROUP14_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_amr0_p`] module"]
#[doc (alias = "GROUP14_AMR0_P")] pub type Group14Amr0P = crate :: Reg < group14_amr0_p :: Group14Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group14_amr0_p {
#[doc = "Register `GROUP14_AMR0_P` reader"] pub type R = crate :: R < Group14Amr0PSpec > ;
#[doc = "Register `GROUP14_AMR0_P` writer"] pub type W = crate :: W < Group14Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group14Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14Amr0PSpec ; impl crate :: RegisterSpec for Group14Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group14Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group14Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_AMR0_P to value 0"] impl crate :: Resettable for Group14Amr0PSpec { } }
#[doc = "GROUP14_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_amr1_p`] module"]
#[doc (alias = "GROUP14_AMR1_P")] pub type Group14Amr1P = crate :: Reg < group14_amr1_p :: Group14Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group14_amr1_p {
#[doc = "Register `GROUP14_AMR1_P` reader"] pub type R = crate :: R < Group14Amr1PSpec > ;
#[doc = "Register `GROUP14_AMR1_P` writer"] pub type W = crate :: W < Group14Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group14Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14Amr1PSpec ; impl crate :: RegisterSpec for Group14Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group14Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group14Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_AMR1_P to value 0"] impl crate :: Resettable for Group14Amr1PSpec { } }
#[doc = "GROUP14_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_amr2_p`] module"]
#[doc (alias = "GROUP14_AMR2_P")] pub type Group14Amr2P = crate :: Reg < group14_amr2_p :: Group14Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group14_amr2_p {
#[doc = "Register `GROUP14_AMR2_P` reader"] pub type R = crate :: R < Group14Amr2PSpec > ;
#[doc = "Register `GROUP14_AMR2_P` writer"] pub type W = crate :: W < Group14Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group14Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14Amr2PSpec ; impl crate :: RegisterSpec for Group14Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group14Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group14Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_AMR2_P to value 0"] impl crate :: Resettable for Group14Amr2PSpec { } }
#[doc = "GROUP14_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group14_amr3_p`] module"]
#[doc (alias = "GROUP14_AMR3_P")] pub type Group14Amr3P = crate :: Reg < group14_amr3_p :: Group14Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group14_amr3_p {
#[doc = "Register `GROUP14_AMR3_P` reader"] pub type R = crate :: R < Group14Amr3PSpec > ;
#[doc = "Register `GROUP14_AMR3_P` writer"] pub type W = crate :: W < Group14Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group14Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group14_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group14_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group14Amr3PSpec ; impl crate :: RegisterSpec for Group14Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group14_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group14Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group14_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group14Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP14_AMR3_P to value 0"] impl crate :: Resettable for Group14Amr3PSpec { } }
#[doc = "GROUP15_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_acr_b`] module"]
#[doc (alias = "GROUP15_ACR_B")] pub type Group15AcrB = crate :: Reg < group15_acr_b :: Group15AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group15_acr_b {
#[doc = "Register `GROUP15_ACR_B` reader"] pub type R = crate :: R < Group15AcrBSpec > ;
#[doc = "Register `GROUP15_ACR_B` writer"] pub type W = crate :: W < Group15AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group15AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15AcrBSpec ; impl crate :: RegisterSpec for Group15AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_acr_b::R`](R) reader structure"] impl crate :: Readable for Group15AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_acr_b::W`](W) writer structure"] impl crate :: Writable for Group15AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_ACR_B to value 0"] impl crate :: Resettable for Group15AcrBSpec { } }
#[doc = "GROUP15_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_acr0_p`] module"]
#[doc (alias = "GROUP15_ACR0_P")] pub type Group15Acr0P = crate :: Reg < group15_acr0_p :: Group15Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group15_acr0_p {
#[doc = "Register `GROUP15_ACR0_P` reader"] pub type R = crate :: R < Group15Acr0PSpec > ;
#[doc = "Register `GROUP15_ACR0_P` writer"] pub type W = crate :: W < Group15Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group15Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15Acr0PSpec ; impl crate :: RegisterSpec for Group15Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group15Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group15Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_ACR0_P to value 0"] impl crate :: Resettable for Group15Acr0PSpec { } }
#[doc = "GROUP15_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_acr1_p`] module"]
#[doc (alias = "GROUP15_ACR1_P")] pub type Group15Acr1P = crate :: Reg < group15_acr1_p :: Group15Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group15_acr1_p {
#[doc = "Register `GROUP15_ACR1_P` reader"] pub type R = crate :: R < Group15Acr1PSpec > ;
#[doc = "Register `GROUP15_ACR1_P` writer"] pub type W = crate :: W < Group15Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group15Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15Acr1PSpec ; impl crate :: RegisterSpec for Group15Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group15Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group15Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_ACR1_P to value 0"] impl crate :: Resettable for Group15Acr1PSpec { } }
#[doc = "GROUP15_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_acr2_p`] module"]
#[doc (alias = "GROUP15_ACR2_P")] pub type Group15Acr2P = crate :: Reg < group15_acr2_p :: Group15Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group15_acr2_p {
#[doc = "Register `GROUP15_ACR2_P` reader"] pub type R = crate :: R < Group15Acr2PSpec > ;
#[doc = "Register `GROUP15_ACR2_P` writer"] pub type W = crate :: W < Group15Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group15Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15Acr2PSpec ; impl crate :: RegisterSpec for Group15Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group15Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group15Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_ACR2_P to value 0"] impl crate :: Resettable for Group15Acr2PSpec { } }
#[doc = "GROUP15_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_acr3_p`] module"]
#[doc (alias = "GROUP15_ACR3_P")] pub type Group15Acr3P = crate :: Reg < group15_acr3_p :: Group15Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group15_acr3_p {
#[doc = "Register `GROUP15_ACR3_P` reader"] pub type R = crate :: R < Group15Acr3PSpec > ;
#[doc = "Register `GROUP15_ACR3_P` writer"] pub type W = crate :: W < Group15Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group15Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15Acr3PSpec ; impl crate :: RegisterSpec for Group15Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group15Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group15Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_ACR3_P to value 0"] impl crate :: Resettable for Group15Acr3PSpec { } }
#[doc = "GROUP15_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_amr_b`] module"]
#[doc (alias = "GROUP15_AMR_B")] pub type Group15AmrB = crate :: Reg < group15_amr_b :: Group15AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group15_amr_b {
#[doc = "Register `GROUP15_AMR_B` reader"] pub type R = crate :: R < Group15AmrBSpec > ;
#[doc = "Register `GROUP15_AMR_B` writer"] pub type W = crate :: W < Group15AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group15AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15AmrBSpec ; impl crate :: RegisterSpec for Group15AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_amr_b::R`](R) reader structure"] impl crate :: Readable for Group15AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_amr_b::W`](W) writer structure"] impl crate :: Writable for Group15AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_AMR_B to value 0"] impl crate :: Resettable for Group15AmrBSpec { } }
#[doc = "GROUP15_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_amr0_p`] module"]
#[doc (alias = "GROUP15_AMR0_P")] pub type Group15Amr0P = crate :: Reg < group15_amr0_p :: Group15Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group15_amr0_p {
#[doc = "Register `GROUP15_AMR0_P` reader"] pub type R = crate :: R < Group15Amr0PSpec > ;
#[doc = "Register `GROUP15_AMR0_P` writer"] pub type W = crate :: W < Group15Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group15Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15Amr0PSpec ; impl crate :: RegisterSpec for Group15Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group15Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group15Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_AMR0_P to value 0"] impl crate :: Resettable for Group15Amr0PSpec { } }
#[doc = "GROUP15_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_amr1_p`] module"]
#[doc (alias = "GROUP15_AMR1_P")] pub type Group15Amr1P = crate :: Reg < group15_amr1_p :: Group15Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group15_amr1_p {
#[doc = "Register `GROUP15_AMR1_P` reader"] pub type R = crate :: R < Group15Amr1PSpec > ;
#[doc = "Register `GROUP15_AMR1_P` writer"] pub type W = crate :: W < Group15Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group15Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15Amr1PSpec ; impl crate :: RegisterSpec for Group15Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group15Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group15Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_AMR1_P to value 0"] impl crate :: Resettable for Group15Amr1PSpec { } }
#[doc = "GROUP15_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_amr2_p`] module"]
#[doc (alias = "GROUP15_AMR2_P")] pub type Group15Amr2P = crate :: Reg < group15_amr2_p :: Group15Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group15_amr2_p {
#[doc = "Register `GROUP15_AMR2_P` reader"] pub type R = crate :: R < Group15Amr2PSpec > ;
#[doc = "Register `GROUP15_AMR2_P` writer"] pub type W = crate :: W < Group15Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group15Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15Amr2PSpec ; impl crate :: RegisterSpec for Group15Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group15Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group15Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_AMR2_P to value 0"] impl crate :: Resettable for Group15Amr2PSpec { } }
#[doc = "GROUP15_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group15_amr3_p`] module"]
#[doc (alias = "GROUP15_AMR3_P")] pub type Group15Amr3P = crate :: Reg < group15_amr3_p :: Group15Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group15_amr3_p {
#[doc = "Register `GROUP15_AMR3_P` reader"] pub type R = crate :: R < Group15Amr3PSpec > ;
#[doc = "Register `GROUP15_AMR3_P` writer"] pub type W = crate :: W < Group15Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group15Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group15_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group15_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group15Amr3PSpec ; impl crate :: RegisterSpec for Group15Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group15_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group15Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group15_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group15Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP15_AMR3_P to value 0"] impl crate :: Resettable for Group15Amr3PSpec { } }
#[doc = "GROUP16_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_acr_b`] module"]
#[doc (alias = "GROUP16_ACR_B")] pub type Group16AcrB = crate :: Reg < group16_acr_b :: Group16AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group16_acr_b {
#[doc = "Register `GROUP16_ACR_B` reader"] pub type R = crate :: R < Group16AcrBSpec > ;
#[doc = "Register `GROUP16_ACR_B` writer"] pub type W = crate :: W < Group16AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group16AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16AcrBSpec ; impl crate :: RegisterSpec for Group16AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_acr_b::R`](R) reader structure"] impl crate :: Readable for Group16AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_acr_b::W`](W) writer structure"] impl crate :: Writable for Group16AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_ACR_B to value 0"] impl crate :: Resettable for Group16AcrBSpec { } }
#[doc = "GROUP16_ACR0_P (rw) register accessor: Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_acr0_p`] module"]
#[doc (alias = "GROUP16_ACR0_P")] pub type Group16Acr0P = crate :: Reg < group16_acr0_p :: Group16Acr0PSpec > ;
#[doc = "Peli Acceptance Code register"] pub mod group16_acr0_p {
#[doc = "Register `GROUP16_ACR0_P` reader"] pub type R = crate :: R < Group16Acr0PSpec > ;
#[doc = "Register `GROUP16_ACR0_P` writer"] pub type W = crate :: W < Group16Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group16Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16Acr0PSpec ; impl crate :: RegisterSpec for Group16Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group16Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group16Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_ACR0_P to value 0"] impl crate :: Resettable for Group16Acr0PSpec { } }
#[doc = "GROUP16_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_acr1_p`] module"]
#[doc (alias = "GROUP16_ACR1_P")] pub type Group16Acr1P = crate :: Reg < group16_acr1_p :: Group16Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group16_acr1_p {
#[doc = "Register `GROUP16_ACR1_P` reader"] pub type R = crate :: R < Group16Acr1PSpec > ;
#[doc = "Register `GROUP16_ACR1_P` writer"] pub type W = crate :: W < Group16Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group16Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16Acr1PSpec ; impl crate :: RegisterSpec for Group16Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group16Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group16Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_ACR1_P to value 0"] impl crate :: Resettable for Group16Acr1PSpec { } }
#[doc = "GROUP16_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_acr2_p`] module"]
#[doc (alias = "GROUP16_ACR2_P")] pub type Group16Acr2P = crate :: Reg < group16_acr2_p :: Group16Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group16_acr2_p {
#[doc = "Register `GROUP16_ACR2_P` reader"] pub type R = crate :: R < Group16Acr2PSpec > ;
#[doc = "Register `GROUP16_ACR2_P` writer"] pub type W = crate :: W < Group16Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group16Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16Acr2PSpec ; impl crate :: RegisterSpec for Group16Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group16Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group16Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_ACR2_P to value 0"] impl crate :: Resettable for Group16Acr2PSpec { } }
#[doc = "GROUP16_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_acr3_p`] module"]
#[doc (alias = "GROUP16_ACR3_P")] pub type Group16Acr3P = crate :: Reg < group16_acr3_p :: Group16Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group16_acr3_p {
#[doc = "Register `GROUP16_ACR3_P` reader"] pub type R = crate :: R < Group16Acr3PSpec > ;
#[doc = "Register `GROUP16_ACR3_P` writer"] pub type W = crate :: W < Group16Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group16Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16Acr3PSpec ; impl crate :: RegisterSpec for Group16Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group16Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group16Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_ACR3_P to value 0"] impl crate :: Resettable for Group16Acr3PSpec { } }
#[doc = "GROUP16_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_amr_b`] module"]
#[doc (alias = "GROUP16_AMR_B")] pub type Group16AmrB = crate :: Reg < group16_amr_b :: Group16AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group16_amr_b {
#[doc = "Register `GROUP16_AMR_B` reader"] pub type R = crate :: R < Group16AmrBSpec > ;
#[doc = "Register `GROUP16_AMR_B` writer"] pub type W = crate :: W < Group16AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group16AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16AmrBSpec ; impl crate :: RegisterSpec for Group16AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_amr_b::R`](R) reader structure"] impl crate :: Readable for Group16AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_amr_b::W`](W) writer structure"] impl crate :: Writable for Group16AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_AMR_B to value 0"] impl crate :: Resettable for Group16AmrBSpec { } }
#[doc = "GROUP16_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_amr0_p`] module"]
#[doc (alias = "GROUP16_AMR0_P")] pub type Group16Amr0P = crate :: Reg < group16_amr0_p :: Group16Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group16_amr0_p {
#[doc = "Register `GROUP16_AMR0_P` reader"] pub type R = crate :: R < Group16Amr0PSpec > ;
#[doc = "Register `GROUP16_AMR0_P` writer"] pub type W = crate :: W < Group16Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group16Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16Amr0PSpec ; impl crate :: RegisterSpec for Group16Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group16Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group16Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_AMR0_P to value 0"] impl crate :: Resettable for Group16Amr0PSpec { } }
#[doc = "GROUP16_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_amr1_p`] module"]
#[doc (alias = "GROUP16_AMR1_P")] pub type Group16Amr1P = crate :: Reg < group16_amr1_p :: Group16Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group16_amr1_p {
#[doc = "Register `GROUP16_AMR1_P` reader"] pub type R = crate :: R < Group16Amr1PSpec > ;
#[doc = "Register `GROUP16_AMR1_P` writer"] pub type W = crate :: W < Group16Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group16Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16Amr1PSpec ; impl crate :: RegisterSpec for Group16Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group16Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group16Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_AMR1_P to value 0"] impl crate :: Resettable for Group16Amr1PSpec { } }
#[doc = "GROUP16_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_amr2_p`] module"]
#[doc (alias = "GROUP16_AMR2_P")] pub type Group16Amr2P = crate :: Reg < group16_amr2_p :: Group16Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group16_amr2_p {
#[doc = "Register `GROUP16_AMR2_P` reader"] pub type R = crate :: R < Group16Amr2PSpec > ;
#[doc = "Register `GROUP16_AMR2_P` writer"] pub type W = crate :: W < Group16Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group16Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16Amr2PSpec ; impl crate :: RegisterSpec for Group16Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group16Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group16Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_AMR2_P to value 0"] impl crate :: Resettable for Group16Amr2PSpec { } }
#[doc = "GROUP16_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group16_amr3_p`] module"]
#[doc (alias = "GROUP16_AMR3_P")] pub type Group16Amr3P = crate :: Reg < group16_amr3_p :: Group16Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group16_amr3_p {
#[doc = "Register `GROUP16_AMR3_P` reader"] pub type R = crate :: R < Group16Amr3PSpec > ;
#[doc = "Register `GROUP16_AMR3_P` writer"] pub type W = crate :: W < Group16Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group16Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group16_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group16_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group16Amr3PSpec ; impl crate :: RegisterSpec for Group16Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group16_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group16Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group16_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group16Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP16_AMR3_P to value 0"] impl crate :: Resettable for Group16Amr3PSpec { } }
#[doc = "GROUP17_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_acr_b`] module"]
#[doc (alias = "GROUP17_ACR_B")] pub type Group17AcrB = crate :: Reg < group17_acr_b :: Group17AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group17_acr_b {
#[doc = "Register `GROUP17_ACR_B` reader"] pub type R = crate :: R < Group17AcrBSpec > ;
#[doc = "Register `GROUP17_ACR_B` writer"] pub type W = crate :: W < Group17AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group17AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17AcrBSpec ; impl crate :: RegisterSpec for Group17AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_acr_b::R`](R) reader structure"] impl crate :: Readable for Group17AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_acr_b::W`](W) writer structure"] impl crate :: Writable for Group17AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_ACR_B to value 0"] impl crate :: Resettable for Group17AcrBSpec { } }
#[doc = "GROUP17_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_acr0_p`] module"]
#[doc (alias = "GROUP17_ACR0_P")] pub type Group17Acr0P = crate :: Reg < group17_acr0_p :: Group17Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group17_acr0_p {
#[doc = "Register `GROUP17_ACR0_P` reader"] pub type R = crate :: R < Group17Acr0PSpec > ;
#[doc = "Register `GROUP17_ACR0_P` writer"] pub type W = crate :: W < Group17Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group17Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17Acr0PSpec ; impl crate :: RegisterSpec for Group17Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group17Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group17Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_ACR0_P to value 0"] impl crate :: Resettable for Group17Acr0PSpec { } }
#[doc = "GROUP17_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_acr1_p`] module"]
#[doc (alias = "GROUP17_ACR1_P")] pub type Group17Acr1P = crate :: Reg < group17_acr1_p :: Group17Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group17_acr1_p {
#[doc = "Register `GROUP17_ACR1_P` reader"] pub type R = crate :: R < Group17Acr1PSpec > ;
#[doc = "Register `GROUP17_ACR1_P` writer"] pub type W = crate :: W < Group17Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group17Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17Acr1PSpec ; impl crate :: RegisterSpec for Group17Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group17Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group17Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_ACR1_P to value 0"] impl crate :: Resettable for Group17Acr1PSpec { } }
#[doc = "GROUP17_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_acr2_p`] module"]
#[doc (alias = "GROUP17_ACR2_P")] pub type Group17Acr2P = crate :: Reg < group17_acr2_p :: Group17Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group17_acr2_p {
#[doc = "Register `GROUP17_ACR2_P` reader"] pub type R = crate :: R < Group17Acr2PSpec > ;
#[doc = "Register `GROUP17_ACR2_P` writer"] pub type W = crate :: W < Group17Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group17Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17Acr2PSpec ; impl crate :: RegisterSpec for Group17Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group17Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group17Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_ACR2_P to value 0"] impl crate :: Resettable for Group17Acr2PSpec { } }
#[doc = "GROUP17_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_acr3_p`] module"]
#[doc (alias = "GROUP17_ACR3_P")] pub type Group17Acr3P = crate :: Reg < group17_acr3_p :: Group17Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group17_acr3_p {
#[doc = "Register `GROUP17_ACR3_P` reader"] pub type R = crate :: R < Group17Acr3PSpec > ;
#[doc = "Register `GROUP17_ACR3_P` writer"] pub type W = crate :: W < Group17Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group17Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17Acr3PSpec ; impl crate :: RegisterSpec for Group17Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group17Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group17Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_ACR3_P to value 0"] impl crate :: Resettable for Group17Acr3PSpec { } }
#[doc = "GROUP17_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_amr_b`] module"]
#[doc (alias = "GROUP17_AMR_B")] pub type Group17AmrB = crate :: Reg < group17_amr_b :: Group17AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group17_amr_b {
#[doc = "Register `GROUP17_AMR_B` reader"] pub type R = crate :: R < Group17AmrBSpec > ;
#[doc = "Register `GROUP17_AMR_B` writer"] pub type W = crate :: W < Group17AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group17AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17AmrBSpec ; impl crate :: RegisterSpec for Group17AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_amr_b::R`](R) reader structure"] impl crate :: Readable for Group17AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_amr_b::W`](W) writer structure"] impl crate :: Writable for Group17AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_AMR_B to value 0"] impl crate :: Resettable for Group17AmrBSpec { } }
#[doc = "GROUP17_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_amr0_p`] module"]
#[doc (alias = "GROUP17_AMR0_P")] pub type Group17Amr0P = crate :: Reg < group17_amr0_p :: Group17Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group17_amr0_p {
#[doc = "Register `GROUP17_AMR0_P` reader"] pub type R = crate :: R < Group17Amr0PSpec > ;
#[doc = "Register `GROUP17_AMR0_P` writer"] pub type W = crate :: W < Group17Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group17Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17Amr0PSpec ; impl crate :: RegisterSpec for Group17Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group17Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group17Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_AMR0_P to value 0"] impl crate :: Resettable for Group17Amr0PSpec { } }
#[doc = "GROUP17_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_amr1_p`] module"]
#[doc (alias = "GROUP17_AMR1_P")] pub type Group17Amr1P = crate :: Reg < group17_amr1_p :: Group17Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group17_amr1_p {
#[doc = "Register `GROUP17_AMR1_P` reader"] pub type R = crate :: R < Group17Amr1PSpec > ;
#[doc = "Register `GROUP17_AMR1_P` writer"] pub type W = crate :: W < Group17Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group17Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17Amr1PSpec ; impl crate :: RegisterSpec for Group17Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group17Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group17Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_AMR1_P to value 0"] impl crate :: Resettable for Group17Amr1PSpec { } }
#[doc = "GROUP17_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_amr2_p`] module"]
#[doc (alias = "GROUP17_AMR2_P")] pub type Group17Amr2P = crate :: Reg < group17_amr2_p :: Group17Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group17_amr2_p {
#[doc = "Register `GROUP17_AMR2_P` reader"] pub type R = crate :: R < Group17Amr2PSpec > ;
#[doc = "Register `GROUP17_AMR2_P` writer"] pub type W = crate :: W < Group17Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group17Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17Amr2PSpec ; impl crate :: RegisterSpec for Group17Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group17Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group17Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_AMR2_P to value 0"] impl crate :: Resettable for Group17Amr2PSpec { } }
#[doc = "GROUP17_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group17_amr3_p`] module"]
#[doc (alias = "GROUP17_AMR3_P")] pub type Group17Amr3P = crate :: Reg < group17_amr3_p :: Group17Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group17_amr3_p {
#[doc = "Register `GROUP17_AMR3_P` reader"] pub type R = crate :: R < Group17Amr3PSpec > ;
#[doc = "Register `GROUP17_AMR3_P` writer"] pub type W = crate :: W < Group17Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group17Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group17_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group17_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group17Amr3PSpec ; impl crate :: RegisterSpec for Group17Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group17_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group17Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group17_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group17Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP17_AMR3_P to value 0"] impl crate :: Resettable for Group17Amr3PSpec { } }
#[doc = "GROUP18_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_acr_b`] module"]
#[doc (alias = "GROUP18_ACR_B")] pub type Group18AcrB = crate :: Reg < group18_acr_b :: Group18AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group18_acr_b {
#[doc = "Register `GROUP18_ACR_B` reader"] pub type R = crate :: R < Group18AcrBSpec > ;
#[doc = "Register `GROUP18_ACR_B` writer"] pub type W = crate :: W < Group18AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group18AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18AcrBSpec ; impl crate :: RegisterSpec for Group18AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_acr_b::R`](R) reader structure"] impl crate :: Readable for Group18AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_acr_b::W`](W) writer structure"] impl crate :: Writable for Group18AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_ACR_B to value 0"] impl crate :: Resettable for Group18AcrBSpec { } }
#[doc = "GROUP18_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_acr0_p`] module"]
#[doc (alias = "GROUP18_ACR0_P")] pub type Group18Acr0P = crate :: Reg < group18_acr0_p :: Group18Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group18_acr0_p {
#[doc = "Register `GROUP18_ACR0_P` reader"] pub type R = crate :: R < Group18Acr0PSpec > ;
#[doc = "Register `GROUP18_ACR0_P` writer"] pub type W = crate :: W < Group18Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group18Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18Acr0PSpec ; impl crate :: RegisterSpec for Group18Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group18Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group18Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_ACR0_P to value 0"] impl crate :: Resettable for Group18Acr0PSpec { } }
#[doc = "GROUP18_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_acr1_p`] module"]
#[doc (alias = "GROUP18_ACR1_P")] pub type Group18Acr1P = crate :: Reg < group18_acr1_p :: Group18Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group18_acr1_p {
#[doc = "Register `GROUP18_ACR1_P` reader"] pub type R = crate :: R < Group18Acr1PSpec > ;
#[doc = "Register `GROUP18_ACR1_P` writer"] pub type W = crate :: W < Group18Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group18Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18Acr1PSpec ; impl crate :: RegisterSpec for Group18Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group18Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group18Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_ACR1_P to value 0"] impl crate :: Resettable for Group18Acr1PSpec { } }
#[doc = "GROUP18_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_acr2_p`] module"]
#[doc (alias = "GROUP18_ACR2_P")] pub type Group18Acr2P = crate :: Reg < group18_acr2_p :: Group18Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group18_acr2_p {
#[doc = "Register `GROUP18_ACR2_P` reader"] pub type R = crate :: R < Group18Acr2PSpec > ;
#[doc = "Register `GROUP18_ACR2_P` writer"] pub type W = crate :: W < Group18Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group18Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18Acr2PSpec ; impl crate :: RegisterSpec for Group18Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group18Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group18Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_ACR2_P to value 0"] impl crate :: Resettable for Group18Acr2PSpec { } }
#[doc = "GROUP18_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_acr3_p`] module"]
#[doc (alias = "GROUP18_ACR3_P")] pub type Group18Acr3P = crate :: Reg < group18_acr3_p :: Group18Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group18_acr3_p {
#[doc = "Register `GROUP18_ACR3_P` reader"] pub type R = crate :: R < Group18Acr3PSpec > ;
#[doc = "Register `GROUP18_ACR3_P` writer"] pub type W = crate :: W < Group18Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group18Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18Acr3PSpec ; impl crate :: RegisterSpec for Group18Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group18Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group18Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_ACR3_P to value 0"] impl crate :: Resettable for Group18Acr3PSpec { } }
#[doc = "GROUP18_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_amr_b`] module"]
#[doc (alias = "GROUP18_AMR_B")] pub type Group18AmrB = crate :: Reg < group18_amr_b :: Group18AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group18_amr_b {
#[doc = "Register `GROUP18_AMR_B` reader"] pub type R = crate :: R < Group18AmrBSpec > ;
#[doc = "Register `GROUP18_AMR_B` writer"] pub type W = crate :: W < Group18AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group18AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18AmrBSpec ; impl crate :: RegisterSpec for Group18AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_amr_b::R`](R) reader structure"] impl crate :: Readable for Group18AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_amr_b::W`](W) writer structure"] impl crate :: Writable for Group18AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_AMR_B to value 0"] impl crate :: Resettable for Group18AmrBSpec { } }
#[doc = "GROUP18_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_amr0_p`] module"]
#[doc (alias = "GROUP18_AMR0_P")] pub type Group18Amr0P = crate :: Reg < group18_amr0_p :: Group18Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group18_amr0_p {
#[doc = "Register `GROUP18_AMR0_P` reader"] pub type R = crate :: R < Group18Amr0PSpec > ;
#[doc = "Register `GROUP18_AMR0_P` writer"] pub type W = crate :: W < Group18Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group18Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18Amr0PSpec ; impl crate :: RegisterSpec for Group18Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group18Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group18Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_AMR0_P to value 0"] impl crate :: Resettable for Group18Amr0PSpec { } }
#[doc = "GROUP18_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_amr1_p`] module"]
#[doc (alias = "GROUP18_AMR1_P")] pub type Group18Amr1P = crate :: Reg < group18_amr1_p :: Group18Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group18_amr1_p {
#[doc = "Register `GROUP18_AMR1_P` reader"] pub type R = crate :: R < Group18Amr1PSpec > ;
#[doc = "Register `GROUP18_AMR1_P` writer"] pub type W = crate :: W < Group18Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group18Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18Amr1PSpec ; impl crate :: RegisterSpec for Group18Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group18Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group18Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_AMR1_P to value 0"] impl crate :: Resettable for Group18Amr1PSpec { } }
#[doc = "GROUP18_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_amr2_p`] module"]
#[doc (alias = "GROUP18_AMR2_P")] pub type Group18Amr2P = crate :: Reg < group18_amr2_p :: Group18Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group18_amr2_p {
#[doc = "Register `GROUP18_AMR2_P` reader"] pub type R = crate :: R < Group18Amr2PSpec > ;
#[doc = "Register `GROUP18_AMR2_P` writer"] pub type W = crate :: W < Group18Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group18Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18Amr2PSpec ; impl crate :: RegisterSpec for Group18Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group18Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group18Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_AMR2_P to value 0"] impl crate :: Resettable for Group18Amr2PSpec { } }
#[doc = "GROUP18_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group18_amr3_p`] module"]
#[doc (alias = "GROUP18_AMR3_P")] pub type Group18Amr3P = crate :: Reg < group18_amr3_p :: Group18Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group18_amr3_p {
#[doc = "Register `GROUP18_AMR3_P` reader"] pub type R = crate :: R < Group18Amr3PSpec > ;
#[doc = "Register `GROUP18_AMR3_P` writer"] pub type W = crate :: W < Group18Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group18Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group18_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group18_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group18Amr3PSpec ; impl crate :: RegisterSpec for Group18Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group18_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group18Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group18_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group18Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP18_AMR3_P to value 0"] impl crate :: Resettable for Group18Amr3PSpec { } }
#[doc = "GROUP19_ACR_B (rw) register accessor: Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_acr_b`] module"]
#[doc (alias = "GROUP19_ACR_B")] pub type Group19AcrB = crate :: Reg < group19_acr_b :: Group19AcrBSpec > ;
#[doc = "Basic Acceptance Code register"] pub mod group19_acr_b {
#[doc = "Register `GROUP19_ACR_B` reader"] pub type R = crate :: R < Group19AcrBSpec > ;
#[doc = "Register `GROUP19_ACR_B` writer"] pub type W = crate :: W < Group19AcrBSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group19AcrBSpec > { AcW :: new (self , 0) } }
#[doc = "Basic Acceptance Code register\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19AcrBSpec ; impl crate :: RegisterSpec for Group19AcrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_acr_b::R`](R) reader structure"] impl crate :: Readable for Group19AcrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_acr_b::W`](W) writer structure"] impl crate :: Writable for Group19AcrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_ACR_B to value 0"] impl crate :: Resettable for Group19AcrBSpec { } }
#[doc = "GROUP19_ACR0_P (rw) register accessor: Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_acr0_p`] module"]
#[doc (alias = "GROUP19_ACR0_P")] pub type Group19Acr0P = crate :: Reg < group19_acr0_p :: Group19Acr0PSpec > ;
#[doc = "Peli Acceptance Code register0"] pub mod group19_acr0_p {
#[doc = "Register `GROUP19_ACR0_P` reader"] pub type R = crate :: R < Group19Acr0PSpec > ;
#[doc = "Register `GROUP19_ACR0_P` writer"] pub type W = crate :: W < Group19Acr0PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group19Acr0PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register0\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19Acr0PSpec ; impl crate :: RegisterSpec for Group19Acr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_acr0_p::R`](R) reader structure"] impl crate :: Readable for Group19Acr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_acr0_p::W`](W) writer structure"] impl crate :: Writable for Group19Acr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_ACR0_P to value 0"] impl crate :: Resettable for Group19Acr0PSpec { } }
#[doc = "GROUP19_ACR1_P (rw) register accessor: Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_acr1_p`] module"]
#[doc (alias = "GROUP19_ACR1_P")] pub type Group19Acr1P = crate :: Reg < group19_acr1_p :: Group19Acr1PSpec > ;
#[doc = "Peli Acceptance Code register1"] pub mod group19_acr1_p {
#[doc = "Register `GROUP19_ACR1_P` reader"] pub type R = crate :: R < Group19Acr1PSpec > ;
#[doc = "Register `GROUP19_ACR1_P` writer"] pub type W = crate :: W < Group19Acr1PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group19Acr1PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register1\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19Acr1PSpec ; impl crate :: RegisterSpec for Group19Acr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_acr1_p::R`](R) reader structure"] impl crate :: Readable for Group19Acr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_acr1_p::W`](W) writer structure"] impl crate :: Writable for Group19Acr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_ACR1_P to value 0"] impl crate :: Resettable for Group19Acr1PSpec { } }
#[doc = "GROUP19_ACR2_P (rw) register accessor: Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_acr2_p`] module"]
#[doc (alias = "GROUP19_ACR2_P")] pub type Group19Acr2P = crate :: Reg < group19_acr2_p :: Group19Acr2PSpec > ;
#[doc = "Peli Acceptance Code register2"] pub mod group19_acr2_p {
#[doc = "Register `GROUP19_ACR2_P` reader"] pub type R = crate :: R < Group19Acr2PSpec > ;
#[doc = "Register `GROUP19_ACR2_P` writer"] pub type W = crate :: W < Group19Acr2PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group19Acr2PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register2\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19Acr2PSpec ; impl crate :: RegisterSpec for Group19Acr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_acr2_p::R`](R) reader structure"] impl crate :: Readable for Group19Acr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_acr2_p::W`](W) writer structure"] impl crate :: Writable for Group19Acr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_ACR2_P to value 0"] impl crate :: Resettable for Group19Acr2PSpec { } }
#[doc = "GROUP19_ACR3_P (rw) register accessor: Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_acr3_p`] module"]
#[doc (alias = "GROUP19_ACR3_P")] pub type Group19Acr3P = crate :: Reg < group19_acr3_p :: Group19Acr3PSpec > ;
#[doc = "Peli Acceptance Code register3"] pub mod group19_acr3_p {
#[doc = "Register `GROUP19_ACR3_P` reader"] pub type R = crate :: R < Group19Acr3PSpec > ;
#[doc = "Register `GROUP19_ACR3_P` writer"] pub type W = crate :: W < Group19Acr3PSpec > ;
#[doc = "Field `AC` reader - Acceptance code"] pub type AcR = crate :: FieldReader ;
#[doc = "Field `AC` writer - Acceptance code"] pub type AcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& self) -> AcR { AcR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance code"]
#[inline (always)] pub fn ac (& mut self) -> AcW < '_ , Group19Acr3PSpec > { AcW :: new (self , 0) } }
#[doc = "Peli Acceptance Code register3\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_acr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_acr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19Acr3PSpec ; impl crate :: RegisterSpec for Group19Acr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_acr3_p::R`](R) reader structure"] impl crate :: Readable for Group19Acr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_acr3_p::W`](W) writer structure"] impl crate :: Writable for Group19Acr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_ACR3_P to value 0"] impl crate :: Resettable for Group19Acr3PSpec { } }
#[doc = "GROUP19_AMR_B (rw) register accessor: Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr_b::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr_b::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_amr_b`] module"]
#[doc (alias = "GROUP19_AMR_B")] pub type Group19AmrB = crate :: Reg < group19_amr_b :: Group19AmrBSpec > ;
#[doc = "Basic Acceptance Mask register"] pub mod group19_amr_b {
#[doc = "Register `GROUP19_AMR_B` reader"] pub type R = crate :: R < Group19AmrBSpec > ;
#[doc = "Register `GROUP19_AMR_B` writer"] pub type W = crate :: W < Group19AmrBSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group19AmrBSpec > { AmW :: new (self , 0) } }
#[doc = "Basic Acceptance Mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr_b::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr_b::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19AmrBSpec ; impl crate :: RegisterSpec for Group19AmrBSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_amr_b::R`](R) reader structure"] impl crate :: Readable for Group19AmrBSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_amr_b::W`](W) writer structure"] impl crate :: Writable for Group19AmrBSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_AMR_B to value 0"] impl crate :: Resettable for Group19AmrBSpec { } }
#[doc = "GROUP19_AMR0_P (rw) register accessor: Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr0_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr0_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_amr0_p`] module"]
#[doc (alias = "GROUP19_AMR0_P")] pub type Group19Amr0P = crate :: Reg < group19_amr0_p :: Group19Amr0PSpec > ;
#[doc = "Peli Acceptance Mask register 0"] pub mod group19_amr0_p {
#[doc = "Register `GROUP19_AMR0_P` reader"] pub type R = crate :: R < Group19Amr0PSpec > ;
#[doc = "Register `GROUP19_AMR0_P` writer"] pub type W = crate :: W < Group19Amr0PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group19Amr0PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr0_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr0_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19Amr0PSpec ; impl crate :: RegisterSpec for Group19Amr0PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_amr0_p::R`](R) reader structure"] impl crate :: Readable for Group19Amr0PSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_amr0_p::W`](W) writer structure"] impl crate :: Writable for Group19Amr0PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_AMR0_P to value 0"] impl crate :: Resettable for Group19Amr0PSpec { } }
#[doc = "GROUP19_AMR1_P (rw) register accessor: Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr1_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr1_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_amr1_p`] module"]
#[doc (alias = "GROUP19_AMR1_P")] pub type Group19Amr1P = crate :: Reg < group19_amr1_p :: Group19Amr1PSpec > ;
#[doc = "Peli Acceptance Mask register 1"] pub mod group19_amr1_p {
#[doc = "Register `GROUP19_AMR1_P` reader"] pub type R = crate :: R < Group19Amr1PSpec > ;
#[doc = "Register `GROUP19_AMR1_P` writer"] pub type W = crate :: W < Group19Amr1PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group19Amr1PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr1_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr1_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19Amr1PSpec ; impl crate :: RegisterSpec for Group19Amr1PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_amr1_p::R`](R) reader structure"] impl crate :: Readable for Group19Amr1PSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_amr1_p::W`](W) writer structure"] impl crate :: Writable for Group19Amr1PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_AMR1_P to value 0"] impl crate :: Resettable for Group19Amr1PSpec { } }
#[doc = "GROUP19_AMR2_P (rw) register accessor: Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr2_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr2_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_amr2_p`] module"]
#[doc (alias = "GROUP19_AMR2_P")] pub type Group19Amr2P = crate :: Reg < group19_amr2_p :: Group19Amr2PSpec > ;
#[doc = "Peli Acceptance Mask register 2"] pub mod group19_amr2_p {
#[doc = "Register `GROUP19_AMR2_P` reader"] pub type R = crate :: R < Group19Amr2PSpec > ;
#[doc = "Register `GROUP19_AMR2_P` writer"] pub type W = crate :: W < Group19Amr2PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group19Amr2PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr2_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr2_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19Amr2PSpec ; impl crate :: RegisterSpec for Group19Amr2PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_amr2_p::R`](R) reader structure"] impl crate :: Readable for Group19Amr2PSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_amr2_p::W`](W) writer structure"] impl crate :: Writable for Group19Amr2PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_AMR2_P to value 0"] impl crate :: Resettable for Group19Amr2PSpec { } }
#[doc = "GROUP19_AMR3_P (rw) register accessor: Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr3_p::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr3_p::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@group19_amr3_p`] module"]
#[doc (alias = "GROUP19_AMR3_P")] pub type Group19Amr3P = crate :: Reg < group19_amr3_p :: Group19Amr3PSpec > ;
#[doc = "Peli Acceptance Mask register 3"] pub mod group19_amr3_p {
#[doc = "Register `GROUP19_AMR3_P` reader"] pub type R = crate :: R < Group19Amr3PSpec > ;
#[doc = "Register `GROUP19_AMR3_P` writer"] pub type W = crate :: W < Group19Amr3PSpec > ;
#[doc = "Field `AM` reader - Acceptance mask"] pub type AmR = crate :: FieldReader ;
#[doc = "Field `AM` writer - Acceptance mask"] pub type AmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& self) -> AmR { AmR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Acceptance mask"]
#[inline (always)] pub fn am (& mut self) -> AmW < '_ , Group19Amr3PSpec > { AmW :: new (self , 0) } }
#[doc = "Peli Acceptance Mask register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`group19_amr3_p::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`group19_amr3_p::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Group19Amr3PSpec ; impl crate :: RegisterSpec for Group19Amr3PSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`group19_amr3_p::R`](R) reader structure"] impl crate :: Readable for Group19Amr3PSpec { }
#[doc = "`write(|w| ..)` method takes [`group19_amr3_p::W`](W) writer structure"] impl crate :: Writable for Group19Amr3PSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GROUP19_AMR3_P to value 0"] impl crate :: Resettable for Group19Amr3PSpec { } } }
#[doc = "Comparator"] pub type Comp = crate :: Periph < comp :: RegisterBlock , 0x4001_3c00 > ; impl core :: fmt :: Debug for Comp { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Comp") . finish () } }
#[doc = "Comparator"] pub mod comp {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { comp1_csr : Comp1Csr , comp2_csr : Comp2Csr , _reserved2 : [u8 ; 0x10] , comp_crv : CompCrv , comp1_poll : Comp1Poll , comp2_poll : Comp2Poll , } impl RegisterBlock {
#[doc = "0x00 - COMP1 Control State Register"]
#[inline (always)] pub const fn comp1_csr (& self) -> & Comp1Csr { & self . comp1_csr }
#[doc = "0x04 - COMP2 Control State Register"]
#[inline (always)] pub const fn comp2_csr (& self) -> & Comp2Csr { & self . comp2_csr }
#[doc = "0x18 - COMP Extern Reference Voltage"]
#[inline (always)] pub const fn comp_crv (& self) -> & CompCrv { & self . comp_crv }
#[doc = "0x1c - COMP1 Polling Output Register"]
#[inline (always)] pub const fn comp1_poll (& self) -> & Comp1Poll { & self . comp1_poll }
#[doc = "0x20 - COMP2 Polling Output Register"]
#[inline (always)] pub const fn comp2_poll (& self) -> & Comp2Poll { & self . comp2_poll } }
#[doc = "COMP1_CSR (rw) register accessor: COMP1 Control State Register\n\nYou can [`read`](crate::Reg::read) this register and get [`comp1_csr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp1_csr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@comp1_csr`] module"]
#[doc (alias = "COMP1_CSR")] pub type Comp1Csr = crate :: Reg < comp1_csr :: Comp1CsrSpec > ;
#[doc = "COMP1 Control State Register"] pub mod comp1_csr {
#[doc = "Register `COMP1_CSR` reader"] pub type R = crate :: R < Comp1CsrSpec > ;
#[doc = "Register `COMP1_CSR` writer"] pub type W = crate :: W < Comp1CsrSpec > ;
#[doc = "Field `EN` reader - Comparator 1 enable"] pub type EnR = crate :: BitReader ;
#[doc = "Field `EN` writer - Comparator 1 enable"] pub type EnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MODE` reader - Comparator 1 mode"] pub type ModeR = crate :: FieldReader ;
#[doc = "Field `MODE` writer - Comparator 1 mode"] pub type ModeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `INM_SEL` reader - Comparator 1 inverting input selection"] pub type InmSelR = crate :: FieldReader ;
#[doc = "Field `INM_SEL` writer - Comparator 1 inverting input selection"] pub type InmSelW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `INP_SEL` reader - Comparator 1 normal phase input selection"] pub type InpSelR = crate :: FieldReader ;
#[doc = "Field `INP_SEL` writer - Comparator 1 normal phase input selection"] pub type InpSelW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OUT_SEL` reader - Comparator 1 output selection"] pub type OutSelR = crate :: FieldReader ;
#[doc = "Field `OUT_SEL` writer - Comparator 1 output selection"] pub type OutSelW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `POL` reader - Comparator 1 output polarity"] pub type PolR = crate :: BitReader ;
#[doc = "Field `POL` writer - Comparator 1 output polarity"] pub type PolW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HYST` reader - Comparator 1 hysteresis"] pub type HystR = crate :: FieldReader ;
#[doc = "Field `HYST` writer - Comparator 1 hysteresis"] pub type HystW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OFLT` reader - Comparator output filter"] pub type OfltR = crate :: FieldReader ;
#[doc = "Field `OFLT` writer - Comparator output filter"] pub type OfltW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OUT` reader - Comparator 1 lock"] pub type OutR = crate :: BitReader ;
#[doc = "Field `OUT` writer - Comparator 1 lock"] pub type OutW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LOCK` reader - Comparator lock"] pub type LockR = crate :: BitReader ;
#[doc = "Field `LOCK` writer - Comparator lock"] pub type LockW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Comparator 1 enable"]
#[inline (always)] pub fn en (& self) -> EnR { EnR :: new ((self . bits & 1) != 0) }
#[doc = "Bits 2:3 - Comparator 1 mode"]
#[inline (always)] pub fn mode (& self) -> ModeR { ModeR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:5 - Comparator 1 inverting input selection"]
#[inline (always)] pub fn inm_sel (& self) -> InmSelR { InmSelR :: new (((self . bits >> 4) & 3) as u8) }
#[doc = "Bits 7:8 - Comparator 1 normal phase input selection"]
#[inline (always)] pub fn inp_sel (& self) -> InpSelR { InpSelR :: new (((self . bits >> 7) & 3) as u8) }
#[doc = "Bits 10:13 - Comparator 1 output selection"]
#[inline (always)] pub fn out_sel (& self) -> OutSelR { OutSelR :: new (((self . bits >> 10) & 0x0f) as u8) }
#[doc = "Bit 15 - Comparator 1 output polarity"]
#[inline (always)] pub fn pol (& self) -> PolR { PolR :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bits 16:17 - Comparator 1 hysteresis"]
#[inline (always)] pub fn hyst (& self) -> HystR { HystR :: new (((self . bits >> 16) & 3) as u8) }
#[doc = "Bits 18:20 - Comparator output filter"]
#[inline (always)] pub fn oflt (& self) -> OfltR { OfltR :: new (((self . bits >> 18) & 7) as u8) }
#[doc = "Bit 30 - Comparator 1 lock"]
#[inline (always)] pub fn out (& self) -> OutR { OutR :: new (((self . bits >> 30) & 1) != 0) }
#[doc = "Bit 31 - Comparator lock"]
#[inline (always)] pub fn lock (& self) -> LockR { LockR :: new (((self . bits >> 31) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Comparator 1 enable"]
#[inline (always)] pub fn en (& mut self) -> EnW < '_ , Comp1CsrSpec > { EnW :: new (self , 0) }
#[doc = "Bits 2:3 - Comparator 1 mode"]
#[inline (always)] pub fn mode (& mut self) -> ModeW < '_ , Comp1CsrSpec > { ModeW :: new (self , 2) }
#[doc = "Bits 4:5 - Comparator 1 inverting input selection"]
#[inline (always)] pub fn inm_sel (& mut self) -> InmSelW < '_ , Comp1CsrSpec > { InmSelW :: new (self , 4) }
#[doc = "Bits 7:8 - Comparator 1 normal phase input selection"]
#[inline (always)] pub fn inp_sel (& mut self) -> InpSelW < '_ , Comp1CsrSpec > { InpSelW :: new (self , 7) }
#[doc = "Bits 10:13 - Comparator 1 output selection"]
#[inline (always)] pub fn out_sel (& mut self) -> OutSelW < '_ , Comp1CsrSpec > { OutSelW :: new (self , 10) }
#[doc = "Bit 15 - Comparator 1 output polarity"]
#[inline (always)] pub fn pol (& mut self) -> PolW < '_ , Comp1CsrSpec > { PolW :: new (self , 15) }
#[doc = "Bits 16:17 - Comparator 1 hysteresis"]
#[inline (always)] pub fn hyst (& mut self) -> HystW < '_ , Comp1CsrSpec > { HystW :: new (self , 16) }
#[doc = "Bits 18:20 - Comparator output filter"]
#[inline (always)] pub fn oflt (& mut self) -> OfltW < '_ , Comp1CsrSpec > { OfltW :: new (self , 18) }
#[doc = "Bit 30 - Comparator 1 lock"]
#[inline (always)] pub fn out (& mut self) -> OutW < '_ , Comp1CsrSpec > { OutW :: new (self , 30) }
#[doc = "Bit 31 - Comparator lock"]
#[inline (always)] pub fn lock (& mut self) -> LockW < '_ , Comp1CsrSpec > { LockW :: new (self , 31) } }
#[doc = "COMP1 Control State Register\n\nYou can [`read`](crate::Reg::read) this register and get [`comp1_csr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp1_csr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Comp1CsrSpec ; impl crate :: RegisterSpec for Comp1CsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`comp1_csr::R`](R) reader structure"] impl crate :: Readable for Comp1CsrSpec { }
#[doc = "`write(|w| ..)` method takes [`comp1_csr::W`](W) writer structure"] impl crate :: Writable for Comp1CsrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets COMP1_CSR to value 0"] impl crate :: Resettable for Comp1CsrSpec { } }
#[doc = "COMP2_CSR (rw) register accessor: COMP2 Control State Register\n\nYou can [`read`](crate::Reg::read) this register and get [`comp2_csr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp2_csr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@comp2_csr`] module"]
#[doc (alias = "COMP2_CSR")] pub type Comp2Csr = crate :: Reg < comp2_csr :: Comp2CsrSpec > ;
#[doc = "COMP2 Control State Register"] pub mod comp2_csr {
#[doc = "Register `COMP2_CSR` reader"] pub type R = crate :: R < Comp2CsrSpec > ;
#[doc = "Register `COMP2_CSR` writer"] pub type W = crate :: W < Comp2CsrSpec > ;
#[doc = "Field `EN` reader - Comparator 2 enable"] pub type EnR = crate :: BitReader ;
#[doc = "Field `EN` writer - Comparator 2 enable"] pub type EnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MODE` reader - Comparator 2 mode"] pub type ModeR = crate :: FieldReader ;
#[doc = "Field `MODE` writer - Comparator 2 mode"] pub type ModeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `INM_SEL` reader - Comparator 2 inverting input selection"] pub type InmSelR = crate :: FieldReader ;
#[doc = "Field `INM_SEL` writer - Comparator 2 inverting input selection"] pub type InmSelW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `INP_SEL` reader - Comparator 2 normal phase input selection"] pub type InpSelR = crate :: FieldReader ;
#[doc = "Field `INP_SEL` writer - Comparator 2 normal phase input selection"] pub type InpSelW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OUT_SEL` reader - Comparator 2 output selection"] pub type OutSelR = crate :: FieldReader ;
#[doc = "Field `OUT_SEL` writer - Comparator 2 output selection"] pub type OutSelW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `POL` reader - Comparator 2 output polarity"] pub type PolR = crate :: BitReader ;
#[doc = "Field `POL` writer - Comparator 2 output polarity"] pub type PolW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HYST` reader - Comparator 2 hysteresis"] pub type HystR = crate :: FieldReader ;
#[doc = "Field `HYST` writer - Comparator 2 hysteresis"] pub type HystW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OFLT` reader - Comparator output filter"] pub type OfltR = crate :: FieldReader ;
#[doc = "Field `OFLT` writer - Comparator output filter"] pub type OfltW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OUT` reader - Comparator 2 lock"] pub type OutR = crate :: BitReader ;
#[doc = "Field `OUT` writer - Comparator 2 lock"] pub type OutW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LOCK` reader - Comparator lock"] pub type LockR = crate :: BitReader ;
#[doc = "Field `LOCK` writer - Comparator lock"] pub type LockW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Comparator 2 enable"]
#[inline (always)] pub fn en (& self) -> EnR { EnR :: new ((self . bits & 1) != 0) }
#[doc = "Bits 2:3 - Comparator 2 mode"]
#[inline (always)] pub fn mode (& self) -> ModeR { ModeR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:5 - Comparator 2 inverting input selection"]
#[inline (always)] pub fn inm_sel (& self) -> InmSelR { InmSelR :: new (((self . bits >> 4) & 3) as u8) }
#[doc = "Bits 7:8 - Comparator 2 normal phase input selection"]
#[inline (always)] pub fn inp_sel (& self) -> InpSelR { InpSelR :: new (((self . bits >> 7) & 3) as u8) }
#[doc = "Bits 10:13 - Comparator 2 output selection"]
#[inline (always)] pub fn out_sel (& self) -> OutSelR { OutSelR :: new (((self . bits >> 10) & 0x0f) as u8) }
#[doc = "Bit 15 - Comparator 2 output polarity"]
#[inline (always)] pub fn pol (& self) -> PolR { PolR :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bits 16:17 - Comparator 2 hysteresis"]
#[inline (always)] pub fn hyst (& self) -> HystR { HystR :: new (((self . bits >> 16) & 3) as u8) }
#[doc = "Bits 18:20 - Comparator output filter"]
#[inline (always)] pub fn oflt (& self) -> OfltR { OfltR :: new (((self . bits >> 18) & 7) as u8) }
#[doc = "Bit 30 - Comparator 2 lock"]
#[inline (always)] pub fn out (& self) -> OutR { OutR :: new (((self . bits >> 30) & 1) != 0) }
#[doc = "Bit 31 - Comparator lock"]
#[inline (always)] pub fn lock (& self) -> LockR { LockR :: new (((self . bits >> 31) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Comparator 2 enable"]
#[inline (always)] pub fn en (& mut self) -> EnW < '_ , Comp2CsrSpec > { EnW :: new (self , 0) }
#[doc = "Bits 2:3 - Comparator 2 mode"]
#[inline (always)] pub fn mode (& mut self) -> ModeW < '_ , Comp2CsrSpec > { ModeW :: new (self , 2) }
#[doc = "Bits 4:5 - Comparator 2 inverting input selection"]
#[inline (always)] pub fn inm_sel (& mut self) -> InmSelW < '_ , Comp2CsrSpec > { InmSelW :: new (self , 4) }
#[doc = "Bits 7:8 - Comparator 2 normal phase input selection"]
#[inline (always)] pub fn inp_sel (& mut self) -> InpSelW < '_ , Comp2CsrSpec > { InpSelW :: new (self , 7) }
#[doc = "Bits 10:13 - Comparator 2 output selection"]
#[inline (always)] pub fn out_sel (& mut self) -> OutSelW < '_ , Comp2CsrSpec > { OutSelW :: new (self , 10) }
#[doc = "Bit 15 - Comparator 2 output polarity"]
#[inline (always)] pub fn pol (& mut self) -> PolW < '_ , Comp2CsrSpec > { PolW :: new (self , 15) }
#[doc = "Bits 16:17 - Comparator 2 hysteresis"]
#[inline (always)] pub fn hyst (& mut self) -> HystW < '_ , Comp2CsrSpec > { HystW :: new (self , 16) }
#[doc = "Bits 18:20 - Comparator output filter"]
#[inline (always)] pub fn oflt (& mut self) -> OfltW < '_ , Comp2CsrSpec > { OfltW :: new (self , 18) }
#[doc = "Bit 30 - Comparator 2 lock"]
#[inline (always)] pub fn out (& mut self) -> OutW < '_ , Comp2CsrSpec > { OutW :: new (self , 30) }
#[doc = "Bit 31 - Comparator lock"]
#[inline (always)] pub fn lock (& mut self) -> LockW < '_ , Comp2CsrSpec > { LockW :: new (self , 31) } }
#[doc = "COMP2 Control State Register\n\nYou can [`read`](crate::Reg::read) this register and get [`comp2_csr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp2_csr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Comp2CsrSpec ; impl crate :: RegisterSpec for Comp2CsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`comp2_csr::R`](R) reader structure"] impl crate :: Readable for Comp2CsrSpec { }
#[doc = "`write(|w| ..)` method takes [`comp2_csr::W`](W) writer structure"] impl crate :: Writable for Comp2CsrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets COMP2_CSR to value 0"] impl crate :: Resettable for Comp2CsrSpec { } }
#[doc = "COMP_CRV (rw) register accessor: COMP Extern Reference Voltage\n\nYou can [`read`](crate::Reg::read) this register and get [`comp_crv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp_crv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@comp_crv`] module"]
#[doc (alias = "COMP_CRV")] pub type CompCrv = crate :: Reg < comp_crv :: CompCrvSpec > ;
#[doc = "COMP Extern Reference Voltage"] pub mod comp_crv {
#[doc = "Register `COMP_CRV` reader"] pub type R = crate :: R < CompCrvSpec > ;
#[doc = "Register `COMP_CRV` writer"] pub type W = crate :: W < CompCrvSpec > ;
#[doc = "Field `CRV_SEL` reader - Comparator external reference voltage select"] pub type CrvSelR = crate :: FieldReader ;
#[doc = "Field `CRV_SEL` writer - Comparator external reference voltage select"] pub type CrvSelW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CRV_EN` reader - Comparator external reference voltage enable"] pub type CrvEnR = crate :: BitReader ;
#[doc = "Field `CRV_EN` writer - Comparator external reference voltage enable"] pub type CrvEnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CRV_SRC` reader - Comparator external reference voltage source select"] pub type CrvSrcR = crate :: BitReader ;
#[doc = "Field `CRV_SRC` writer - Comparator external reference voltage source select"] pub type CrvSrcW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:3 - Comparator external reference voltage select"]
#[inline (always)] pub fn crv_sel (& self) -> CrvSelR { CrvSelR :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bit 4 - Comparator external reference voltage enable"]
#[inline (always)] pub fn crv_en (& self) -> CrvEnR { CrvEnR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Comparator external reference voltage source select"]
#[inline (always)] pub fn crv_src (& self) -> CrvSrcR { CrvSrcR :: new (((self . bits >> 5) & 1) != 0) } } impl W {
#[doc = "Bits 0:3 - Comparator external reference voltage select"]
#[inline (always)] pub fn crv_sel (& mut self) -> CrvSelW < '_ , CompCrvSpec > { CrvSelW :: new (self , 0) }
#[doc = "Bit 4 - Comparator external reference voltage enable"]
#[inline (always)] pub fn crv_en (& mut self) -> CrvEnW < '_ , CompCrvSpec > { CrvEnW :: new (self , 4) }
#[doc = "Bit 5 - Comparator external reference voltage source select"]
#[inline (always)] pub fn crv_src (& mut self) -> CrvSrcW < '_ , CompCrvSpec > { CrvSrcW :: new (self , 5) } }
#[doc = "COMP Extern Reference Voltage\n\nYou can [`read`](crate::Reg::read) this register and get [`comp_crv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp_crv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CompCrvSpec ; impl crate :: RegisterSpec for CompCrvSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`comp_crv::R`](R) reader structure"] impl crate :: Readable for CompCrvSpec { }
#[doc = "`write(|w| ..)` method takes [`comp_crv::W`](W) writer structure"] impl crate :: Writable for CompCrvSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets COMP_CRV to value 0"] impl crate :: Resettable for CompCrvSpec { } }
#[doc = "COMP1_POLL (rw) register accessor: COMP1 Polling Output Register\n\nYou can [`read`](crate::Reg::read) this register and get [`comp1_poll::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp1_poll::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@comp1_poll`] module"]
#[doc (alias = "COMP1_POLL")] pub type Comp1Poll = crate :: Reg < comp1_poll :: Comp1PollSpec > ;
#[doc = "COMP1 Polling Output Register"] pub mod comp1_poll {
#[doc = "Register `COMP1_POLL` reader"] pub type R = crate :: R < Comp1PollSpec > ;
#[doc = "Register `COMP1_POLL` writer"] pub type W = crate :: W < Comp1PollSpec > ;
#[doc = "Field `POLL_EN` reader - Comparator 1 polling enable"] pub type PollEnR = crate :: BitReader ;
#[doc = "Field `POLL_EN` writer - Comparator 1 polling enable"] pub type PollEnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `POLL_CH` reader - Comparator 1 polling pollingchannel"] pub type PollChR = crate :: BitReader ;
#[doc = "Field `POLL_CH` writer - Comparator 1 polling pollingchannel"] pub type PollChW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `FIXN` reader - Comparator 1 Polling inverting input fix"] pub type FixnR = crate :: BitReader ;
#[doc = "Field `FIXN` writer - Comparator 1 Polling inverting input fix"] pub type FixnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PERIOD` reader - Comparator 1 polling wait cycle"] pub type PeriodR = crate :: FieldReader ;
#[doc = "Field `PERIOD` writer - Comparator 1 polling wait cycle"] pub type PeriodW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `POUT` reader - Comparator 1 Polling output"] pub type PoutR = crate :: FieldReader ;
#[doc = "Field `POUT` writer - Comparator 1 Polling output"] pub type PoutW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ; impl R {
#[doc = "Bit 0 - Comparator 1 polling enable"]
#[inline (always)] pub fn poll_en (& self) -> PollEnR { PollEnR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Comparator 1 polling pollingchannel"]
#[inline (always)] pub fn poll_ch (& self) -> PollChR { PollChR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Comparator 1 Polling inverting input fix"]
#[inline (always)] pub fn fixn (& self) -> FixnR { FixnR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bits 4:6 - Comparator 1 polling wait cycle"]
#[inline (always)] pub fn period (& self) -> PeriodR { PeriodR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bits 8:10 - Comparator 1 Polling output"]
#[inline (always)] pub fn pout (& self) -> PoutR { PoutR :: new (((self . bits >> 8) & 7) as u8) } } impl W {
#[doc = "Bit 0 - Comparator 1 polling enable"]
#[inline (always)] pub fn poll_en (& mut self) -> PollEnW < '_ , Comp1PollSpec > { PollEnW :: new (self , 0) }
#[doc = "Bit 1 - Comparator 1 polling pollingchannel"]
#[inline (always)] pub fn poll_ch (& mut self) -> PollChW < '_ , Comp1PollSpec > { PollChW :: new (self , 1) }
#[doc = "Bit 2 - Comparator 1 Polling inverting input fix"]
#[inline (always)] pub fn fixn (& mut self) -> FixnW < '_ , Comp1PollSpec > { FixnW :: new (self , 2) }
#[doc = "Bits 4:6 - Comparator 1 polling wait cycle"]
#[inline (always)] pub fn period (& mut self) -> PeriodW < '_ , Comp1PollSpec > { PeriodW :: new (self , 4) }
#[doc = "Bits 8:10 - Comparator 1 Polling output"]
#[inline (always)] pub fn pout (& mut self) -> PoutW < '_ , Comp1PollSpec > { PoutW :: new (self , 8) } }
#[doc = "COMP1 Polling Output Register\n\nYou can [`read`](crate::Reg::read) this register and get [`comp1_poll::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp1_poll::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Comp1PollSpec ; impl crate :: RegisterSpec for Comp1PollSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`comp1_poll::R`](R) reader structure"] impl crate :: Readable for Comp1PollSpec { }
#[doc = "`write(|w| ..)` method takes [`comp1_poll::W`](W) writer structure"] impl crate :: Writable for Comp1PollSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets COMP1_POLL to value 0"] impl crate :: Resettable for Comp1PollSpec { } }
#[doc = "COMP2_POLL (rw) register accessor: COMP2 Polling Output Register\n\nYou can [`read`](crate::Reg::read) this register and get [`comp2_poll::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp2_poll::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@comp2_poll`] module"]
#[doc (alias = "COMP2_POLL")] pub type Comp2Poll = crate :: Reg < comp2_poll :: Comp2PollSpec > ;
#[doc = "COMP2 Polling Output Register"] pub mod comp2_poll {
#[doc = "Register `COMP2_POLL` reader"] pub type R = crate :: R < Comp2PollSpec > ;
#[doc = "Register `COMP2_POLL` writer"] pub type W = crate :: W < Comp2PollSpec > ;
#[doc = "Field `POLL_EN` reader - Comparator 2 polling enable"] pub type PollEnR = crate :: BitReader ;
#[doc = "Field `POLL_EN` writer - Comparator 2 polling enable"] pub type PollEnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `POLL_CH` reader - Comparator 2 polling channel"] pub type PollChR = crate :: BitReader ;
#[doc = "Field `POLL_CH` writer - Comparator 2 polling channel"] pub type PollChW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `FIXN` reader - Comparator 2 Polling inverting input fix"] pub type FixnR = crate :: BitReader ;
#[doc = "Field `FIXN` writer - Comparator 2 Polling inverting input fix"] pub type FixnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PERIOD` reader - Comparator 2 polling wait cycle"] pub type PeriodR = crate :: FieldReader ;
#[doc = "Field `PERIOD` writer - Comparator 2 polling wait cycle"] pub type PeriodW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `POUT` reader - Comparator 2 Polling output"] pub type PoutR = crate :: FieldReader ;
#[doc = "Field `POUT` writer - Comparator 2 Polling output"] pub type PoutW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ; impl R {
#[doc = "Bit 0 - Comparator 2 polling enable"]
#[inline (always)] pub fn poll_en (& self) -> PollEnR { PollEnR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Comparator 2 polling channel"]
#[inline (always)] pub fn poll_ch (& self) -> PollChR { PollChR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Comparator 2 Polling inverting input fix"]
#[inline (always)] pub fn fixn (& self) -> FixnR { FixnR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bits 4:6 - Comparator 2 polling wait cycle"]
#[inline (always)] pub fn period (& self) -> PeriodR { PeriodR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bits 8:10 - Comparator 2 Polling output"]
#[inline (always)] pub fn pout (& self) -> PoutR { PoutR :: new (((self . bits >> 8) & 7) as u8) } } impl W {
#[doc = "Bit 0 - Comparator 2 polling enable"]
#[inline (always)] pub fn poll_en (& mut self) -> PollEnW < '_ , Comp2PollSpec > { PollEnW :: new (self , 0) }
#[doc = "Bit 1 - Comparator 2 polling channel"]
#[inline (always)] pub fn poll_ch (& mut self) -> PollChW < '_ , Comp2PollSpec > { PollChW :: new (self , 1) }
#[doc = "Bit 2 - Comparator 2 Polling inverting input fix"]
#[inline (always)] pub fn fixn (& mut self) -> FixnW < '_ , Comp2PollSpec > { FixnW :: new (self , 2) }
#[doc = "Bits 4:6 - Comparator 2 polling wait cycle"]
#[inline (always)] pub fn period (& mut self) -> PeriodW < '_ , Comp2PollSpec > { PeriodW :: new (self , 4) }
#[doc = "Bits 8:10 - Comparator 2 Polling output"]
#[inline (always)] pub fn pout (& mut self) -> PoutW < '_ , Comp2PollSpec > { PoutW :: new (self , 8) } }
#[doc = "COMP2 Polling Output Register\n\nYou can [`read`](crate::Reg::read) this register and get [`comp2_poll::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`comp2_poll::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Comp2PollSpec ; impl crate :: RegisterSpec for Comp2PollSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`comp2_poll::R`](R) reader structure"] impl crate :: Readable for Comp2PollSpec { }
#[doc = "`write(|w| ..)` method takes [`comp2_poll::W`](W) writer structure"] impl crate :: Writable for Comp2PollSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets COMP2_POLL to value 0"] impl crate :: Resettable for Comp2PollSpec { } } }
#[doc = "CRC calculation unit"] pub type Crc = crate :: Periph < crc :: RegisterBlock , 0x4002_3000 > ; impl core :: fmt :: Debug for Crc { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Crc") . finish () } }
#[doc = "CRC calculation unit"] pub mod crc {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { dr : Dr , idr : Idr , ctrl : Ctrl , _reserved3 : [u8 ; 0x14] , reverse : Reverse , } impl RegisterBlock {
#[doc = "0x00 - Data register"]
#[inline (always)] pub const fn dr (& self) -> & Dr { & self . dr }
#[doc = "0x04 - Independent data register"]
#[inline (always)] pub const fn idr (& self) -> & Idr { & self . idr }
#[doc = "0x08 - Control register"]
#[inline (always)] pub const fn ctrl (& self) -> & Ctrl { & self . ctrl }
#[doc = "0x20 - Reversed data register"]
#[inline (always)] pub const fn reverse (& self) -> & Reverse { & self . reverse } }
#[doc = "DR (rw) register accessor: Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr`] module"]
#[doc (alias = "DR")] pub type Dr = crate :: Reg < dr :: DrSpec > ;
#[doc = "Data register"] pub mod dr {
#[doc = "Register `DR` reader"] pub type R = crate :: R < DrSpec > ;
#[doc = "Register `DR` writer"] pub type W = crate :: W < DrSpec > ;
#[doc = "Field `DR` reader - Data register bits"] pub type DrR = crate :: FieldReader < u32 > ;
#[doc = "Field `DR` writer - Data register bits"] pub type DrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Data register bits"]
#[inline (always)] pub fn dr (& self) -> DrR { DrR :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Data register bits"]
#[inline (always)] pub fn dr (& mut self) -> DrW < '_ , DrSpec > { DrW :: new (self , 0) } }
#[doc = "Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DrSpec ; impl crate :: RegisterSpec for DrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr::R`](R) reader structure"] impl crate :: Readable for DrSpec { }
#[doc = "`write(|w| ..)` method takes [`dr::W`](W) writer structure"] impl crate :: Writable for DrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR to value 0xffff_ffff"] impl crate :: Resettable for DrSpec { const RESET_VALUE : u32 = 0xffff_ffff ; } }
#[doc = "IDR (rw) register accessor: Independent data register\n\nYou can [`read`](crate::Reg::read) this register and get [`idr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`idr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idr`] module"]
#[doc (alias = "IDR")] pub type Idr = crate :: Reg < idr :: IdrSpec > ;
#[doc = "Independent data register"] pub mod idr {
#[doc = "Register `IDR` reader"] pub type R = crate :: R < IdrSpec > ;
#[doc = "Register `IDR` writer"] pub type W = crate :: W < IdrSpec > ;
#[doc = "Field `IDR` reader - General-purpose 8-bit data register bits"] pub type IdrR = crate :: FieldReader ;
#[doc = "Field `IDR` writer - General-purpose 8-bit data register bits"] pub type IdrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - General-purpose 8-bit data register bits"]
#[inline (always)] pub fn idr (& self) -> IdrR { IdrR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - General-purpose 8-bit data register bits"]
#[inline (always)] pub fn idr (& mut self) -> IdrW < '_ , IdrSpec > { IdrW :: new (self , 0) } }
#[doc = "Independent data register\n\nYou can [`read`](crate::Reg::read) this register and get [`idr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`idr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IdrSpec ; impl crate :: RegisterSpec for IdrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`idr::R`](R) reader structure"] impl crate :: Readable for IdrSpec { }
#[doc = "`write(|w| ..)` method takes [`idr::W`](W) writer structure"] impl crate :: Writable for IdrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets IDR to value 0"] impl crate :: Resettable for IdrSpec { } }
#[doc = "CTRL (w) register accessor: Control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctrl::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrl`] module"]
#[doc (alias = "CTRL")] pub type Ctrl = crate :: Reg < ctrl :: CtrlSpec > ;
#[doc = "Control register"] pub mod ctrl {
#[doc = "Register `CTRL` writer"] pub type W = crate :: W < CtrlSpec > ;
#[doc = "Field `RESET` writer - CRC reset"] pub type ResetW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - CRC reset"]
#[inline (always)] pub fn reset (& mut self) -> ResetW < '_ , CtrlSpec > { ResetW :: new (self , 0) } }
#[doc = "Control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctrl::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CtrlSpec ; impl crate :: RegisterSpec for CtrlSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`ctrl::W`](W) writer structure"] impl crate :: Writable for CtrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CTRL to value 0"] impl crate :: Resettable for CtrlSpec { } }
#[doc = "REVERSE (rw) register accessor: Reversed data register\n\nYou can [`read`](crate::Reg::read) this register and get [`reverse::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`reverse::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@reverse`] module"]
#[doc (alias = "REVERSE")] pub type Reverse = crate :: Reg < reverse :: ReverseSpec > ;
#[doc = "Reversed data register"] pub mod reverse {
#[doc = "Register `REVERSE` reader"] pub type R = crate :: R < ReverseSpec > ;
#[doc = "Register `REVERSE` writer"] pub type W = crate :: W < ReverseSpec > ;
#[doc = "Field `REVERSE` reader - Data reverse register bits"] pub type ReverseR = crate :: BitReader ;
#[doc = "Field `REVERSE` writer - Data reverse register bits"] pub type ReverseW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Data reverse register bits"]
#[inline (always)] pub fn reverse (& self) -> ReverseR { ReverseR :: new ((self . bits & 1) != 0) } } impl W {
#[doc = "Bit 0 - Data reverse register bits"]
#[inline (always)] pub fn reverse (& mut self) -> ReverseW < '_ , ReverseSpec > { ReverseW :: new (self , 0) } }
#[doc = "Reversed data register\n\nYou can [`read`](crate::Reg::read) this register and get [`reverse::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`reverse::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ReverseSpec ; impl crate :: RegisterSpec for ReverseSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`reverse::R`](R) reader structure"] impl crate :: Readable for ReverseSpec { }
#[doc = "`write(|w| ..)` method takes [`reverse::W`](W) writer structure"] impl crate :: Writable for ReverseSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets REVERSE to value 0"] impl crate :: Resettable for ReverseSpec { } } }
#[doc = "Debug support"] pub type Csm = crate :: Periph < csm :: RegisterBlock , 0x4000_6800 > ; impl core :: fmt :: Debug for Csm { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Csm") . finish () } }
#[doc = "Debug support"] pub mod csm {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { txreg1 : Txreg1 , txreg2 : Txreg2 , rxreg1 : Rxreg1 , rxreg2 : Rxreg2 , intstat : Intstat , inten : Inten , ctl1 : Ctl1 , ctl2 : Ctl2 , cfg : Cfg , spbrg : Spbrg , bcnt : Bcnt , } impl RegisterBlock {
#[doc = "0x00 - Transmit register 1"]
#[inline (always)] pub const fn txreg1 (& self) -> & Txreg1 { & self . txreg1 }
#[doc = "0x04 - Transmit register 2"]
#[inline (always)] pub const fn txreg2 (& self) -> & Txreg2 { & self . txreg2 }
#[doc = "0x08 - Reveive register 1"]
#[inline (always)] pub const fn rxreg1 (& self) -> & Rxreg1 { & self . rxreg1 }
#[doc = "0x0c - Reveive register 2"]
#[inline (always)] pub const fn rxreg2 (& self) -> & Rxreg2 { & self . rxreg2 }
#[doc = "0x10 - Interrupt Status Register"]
#[inline (always)] pub const fn intstat (& self) -> & Intstat { & self . intstat }
#[doc = "0x14 - Interrupt Enable Register"]
#[inline (always)] pub const fn inten (& self) -> & Inten { & self . inten }
#[doc = "0x18 - Control Register 1"]
#[inline (always)] pub const fn ctl1 (& self) -> & Ctl1 { & self . ctl1 }
#[doc = "0x1c - Control Register 2"]
#[inline (always)] pub const fn ctl2 (& self) -> & Ctl2 { & self . ctl2 }
#[doc = "0x20 - Configure Register"]
#[inline (always)] pub const fn cfg (& self) -> & Cfg { & self . cfg }
#[doc = "0x24 - Baud rate register"]
#[inline (always)] pub const fn spbrg (& self) -> & Spbrg { & self . spbrg }
#[doc = "0x28 - bit count"]
#[inline (always)] pub const fn bcnt (& self) -> & Bcnt { & self . bcnt } }
#[doc = "TXREG1 (rw) register accessor: Transmit register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txreg1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txreg1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txreg1`] module"]
#[doc (alias = "TXREG1")] pub type Txreg1 = crate :: Reg < txreg1 :: Txreg1Spec > ;
#[doc = "Transmit register 1"] pub mod txreg1 {
#[doc = "Register `TXREG1` reader"] pub type R = crate :: R < Txreg1Spec > ;
#[doc = "Register `TXREG1` writer"] pub type W = crate :: W < Txreg1Spec > ;
#[doc = "Field `TXREG1` reader - Transfer data"] pub type Txreg1R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXREG1` writer - Transfer data"] pub type Txreg1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transfer data"]
#[inline (always)] pub fn txreg1 (& self) -> Txreg1R { Txreg1R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transfer data"]
#[inline (always)] pub fn txreg1 (& mut self) -> Txreg1W < '_ , Txreg1Spec > { Txreg1W :: new (self , 0) } }
#[doc = "Transmit register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`txreg1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txreg1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txreg1Spec ; impl crate :: RegisterSpec for Txreg1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txreg1::R`](R) reader structure"] impl crate :: Readable for Txreg1Spec { }
#[doc = "`write(|w| ..)` method takes [`txreg1::W`](W) writer structure"] impl crate :: Writable for Txreg1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXREG1 to value 0"] impl crate :: Resettable for Txreg1Spec { } }
#[doc = "TXREG2 (rw) register accessor: Transmit register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`txreg2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txreg2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txreg2`] module"]
#[doc (alias = "TXREG2")] pub type Txreg2 = crate :: Reg < txreg2 :: Txreg2Spec > ;
#[doc = "Transmit register 2"] pub mod txreg2 {
#[doc = "Register `TXREG2` reader"] pub type R = crate :: R < Txreg2Spec > ;
#[doc = "Register `TXREG2` writer"] pub type W = crate :: W < Txreg2Spec > ;
#[doc = "Field `TXREG2` reader - Transfer data"] pub type Txreg2R = crate :: FieldReader < u32 > ;
#[doc = "Field `TXREG2` writer - Transfer data"] pub type Txreg2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transfer data"]
#[inline (always)] pub fn txreg2 (& self) -> Txreg2R { Txreg2R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transfer data"]
#[inline (always)] pub fn txreg2 (& mut self) -> Txreg2W < '_ , Txreg2Spec > { Txreg2W :: new (self , 0) } }
#[doc = "Transmit register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`txreg2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txreg2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Txreg2Spec ; impl crate :: RegisterSpec for Txreg2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txreg2::R`](R) reader structure"] impl crate :: Readable for Txreg2Spec { }
#[doc = "`write(|w| ..)` method takes [`txreg2::W`](W) writer structure"] impl crate :: Writable for Txreg2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXREG2 to value 0"] impl crate :: Resettable for Txreg2Spec { } }
#[doc = "RXREG1 (r) register accessor: Reveive register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`rxreg1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxreg1`] module"]
#[doc (alias = "RXREG1")] pub type Rxreg1 = crate :: Reg < rxreg1 :: Rxreg1Spec > ;
#[doc = "Reveive register 1"] pub mod rxreg1 {
#[doc = "Register `RXREG1` reader"] pub type R = crate :: R < Rxreg1Spec > ;
#[doc = "Field `RXREG1` reader - Receive data"] pub type Rxreg1R = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - Receive data"]
#[inline (always)] pub fn rxreg1 (& self) -> Rxreg1R { Rxreg1R :: new (self . bits) } }
#[doc = "Reveive register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`rxreg1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Rxreg1Spec ; impl crate :: RegisterSpec for Rxreg1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rxreg1::R`](R) reader structure"] impl crate :: Readable for Rxreg1Spec { }
#[doc = "`reset()` method sets RXREG1 to value 0"] impl crate :: Resettable for Rxreg1Spec { } }
#[doc = "RXREG2 (r) register accessor: Reveive register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`rxreg2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxreg2`] module"]
#[doc (alias = "RXREG2")] pub type Rxreg2 = crate :: Reg < rxreg2 :: Rxreg2Spec > ;
#[doc = "Reveive register 2"] pub mod rxreg2 {
#[doc = "Register `RXREG2` reader"] pub type R = crate :: R < Rxreg2Spec > ;
#[doc = "Field `RXREG2` reader - Receive data"] pub type Rxreg2R = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - Receive data"]
#[inline (always)] pub fn rxreg2 (& self) -> Rxreg2R { Rxreg2R :: new (self . bits) } }
#[doc = "Reveive register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`rxreg2::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Rxreg2Spec ; impl crate :: RegisterSpec for Rxreg2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rxreg2::R`](R) reader structure"] impl crate :: Readable for Rxreg2Spec { }
#[doc = "`reset()` method sets RXREG2 to value 0"] impl crate :: Resettable for Rxreg2Spec { } }
#[doc = "INTSTAT (rw) register accessor: Interrupt Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`intstat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intstat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intstat`] module"]
#[doc (alias = "INTSTAT")] pub type Intstat = crate :: Reg < intstat :: IntstatSpec > ;
#[doc = "Interrupt Status Register"] pub mod intstat {
#[doc = "Register `INTSTAT` reader"] pub type R = crate :: R < IntstatSpec > ;
#[doc = "Register `INTSTAT` writer"] pub type W = crate :: W < IntstatSpec > ;
#[doc = "Field `TX_INTF` reader - Transmit FIFO available interrupt flag"] pub type TxIntfR = crate :: BitReader ;
#[doc = "Field `TX_INTF` writer - Transmit FIFO available interrupt flag"] pub type TxIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RX_INTF` reader - Receive data available interrupt flag"] pub type RxIntfR = crate :: BitReader ;
#[doc = "Field `RX_INTF` writer - Receive data available interrupt flag"] pub type RxIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXC_INTF` reader - Transmit complete interrupt flag"] pub type TxcIntfR = crate :: BitReader ;
#[doc = "Field `TXC_INTF` writer - Transmit complete interrupt flag"] pub type TxcIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `START_INTF` reader - Start Reveive data interrupt flag"] pub type StartIntfR = crate :: BitReader ;
#[doc = "Field `START_INTF` writer - Start Reveive data interrupt flag"] pub type StartIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `STOP_INTF` reader - Stop Reveive data interrupt flag"] pub type StopIntfR = crate :: BitReader ;
#[doc = "Field `STOP_INTF` writer - Stop Reveive data interrupt flag"] pub type StopIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Transmit FIFO available interrupt flag"]
#[inline (always)] pub fn tx_intf (& self) -> TxIntfR { TxIntfR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive data available interrupt flag"]
#[inline (always)] pub fn rx_intf (& self) -> RxIntfR { RxIntfR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmit complete interrupt flag"]
#[inline (always)] pub fn txc_intf (& self) -> TxcIntfR { TxcIntfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Start Reveive data interrupt flag"]
#[inline (always)] pub fn start_intf (& self) -> StartIntfR { StartIntfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Stop Reveive data interrupt flag"]
#[inline (always)] pub fn stop_intf (& self) -> StopIntfR { StopIntfR :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Transmit FIFO available interrupt flag"]
#[inline (always)] pub fn tx_intf (& mut self) -> TxIntfW < '_ , IntstatSpec > { TxIntfW :: new (self , 0) }
#[doc = "Bit 1 - Receive data available interrupt flag"]
#[inline (always)] pub fn rx_intf (& mut self) -> RxIntfW < '_ , IntstatSpec > { RxIntfW :: new (self , 1) }
#[doc = "Bit 2 - Transmit complete interrupt flag"]
#[inline (always)] pub fn txc_intf (& mut self) -> TxcIntfW < '_ , IntstatSpec > { TxcIntfW :: new (self , 2) }
#[doc = "Bit 3 - Start Reveive data interrupt flag"]
#[inline (always)] pub fn start_intf (& mut self) -> StartIntfW < '_ , IntstatSpec > { StartIntfW :: new (self , 3) }
#[doc = "Bit 4 - Stop Reveive data interrupt flag"]
#[inline (always)] pub fn stop_intf (& mut self) -> StopIntfW < '_ , IntstatSpec > { StopIntfW :: new (self , 4) } }
#[doc = "Interrupt Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`intstat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intstat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IntstatSpec ; impl crate :: RegisterSpec for IntstatSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`intstat::R`](R) reader structure"] impl crate :: Readable for IntstatSpec { }
#[doc = "`write(|w| ..)` method takes [`intstat::W`](W) writer structure"] impl crate :: Writable for IntstatSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets INTSTAT to value 0"] impl crate :: Resettable for IntstatSpec { } }
#[doc = "INTEN (rw) register accessor: Interrupt Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inten`] module"]
#[doc (alias = "INTEN")] pub type Inten = crate :: Reg < inten :: IntenSpec > ;
#[doc = "Interrupt Enable Register"] pub mod inten {
#[doc = "Register `INTEN` reader"] pub type R = crate :: R < IntenSpec > ;
#[doc = "Register `INTEN` writer"] pub type W = crate :: W < IntenSpec > ;
#[doc = "Field `TX_IEN` reader - Transmit FIFO available interrupt enable"] pub type TxIenR = crate :: BitReader ;
#[doc = "Field `TX_IEN` writer - Transmit FIFO available interrupt enable"] pub type TxIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RX_IEN` reader - Receive data available interrupt enable"] pub type RxIenR = crate :: BitReader ;
#[doc = "Field `RX_IEN` writer - Receive data available interrupt enable"] pub type RxIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXC_IEN` reader - Transmit complete interrupt enable"] pub type TxcIenR = crate :: BitReader ;
#[doc = "Field `TXC_IEN` writer - Transmit complete interrupt enable"] pub type TxcIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `START_IEN` reader - Start Reveive data interrupt enable"] pub type StartIenR = crate :: BitReader ;
#[doc = "Field `START_IEN` writer - Start Reveive data interrupt enable"] pub type StartIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `STOP_IEN` reader - Stop Reveive data interrupt enable"] pub type StopIenR = crate :: BitReader ;
#[doc = "Field `STOP_IEN` writer - Stop Reveive data interrupt enable"] pub type StopIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Transmit FIFO available interrupt enable"]
#[inline (always)] pub fn tx_ien (& self) -> TxIenR { TxIenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive data available interrupt enable"]
#[inline (always)] pub fn rx_ien (& self) -> RxIenR { RxIenR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmit complete interrupt enable"]
#[inline (always)] pub fn txc_ien (& self) -> TxcIenR { TxcIenR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Start Reveive data interrupt enable"]
#[inline (always)] pub fn start_ien (& self) -> StartIenR { StartIenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Stop Reveive data interrupt enable"]
#[inline (always)] pub fn stop_ien (& self) -> StopIenR { StopIenR :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Transmit FIFO available interrupt enable"]
#[inline (always)] pub fn tx_ien (& mut self) -> TxIenW < '_ , IntenSpec > { TxIenW :: new (self , 0) }
#[doc = "Bit 1 - Receive data available interrupt enable"]
#[inline (always)] pub fn rx_ien (& mut self) -> RxIenW < '_ , IntenSpec > { RxIenW :: new (self , 1) }
#[doc = "Bit 2 - Transmit complete interrupt enable"]
#[inline (always)] pub fn txc_ien (& mut self) -> TxcIenW < '_ , IntenSpec > { TxcIenW :: new (self , 2) }
#[doc = "Bit 3 - Start Reveive data interrupt enable"]
#[inline (always)] pub fn start_ien (& mut self) -> StartIenW < '_ , IntenSpec > { StartIenW :: new (self , 3) }
#[doc = "Bit 4 - Stop Reveive data interrupt enable"]
#[inline (always)] pub fn stop_ien (& mut self) -> StopIenW < '_ , IntenSpec > { StopIenW :: new (self , 4) } }
#[doc = "Interrupt Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IntenSpec ; impl crate :: RegisterSpec for IntenSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`inten::R`](R) reader structure"] impl crate :: Readable for IntenSpec { }
#[doc = "`write(|w| ..)` method takes [`inten::W`](W) writer structure"] impl crate :: Writable for IntenSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets INTEN to value 0"] impl crate :: Resettable for IntenSpec { } }
#[doc = "CTL1 (rw) register accessor: Control Register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`] module"]
#[doc (alias = "CTL1")] pub type Ctl1 = crate :: Reg < ctl1 :: Ctl1Spec > ;
#[doc = "Control Register 1"] pub mod ctl1 {
#[doc = "Register `CTL1` reader"] pub type R = crate :: R < Ctl1Spec > ;
#[doc = "Register `CTL1` writer"] pub type W = crate :: W < Ctl1Spec > ;
#[doc = "Field `EN1` reader - enable Control bit"] pub type En1R = crate :: BitReader ;
#[doc = "Field `EN1` writer - enable Control bit"] pub type En1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IDLEP1` reader - idel state polority"] pub type Idlep1R = crate :: BitReader ;
#[doc = "Field `IDLEP1` writer - idel state polority"] pub type Idlep1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `INSEL1` reader - input signal select"] pub type Insel1R = crate :: BitReader ;
#[doc = "Field `INSEL1` writer - input signal select"] pub type Insel1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DMAEN1` reader - DMA enable bit"] pub type Dmaen1R = crate :: BitReader ;
#[doc = "Field `DMAEN1` writer - DMA enable bit"] pub type Dmaen1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXSEL1` reader - TXandRX data select control"] pub type Txsel1R = crate :: BitReader ;
#[doc = "Field `TXSEL1` writer - TXandRX data select control"] pub type Txsel1W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - enable Control bit"]
#[inline (always)] pub fn en1 (& self) -> En1R { En1R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - idel state polority"]
#[inline (always)] pub fn idlep1 (& self) -> Idlep1R { Idlep1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - input signal select"]
#[inline (always)] pub fn insel1 (& self) -> Insel1R { Insel1R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - DMA enable bit"]
#[inline (always)] pub fn dmaen1 (& self) -> Dmaen1R { Dmaen1R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - TXandRX data select control"]
#[inline (always)] pub fn txsel1 (& self) -> Txsel1R { Txsel1R :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - enable Control bit"]
#[inline (always)] pub fn en1 (& mut self) -> En1W < '_ , Ctl1Spec > { En1W :: new (self , 0) }
#[doc = "Bit 1 - idel state polority"]
#[inline (always)] pub fn idlep1 (& mut self) -> Idlep1W < '_ , Ctl1Spec > { Idlep1W :: new (self , 1) }
#[doc = "Bit 2 - input signal select"]
#[inline (always)] pub fn insel1 (& mut self) -> Insel1W < '_ , Ctl1Spec > { Insel1W :: new (self , 2) }
#[doc = "Bit 3 - DMA enable bit"]
#[inline (always)] pub fn dmaen1 (& mut self) -> Dmaen1W < '_ , Ctl1Spec > { Dmaen1W :: new (self , 3) }
#[doc = "Bit 4 - TXandRX data select control"]
#[inline (always)] pub fn txsel1 (& mut self) -> Txsel1W < '_ , Ctl1Spec > { Txsel1W :: new (self , 4) } }
#[doc = "Control Register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ctl1Spec ; impl crate :: RegisterSpec for Ctl1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ctl1::R`](R) reader structure"] impl crate :: Readable for Ctl1Spec { }
#[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"] impl crate :: Writable for Ctl1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CTL1 to value 0x08"] impl crate :: Resettable for Ctl1Spec { const RESET_VALUE : u32 = 0x08 ; } }
#[doc = "CTL2 (rw) register accessor: Control Register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl2`] module"]
#[doc (alias = "CTL2")] pub type Ctl2 = crate :: Reg < ctl2 :: Ctl2Spec > ;
#[doc = "Control Register 2"] pub mod ctl2 {
#[doc = "Register `CTL2` reader"] pub type R = crate :: R < Ctl2Spec > ;
#[doc = "Register `CTL2` writer"] pub type W = crate :: W < Ctl2Spec > ;
#[doc = "Field `EN2` reader - enable Control bit"] pub type En2R = crate :: BitReader ;
#[doc = "Field `EN2` writer - enable Control bit"] pub type En2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IDLEP2` reader - idel state polority"] pub type Idlep2R = crate :: BitReader ;
#[doc = "Field `IDLEP2` writer - idel state polority"] pub type Idlep2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `INSEL2` reader - input signal select"] pub type Insel2R = crate :: BitReader ;
#[doc = "Field `INSEL2` writer - input signal select"] pub type Insel2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DMAEN2` reader - DMA enable bit"] pub type Dmaen2R = crate :: BitReader ;
#[doc = "Field `DMAEN2` writer - DMA enable bit"] pub type Dmaen2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXSEL2` reader - TXandRX data select control"] pub type Txsel2R = crate :: BitReader ;
#[doc = "Field `TXSEL2` writer - TXandRX data select control"] pub type Txsel2W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - enable Control bit"]
#[inline (always)] pub fn en2 (& self) -> En2R { En2R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - idel state polority"]
#[inline (always)] pub fn idlep2 (& self) -> Idlep2R { Idlep2R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - input signal select"]
#[inline (always)] pub fn insel2 (& self) -> Insel2R { Insel2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - DMA enable bit"]
#[inline (always)] pub fn dmaen2 (& self) -> Dmaen2R { Dmaen2R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - TXandRX data select control"]
#[inline (always)] pub fn txsel2 (& self) -> Txsel2R { Txsel2R :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - enable Control bit"]
#[inline (always)] pub fn en2 (& mut self) -> En2W < '_ , Ctl2Spec > { En2W :: new (self , 0) }
#[doc = "Bit 1 - idel state polority"]
#[inline (always)] pub fn idlep2 (& mut self) -> Idlep2W < '_ , Ctl2Spec > { Idlep2W :: new (self , 1) }
#[doc = "Bit 2 - input signal select"]
#[inline (always)] pub fn insel2 (& mut self) -> Insel2W < '_ , Ctl2Spec > { Insel2W :: new (self , 2) }
#[doc = "Bit 3 - DMA enable bit"]
#[inline (always)] pub fn dmaen2 (& mut self) -> Dmaen2W < '_ , Ctl2Spec > { Dmaen2W :: new (self , 3) }
#[doc = "Bit 4 - TXandRX data select control"]
#[inline (always)] pub fn txsel2 (& mut self) -> Txsel2W < '_ , Ctl2Spec > { Txsel2W :: new (self , 4) } }
#[doc = "Control Register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ctl2Spec ; impl crate :: RegisterSpec for Ctl2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ctl2::R`](R) reader structure"] impl crate :: Readable for Ctl2Spec { }
#[doc = "`write(|w| ..)` method takes [`ctl2::W`](W) writer structure"] impl crate :: Writable for Ctl2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CTL2 to value 0x08"] impl crate :: Resettable for Ctl2Spec { const RESET_VALUE : u32 = 0x08 ; } }
#[doc = "CFG (rw) register accessor: Configure Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cfg`] module"]
#[doc (alias = "CFG")] pub type Cfg = crate :: Reg < cfg :: CfgSpec > ;
#[doc = "Configure Register"] pub mod cfg {
#[doc = "Register `CFG` reader"] pub type R = crate :: R < CfgSpec > ;
#[doc = "Register `CFG` writer"] pub type W = crate :: W < CfgSpec > ;
#[doc = "Field `STARTSEL` reader - start select"] pub type StartselR = crate :: BitReader ;
#[doc = "Field `STARTSEL` writer - start select"] pub type StartselW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `STOPSEL` reader - stop select"] pub type StopselR = crate :: BitReader ;
#[doc = "Field `STOPSEL` writer - stop select"] pub type StopselW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MSEL` reader - master or slave select"] pub type MselR = crate :: BitReader ;
#[doc = "Field `MSEL` writer - master or slave select"] pub type MselW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `VTXEN` reader - Vtx enable"] pub type VtxenR = crate :: BitReader ;
#[doc = "Field `VTXEN` writer - Vtx enable"] pub type VtxenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `VTXSEL` reader - Vtx select"] pub type VtxselR = crate :: BitReader ;
#[doc = "Field `VTXSEL` writer - Vtx select"] pub type VtxselW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MAXBIT` reader - max tx and rx bit"] pub type MaxbitR = crate :: FieldReader < u16 > ;
#[doc = "Field `MAXBIT` writer - max tx and rx bit"] pub type MaxbitW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bit 0 - start select"]
#[inline (always)] pub fn startsel (& self) -> StartselR { StartselR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - stop select"]
#[inline (always)] pub fn stopsel (& self) -> StopselR { StopselR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - master or slave select"]
#[inline (always)] pub fn msel (& self) -> MselR { MselR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Vtx enable"]
#[inline (always)] pub fn vtxen (& self) -> VtxenR { VtxenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Vtx select"]
#[inline (always)] pub fn vtxsel (& self) -> VtxselR { VtxselR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bits 16:31 - max tx and rx bit"]
#[inline (always)] pub fn maxbit (& self) -> MaxbitR { MaxbitR :: new (((self . bits >> 16) & 0xffff) as u16) } } impl W {
#[doc = "Bit 0 - start select"]
#[inline (always)] pub fn startsel (& mut self) -> StartselW < '_ , CfgSpec > { StartselW :: new (self , 0) }
#[doc = "Bit 1 - stop select"]
#[inline (always)] pub fn stopsel (& mut self) -> StopselW < '_ , CfgSpec > { StopselW :: new (self , 1) }
#[doc = "Bit 2 - master or slave select"]
#[inline (always)] pub fn msel (& mut self) -> MselW < '_ , CfgSpec > { MselW :: new (self , 2) }
#[doc = "Bit 3 - Vtx enable"]
#[inline (always)] pub fn vtxen (& mut self) -> VtxenW < '_ , CfgSpec > { VtxenW :: new (self , 3) }
#[doc = "Bit 4 - Vtx select"]
#[inline (always)] pub fn vtxsel (& mut self) -> VtxselW < '_ , CfgSpec > { VtxselW :: new (self , 4) }
#[doc = "Bits 16:31 - max tx and rx bit"]
#[inline (always)] pub fn maxbit (& mut self) -> MaxbitW < '_ , CfgSpec > { MaxbitW :: new (self , 16) } }
#[doc = "Configure Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CfgSpec ; impl crate :: RegisterSpec for CfgSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cfg::R`](R) reader structure"] impl crate :: Readable for CfgSpec { }
#[doc = "`write(|w| ..)` method takes [`cfg::W`](W) writer structure"] impl crate :: Writable for CfgSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CFG to value 0x08"] impl crate :: Resettable for CfgSpec { const RESET_VALUE : u32 = 0x08 ; } }
#[doc = "SPBRG (rw) register accessor: Baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`spbrg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`spbrg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@spbrg`] module"]
#[doc (alias = "SPBRG")] pub type Spbrg = crate :: Reg < spbrg :: SpbrgSpec > ;
#[doc = "Baud rate register"] pub mod spbrg {
#[doc = "Register `SPBRG` reader"] pub type R = crate :: R < SpbrgSpec > ;
#[doc = "Register `SPBRG` writer"] pub type W = crate :: W < SpbrgSpec > ;
#[doc = "Field `SPBRG` reader - baud rate control register for simple data"] pub type SpbrgR = crate :: FieldReader < u16 > ;
#[doc = "Field `SPBRG` writer - baud rate control register for simple data"] pub type SpbrgW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - baud rate control register for simple data"]
#[inline (always)] pub fn spbrg (& self) -> SpbrgR { SpbrgR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - baud rate control register for simple data"]
#[inline (always)] pub fn spbrg (& mut self) -> SpbrgW < '_ , SpbrgSpec > { SpbrgW :: new (self , 0) } }
#[doc = "Baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`spbrg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`spbrg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SpbrgSpec ; impl crate :: RegisterSpec for SpbrgSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`spbrg::R`](R) reader structure"] impl crate :: Readable for SpbrgSpec { }
#[doc = "`write(|w| ..)` method takes [`spbrg::W`](W) writer structure"] impl crate :: Writable for SpbrgSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SPBRG to value 0x02"] impl crate :: Resettable for SpbrgSpec { const RESET_VALUE : u32 = 0x02 ; } }
#[doc = "BCNT (rw) register accessor: bit count\n\nYou can [`read`](crate::Reg::read) this register and get [`bcnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bcnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bcnt`] module"]
#[doc (alias = "BCNT")] pub type Bcnt = crate :: Reg < bcnt :: BcntSpec > ;
#[doc = "bit count"] pub mod bcnt {
#[doc = "Register `BCNT` reader"] pub type R = crate :: R < BcntSpec > ;
#[doc = "Register `BCNT` writer"] pub type W = crate :: W < BcntSpec > ;
#[doc = "Field `CNT` reader - send or receive bit count"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - send or receive bit count"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - send or receive bit count"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - send or receive bit count"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , BcntSpec > { CntW :: new (self , 0) } }
#[doc = "bit count\n\nYou can [`read`](crate::Reg::read) this register and get [`bcnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bcnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BcntSpec ; impl crate :: RegisterSpec for BcntSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`bcnt::R`](R) reader structure"] impl crate :: Readable for BcntSpec { }
#[doc = "`write(|w| ..)` method takes [`bcnt::W`](W) writer structure"] impl crate :: Writable for BcntSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets BCNT to value 0"] impl crate :: Resettable for BcntSpec { } } }
#[doc = "Debug support"] pub type Dbg = crate :: Periph < dbg :: RegisterBlock , 0x4001_3400 > ; impl core :: fmt :: Debug for Dbg { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Dbg") . finish () } }
#[doc = "Debug support"] pub mod dbg {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { idcode : Idcode , cr : Cr , } impl RegisterBlock {
#[doc = "0x00 - ID CODE"]
#[inline (always)] pub const fn idcode (& self) -> & Idcode { & self . idcode }
#[doc = "0x04 - Control Register"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr } }
#[doc = "IDCODE (r) register accessor: ID CODE\n\nYou can [`read`](crate::Reg::read) this register and get [`idcode::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idcode`] module"]
#[doc (alias = "IDCODE")] pub type Idcode = crate :: Reg < idcode :: IdcodeSpec > ;
#[doc = "ID CODE"] pub mod idcode {
#[doc = "Register `IDCODE` reader"] pub type R = crate :: R < IdcodeSpec > ;
#[doc = "Field `DEV_ID` reader - Device identifier"] pub type DevIdR = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - Device identifier"]
#[inline (always)] pub fn dev_id (& self) -> DevIdR { DevIdR :: new (self . bits) } }
#[doc = "ID CODE\n\nYou can [`read`](crate::Reg::read) this register and get [`idcode::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IdcodeSpec ; impl crate :: RegisterSpec for IdcodeSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`idcode::R`](R) reader structure"] impl crate :: Readable for IdcodeSpec { }
#[doc = "`reset()` method sets IDCODE to value 0"] impl crate :: Resettable for IdcodeSpec { } }
#[doc = "CR (w) register accessor: Control Register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "Control Register"] pub mod cr {
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `DBG_SLEEP` writer - Debug Sleep mode"] pub type DbgSleepW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBG_STOP` writer - Debug Stop mode"] pub type DbgStopW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBG_STANDBY` writer - Debug Standby mode"] pub type DbgStandbyW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBG_STOP_FOR_LDO` writer - Debug Stop Ldo"] pub type DbgStopForLdoW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBG_IWDG_STOP` writer - Debug independent watchdog stopped when core is stopped"] pub type DbgIwdgStopW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBG_WWDG_STOP` writer - Debug window watchdog when core is halted"] pub type DbgWwdgStopW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBG_TIMx_STOP` writer - TIMx counter stopped when core is halted (x = 3,2,1)"] pub type DbgTimxStopW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `DBG_CAN_STOP` writer - CAN stopped when core is halted"] pub type DbgCanStopW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBG_TIM1x_STOP` writer - TIMx counter stopped when core is halted (x = 16,17,14)"] pub type DbgTim1xStopW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ; impl W {
#[doc = "Bit 0 - Debug Sleep mode"]
#[inline (always)] pub fn dbg_sleep (& mut self) -> DbgSleepW < '_ , CrSpec > { DbgSleepW :: new (self , 0) }
#[doc = "Bit 1 - Debug Stop mode"]
#[inline (always)] pub fn dbg_stop (& mut self) -> DbgStopW < '_ , CrSpec > { DbgStopW :: new (self , 1) }
#[doc = "Bit 2 - Debug Standby mode"]
#[inline (always)] pub fn dbg_standby (& mut self) -> DbgStandbyW < '_ , CrSpec > { DbgStandbyW :: new (self , 2) }
#[doc = "Bit 3 - Debug Stop Ldo"]
#[inline (always)] pub fn dbg_stop_for_ldo (& mut self) -> DbgStopForLdoW < '_ , CrSpec > { DbgStopForLdoW :: new (self , 3) }
#[doc = "Bit 8 - Debug independent watchdog stopped when core is stopped"]
#[inline (always)] pub fn dbg_iwdg_stop (& mut self) -> DbgIwdgStopW < '_ , CrSpec > { DbgIwdgStopW :: new (self , 8) }
#[doc = "Bit 9 - Debug window watchdog when core is halted"]
#[inline (always)] pub fn dbg_wwdg_stop (& mut self) -> DbgWwdgStopW < '_ , CrSpec > { DbgWwdgStopW :: new (self , 9) }
#[doc = "Bits 10:12 - TIMx counter stopped when core is halted (x = 3,2,1)"]
#[inline (always)] pub fn dbg_timx_stop (& mut self) -> DbgTimxStopW < '_ , CrSpec > { DbgTimxStopW :: new (self , 10) }
#[doc = "Bit 14 - CAN stopped when core is halted"]
#[inline (always)] pub fn dbg_can_stop (& mut self) -> DbgCanStopW < '_ , CrSpec > { DbgCanStopW :: new (self , 14) }
#[doc = "Bits 16:18 - TIMx counter stopped when core is halted (x = 16,17,14)"]
#[inline (always)] pub fn dbg_tim1x_stop (& mut self) -> DbgTim1xStopW < '_ , CrSpec > { DbgTim1xStopW :: new (self , 16) } }
#[doc = "Control Register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0"] impl crate :: Resettable for CrSpec { } } }
#[doc = "DEVICE"] pub type Device = crate :: Periph < device :: RegisterBlock , 0x1fff_f7e8 > ; impl core :: fmt :: Debug for Device { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Device") . finish () } }
#[doc = "DEVICE"] pub mod device {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { uid1 : Uid1 , uid2 : Uid2 , uid3 : Uid3 , } impl RegisterBlock {
#[doc = "0x00 - Configuration register"]
#[inline (always)] pub const fn uid1 (& self) -> & Uid1 { & self . uid1 }
#[doc = "0x04 - Configuration register"]
#[inline (always)] pub const fn uid2 (& self) -> & Uid2 { & self . uid2 }
#[doc = "0x08 - Configuration register"]
#[inline (always)] pub const fn uid3 (& self) -> & Uid3 { & self . uid3 } }
#[doc = "UID1 (r) register accessor: Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`uid1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@uid1`] module"]
#[doc (alias = "UID1")] pub type Uid1 = crate :: Reg < uid1 :: Uid1Spec > ;
#[doc = "Configuration register"] pub mod uid1 {
#[doc = "Register `UID1` reader"] pub type R = crate :: R < Uid1Spec > ;
#[doc = "Field `U_ID` reader - 31:0 unique ID bits"] pub type UIdR = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - 31:0 unique ID bits"]
#[inline (always)] pub fn u_id (& self) -> UIdR { UIdR :: new (self . bits) } }
#[doc = "Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`uid1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Uid1Spec ; impl crate :: RegisterSpec for Uid1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`uid1::R`](R) reader structure"] impl crate :: Readable for Uid1Spec { }
#[doc = "`reset()` method sets UID1 to value 0"] impl crate :: Resettable for Uid1Spec { } }
#[doc = "UID2 (r) register accessor: Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`uid2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@uid2`] module"]
#[doc (alias = "UID2")] pub type Uid2 = crate :: Reg < uid2 :: Uid2Spec > ;
#[doc = "Configuration register"] pub mod uid2 {
#[doc = "Register `UID2` reader"] pub type R = crate :: R < Uid2Spec > ;
#[doc = "Field `U_ID` reader - 63:32 unique ID bits"] pub type UIdR = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - 63:32 unique ID bits"]
#[inline (always)] pub fn u_id (& self) -> UIdR { UIdR :: new (self . bits) } }
#[doc = "Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`uid2::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Uid2Spec ; impl crate :: RegisterSpec for Uid2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`uid2::R`](R) reader structure"] impl crate :: Readable for Uid2Spec { }
#[doc = "`reset()` method sets UID2 to value 0"] impl crate :: Resettable for Uid2Spec { } }
#[doc = "UID3 (r) register accessor: Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`uid3::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@uid3`] module"]
#[doc (alias = "UID3")] pub type Uid3 = crate :: Reg < uid3 :: Uid3Spec > ;
#[doc = "Configuration register"] pub mod uid3 {
#[doc = "Register `UID3` reader"] pub type R = crate :: R < Uid3Spec > ;
#[doc = "Field `U_ID` reader - 95:64 unique ID bits"] pub type UIdR = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - 95:64 unique ID bits"]
#[inline (always)] pub fn u_id (& self) -> UIdR { UIdR :: new (self . bits) } }
#[doc = "Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`uid3::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Uid3Spec ; impl crate :: RegisterSpec for Uid3Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`uid3::R`](R) reader structure"] impl crate :: Readable for Uid3Spec { }
#[doc = "`reset()` method sets UID3 to value 0"] impl crate :: Resettable for Uid3Spec { } } }
#[doc = "Direct Momory Accessuart"] pub type Dma1 = crate :: Periph < dma1 :: RegisterBlock , 0x4002_0000 > ; impl core :: fmt :: Debug for Dma1 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Dma1") . finish () } }
#[doc = "Direct Momory Accessuart"] pub mod dma1 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { dma_isr : DmaIsr , dma_ifcr : DmaIfcr , dma_ccr1 : DmaCcr1 , dma_cndtr1 : DmaCndtr1 , dma_cpar1 : DmaCpar1 , dma_cmar1 : DmaCmar1 , _reserved6 : [u8 ; 0x04] , dma_ccr2 : DmaCcr2 , dma_cndtr2 : DmaCndtr2 , dma_cpar2 : DmaCpar2 , dma_cmar2 : DmaCmar2 , _reserved10 : [u8 ; 0x04] , dma_ccr3 : DmaCcr3 , dma_cndtr3 : DmaCndtr3 , dma_cpar3 : DmaCpar3 , dma_cmar3 : DmaCmar3 , _reserved14 : [u8 ; 0x04] , dma_ccr4 : DmaCcr4 , dma_cndtr4 : DmaCndtr4 , dma_cpar4 : DmaCpar4 , dma_cmar4 : DmaCmar4 , _reserved18 : [u8 ; 0x04] , dma_ccr5 : DmaCcr5 , dma_cndtr5 : DmaCndtr5 , dma_cpar5 : DmaCpar5 , dma_cmar5 : DmaCmar5 , } impl RegisterBlock {
#[doc = "0x00 - DMA interrupt status register"]
#[inline (always)] pub const fn dma_isr (& self) -> & DmaIsr { & self . dma_isr }
#[doc = "0x04 - DMA interrupt flag clear reigster"]
#[inline (always)] pub const fn dma_ifcr (& self) -> & DmaIfcr { & self . dma_ifcr }
#[doc = "0x08 - DMA channel 1 configuration reigster"]
#[inline (always)] pub const fn dma_ccr1 (& self) -> & DmaCcr1 { & self . dma_ccr1 }
#[doc = "0x0c - DMA channel 1 number of data register"]
#[inline (always)] pub const fn dma_cndtr1 (& self) -> & DmaCndtr1 { & self . dma_cndtr1 }
#[doc = "0x10 - DMA channel 1 peripheral address register"]
#[inline (always)] pub const fn dma_cpar1 (& self) -> & DmaCpar1 { & self . dma_cpar1 }
#[doc = "0x14 - DMA channel 1 memory address register"]
#[inline (always)] pub const fn dma_cmar1 (& self) -> & DmaCmar1 { & self . dma_cmar1 }
#[doc = "0x1c - DMA channel 1 configuration reigster"]
#[inline (always)] pub const fn dma_ccr2 (& self) -> & DmaCcr2 { & self . dma_ccr2 }
#[doc = "0x20 - DMA channel 1 number of data register"]
#[inline (always)] pub const fn dma_cndtr2 (& self) -> & DmaCndtr2 { & self . dma_cndtr2 }
#[doc = "0x24 - DMA channel 1 peripheral address register"]
#[inline (always)] pub const fn dma_cpar2 (& self) -> & DmaCpar2 { & self . dma_cpar2 }
#[doc = "0x28 - DMA channel 1 memory address register"]
#[inline (always)] pub const fn dma_cmar2 (& self) -> & DmaCmar2 { & self . dma_cmar2 }
#[doc = "0x30 - DMA channel 1 configuration reigster"]
#[inline (always)] pub const fn dma_ccr3 (& self) -> & DmaCcr3 { & self . dma_ccr3 }
#[doc = "0x34 - DMA channel 1 number of data register"]
#[inline (always)] pub const fn dma_cndtr3 (& self) -> & DmaCndtr3 { & self . dma_cndtr3 }
#[doc = "0x38 - DMA channel 1 peripheral address register"]
#[inline (always)] pub const fn dma_cpar3 (& self) -> & DmaCpar3 { & self . dma_cpar3 }
#[doc = "0x3c - DMA channel 1 memory address register"]
#[inline (always)] pub const fn dma_cmar3 (& self) -> & DmaCmar3 { & self . dma_cmar3 }
#[doc = "0x44 - DMA channel 1 configuration reigster"]
#[inline (always)] pub const fn dma_ccr4 (& self) -> & DmaCcr4 { & self . dma_ccr4 }
#[doc = "0x48 - DMA channel 1 number of data register"]
#[inline (always)] pub const fn dma_cndtr4 (& self) -> & DmaCndtr4 { & self . dma_cndtr4 }
#[doc = "0x4c - DMA channel 1 peripheral address register"]
#[inline (always)] pub const fn dma_cpar4 (& self) -> & DmaCpar4 { & self . dma_cpar4 }
#[doc = "0x50 - DMA channel 1 memory address register"]
#[inline (always)] pub const fn dma_cmar4 (& self) -> & DmaCmar4 { & self . dma_cmar4 }
#[doc = "0x58 - DMA channel 1 configuration reigster"]
#[inline (always)] pub const fn dma_ccr5 (& self) -> & DmaCcr5 { & self . dma_ccr5 }
#[doc = "0x5c - DMA channel 1 number of data register"]
#[inline (always)] pub const fn dma_cndtr5 (& self) -> & DmaCndtr5 { & self . dma_cndtr5 }
#[doc = "0x60 - DMA channel 1 peripheral address register"]
#[inline (always)] pub const fn dma_cpar5 (& self) -> & DmaCpar5 { & self . dma_cpar5 }
#[doc = "0x64 - DMA channel 1 memory address register"]
#[inline (always)] pub const fn dma_cmar5 (& self) -> & DmaCmar5 { & self . dma_cmar5 } }
#[doc = "DMA_ISR (r) register accessor: DMA interrupt status register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_isr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_isr`] module"]
#[doc (alias = "DMA_ISR")] pub type DmaIsr = crate :: Reg < dma_isr :: DmaIsrSpec > ;
#[doc = "DMA interrupt status register"] pub mod dma_isr {
#[doc = "Register `DMA_ISR` reader"] pub type R = crate :: R < DmaIsrSpec > ;
#[doc = "Field `GIF1` reader - channel 1 global interrupt flag"] pub type Gif1R = crate :: BitReader ;
#[doc = "Field `TCIF1` reader - channel 1 transfer complete flag"] pub type Tcif1R = crate :: BitReader ;
#[doc = "Field `HTIF1` reader - channel 1 half transfer flag"] pub type Htif1R = crate :: BitReader ;
#[doc = "Field `TEIF1` reader - channel 1 transfer error flag"] pub type Teif1R = crate :: BitReader ;
#[doc = "Field `GIF2` reader - channel 2 global interrupt flag"] pub type Gif2R = crate :: BitReader ;
#[doc = "Field `TCIF2` reader - channel 2 transfer complete flag"] pub type Tcif2R = crate :: BitReader ;
#[doc = "Field `HTIF2` reader - channel 2 half transfer flag"] pub type Htif2R = crate :: BitReader ;
#[doc = "Field `TEIF2` reader - channel 2 transfer error flag"] pub type Teif2R = crate :: BitReader ;
#[doc = "Field `GIF3` reader - channel 3 global interrupt flag"] pub type Gif3R = crate :: BitReader ;
#[doc = "Field `TCIF3` reader - channel 3 transfer complete flag"] pub type Tcif3R = crate :: BitReader ;
#[doc = "Field `HTIF3` reader - channel 3 half transfer flag"] pub type Htif3R = crate :: BitReader ;
#[doc = "Field `TEIF3` reader - channel 3 transfer error flag"] pub type Teif3R = crate :: BitReader ;
#[doc = "Field `GIF4` reader - channel 4 global interrupt flag"] pub type Gif4R = crate :: BitReader ;
#[doc = "Field `TCIF4` reader - channel 4 transfer complete flag"] pub type Tcif4R = crate :: BitReader ;
#[doc = "Field `HTIF4` reader - channel 4 half transfer flag"] pub type Htif4R = crate :: BitReader ;
#[doc = "Field `TEIF4` reader - channel 4 transfer error flag"] pub type Teif4R = crate :: BitReader ;
#[doc = "Field `GIF5` reader - channel 5 global interrupt flag"] pub type Gif5R = crate :: BitReader ;
#[doc = "Field `TCIF5` reader - channel 5 transfer complete flag"] pub type Tcif5R = crate :: BitReader ;
#[doc = "Field `HTIF5` reader - channel 5 half transfer flag"] pub type Htif5R = crate :: BitReader ;
#[doc = "Field `TEIF5` reader - channel 5 transfer error flag"] pub type Teif5R = crate :: BitReader ; impl R {
#[doc = "Bit 0 - channel 1 global interrupt flag"]
#[inline (always)] pub fn gif1 (& self) -> Gif1R { Gif1R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - channel 1 transfer complete flag"]
#[inline (always)] pub fn tcif1 (& self) -> Tcif1R { Tcif1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - channel 1 half transfer flag"]
#[inline (always)] pub fn htif1 (& self) -> Htif1R { Htif1R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - channel 1 transfer error flag"]
#[inline (always)] pub fn teif1 (& self) -> Teif1R { Teif1R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - channel 2 global interrupt flag"]
#[inline (always)] pub fn gif2 (& self) -> Gif2R { Gif2R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - channel 2 transfer complete flag"]
#[inline (always)] pub fn tcif2 (& self) -> Tcif2R { Tcif2R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - channel 2 half transfer flag"]
#[inline (always)] pub fn htif2 (& self) -> Htif2R { Htif2R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - channel 2 transfer error flag"]
#[inline (always)] pub fn teif2 (& self) -> Teif2R { Teif2R :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - channel 3 global interrupt flag"]
#[inline (always)] pub fn gif3 (& self) -> Gif3R { Gif3R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - channel 3 transfer complete flag"]
#[inline (always)] pub fn tcif3 (& self) -> Tcif3R { Tcif3R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - channel 3 half transfer flag"]
#[inline (always)] pub fn htif3 (& self) -> Htif3R { Htif3R :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - channel 3 transfer error flag"]
#[inline (always)] pub fn teif3 (& self) -> Teif3R { Teif3R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - channel 4 global interrupt flag"]
#[inline (always)] pub fn gif4 (& self) -> Gif4R { Gif4R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - channel 4 transfer complete flag"]
#[inline (always)] pub fn tcif4 (& self) -> Tcif4R { Tcif4R :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - channel 4 half transfer flag"]
#[inline (always)] pub fn htif4 (& self) -> Htif4R { Htif4R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - channel 4 transfer error flag"]
#[inline (always)] pub fn teif4 (& self) -> Teif4R { Teif4R :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - channel 5 global interrupt flag"]
#[inline (always)] pub fn gif5 (& self) -> Gif5R { Gif5R :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - channel 5 transfer complete flag"]
#[inline (always)] pub fn tcif5 (& self) -> Tcif5R { Tcif5R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - channel 5 half transfer flag"]
#[inline (always)] pub fn htif5 (& self) -> Htif5R { Htif5R :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - channel 5 transfer error flag"]
#[inline (always)] pub fn teif5 (& self) -> Teif5R { Teif5R :: new (((self . bits >> 19) & 1) != 0) } }
#[doc = "DMA interrupt status register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_isr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaIsrSpec ; impl crate :: RegisterSpec for DmaIsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dma_isr::R`](R) reader structure"] impl crate :: Readable for DmaIsrSpec { }
#[doc = "`reset()` method sets DMA_ISR to value 0"] impl crate :: Resettable for DmaIsrSpec { } }
#[doc = "DMA_IFCR (w) register accessor: DMA interrupt flag clear reigster\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_ifcr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_ifcr`] module"]
#[doc (alias = "DMA_IFCR")] pub type DmaIfcr = crate :: Reg < dma_ifcr :: DmaIfcrSpec > ;
#[doc = "DMA interrupt flag clear reigster"] pub mod dma_ifcr {
#[doc = "Register `DMA_IFCR` writer"] pub type W = crate :: W < DmaIfcrSpec > ;
#[doc = "Field `CGIF1` writer - channel 1 global interrupt clear"] pub type Cgif1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTCIF1` writer - channel 1 transfer complete clear"] pub type Ctcif1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHTIF1` writer - channel 1 half transfer clear"] pub type Chtif1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTEIF1` writer - channel 1 transfer error clear"] pub type Cteif1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CGIF2` writer - channel 2 global interrupt clear"] pub type Cgif2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTCIF2` writer - channel 2 transfer complete clear"] pub type Ctcif2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHTIF2` writer - channel 2 half transfer clear"] pub type Chtif2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTEIF2` writer - channel 2 transfer error clear"] pub type Cteif2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CGIF3` writer - channel 3 global interrupt clear"] pub type Cgif3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTCIF3` writer - channel 3 transfer complete clear"] pub type Ctcif3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHTIF3` writer - channel 3 half transfer clear"] pub type Chtif3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTEIF3` writer - channel 3 transfer error clear"] pub type Cteif3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CGIF4` writer - channel 4 global interrupt clear"] pub type Cgif4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTCIF4` writer - channel 4 transfer complete clear"] pub type Ctcif4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHTIF4` writer - channel 4 half transfer clear"] pub type Chtif4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTEIF4` writer - channel 4 transfer error clear"] pub type Cteif4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CGIF5` writer - channel 5 global interrupt clear"] pub type Cgif5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTCIF5` writer - channel 5 transfer complete clear"] pub type Ctcif5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHTIF5` writer - channel 5 half transfer clear"] pub type Chtif5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CTEIF5` writer - channel 5 transfer error clear"] pub type Cteif5W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - channel 1 global interrupt clear"]
#[inline (always)] pub fn cgif1 (& mut self) -> Cgif1W < '_ , DmaIfcrSpec > { Cgif1W :: new (self , 0) }
#[doc = "Bit 1 - channel 1 transfer complete clear"]
#[inline (always)] pub fn ctcif1 (& mut self) -> Ctcif1W < '_ , DmaIfcrSpec > { Ctcif1W :: new (self , 1) }
#[doc = "Bit 2 - channel 1 half transfer clear"]
#[inline (always)] pub fn chtif1 (& mut self) -> Chtif1W < '_ , DmaIfcrSpec > { Chtif1W :: new (self , 2) }
#[doc = "Bit 3 - channel 1 transfer error clear"]
#[inline (always)] pub fn cteif1 (& mut self) -> Cteif1W < '_ , DmaIfcrSpec > { Cteif1W :: new (self , 3) }
#[doc = "Bit 4 - channel 2 global interrupt clear"]
#[inline (always)] pub fn cgif2 (& mut self) -> Cgif2W < '_ , DmaIfcrSpec > { Cgif2W :: new (self , 4) }
#[doc = "Bit 5 - channel 2 transfer complete clear"]
#[inline (always)] pub fn ctcif2 (& mut self) -> Ctcif2W < '_ , DmaIfcrSpec > { Ctcif2W :: new (self , 5) }
#[doc = "Bit 6 - channel 2 half transfer clear"]
#[inline (always)] pub fn chtif2 (& mut self) -> Chtif2W < '_ , DmaIfcrSpec > { Chtif2W :: new (self , 6) }
#[doc = "Bit 7 - channel 2 transfer error clear"]
#[inline (always)] pub fn cteif2 (& mut self) -> Cteif2W < '_ , DmaIfcrSpec > { Cteif2W :: new (self , 7) }
#[doc = "Bit 8 - channel 3 global interrupt clear"]
#[inline (always)] pub fn cgif3 (& mut self) -> Cgif3W < '_ , DmaIfcrSpec > { Cgif3W :: new (self , 8) }
#[doc = "Bit 9 - channel 3 transfer complete clear"]
#[inline (always)] pub fn ctcif3 (& mut self) -> Ctcif3W < '_ , DmaIfcrSpec > { Ctcif3W :: new (self , 9) }
#[doc = "Bit 10 - channel 3 half transfer clear"]
#[inline (always)] pub fn chtif3 (& mut self) -> Chtif3W < '_ , DmaIfcrSpec > { Chtif3W :: new (self , 10) }
#[doc = "Bit 11 - channel 3 transfer error clear"]
#[inline (always)] pub fn cteif3 (& mut self) -> Cteif3W < '_ , DmaIfcrSpec > { Cteif3W :: new (self , 11) }
#[doc = "Bit 12 - channel 4 global interrupt clear"]
#[inline (always)] pub fn cgif4 (& mut self) -> Cgif4W < '_ , DmaIfcrSpec > { Cgif4W :: new (self , 12) }
#[doc = "Bit 13 - channel 4 transfer complete clear"]
#[inline (always)] pub fn ctcif4 (& mut self) -> Ctcif4W < '_ , DmaIfcrSpec > { Ctcif4W :: new (self , 13) }
#[doc = "Bit 14 - channel 4 half transfer clear"]
#[inline (always)] pub fn chtif4 (& mut self) -> Chtif4W < '_ , DmaIfcrSpec > { Chtif4W :: new (self , 14) }
#[doc = "Bit 15 - channel 4 transfer error clear"]
#[inline (always)] pub fn cteif4 (& mut self) -> Cteif4W < '_ , DmaIfcrSpec > { Cteif4W :: new (self , 15) }
#[doc = "Bit 16 - channel 5 global interrupt clear"]
#[inline (always)] pub fn cgif5 (& mut self) -> Cgif5W < '_ , DmaIfcrSpec > { Cgif5W :: new (self , 16) }
#[doc = "Bit 17 - channel 5 transfer complete clear"]
#[inline (always)] pub fn ctcif5 (& mut self) -> Ctcif5W < '_ , DmaIfcrSpec > { Ctcif5W :: new (self , 17) }
#[doc = "Bit 18 - channel 5 half transfer clear"]
#[inline (always)] pub fn chtif5 (& mut self) -> Chtif5W < '_ , DmaIfcrSpec > { Chtif5W :: new (self , 18) }
#[doc = "Bit 19 - channel 5 transfer error clear"]
#[inline (always)] pub fn cteif5 (& mut self) -> Cteif5W < '_ , DmaIfcrSpec > { Cteif5W :: new (self , 19) } }
#[doc = "DMA interrupt flag clear reigster\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_ifcr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaIfcrSpec ; impl crate :: RegisterSpec for DmaIfcrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`dma_ifcr::W`](W) writer structure"] impl crate :: Writable for DmaIfcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMA_IFCR to value 0"] impl crate :: Resettable for DmaIfcrSpec { } }
#[doc = "DMA_CCR1 (rw) register accessor: DMA channel 1 configuration reigster\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_ccr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_ccr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_ccr1`] module"]
#[doc (alias = "DMA_CCR1")] pub type DmaCcr1 = crate :: Reg < dma_ccr1 :: DmaCcr1Spec > ;
#[doc = "DMA channel 1 configuration reigster"] pub mod dma_ccr1 {
#[doc = "Register `DMA_CCR1` reader"] pub type R = crate :: R < DmaCcr1Spec > ;
#[doc = "Register `DMA_CCR1` writer"] pub type W = crate :: W < DmaCcr1Spec > ;
#[doc = "Field `EN` reader - Channel enable"] pub type EnR = crate :: BitReader ;
#[doc = "Field `EN` writer - Channel enable"] pub type EnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TCIE` reader - Transfer complete interrupt enable"] pub type TcieR = crate :: BitReader ;
#[doc = "Field `TCIE` writer - Transfer complete interrupt enable"] pub type TcieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HTIE` reader - Half transfer interrupt enable"] pub type HtieR = crate :: BitReader ;
#[doc = "Field `HTIE` writer - Half transfer interrupt enable"] pub type HtieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TEIE` reader - Transfer error interrupt enable"] pub type TeieR = crate :: BitReader ;
#[doc = "Field `TEIE` writer - Transfer error interrupt enable"] pub type TeieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DIR` reader - Data transfer direction"] pub type DirR = crate :: BitReader ;
#[doc = "Field `DIR` writer - Data transfer direction"] pub type DirW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CIRC` reader - Circular mode"] pub type CircR = crate :: BitReader ;
#[doc = "Field `CIRC` writer - Circular mode"] pub type CircW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PINC` reader - Peripheral increment mode"] pub type PincR = crate :: BitReader ;
#[doc = "Field `PINC` writer - Peripheral increment mode"] pub type PincW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MINC` reader - Memory increment mode"] pub type MincR = crate :: BitReader ;
#[doc = "Field `MINC` writer - Memory increment mode"] pub type MincW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PSIZE` reader - Peripheral size"] pub type PsizeR = crate :: FieldReader ;
#[doc = "Field `PSIZE` writer - Peripheral size"] pub type PsizeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MSIZE` reader - Memory size"] pub type MsizeR = crate :: FieldReader ;
#[doc = "Field `MSIZE` writer - Memory size"] pub type MsizeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PL` reader - Channel priority level"] pub type PlR = crate :: FieldReader ;
#[doc = "Field `PL` writer - Channel priority level"] pub type PlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MEM2MEM` reader - Memory to memory mode"] pub type Mem2memR = crate :: BitReader ;
#[doc = "Field `MEM2MEM` writer - Memory to memory mode"] pub type Mem2memW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ARE` reader - Auto Reload"] pub type AreR = crate :: BitReader ;
#[doc = "Field `ARE` writer - Auto Reload"] pub type AreW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Channel enable"]
#[inline (always)] pub fn en (& self) -> EnR { EnR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Transfer complete interrupt enable"]
#[inline (always)] pub fn tcie (& self) -> TcieR { TcieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Half transfer interrupt enable"]
#[inline (always)] pub fn htie (& self) -> HtieR { HtieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Transfer error interrupt enable"]
#[inline (always)] pub fn teie (& self) -> TeieR { TeieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Data transfer direction"]
#[inline (always)] pub fn dir (& self) -> DirR { DirR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Circular mode"]
#[inline (always)] pub fn circ (& self) -> CircR { CircR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Peripheral increment mode"]
#[inline (always)] pub fn pinc (& self) -> PincR { PincR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Memory increment mode"]
#[inline (always)] pub fn minc (& self) -> MincR { MincR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Peripheral size"]
#[inline (always)] pub fn psize (& self) -> PsizeR { PsizeR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - Memory size"]
#[inline (always)] pub fn msize (& self) -> MsizeR { MsizeR :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:13 - Channel priority level"]
#[inline (always)] pub fn pl (& self) -> PlR { PlR :: new (((self . bits >> 12) & 3) as u8) }
#[doc = "Bit 14 - Memory to memory mode"]
#[inline (always)] pub fn mem2mem (& self) -> Mem2memR { Mem2memR :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Auto Reload"]
#[inline (always)] pub fn are (& self) -> AreR { AreR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Channel enable"]
#[inline (always)] pub fn en (& mut self) -> EnW < '_ , DmaCcr1Spec > { EnW :: new (self , 0) }
#[doc = "Bit 1 - Transfer complete interrupt enable"]
#[inline (always)] pub fn tcie (& mut self) -> TcieW < '_ , DmaCcr1Spec > { TcieW :: new (self , 1) }
#[doc = "Bit 2 - Half transfer interrupt enable"]
#[inline (always)] pub fn htie (& mut self) -> HtieW < '_ , DmaCcr1Spec > { HtieW :: new (self , 2) }
#[doc = "Bit 3 - Transfer error interrupt enable"]
#[inline (always)] pub fn teie (& mut self) -> TeieW < '_ , DmaCcr1Spec > { TeieW :: new (self , 3) }
#[doc = "Bit 4 - Data transfer direction"]
#[inline (always)] pub fn dir (& mut self) -> DirW < '_ , DmaCcr1Spec > { DirW :: new (self , 4) }
#[doc = "Bit 5 - Circular mode"]
#[inline (always)] pub fn circ (& mut self) -> CircW < '_ , DmaCcr1Spec > { CircW :: new (self , 5) }
#[doc = "Bit 6 - Peripheral increment mode"]
#[inline (always)] pub fn pinc (& mut self) -> PincW < '_ , DmaCcr1Spec > { PincW :: new (self , 6) }
#[doc = "Bit 7 - Memory increment mode"]
#[inline (always)] pub fn minc (& mut self) -> MincW < '_ , DmaCcr1Spec > { MincW :: new (self , 7) }
#[doc = "Bits 8:9 - Peripheral size"]
#[inline (always)] pub fn psize (& mut self) -> PsizeW < '_ , DmaCcr1Spec > { PsizeW :: new (self , 8) }
#[doc = "Bits 10:11 - Memory size"]
#[inline (always)] pub fn msize (& mut self) -> MsizeW < '_ , DmaCcr1Spec > { MsizeW :: new (self , 10) }
#[doc = "Bits 12:13 - Channel priority level"]
#[inline (always)] pub fn pl (& mut self) -> PlW < '_ , DmaCcr1Spec > { PlW :: new (self , 12) }
#[doc = "Bit 14 - Memory to memory mode"]
#[inline (always)] pub fn mem2mem (& mut self) -> Mem2memW < '_ , DmaCcr1Spec > { Mem2memW :: new (self , 14) }
#[doc = "Bit 15 - Auto Reload"]
#[inline (always)] pub fn are (& mut self) -> AreW < '_ , DmaCcr1Spec > { AreW :: new (self , 15) } }
#[doc = "DMA channel 1 configuration reigster\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_ccr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_ccr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaCcr1Spec ; impl crate :: RegisterSpec for DmaCcr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dma_ccr1::R`](R) reader structure"] impl crate :: Readable for DmaCcr1Spec { }
#[doc = "`write(|w| ..)` method takes [`dma_ccr1::W`](W) writer structure"] impl crate :: Writable for DmaCcr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMA_CCR1 to value 0"] impl crate :: Resettable for DmaCcr1Spec { } } pub use DmaCcr1 as DmaCcr2 ; pub use dma_ccr1 as dma_ccr2 ; pub use DmaCcr1 as DmaCcr3 ; pub use dma_ccr1 as dma_ccr3 ; pub use DmaCcr1 as DmaCcr4 ; pub use dma_ccr1 as dma_ccr4 ; pub use DmaCcr1 as DmaCcr5 ; pub use dma_ccr1 as dma_ccr5 ;
#[doc = "DMA_CNDTR1 (rw) register accessor: DMA channel 1 number of data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_cndtr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_cndtr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_cndtr1`] module"]
#[doc (alias = "DMA_CNDTR1")] pub type DmaCndtr1 = crate :: Reg < dma_cndtr1 :: DmaCndtr1Spec > ;
#[doc = "DMA channel 1 number of data register"] pub mod dma_cndtr1 {
#[doc = "Register `DMA_CNDTR1` reader"] pub type R = crate :: R < DmaCndtr1Spec > ;
#[doc = "Register `DMA_CNDTR1` writer"] pub type W = crate :: W < DmaCndtr1Spec > ;
#[doc = "Field `NDT` reader - Number of data to transfer"] pub type NdtR = crate :: FieldReader < u16 > ;
#[doc = "Field `NDT` writer - Number of data to transfer"] pub type NdtW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Number of data to transfer"]
#[inline (always)] pub fn ndt (& self) -> NdtR { NdtR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Number of data to transfer"]
#[inline (always)] pub fn ndt (& mut self) -> NdtW < '_ , DmaCndtr1Spec > { NdtW :: new (self , 0) } }
#[doc = "DMA channel 1 number of data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_cndtr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_cndtr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaCndtr1Spec ; impl crate :: RegisterSpec for DmaCndtr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dma_cndtr1::R`](R) reader structure"] impl crate :: Readable for DmaCndtr1Spec { }
#[doc = "`write(|w| ..)` method takes [`dma_cndtr1::W`](W) writer structure"] impl crate :: Writable for DmaCndtr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMA_CNDTR1 to value 0"] impl crate :: Resettable for DmaCndtr1Spec { } } pub use DmaCndtr1 as DmaCndtr2 ; pub use dma_cndtr1 as dma_cndtr2 ; pub use DmaCndtr1 as DmaCndtr3 ; pub use dma_cndtr1 as dma_cndtr3 ; pub use DmaCndtr1 as DmaCndtr4 ; pub use dma_cndtr1 as dma_cndtr4 ; pub use DmaCndtr1 as DmaCndtr5 ; pub use dma_cndtr1 as dma_cndtr5 ;
#[doc = "DMA_CPAR1 (rw) register accessor: DMA channel 1 peripheral address register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_cpar1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_cpar1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_cpar1`] module"]
#[doc (alias = "DMA_CPAR1")] pub type DmaCpar1 = crate :: Reg < dma_cpar1 :: DmaCpar1Spec > ;
#[doc = "DMA channel 1 peripheral address register"] pub mod dma_cpar1 {
#[doc = "Register `DMA_CPAR1` reader"] pub type R = crate :: R < DmaCpar1Spec > ;
#[doc = "Register `DMA_CPAR1` writer"] pub type W = crate :: W < DmaCpar1Spec > ;
#[doc = "Field `PA` reader - Peripheral address"] pub type PaR = crate :: FieldReader < u32 > ;
#[doc = "Field `PA` writer - Peripheral address"] pub type PaW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Peripheral address"]
#[inline (always)] pub fn pa (& self) -> PaR { PaR :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Peripheral address"]
#[inline (always)] pub fn pa (& mut self) -> PaW < '_ , DmaCpar1Spec > { PaW :: new (self , 0) } }
#[doc = "DMA channel 1 peripheral address register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_cpar1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_cpar1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaCpar1Spec ; impl crate :: RegisterSpec for DmaCpar1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dma_cpar1::R`](R) reader structure"] impl crate :: Readable for DmaCpar1Spec { }
#[doc = "`write(|w| ..)` method takes [`dma_cpar1::W`](W) writer structure"] impl crate :: Writable for DmaCpar1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMA_CPAR1 to value 0"] impl crate :: Resettable for DmaCpar1Spec { } } pub use DmaCpar1 as DmaCpar2 ; pub use dma_cpar1 as dma_cpar2 ; pub use DmaCpar1 as DmaCpar3 ; pub use dma_cpar1 as dma_cpar3 ; pub use DmaCpar1 as DmaCpar4 ; pub use dma_cpar1 as dma_cpar4 ; pub use DmaCpar1 as DmaCpar5 ; pub use dma_cpar1 as dma_cpar5 ;
#[doc = "DMA_CMAR1 (rw) register accessor: DMA channel 1 memory address register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_cmar1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_cmar1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_cmar1`] module"]
#[doc (alias = "DMA_CMAR1")] pub type DmaCmar1 = crate :: Reg < dma_cmar1 :: DmaCmar1Spec > ;
#[doc = "DMA channel 1 memory address register"] pub mod dma_cmar1 {
#[doc = "Register `DMA_CMAR1` reader"] pub type R = crate :: R < DmaCmar1Spec > ;
#[doc = "Register `DMA_CMAR1` writer"] pub type W = crate :: W < DmaCmar1Spec > ;
#[doc = "Field `MA` reader - Memory address"] pub type MaR = crate :: FieldReader < u32 > ;
#[doc = "Field `MA` writer - Memory address"] pub type MaW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Memory address"]
#[inline (always)] pub fn ma (& self) -> MaR { MaR :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Memory address"]
#[inline (always)] pub fn ma (& mut self) -> MaW < '_ , DmaCmar1Spec > { MaW :: new (self , 0) } }
#[doc = "DMA channel 1 memory address register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_cmar1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_cmar1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaCmar1Spec ; impl crate :: RegisterSpec for DmaCmar1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dma_cmar1::R`](R) reader structure"] impl crate :: Readable for DmaCmar1Spec { }
#[doc = "`write(|w| ..)` method takes [`dma_cmar1::W`](W) writer structure"] impl crate :: Writable for DmaCmar1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMA_CMAR1 to value 0"] impl crate :: Resettable for DmaCmar1Spec { } } pub use DmaCmar1 as DmaCmar2 ; pub use dma_cmar1 as dma_cmar2 ; pub use DmaCmar1 as DmaCmar3 ; pub use dma_cmar1 as dma_cmar3 ; pub use DmaCmar1 as DmaCmar4 ; pub use dma_cmar1 as dma_cmar4 ; pub use DmaCmar1 as DmaCmar5 ; pub use dma_cmar1 as dma_cmar5 ; }
#[doc = "External interrupt/event controller"] pub type Exti = crate :: Periph < exti :: RegisterBlock , 0x4001_0000 > ; impl core :: fmt :: Debug for Exti { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Exti") . finish () } }
#[doc = "External interrupt/event controller"] pub mod exti {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cfgr : Cfgr , _reserved1 : [u8 ; 0x04] , cr1 : Cr1 , cr2 : Cr2 , cr3 : Cr3 , cr4 : Cr4 , padhys : Padhys , _reserved6 : [u8 ; 0x03e4] , imr : Imr , emr : Emr , rtsr : Rtsr , ftsr : Ftsr , swier : Swier , pr : Pr , } impl RegisterBlock {
#[doc = "0x00 - Configuration register"]
#[inline (always)] pub const fn cfgr (& self) -> & Cfgr { & self . cfgr }
#[doc = "0x08 - External interrupt configuration register 1"]
#[inline (always)] pub const fn cr1 (& self) -> & Cr1 { & self . cr1 }
#[doc = "0x0c - External interrupt configuration register 2"]
#[inline (always)] pub const fn cr2 (& self) -> & Cr2 { & self . cr2 }
#[doc = "0x10 - External interrupt configuration register 3"]
#[inline (always)] pub const fn cr3 (& self) -> & Cr3 { & self . cr3 }
#[doc = "0x14 - External interrupt configuration register 4"]
#[inline (always)] pub const fn cr4 (& self) -> & Cr4 { & self . cr4 }
#[doc = "0x18 - PAD configuration register"]
#[inline (always)] pub const fn padhys (& self) -> & Padhys { & self . padhys }
#[doc = "0x400 - Interrupt mask register"]
#[inline (always)] pub const fn imr (& self) -> & Imr { & self . imr }
#[doc = "0x404 - Event mask register"]
#[inline (always)] pub const fn emr (& self) -> & Emr { & self . emr }
#[doc = "0x408 - Rising trigger selection register"]
#[inline (always)] pub const fn rtsr (& self) -> & Rtsr { & self . rtsr }
#[doc = "0x40c - Falling trigger selection register"]
#[inline (always)] pub const fn ftsr (& self) -> & Ftsr { & self . ftsr }
#[doc = "0x410 - Software interrupt event register"]
#[inline (always)] pub const fn swier (& self) -> & Swier { & self . swier }
#[doc = "0x414 - Pending register"]
#[inline (always)] pub const fn pr (& self) -> & Pr { & self . pr } }
#[doc = "CFGR (rw) register accessor: Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cfgr`] module"]
#[doc (alias = "CFGR")] pub type Cfgr = crate :: Reg < cfgr :: CfgrSpec > ;
#[doc = "Configuration register"] pub mod cfgr {
#[doc = "Register `CFGR` reader"] pub type R = crate :: R < CfgrSpec > ;
#[doc = "Register `CFGR` writer"] pub type W = crate :: W < CfgrSpec > ;
#[doc = "Field `MEM_MODE` reader - EXTI_Memory Remap Config"] pub type MemModeR = crate :: FieldReader ;
#[doc = "Field `MEM_MODE` writer - EXTI_Memory Remap Config"] pub type MemModeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PA11_RERMP` reader - PA11 DMA remap"] pub type Pa11RermpR = crate :: BitReader ;
#[doc = "Field `PA11_RERMP` writer - PA11 DMA remap"] pub type Pa11RermpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PA12_RERMP` reader - PA12 DMA remap"] pub type Pa12RermpR = crate :: BitReader ;
#[doc = "Field `PA12_RERMP` writer - PA12 DMA remap"] pub type Pa12RermpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ADC_DMA_RMP` reader - ADC DMA remap"] pub type AdcDmaRmpR = crate :: BitReader ;
#[doc = "Field `ADC_DMA_RMP` writer - ADC DMA remap"] pub type AdcDmaRmpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UART1_TX_DMA_RMP` reader - UART1 TX DMA remap"] pub type Uart1TxDmaRmpR = crate :: BitReader ;
#[doc = "Field `UART1_TX_DMA_RMP` writer - UART1 TX DMA remap"] pub type Uart1TxDmaRmpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UART1_RX_DMA_RMP` reader - UART1 RX DMA remap"] pub type Uart1RxDmaRmpR = crate :: BitReader ;
#[doc = "Field `UART1_RX_DMA_RMP` writer - UART1 RX DMA remap"] pub type Uart1RxDmaRmpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM16_DMA_RMP` reader - Timer 16 DMA remap"] pub type Tim16DmaRmpR = crate :: BitReader ;
#[doc = "Field `TIM16_DMA_RMP` writer - Timer 16 DMA remap"] pub type Tim16DmaRmpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM17_DMA_RMP` reader - Timer 17 DMA remap"] pub type Tim17DmaRmpR = crate :: BitReader ;
#[doc = "Field `TIM17_DMA_RMP` writer - Timer 17 DMA remap"] pub type Tim17DmaRmpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CSMCH2_DMA_RMP` reader - CSMCH2 DMA remap"] pub type Csmch2DmaRmpR = crate :: BitReader ;
#[doc = "Field `CSMCH2_DMA_RMP` writer - CSMCH2 DMA remap"] pub type Csmch2DmaRmpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CSMCH1_DMA_RMP` reader - CSMCH1 DMA remap"] pub type Csmch1DmaRmpR = crate :: BitReader ;
#[doc = "Field `CSMCH1_DMA_RMP` writer - CSMCH1 DMA remap"] pub type Csmch1DmaRmpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PA11_PA12_RMP` reader - PA11 PA12 remap"] pub type Pa11Pa12RmpR = crate :: BitReader ;
#[doc = "Field `PA11_PA12_RMP` writer - PA11 PA12 remap"] pub type Pa11Pa12RmpW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:1 - EXTI_Memory Remap Config"]
#[inline (always)] pub fn mem_mode (& self) -> MemModeR { MemModeR :: new ((self . bits & 3) as u8) }
#[doc = "Bit 3 - PA11 DMA remap"]
#[inline (always)] pub fn pa11_rermp (& self) -> Pa11RermpR { Pa11RermpR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - PA12 DMA remap"]
#[inline (always)] pub fn pa12_rermp (& self) -> Pa12RermpR { Pa12RermpR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 8 - ADC DMA remap"]
#[inline (always)] pub fn adc_dma_rmp (& self) -> AdcDmaRmpR { AdcDmaRmpR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - UART1 TX DMA remap"]
#[inline (always)] pub fn uart1_tx_dma_rmp (& self) -> Uart1TxDmaRmpR { Uart1TxDmaRmpR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - UART1 RX DMA remap"]
#[inline (always)] pub fn uart1_rx_dma_rmp (& self) -> Uart1RxDmaRmpR { Uart1RxDmaRmpR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Timer 16 DMA remap"]
#[inline (always)] pub fn tim16_dma_rmp (& self) -> Tim16DmaRmpR { Tim16DmaRmpR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Timer 17 DMA remap"]
#[inline (always)] pub fn tim17_dma_rmp (& self) -> Tim17DmaRmpR { Tim17DmaRmpR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - CSMCH2 DMA remap"]
#[inline (always)] pub fn csmch2_dma_rmp (& self) -> Csmch2DmaRmpR { Csmch2DmaRmpR :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - CSMCH1 DMA remap"]
#[inline (always)] pub fn csmch1_dma_rmp (& self) -> Csmch1DmaRmpR { Csmch1DmaRmpR :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - PA11 PA12 remap"]
#[inline (always)] pub fn pa11_pa12_rmp (& self) -> Pa11Pa12RmpR { Pa11Pa12RmpR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:1 - EXTI_Memory Remap Config"]
#[inline (always)] pub fn mem_mode (& mut self) -> MemModeW < '_ , CfgrSpec > { MemModeW :: new (self , 0) }
#[doc = "Bit 3 - PA11 DMA remap"]
#[inline (always)] pub fn pa11_rermp (& mut self) -> Pa11RermpW < '_ , CfgrSpec > { Pa11RermpW :: new (self , 3) }
#[doc = "Bit 4 - PA12 DMA remap"]
#[inline (always)] pub fn pa12_rermp (& mut self) -> Pa12RermpW < '_ , CfgrSpec > { Pa12RermpW :: new (self , 4) }
#[doc = "Bit 8 - ADC DMA remap"]
#[inline (always)] pub fn adc_dma_rmp (& mut self) -> AdcDmaRmpW < '_ , CfgrSpec > { AdcDmaRmpW :: new (self , 8) }
#[doc = "Bit 9 - UART1 TX DMA remap"]
#[inline (always)] pub fn uart1_tx_dma_rmp (& mut self) -> Uart1TxDmaRmpW < '_ , CfgrSpec > { Uart1TxDmaRmpW :: new (self , 9) }
#[doc = "Bit 10 - UART1 RX DMA remap"]
#[inline (always)] pub fn uart1_rx_dma_rmp (& mut self) -> Uart1RxDmaRmpW < '_ , CfgrSpec > { Uart1RxDmaRmpW :: new (self , 10) }
#[doc = "Bit 11 - Timer 16 DMA remap"]
#[inline (always)] pub fn tim16_dma_rmp (& mut self) -> Tim16DmaRmpW < '_ , CfgrSpec > { Tim16DmaRmpW :: new (self , 11) }
#[doc = "Bit 12 - Timer 17 DMA remap"]
#[inline (always)] pub fn tim17_dma_rmp (& mut self) -> Tim17DmaRmpW < '_ , CfgrSpec > { Tim17DmaRmpW :: new (self , 12) }
#[doc = "Bit 13 - CSMCH2 DMA remap"]
#[inline (always)] pub fn csmch2_dma_rmp (& mut self) -> Csmch2DmaRmpW < '_ , CfgrSpec > { Csmch2DmaRmpW :: new (self , 13) }
#[doc = "Bit 14 - CSMCH1 DMA remap"]
#[inline (always)] pub fn csmch1_dma_rmp (& mut self) -> Csmch1DmaRmpW < '_ , CfgrSpec > { Csmch1DmaRmpW :: new (self , 14) }
#[doc = "Bit 15 - PA11 PA12 remap"]
#[inline (always)] pub fn pa11_pa12_rmp (& mut self) -> Pa11Pa12RmpW < '_ , CfgrSpec > { Pa11Pa12RmpW :: new (self , 15) } }
#[doc = "Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CfgrSpec ; impl crate :: RegisterSpec for CfgrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cfgr::R`](R) reader structure"] impl crate :: Readable for CfgrSpec { }
#[doc = "`write(|w| ..)` method takes [`cfgr::W`](W) writer structure"] impl crate :: Writable for CfgrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CFGR to value 0"] impl crate :: Resettable for CfgrSpec { } }
#[doc = "CR1 (rw) register accessor: External interrupt configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr1`] module"]
#[doc (alias = "CR1")] pub type Cr1 = crate :: Reg < cr1 :: Cr1Spec > ;
#[doc = "External interrupt configuration register 1"] pub mod cr1 {
#[doc = "Register `CR1` reader"] pub type R = crate :: R < Cr1Spec > ;
#[doc = "Register `CR1` writer"] pub type W = crate :: W < Cr1Spec > ;
#[doc = "Field `EXTI0` reader - EXTI 0 configuration"] pub type Exti0R = crate :: FieldReader ;
#[doc = "Field `EXTI0` writer - EXTI 0 configuration"] pub type Exti0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI1` reader - EXTI 1 configuration"] pub type Exti1R = crate :: FieldReader ;
#[doc = "Field `EXTI1` writer - EXTI 1 configuration"] pub type Exti1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI2` reader - EXTI 2 configuration"] pub type Exti2R = crate :: FieldReader ;
#[doc = "Field `EXTI2` writer - EXTI 2 configuration"] pub type Exti2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI3` reader - EXTI 3 configuration"] pub type Exti3R = crate :: FieldReader ;
#[doc = "Field `EXTI3` writer - EXTI 3 configuration"] pub type Exti3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - EXTI 0 configuration"]
#[inline (always)] pub fn exti0 (& self) -> Exti0R { Exti0R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - EXTI 1 configuration"]
#[inline (always)] pub fn exti1 (& self) -> Exti1R { Exti1R :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:11 - EXTI 2 configuration"]
#[inline (always)] pub fn exti2 (& self) -> Exti2R { Exti2R :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:15 - EXTI 3 configuration"]
#[inline (always)] pub fn exti3 (& self) -> Exti3R { Exti3R :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - EXTI 0 configuration"]
#[inline (always)] pub fn exti0 (& mut self) -> Exti0W < '_ , Cr1Spec > { Exti0W :: new (self , 0) }
#[doc = "Bits 4:7 - EXTI 1 configuration"]
#[inline (always)] pub fn exti1 (& mut self) -> Exti1W < '_ , Cr1Spec > { Exti1W :: new (self , 4) }
#[doc = "Bits 8:11 - EXTI 2 configuration"]
#[inline (always)] pub fn exti2 (& mut self) -> Exti2W < '_ , Cr1Spec > { Exti2W :: new (self , 8) }
#[doc = "Bits 12:15 - EXTI 3 configuration"]
#[inline (always)] pub fn exti3 (& mut self) -> Exti3W < '_ , Cr1Spec > { Exti3W :: new (self , 12) } }
#[doc = "External interrupt configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr1Spec ; impl crate :: RegisterSpec for Cr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr1::R`](R) reader structure"] impl crate :: Readable for Cr1Spec { }
#[doc = "`write(|w| ..)` method takes [`cr1::W`](W) writer structure"] impl crate :: Writable for Cr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR1 to value 0"] impl crate :: Resettable for Cr1Spec { } }
#[doc = "CR2 (rw) register accessor: External interrupt configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr2`] module"]
#[doc (alias = "CR2")] pub type Cr2 = crate :: Reg < cr2 :: Cr2Spec > ;
#[doc = "External interrupt configuration register 2"] pub mod cr2 {
#[doc = "Register `CR2` reader"] pub type R = crate :: R < Cr2Spec > ;
#[doc = "Register `CR2` writer"] pub type W = crate :: W < Cr2Spec > ;
#[doc = "Field `EXTI4` reader - EXTI 4 configuration"] pub type Exti4R = crate :: FieldReader ;
#[doc = "Field `EXTI4` writer - EXTI 4 configuration"] pub type Exti4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI5` reader - EXTI 5 configuration"] pub type Exti5R = crate :: FieldReader ;
#[doc = "Field `EXTI5` writer - EXTI 5 configuration"] pub type Exti5W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI6` reader - EXTI 6 configuration"] pub type Exti6R = crate :: FieldReader ;
#[doc = "Field `EXTI6` writer - EXTI 6 configuration"] pub type Exti6W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI7` reader - EXTI 7 configuration"] pub type Exti7R = crate :: FieldReader ;
#[doc = "Field `EXTI7` writer - EXTI 7 configuration"] pub type Exti7W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - EXTI 4 configuration"]
#[inline (always)] pub fn exti4 (& self) -> Exti4R { Exti4R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - EXTI 5 configuration"]
#[inline (always)] pub fn exti5 (& self) -> Exti5R { Exti5R :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:11 - EXTI 6 configuration"]
#[inline (always)] pub fn exti6 (& self) -> Exti6R { Exti6R :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:15 - EXTI 7 configuration"]
#[inline (always)] pub fn exti7 (& self) -> Exti7R { Exti7R :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - EXTI 4 configuration"]
#[inline (always)] pub fn exti4 (& mut self) -> Exti4W < '_ , Cr2Spec > { Exti4W :: new (self , 0) }
#[doc = "Bits 4:7 - EXTI 5 configuration"]
#[inline (always)] pub fn exti5 (& mut self) -> Exti5W < '_ , Cr2Spec > { Exti5W :: new (self , 4) }
#[doc = "Bits 8:11 - EXTI 6 configuration"]
#[inline (always)] pub fn exti6 (& mut self) -> Exti6W < '_ , Cr2Spec > { Exti6W :: new (self , 8) }
#[doc = "Bits 12:15 - EXTI 7 configuration"]
#[inline (always)] pub fn exti7 (& mut self) -> Exti7W < '_ , Cr2Spec > { Exti7W :: new (self , 12) } }
#[doc = "External interrupt configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr2Spec ; impl crate :: RegisterSpec for Cr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr2::R`](R) reader structure"] impl crate :: Readable for Cr2Spec { }
#[doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"] impl crate :: Writable for Cr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR2 to value 0"] impl crate :: Resettable for Cr2Spec { } }
#[doc = "CR3 (rw) register accessor: External interrupt configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`cr3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr3`] module"]
#[doc (alias = "CR3")] pub type Cr3 = crate :: Reg < cr3 :: Cr3Spec > ;
#[doc = "External interrupt configuration register 3"] pub mod cr3 {
#[doc = "Register `CR3` reader"] pub type R = crate :: R < Cr3Spec > ;
#[doc = "Register `CR3` writer"] pub type W = crate :: W < Cr3Spec > ;
#[doc = "Field `EXTI8` reader - EXTI 8 configuration"] pub type Exti8R = crate :: FieldReader ;
#[doc = "Field `EXTI8` writer - EXTI 8 configuration"] pub type Exti8W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI9` reader - EXTI 9 configuration"] pub type Exti9R = crate :: FieldReader ;
#[doc = "Field `EXTI9` writer - EXTI 9 configuration"] pub type Exti9W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI10` reader - EXTI 10 configuration"] pub type Exti10R = crate :: FieldReader ;
#[doc = "Field `EXTI10` writer - EXTI 10 configuration"] pub type Exti10W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI11` reader - EXTI 11 configuration"] pub type Exti11R = crate :: FieldReader ;
#[doc = "Field `EXTI11` writer - EXTI 11 configuration"] pub type Exti11W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - EXTI 8 configuration"]
#[inline (always)] pub fn exti8 (& self) -> Exti8R { Exti8R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - EXTI 9 configuration"]
#[inline (always)] pub fn exti9 (& self) -> Exti9R { Exti9R :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:11 - EXTI 10 configuration"]
#[inline (always)] pub fn exti10 (& self) -> Exti10R { Exti10R :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:15 - EXTI 11 configuration"]
#[inline (always)] pub fn exti11 (& self) -> Exti11R { Exti11R :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - EXTI 8 configuration"]
#[inline (always)] pub fn exti8 (& mut self) -> Exti8W < '_ , Cr3Spec > { Exti8W :: new (self , 0) }
#[doc = "Bits 4:7 - EXTI 9 configuration"]
#[inline (always)] pub fn exti9 (& mut self) -> Exti9W < '_ , Cr3Spec > { Exti9W :: new (self , 4) }
#[doc = "Bits 8:11 - EXTI 10 configuration"]
#[inline (always)] pub fn exti10 (& mut self) -> Exti10W < '_ , Cr3Spec > { Exti10W :: new (self , 8) }
#[doc = "Bits 12:15 - EXTI 11 configuration"]
#[inline (always)] pub fn exti11 (& mut self) -> Exti11W < '_ , Cr3Spec > { Exti11W :: new (self , 12) } }
#[doc = "External interrupt configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`cr3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr3Spec ; impl crate :: RegisterSpec for Cr3Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr3::R`](R) reader structure"] impl crate :: Readable for Cr3Spec { }
#[doc = "`write(|w| ..)` method takes [`cr3::W`](W) writer structure"] impl crate :: Writable for Cr3Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR3 to value 0"] impl crate :: Resettable for Cr3Spec { } }
#[doc = "CR4 (rw) register accessor: External interrupt configuration register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`cr4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr4`] module"]
#[doc (alias = "CR4")] pub type Cr4 = crate :: Reg < cr4 :: Cr4Spec > ;
#[doc = "External interrupt configuration register 4"] pub mod cr4 {
#[doc = "Register `CR4` reader"] pub type R = crate :: R < Cr4Spec > ;
#[doc = "Register `CR4` writer"] pub type W = crate :: W < Cr4Spec > ;
#[doc = "Field `EXTI12` reader - EXTI 12 configuration"] pub type Exti12R = crate :: FieldReader ;
#[doc = "Field `EXTI12` writer - EXTI 12 configuration"] pub type Exti12W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI13` reader - EXTI 13 configuration"] pub type Exti13R = crate :: FieldReader ;
#[doc = "Field `EXTI13` writer - EXTI 13 configuration"] pub type Exti13W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI14` reader - EXTI 14 configuration"] pub type Exti14R = crate :: FieldReader ;
#[doc = "Field `EXTI14` writer - EXTI 14 configuration"] pub type Exti14W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `EXTI15` reader - EXTI 15 configuration"] pub type Exti15R = crate :: FieldReader ;
#[doc = "Field `EXTI15` writer - EXTI 15 configuration"] pub type Exti15W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - EXTI 12 configuration"]
#[inline (always)] pub fn exti12 (& self) -> Exti12R { Exti12R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - EXTI 13 configuration"]
#[inline (always)] pub fn exti13 (& self) -> Exti13R { Exti13R :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:11 - EXTI 14 configuration"]
#[inline (always)] pub fn exti14 (& self) -> Exti14R { Exti14R :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:15 - EXTI 15 configuration"]
#[inline (always)] pub fn exti15 (& self) -> Exti15R { Exti15R :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - EXTI 12 configuration"]
#[inline (always)] pub fn exti12 (& mut self) -> Exti12W < '_ , Cr4Spec > { Exti12W :: new (self , 0) }
#[doc = "Bits 4:7 - EXTI 13 configuration"]
#[inline (always)] pub fn exti13 (& mut self) -> Exti13W < '_ , Cr4Spec > { Exti13W :: new (self , 4) }
#[doc = "Bits 8:11 - EXTI 14 configuration"]
#[inline (always)] pub fn exti14 (& mut self) -> Exti14W < '_ , Cr4Spec > { Exti14W :: new (self , 8) }
#[doc = "Bits 12:15 - EXTI 15 configuration"]
#[inline (always)] pub fn exti15 (& mut self) -> Exti15W < '_ , Cr4Spec > { Exti15W :: new (self , 12) } }
#[doc = "External interrupt configuration register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`cr4::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr4::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr4Spec ; impl crate :: RegisterSpec for Cr4Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr4::R`](R) reader structure"] impl crate :: Readable for Cr4Spec { }
#[doc = "`write(|w| ..)` method takes [`cr4::W`](W) writer structure"] impl crate :: Writable for Cr4Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR4 to value 0"] impl crate :: Resettable for Cr4Spec { } }
#[doc = "PADHYS (rw) register accessor: PAD configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`padhys::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`padhys::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@padhys`] module"]
#[doc (alias = "PADHYS")] pub type Padhys = crate :: Reg < padhys :: PadhysSpec > ;
#[doc = "PAD configuration register"] pub mod padhys {
#[doc = "Register `PADHYS` reader"] pub type R = crate :: R < PadhysSpec > ;
#[doc = "Register `PADHYS` writer"] pub type W = crate :: W < PadhysSpec > ;
#[doc = "Field `I2C1_mode_sel` reader - I2C1 mode selection"] pub type I2c1ModeSelR = crate :: BitReader ;
#[doc = "Field `I2C1_mode_sel` writer - I2C1 mode selection"] pub type I2c1ModeSelW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 16 - I2C1 mode selection"]
#[inline (always)] pub fn i2c1_mode_sel (& self) -> I2c1ModeSelR { I2c1ModeSelR :: new (((self . bits >> 16) & 1) != 0) } } impl W {
#[doc = "Bit 16 - I2C1 mode selection"]
#[inline (always)] pub fn i2c1_mode_sel (& mut self) -> I2c1ModeSelW < '_ , PadhysSpec > { I2c1ModeSelW :: new (self , 16) } }
#[doc = "PAD configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`padhys::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`padhys::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PadhysSpec ; impl crate :: RegisterSpec for PadhysSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`padhys::R`](R) reader structure"] impl crate :: Readable for PadhysSpec { }
#[doc = "`write(|w| ..)` method takes [`padhys::W`](W) writer structure"] impl crate :: Writable for PadhysSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PADHYS to value 0"] impl crate :: Resettable for PadhysSpec { } }
#[doc = "IMR (rw) register accessor: Interrupt mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`imr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`imr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@imr`] module"]
#[doc (alias = "IMR")] pub type Imr = crate :: Reg < imr :: ImrSpec > ;
#[doc = "Interrupt mask register"] pub mod imr {
#[doc = "Register `IMR` reader"] pub type R = crate :: R < ImrSpec > ;
#[doc = "Register `IMR` writer"] pub type W = crate :: W < ImrSpec > ;
#[doc = "Field `IMR0` reader - Interrupt Mask on line 0"] pub type Imr0R = crate :: BitReader ;
#[doc = "Field `IMR0` writer - Interrupt Mask on line 0"] pub type Imr0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR1` reader - Interrupt Mask on line 1"] pub type Imr1R = crate :: BitReader ;
#[doc = "Field `IMR1` writer - Interrupt Mask on line 1"] pub type Imr1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR2` reader - Interrupt Mask on line 2"] pub type Imr2R = crate :: BitReader ;
#[doc = "Field `IMR2` writer - Interrupt Mask on line 2"] pub type Imr2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR3` reader - Interrupt Mask on line 3"] pub type Imr3R = crate :: BitReader ;
#[doc = "Field `IMR3` writer - Interrupt Mask on line 3"] pub type Imr3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR4` reader - Interrupt Mask on line 4"] pub type Imr4R = crate :: BitReader ;
#[doc = "Field `IMR4` writer - Interrupt Mask on line 4"] pub type Imr4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR5` reader - Interrupt Mask on line 5"] pub type Imr5R = crate :: BitReader ;
#[doc = "Field `IMR5` writer - Interrupt Mask on line 5"] pub type Imr5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR6` reader - Interrupt Mask on line 6"] pub type Imr6R = crate :: BitReader ;
#[doc = "Field `IMR6` writer - Interrupt Mask on line 6"] pub type Imr6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR7` reader - Interrupt Mask on line 7"] pub type Imr7R = crate :: BitReader ;
#[doc = "Field `IMR7` writer - Interrupt Mask on line 7"] pub type Imr7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR8` reader - Interrupt Mask on line 8"] pub type Imr8R = crate :: BitReader ;
#[doc = "Field `IMR8` writer - Interrupt Mask on line 8"] pub type Imr8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR9` reader - Interrupt Mask on line 9"] pub type Imr9R = crate :: BitReader ;
#[doc = "Field `IMR9` writer - Interrupt Mask on line 9"] pub type Imr9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR10` reader - Interrupt Mask on line 10"] pub type Imr10R = crate :: BitReader ;
#[doc = "Field `IMR10` writer - Interrupt Mask on line 10"] pub type Imr10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR11` reader - Interrupt Mask on line 11"] pub type Imr11R = crate :: BitReader ;
#[doc = "Field `IMR11` writer - Interrupt Mask on line 11"] pub type Imr11W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR12` reader - Interrupt Mask on line 12"] pub type Imr12R = crate :: BitReader ;
#[doc = "Field `IMR12` writer - Interrupt Mask on line 12"] pub type Imr12W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR13` reader - Interrupt Mask on line 13"] pub type Imr13R = crate :: BitReader ;
#[doc = "Field `IMR13` writer - Interrupt Mask on line 13"] pub type Imr13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR14` reader - Interrupt Mask on line 14"] pub type Imr14R = crate :: BitReader ;
#[doc = "Field `IMR14` writer - Interrupt Mask on line 14"] pub type Imr14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR15` reader - Interrupt Mask on line 15"] pub type Imr15R = crate :: BitReader ;
#[doc = "Field `IMR15` writer - Interrupt Mask on line 15"] pub type Imr15W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR16` reader - Interrupt Mask on line 16"] pub type Imr16R = crate :: BitReader ;
#[doc = "Field `IMR16` writer - Interrupt Mask on line 16"] pub type Imr16W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR17` reader - Interrupt Mask on line 17"] pub type Imr17R = crate :: BitReader ;
#[doc = "Field `IMR17` writer - Interrupt Mask on line 17"] pub type Imr17W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR18` reader - Interrupt Mask on line 18"] pub type Imr18R = crate :: BitReader ;
#[doc = "Field `IMR18` writer - Interrupt Mask on line 18"] pub type Imr18W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR19` reader - Interrupt Mask on line 19"] pub type Imr19R = crate :: BitReader ;
#[doc = "Field `IMR19` writer - Interrupt Mask on line 19"] pub type Imr19W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR20` reader - Interrupt Mask on line 20"] pub type Imr20R = crate :: BitReader ;
#[doc = "Field `IMR20` writer - Interrupt Mask on line 20"] pub type Imr20W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IMR24` reader - Interrupt Mask on line 24"] pub type Imr24R = crate :: BitReader ;
#[doc = "Field `IMR24` writer - Interrupt Mask on line 24"] pub type Imr24W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Interrupt Mask on line 0"]
#[inline (always)] pub fn imr0 (& self) -> Imr0R { Imr0R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Interrupt Mask on line 1"]
#[inline (always)] pub fn imr1 (& self) -> Imr1R { Imr1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Interrupt Mask on line 2"]
#[inline (always)] pub fn imr2 (& self) -> Imr2R { Imr2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Interrupt Mask on line 3"]
#[inline (always)] pub fn imr3 (& self) -> Imr3R { Imr3R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Interrupt Mask on line 4"]
#[inline (always)] pub fn imr4 (& self) -> Imr4R { Imr4R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Interrupt Mask on line 5"]
#[inline (always)] pub fn imr5 (& self) -> Imr5R { Imr5R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Interrupt Mask on line 6"]
#[inline (always)] pub fn imr6 (& self) -> Imr6R { Imr6R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Interrupt Mask on line 7"]
#[inline (always)] pub fn imr7 (& self) -> Imr7R { Imr7R :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Interrupt Mask on line 8"]
#[inline (always)] pub fn imr8 (& self) -> Imr8R { Imr8R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Interrupt Mask on line 9"]
#[inline (always)] pub fn imr9 (& self) -> Imr9R { Imr9R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Interrupt Mask on line 10"]
#[inline (always)] pub fn imr10 (& self) -> Imr10R { Imr10R :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Interrupt Mask on line 11"]
#[inline (always)] pub fn imr11 (& self) -> Imr11R { Imr11R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Interrupt Mask on line 12"]
#[inline (always)] pub fn imr12 (& self) -> Imr12R { Imr12R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Interrupt Mask on line 13"]
#[inline (always)] pub fn imr13 (& self) -> Imr13R { Imr13R :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - Interrupt Mask on line 14"]
#[inline (always)] pub fn imr14 (& self) -> Imr14R { Imr14R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Interrupt Mask on line 15"]
#[inline (always)] pub fn imr15 (& self) -> Imr15R { Imr15R :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - Interrupt Mask on line 16"]
#[inline (always)] pub fn imr16 (& self) -> Imr16R { Imr16R :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - Interrupt Mask on line 17"]
#[inline (always)] pub fn imr17 (& self) -> Imr17R { Imr17R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - Interrupt Mask on line 18"]
#[inline (always)] pub fn imr18 (& self) -> Imr18R { Imr18R :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - Interrupt Mask on line 19"]
#[inline (always)] pub fn imr19 (& self) -> Imr19R { Imr19R :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bit 20 - Interrupt Mask on line 20"]
#[inline (always)] pub fn imr20 (& self) -> Imr20R { Imr20R :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 24 - Interrupt Mask on line 24"]
#[inline (always)] pub fn imr24 (& self) -> Imr24R { Imr24R :: new (((self . bits >> 24) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Interrupt Mask on line 0"]
#[inline (always)] pub fn imr0 (& mut self) -> Imr0W < '_ , ImrSpec > { Imr0W :: new (self , 0) }
#[doc = "Bit 1 - Interrupt Mask on line 1"]
#[inline (always)] pub fn imr1 (& mut self) -> Imr1W < '_ , ImrSpec > { Imr1W :: new (self , 1) }
#[doc = "Bit 2 - Interrupt Mask on line 2"]
#[inline (always)] pub fn imr2 (& mut self) -> Imr2W < '_ , ImrSpec > { Imr2W :: new (self , 2) }
#[doc = "Bit 3 - Interrupt Mask on line 3"]
#[inline (always)] pub fn imr3 (& mut self) -> Imr3W < '_ , ImrSpec > { Imr3W :: new (self , 3) }
#[doc = "Bit 4 - Interrupt Mask on line 4"]
#[inline (always)] pub fn imr4 (& mut self) -> Imr4W < '_ , ImrSpec > { Imr4W :: new (self , 4) }
#[doc = "Bit 5 - Interrupt Mask on line 5"]
#[inline (always)] pub fn imr5 (& mut self) -> Imr5W < '_ , ImrSpec > { Imr5W :: new (self , 5) }
#[doc = "Bit 6 - Interrupt Mask on line 6"]
#[inline (always)] pub fn imr6 (& mut self) -> Imr6W < '_ , ImrSpec > { Imr6W :: new (self , 6) }
#[doc = "Bit 7 - Interrupt Mask on line 7"]
#[inline (always)] pub fn imr7 (& mut self) -> Imr7W < '_ , ImrSpec > { Imr7W :: new (self , 7) }
#[doc = "Bit 8 - Interrupt Mask on line 8"]
#[inline (always)] pub fn imr8 (& mut self) -> Imr8W < '_ , ImrSpec > { Imr8W :: new (self , 8) }
#[doc = "Bit 9 - Interrupt Mask on line 9"]
#[inline (always)] pub fn imr9 (& mut self) -> Imr9W < '_ , ImrSpec > { Imr9W :: new (self , 9) }
#[doc = "Bit 10 - Interrupt Mask on line 10"]
#[inline (always)] pub fn imr10 (& mut self) -> Imr10W < '_ , ImrSpec > { Imr10W :: new (self , 10) }
#[doc = "Bit 11 - Interrupt Mask on line 11"]
#[inline (always)] pub fn imr11 (& mut self) -> Imr11W < '_ , ImrSpec > { Imr11W :: new (self , 11) }
#[doc = "Bit 12 - Interrupt Mask on line 12"]
#[inline (always)] pub fn imr12 (& mut self) -> Imr12W < '_ , ImrSpec > { Imr12W :: new (self , 12) }
#[doc = "Bit 13 - Interrupt Mask on line 13"]
#[inline (always)] pub fn imr13 (& mut self) -> Imr13W < '_ , ImrSpec > { Imr13W :: new (self , 13) }
#[doc = "Bit 14 - Interrupt Mask on line 14"]
#[inline (always)] pub fn imr14 (& mut self) -> Imr14W < '_ , ImrSpec > { Imr14W :: new (self , 14) }
#[doc = "Bit 15 - Interrupt Mask on line 15"]
#[inline (always)] pub fn imr15 (& mut self) -> Imr15W < '_ , ImrSpec > { Imr15W :: new (self , 15) }
#[doc = "Bit 16 - Interrupt Mask on line 16"]
#[inline (always)] pub fn imr16 (& mut self) -> Imr16W < '_ , ImrSpec > { Imr16W :: new (self , 16) }
#[doc = "Bit 17 - Interrupt Mask on line 17"]
#[inline (always)] pub fn imr17 (& mut self) -> Imr17W < '_ , ImrSpec > { Imr17W :: new (self , 17) }
#[doc = "Bit 18 - Interrupt Mask on line 18"]
#[inline (always)] pub fn imr18 (& mut self) -> Imr18W < '_ , ImrSpec > { Imr18W :: new (self , 18) }
#[doc = "Bit 19 - Interrupt Mask on line 19"]
#[inline (always)] pub fn imr19 (& mut self) -> Imr19W < '_ , ImrSpec > { Imr19W :: new (self , 19) }
#[doc = "Bit 20 - Interrupt Mask on line 20"]
#[inline (always)] pub fn imr20 (& mut self) -> Imr20W < '_ , ImrSpec > { Imr20W :: new (self , 20) }
#[doc = "Bit 24 - Interrupt Mask on line 24"]
#[inline (always)] pub fn imr24 (& mut self) -> Imr24W < '_ , ImrSpec > { Imr24W :: new (self , 24) } }
#[doc = "Interrupt mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`imr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`imr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ImrSpec ; impl crate :: RegisterSpec for ImrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`imr::R`](R) reader structure"] impl crate :: Readable for ImrSpec { }
#[doc = "`write(|w| ..)` method takes [`imr::W`](W) writer structure"] impl crate :: Writable for ImrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets IMR to value 0"] impl crate :: Resettable for ImrSpec { } }
#[doc = "EMR (rw) register accessor: Event mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`emr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`emr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@emr`] module"]
#[doc (alias = "EMR")] pub type Emr = crate :: Reg < emr :: EmrSpec > ;
#[doc = "Event mask register"] pub mod emr {
#[doc = "Register `EMR` reader"] pub type R = crate :: R < EmrSpec > ;
#[doc = "Register `EMR` writer"] pub type W = crate :: W < EmrSpec > ;
#[doc = "Field `EMR0` reader - Event Mask on line 0"] pub type Emr0R = crate :: BitReader ;
#[doc = "Field `EMR0` writer - Event Mask on line 0"] pub type Emr0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR1` reader - Event Mask on line 1"] pub type Emr1R = crate :: BitReader ;
#[doc = "Field `EMR1` writer - Event Mask on line 1"] pub type Emr1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR2` reader - Event Mask on line 2"] pub type Emr2R = crate :: BitReader ;
#[doc = "Field `EMR2` writer - Event Mask on line 2"] pub type Emr2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR3` reader - Event Mask on line 3"] pub type Emr3R = crate :: BitReader ;
#[doc = "Field `EMR3` writer - Event Mask on line 3"] pub type Emr3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR4` reader - Event Mask on line 4"] pub type Emr4R = crate :: BitReader ;
#[doc = "Field `EMR4` writer - Event Mask on line 4"] pub type Emr4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR5` reader - Event Mask on line 5"] pub type Emr5R = crate :: BitReader ;
#[doc = "Field `EMR5` writer - Event Mask on line 5"] pub type Emr5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR6` reader - Event Mask on line 6"] pub type Emr6R = crate :: BitReader ;
#[doc = "Field `EMR6` writer - Event Mask on line 6"] pub type Emr6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR7` reader - Event Mask on line 7"] pub type Emr7R = crate :: BitReader ;
#[doc = "Field `EMR7` writer - Event Mask on line 7"] pub type Emr7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR8` reader - Event Mask on line 8"] pub type Emr8R = crate :: BitReader ;
#[doc = "Field `EMR8` writer - Event Mask on line 8"] pub type Emr8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR9` reader - Event Mask on line 9"] pub type Emr9R = crate :: BitReader ;
#[doc = "Field `EMR9` writer - Event Mask on line 9"] pub type Emr9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR10` reader - Event Mask on line 10"] pub type Emr10R = crate :: BitReader ;
#[doc = "Field `EMR10` writer - Event Mask on line 10"] pub type Emr10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR11` reader - Event Mask on line 11"] pub type Emr11R = crate :: BitReader ;
#[doc = "Field `EMR11` writer - Event Mask on line 11"] pub type Emr11W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR12` reader - Event Mask on line 12"] pub type Emr12R = crate :: BitReader ;
#[doc = "Field `EMR12` writer - Event Mask on line 12"] pub type Emr12W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR13` reader - Event Mask on line 13"] pub type Emr13R = crate :: BitReader ;
#[doc = "Field `EMR13` writer - Event Mask on line 13"] pub type Emr13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR14` reader - Event Mask on line 14"] pub type Emr14R = crate :: BitReader ;
#[doc = "Field `EMR14` writer - Event Mask on line 14"] pub type Emr14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR15` reader - Event Mask on line 15"] pub type Emr15R = crate :: BitReader ;
#[doc = "Field `EMR15` writer - Event Mask on line 15"] pub type Emr15W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR16` reader - Event Mask on line 16"] pub type Emr16R = crate :: BitReader ;
#[doc = "Field `EMR16` writer - Event Mask on line 16"] pub type Emr16W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR17` reader - Event Mask on line 17"] pub type Emr17R = crate :: BitReader ;
#[doc = "Field `EMR17` writer - Event Mask on line 17"] pub type Emr17W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR18` reader - Event Mask on line 18"] pub type Emr18R = crate :: BitReader ;
#[doc = "Field `EMR18` writer - Event Mask on line 18"] pub type Emr18W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR19` reader - Event Mask on line 19"] pub type Emr19R = crate :: BitReader ;
#[doc = "Field `EMR19` writer - Event Mask on line 19"] pub type Emr19W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR20` reader - Event Mask on line 20"] pub type Emr20R = crate :: BitReader ;
#[doc = "Field `EMR20` writer - Event Mask on line 20"] pub type Emr20W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMR24` reader - Event Mask on line 24"] pub type Emr24R = crate :: BitReader ;
#[doc = "Field `EMR24` writer - Event Mask on line 24"] pub type Emr24W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Event Mask on line 0"]
#[inline (always)] pub fn emr0 (& self) -> Emr0R { Emr0R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Event Mask on line 1"]
#[inline (always)] pub fn emr1 (& self) -> Emr1R { Emr1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Event Mask on line 2"]
#[inline (always)] pub fn emr2 (& self) -> Emr2R { Emr2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Event Mask on line 3"]
#[inline (always)] pub fn emr3 (& self) -> Emr3R { Emr3R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Event Mask on line 4"]
#[inline (always)] pub fn emr4 (& self) -> Emr4R { Emr4R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Event Mask on line 5"]
#[inline (always)] pub fn emr5 (& self) -> Emr5R { Emr5R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Event Mask on line 6"]
#[inline (always)] pub fn emr6 (& self) -> Emr6R { Emr6R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Event Mask on line 7"]
#[inline (always)] pub fn emr7 (& self) -> Emr7R { Emr7R :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Event Mask on line 8"]
#[inline (always)] pub fn emr8 (& self) -> Emr8R { Emr8R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Event Mask on line 9"]
#[inline (always)] pub fn emr9 (& self) -> Emr9R { Emr9R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Event Mask on line 10"]
#[inline (always)] pub fn emr10 (& self) -> Emr10R { Emr10R :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Event Mask on line 11"]
#[inline (always)] pub fn emr11 (& self) -> Emr11R { Emr11R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Event Mask on line 12"]
#[inline (always)] pub fn emr12 (& self) -> Emr12R { Emr12R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Event Mask on line 13"]
#[inline (always)] pub fn emr13 (& self) -> Emr13R { Emr13R :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - Event Mask on line 14"]
#[inline (always)] pub fn emr14 (& self) -> Emr14R { Emr14R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Event Mask on line 15"]
#[inline (always)] pub fn emr15 (& self) -> Emr15R { Emr15R :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - Event Mask on line 16"]
#[inline (always)] pub fn emr16 (& self) -> Emr16R { Emr16R :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - Event Mask on line 17"]
#[inline (always)] pub fn emr17 (& self) -> Emr17R { Emr17R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - Event Mask on line 18"]
#[inline (always)] pub fn emr18 (& self) -> Emr18R { Emr18R :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - Event Mask on line 19"]
#[inline (always)] pub fn emr19 (& self) -> Emr19R { Emr19R :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bit 20 - Event Mask on line 20"]
#[inline (always)] pub fn emr20 (& self) -> Emr20R { Emr20R :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 24 - Event Mask on line 24"]
#[inline (always)] pub fn emr24 (& self) -> Emr24R { Emr24R :: new (((self . bits >> 24) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Event Mask on line 0"]
#[inline (always)] pub fn emr0 (& mut self) -> Emr0W < '_ , EmrSpec > { Emr0W :: new (self , 0) }
#[doc = "Bit 1 - Event Mask on line 1"]
#[inline (always)] pub fn emr1 (& mut self) -> Emr1W < '_ , EmrSpec > { Emr1W :: new (self , 1) }
#[doc = "Bit 2 - Event Mask on line 2"]
#[inline (always)] pub fn emr2 (& mut self) -> Emr2W < '_ , EmrSpec > { Emr2W :: new (self , 2) }
#[doc = "Bit 3 - Event Mask on line 3"]
#[inline (always)] pub fn emr3 (& mut self) -> Emr3W < '_ , EmrSpec > { Emr3W :: new (self , 3) }
#[doc = "Bit 4 - Event Mask on line 4"]
#[inline (always)] pub fn emr4 (& mut self) -> Emr4W < '_ , EmrSpec > { Emr4W :: new (self , 4) }
#[doc = "Bit 5 - Event Mask on line 5"]
#[inline (always)] pub fn emr5 (& mut self) -> Emr5W < '_ , EmrSpec > { Emr5W :: new (self , 5) }
#[doc = "Bit 6 - Event Mask on line 6"]
#[inline (always)] pub fn emr6 (& mut self) -> Emr6W < '_ , EmrSpec > { Emr6W :: new (self , 6) }
#[doc = "Bit 7 - Event Mask on line 7"]
#[inline (always)] pub fn emr7 (& mut self) -> Emr7W < '_ , EmrSpec > { Emr7W :: new (self , 7) }
#[doc = "Bit 8 - Event Mask on line 8"]
#[inline (always)] pub fn emr8 (& mut self) -> Emr8W < '_ , EmrSpec > { Emr8W :: new (self , 8) }
#[doc = "Bit 9 - Event Mask on line 9"]
#[inline (always)] pub fn emr9 (& mut self) -> Emr9W < '_ , EmrSpec > { Emr9W :: new (self , 9) }
#[doc = "Bit 10 - Event Mask on line 10"]
#[inline (always)] pub fn emr10 (& mut self) -> Emr10W < '_ , EmrSpec > { Emr10W :: new (self , 10) }
#[doc = "Bit 11 - Event Mask on line 11"]
#[inline (always)] pub fn emr11 (& mut self) -> Emr11W < '_ , EmrSpec > { Emr11W :: new (self , 11) }
#[doc = "Bit 12 - Event Mask on line 12"]
#[inline (always)] pub fn emr12 (& mut self) -> Emr12W < '_ , EmrSpec > { Emr12W :: new (self , 12) }
#[doc = "Bit 13 - Event Mask on line 13"]
#[inline (always)] pub fn emr13 (& mut self) -> Emr13W < '_ , EmrSpec > { Emr13W :: new (self , 13) }
#[doc = "Bit 14 - Event Mask on line 14"]
#[inline (always)] pub fn emr14 (& mut self) -> Emr14W < '_ , EmrSpec > { Emr14W :: new (self , 14) }
#[doc = "Bit 15 - Event Mask on line 15"]
#[inline (always)] pub fn emr15 (& mut self) -> Emr15W < '_ , EmrSpec > { Emr15W :: new (self , 15) }
#[doc = "Bit 16 - Event Mask on line 16"]
#[inline (always)] pub fn emr16 (& mut self) -> Emr16W < '_ , EmrSpec > { Emr16W :: new (self , 16) }
#[doc = "Bit 17 - Event Mask on line 17"]
#[inline (always)] pub fn emr17 (& mut self) -> Emr17W < '_ , EmrSpec > { Emr17W :: new (self , 17) }
#[doc = "Bit 18 - Event Mask on line 18"]
#[inline (always)] pub fn emr18 (& mut self) -> Emr18W < '_ , EmrSpec > { Emr18W :: new (self , 18) }
#[doc = "Bit 19 - Event Mask on line 19"]
#[inline (always)] pub fn emr19 (& mut self) -> Emr19W < '_ , EmrSpec > { Emr19W :: new (self , 19) }
#[doc = "Bit 20 - Event Mask on line 20"]
#[inline (always)] pub fn emr20 (& mut self) -> Emr20W < '_ , EmrSpec > { Emr20W :: new (self , 20) }
#[doc = "Bit 24 - Event Mask on line 24"]
#[inline (always)] pub fn emr24 (& mut self) -> Emr24W < '_ , EmrSpec > { Emr24W :: new (self , 24) } }
#[doc = "Event mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`emr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`emr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EmrSpec ; impl crate :: RegisterSpec for EmrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`emr::R`](R) reader structure"] impl crate :: Readable for EmrSpec { }
#[doc = "`write(|w| ..)` method takes [`emr::W`](W) writer structure"] impl crate :: Writable for EmrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EMR to value 0"] impl crate :: Resettable for EmrSpec { } }
#[doc = "RTSR (rw) register accessor: Rising trigger selection register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtsr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtsr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtsr`] module"]
#[doc (alias = "RTSR")] pub type Rtsr = crate :: Reg < rtsr :: RtsrSpec > ;
#[doc = "Rising trigger selection register"] pub mod rtsr {
#[doc = "Register `RTSR` reader"] pub type R = crate :: R < RtsrSpec > ;
#[doc = "Register `RTSR` writer"] pub type W = crate :: W < RtsrSpec > ;
#[doc = "Field `TR0` reader - Rising trigger event configuration bit of line 0"] pub type Tr0R = crate :: BitReader ;
#[doc = "Field `TR0` writer - Rising trigger event configuration bit of line 0"] pub type Tr0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR1` reader - Rising trigger event configuration bit of line 1"] pub type Tr1R = crate :: BitReader ;
#[doc = "Field `TR1` writer - Rising trigger event configuration bit of line 1"] pub type Tr1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR2` reader - Rising trigger event configuration bit of line 2"] pub type Tr2R = crate :: BitReader ;
#[doc = "Field `TR2` writer - Rising trigger event configuration bit of line 2"] pub type Tr2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR3` reader - Rising trigger event configuration bit of line 3"] pub type Tr3R = crate :: BitReader ;
#[doc = "Field `TR3` writer - Rising trigger event configuration bit of line 3"] pub type Tr3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR4` reader - Rising trigger event configuration bit of line 4"] pub type Tr4R = crate :: BitReader ;
#[doc = "Field `TR4` writer - Rising trigger event configuration bit of line 4"] pub type Tr4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR5` reader - Rising trigger event configuration bit of line 5"] pub type Tr5R = crate :: BitReader ;
#[doc = "Field `TR5` writer - Rising trigger event configuration bit of line 5"] pub type Tr5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR6` reader - Rising trigger event configuration bit of line 6"] pub type Tr6R = crate :: BitReader ;
#[doc = "Field `TR6` writer - Rising trigger event configuration bit of line 6"] pub type Tr6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR7` reader - Rising trigger event configuration bit of line 7"] pub type Tr7R = crate :: BitReader ;
#[doc = "Field `TR7` writer - Rising trigger event configuration bit of line 7"] pub type Tr7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR8` reader - Rising trigger event configuration bit of line 8"] pub type Tr8R = crate :: BitReader ;
#[doc = "Field `TR8` writer - Rising trigger event configuration bit of line 8"] pub type Tr8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR9` reader - Rising trigger event configuration bit of line 9"] pub type Tr9R = crate :: BitReader ;
#[doc = "Field `TR9` writer - Rising trigger event configuration bit of line 9"] pub type Tr9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR10` reader - Rising trigger event configuration bit of line 10"] pub type Tr10R = crate :: BitReader ;
#[doc = "Field `TR10` writer - Rising trigger event configuration bit of line 10"] pub type Tr10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR11` reader - Rising trigger event configuration bit of line 11"] pub type Tr11R = crate :: BitReader ;
#[doc = "Field `TR11` writer - Rising trigger event configuration bit of line 11"] pub type Tr11W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR12` reader - Rising trigger event configuration bit of line 12"] pub type Tr12R = crate :: BitReader ;
#[doc = "Field `TR12` writer - Rising trigger event configuration bit of line 12"] pub type Tr12W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR13` reader - Rising trigger event configuration bit of line 13"] pub type Tr13R = crate :: BitReader ;
#[doc = "Field `TR13` writer - Rising trigger event configuration bit of line 13"] pub type Tr13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR14` reader - Rising trigger event configuration bit of line 14"] pub type Tr14R = crate :: BitReader ;
#[doc = "Field `TR14` writer - Rising trigger event configuration bit of line 14"] pub type Tr14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR15` reader - Rising trigger event configuration bit of line 15"] pub type Tr15R = crate :: BitReader ;
#[doc = "Field `TR15` writer - Rising trigger event configuration bit of line 15"] pub type Tr15W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR16` reader - Rising trigger event configuration bit of line 16"] pub type Tr16R = crate :: BitReader ;
#[doc = "Field `TR16` writer - Rising trigger event configuration bit of line 16"] pub type Tr16W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR17` reader - Rising trigger event configuration bit of line 17"] pub type Tr17R = crate :: BitReader ;
#[doc = "Field `TR17` writer - Rising trigger event configuration bit of line 17"] pub type Tr17W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR18` reader - Rising trigger event configuration bit of line 18"] pub type Tr18R = crate :: BitReader ;
#[doc = "Field `TR18` writer - Rising trigger event configuration bit of line 18"] pub type Tr18W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR19` reader - Rising trigger event configuration bit of line 19"] pub type Tr19R = crate :: BitReader ;
#[doc = "Field `TR19` writer - Rising trigger event configuration bit of line 19"] pub type Tr19W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR20` reader - Rising trigger event configuration bit of line 20"] pub type Tr20R = crate :: BitReader ;
#[doc = "Field `TR20` writer - Rising trigger event configuration bit of line 20"] pub type Tr20W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR24` reader - Rising trigger event configuration bit of line 24"] pub type Tr24R = crate :: BitReader ;
#[doc = "Field `TR24` writer - Rising trigger event configuration bit of line 24"] pub type Tr24W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Rising trigger event configuration bit of line 0"]
#[inline (always)] pub fn tr0 (& self) -> Tr0R { Tr0R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Rising trigger event configuration bit of line 1"]
#[inline (always)] pub fn tr1 (& self) -> Tr1R { Tr1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Rising trigger event configuration bit of line 2"]
#[inline (always)] pub fn tr2 (& self) -> Tr2R { Tr2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Rising trigger event configuration bit of line 3"]
#[inline (always)] pub fn tr3 (& self) -> Tr3R { Tr3R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Rising trigger event configuration bit of line 4"]
#[inline (always)] pub fn tr4 (& self) -> Tr4R { Tr4R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Rising trigger event configuration bit of line 5"]
#[inline (always)] pub fn tr5 (& self) -> Tr5R { Tr5R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Rising trigger event configuration bit of line 6"]
#[inline (always)] pub fn tr6 (& self) -> Tr6R { Tr6R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Rising trigger event configuration bit of line 7"]
#[inline (always)] pub fn tr7 (& self) -> Tr7R { Tr7R :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Rising trigger event configuration bit of line 8"]
#[inline (always)] pub fn tr8 (& self) -> Tr8R { Tr8R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Rising trigger event configuration bit of line 9"]
#[inline (always)] pub fn tr9 (& self) -> Tr9R { Tr9R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Rising trigger event configuration bit of line 10"]
#[inline (always)] pub fn tr10 (& self) -> Tr10R { Tr10R :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Rising trigger event configuration bit of line 11"]
#[inline (always)] pub fn tr11 (& self) -> Tr11R { Tr11R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Rising trigger event configuration bit of line 12"]
#[inline (always)] pub fn tr12 (& self) -> Tr12R { Tr12R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Rising trigger event configuration bit of line 13"]
#[inline (always)] pub fn tr13 (& self) -> Tr13R { Tr13R :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - Rising trigger event configuration bit of line 14"]
#[inline (always)] pub fn tr14 (& self) -> Tr14R { Tr14R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Rising trigger event configuration bit of line 15"]
#[inline (always)] pub fn tr15 (& self) -> Tr15R { Tr15R :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - Rising trigger event configuration bit of line 16"]
#[inline (always)] pub fn tr16 (& self) -> Tr16R { Tr16R :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - Rising trigger event configuration bit of line 17"]
#[inline (always)] pub fn tr17 (& self) -> Tr17R { Tr17R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - Rising trigger event configuration bit of line 18"]
#[inline (always)] pub fn tr18 (& self) -> Tr18R { Tr18R :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - Rising trigger event configuration bit of line 19"]
#[inline (always)] pub fn tr19 (& self) -> Tr19R { Tr19R :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bit 20 - Rising trigger event configuration bit of line 20"]
#[inline (always)] pub fn tr20 (& self) -> Tr20R { Tr20R :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 24 - Rising trigger event configuration bit of line 24"]
#[inline (always)] pub fn tr24 (& self) -> Tr24R { Tr24R :: new (((self . bits >> 24) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Rising trigger event configuration bit of line 0"]
#[inline (always)] pub fn tr0 (& mut self) -> Tr0W < '_ , RtsrSpec > { Tr0W :: new (self , 0) }
#[doc = "Bit 1 - Rising trigger event configuration bit of line 1"]
#[inline (always)] pub fn tr1 (& mut self) -> Tr1W < '_ , RtsrSpec > { Tr1W :: new (self , 1) }
#[doc = "Bit 2 - Rising trigger event configuration bit of line 2"]
#[inline (always)] pub fn tr2 (& mut self) -> Tr2W < '_ , RtsrSpec > { Tr2W :: new (self , 2) }
#[doc = "Bit 3 - Rising trigger event configuration bit of line 3"]
#[inline (always)] pub fn tr3 (& mut self) -> Tr3W < '_ , RtsrSpec > { Tr3W :: new (self , 3) }
#[doc = "Bit 4 - Rising trigger event configuration bit of line 4"]
#[inline (always)] pub fn tr4 (& mut self) -> Tr4W < '_ , RtsrSpec > { Tr4W :: new (self , 4) }
#[doc = "Bit 5 - Rising trigger event configuration bit of line 5"]
#[inline (always)] pub fn tr5 (& mut self) -> Tr5W < '_ , RtsrSpec > { Tr5W :: new (self , 5) }
#[doc = "Bit 6 - Rising trigger event configuration bit of line 6"]
#[inline (always)] pub fn tr6 (& mut self) -> Tr6W < '_ , RtsrSpec > { Tr6W :: new (self , 6) }
#[doc = "Bit 7 - Rising trigger event configuration bit of line 7"]
#[inline (always)] pub fn tr7 (& mut self) -> Tr7W < '_ , RtsrSpec > { Tr7W :: new (self , 7) }
#[doc = "Bit 8 - Rising trigger event configuration bit of line 8"]
#[inline (always)] pub fn tr8 (& mut self) -> Tr8W < '_ , RtsrSpec > { Tr8W :: new (self , 8) }
#[doc = "Bit 9 - Rising trigger event configuration bit of line 9"]
#[inline (always)] pub fn tr9 (& mut self) -> Tr9W < '_ , RtsrSpec > { Tr9W :: new (self , 9) }
#[doc = "Bit 10 - Rising trigger event configuration bit of line 10"]
#[inline (always)] pub fn tr10 (& mut self) -> Tr10W < '_ , RtsrSpec > { Tr10W :: new (self , 10) }
#[doc = "Bit 11 - Rising trigger event configuration bit of line 11"]
#[inline (always)] pub fn tr11 (& mut self) -> Tr11W < '_ , RtsrSpec > { Tr11W :: new (self , 11) }
#[doc = "Bit 12 - Rising trigger event configuration bit of line 12"]
#[inline (always)] pub fn tr12 (& mut self) -> Tr12W < '_ , RtsrSpec > { Tr12W :: new (self , 12) }
#[doc = "Bit 13 - Rising trigger event configuration bit of line 13"]
#[inline (always)] pub fn tr13 (& mut self) -> Tr13W < '_ , RtsrSpec > { Tr13W :: new (self , 13) }
#[doc = "Bit 14 - Rising trigger event configuration bit of line 14"]
#[inline (always)] pub fn tr14 (& mut self) -> Tr14W < '_ , RtsrSpec > { Tr14W :: new (self , 14) }
#[doc = "Bit 15 - Rising trigger event configuration bit of line 15"]
#[inline (always)] pub fn tr15 (& mut self) -> Tr15W < '_ , RtsrSpec > { Tr15W :: new (self , 15) }
#[doc = "Bit 16 - Rising trigger event configuration bit of line 16"]
#[inline (always)] pub fn tr16 (& mut self) -> Tr16W < '_ , RtsrSpec > { Tr16W :: new (self , 16) }
#[doc = "Bit 17 - Rising trigger event configuration bit of line 17"]
#[inline (always)] pub fn tr17 (& mut self) -> Tr17W < '_ , RtsrSpec > { Tr17W :: new (self , 17) }
#[doc = "Bit 18 - Rising trigger event configuration bit of line 18"]
#[inline (always)] pub fn tr18 (& mut self) -> Tr18W < '_ , RtsrSpec > { Tr18W :: new (self , 18) }
#[doc = "Bit 19 - Rising trigger event configuration bit of line 19"]
#[inline (always)] pub fn tr19 (& mut self) -> Tr19W < '_ , RtsrSpec > { Tr19W :: new (self , 19) }
#[doc = "Bit 20 - Rising trigger event configuration bit of line 20"]
#[inline (always)] pub fn tr20 (& mut self) -> Tr20W < '_ , RtsrSpec > { Tr20W :: new (self , 20) }
#[doc = "Bit 24 - Rising trigger event configuration bit of line 24"]
#[inline (always)] pub fn tr24 (& mut self) -> Tr24W < '_ , RtsrSpec > { Tr24W :: new (self , 24) } }
#[doc = "Rising trigger selection register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtsr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtsr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtsrSpec ; impl crate :: RegisterSpec for RtsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rtsr::R`](R) reader structure"] impl crate :: Readable for RtsrSpec { }
#[doc = "`write(|w| ..)` method takes [`rtsr::W`](W) writer structure"] impl crate :: Writable for RtsrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTSR to value 0"] impl crate :: Resettable for RtsrSpec { } }
#[doc = "FTSR (rw) register accessor: Falling trigger selection register\n\nYou can [`read`](crate::Reg::read) this register and get [`ftsr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ftsr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ftsr`] module"]
#[doc (alias = "FTSR")] pub type Ftsr = crate :: Reg < ftsr :: FtsrSpec > ;
#[doc = "Falling trigger selection register"] pub mod ftsr {
#[doc = "Register `FTSR` reader"] pub type R = crate :: R < FtsrSpec > ;
#[doc = "Register `FTSR` writer"] pub type W = crate :: W < FtsrSpec > ;
#[doc = "Field `TR0` reader - Falling trigger event configuration bit of line 0"] pub type Tr0R = crate :: BitReader ;
#[doc = "Field `TR0` writer - Falling trigger event configuration bit of line 0"] pub type Tr0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR1` reader - Falling trigger event configuration bit of line 1"] pub type Tr1R = crate :: BitReader ;
#[doc = "Field `TR1` writer - Falling trigger event configuration bit of line 1"] pub type Tr1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR2` reader - Falling trigger event configuration bit of line 2"] pub type Tr2R = crate :: BitReader ;
#[doc = "Field `TR2` writer - Falling trigger event configuration bit of line 2"] pub type Tr2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR3` reader - Falling trigger event configuration bit of line 3"] pub type Tr3R = crate :: BitReader ;
#[doc = "Field `TR3` writer - Falling trigger event configuration bit of line 3"] pub type Tr3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR4` reader - Falling trigger event configuration bit of line 4"] pub type Tr4R = crate :: BitReader ;
#[doc = "Field `TR4` writer - Falling trigger event configuration bit of line 4"] pub type Tr4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR5` reader - Falling trigger event configuration bit of line 5"] pub type Tr5R = crate :: BitReader ;
#[doc = "Field `TR5` writer - Falling trigger event configuration bit of line 5"] pub type Tr5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR6` reader - Falling trigger event configuration bit of line 6"] pub type Tr6R = crate :: BitReader ;
#[doc = "Field `TR6` writer - Falling trigger event configuration bit of line 6"] pub type Tr6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR7` reader - Falling trigger event configuration bit of line 7"] pub type Tr7R = crate :: BitReader ;
#[doc = "Field `TR7` writer - Falling trigger event configuration bit of line 7"] pub type Tr7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR8` reader - Falling trigger event configuration bit of line 8"] pub type Tr8R = crate :: BitReader ;
#[doc = "Field `TR8` writer - Falling trigger event configuration bit of line 8"] pub type Tr8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR9` reader - Falling trigger event configuration bit of line 9"] pub type Tr9R = crate :: BitReader ;
#[doc = "Field `TR9` writer - Falling trigger event configuration bit of line 9"] pub type Tr9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR10` reader - Falling trigger event configuration bit of line 10"] pub type Tr10R = crate :: BitReader ;
#[doc = "Field `TR10` writer - Falling trigger event configuration bit of line 10"] pub type Tr10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR11` reader - Falling trigger event configuration bit of line 11"] pub type Tr11R = crate :: BitReader ;
#[doc = "Field `TR11` writer - Falling trigger event configuration bit of line 11"] pub type Tr11W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR12` reader - Falling trigger event configuration bit of line 12"] pub type Tr12R = crate :: BitReader ;
#[doc = "Field `TR12` writer - Falling trigger event configuration bit of line 12"] pub type Tr12W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR13` reader - Falling trigger event configuration bit of line 13"] pub type Tr13R = crate :: BitReader ;
#[doc = "Field `TR13` writer - Falling trigger event configuration bit of line 13"] pub type Tr13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR14` reader - Falling trigger event configuration bit of line 14"] pub type Tr14R = crate :: BitReader ;
#[doc = "Field `TR14` writer - Falling trigger event configuration bit of line 14"] pub type Tr14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR15` reader - Falling trigger event configuration bit of line 15"] pub type Tr15R = crate :: BitReader ;
#[doc = "Field `TR15` writer - Falling trigger event configuration bit of line 15"] pub type Tr15W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR16` reader - Falling trigger event configuration bit of line 16"] pub type Tr16R = crate :: BitReader ;
#[doc = "Field `TR16` writer - Falling trigger event configuration bit of line 16"] pub type Tr16W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR17` reader - Falling trigger event configuration bit of line 17"] pub type Tr17R = crate :: BitReader ;
#[doc = "Field `TR17` writer - Falling trigger event configuration bit of line 17"] pub type Tr17W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR18` reader - Falling trigger event configuration bit of line 18"] pub type Tr18R = crate :: BitReader ;
#[doc = "Field `TR18` writer - Falling trigger event configuration bit of line 18"] pub type Tr18W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR19` reader - Falling trigger event configuration bit of line 19"] pub type Tr19R = crate :: BitReader ;
#[doc = "Field `TR19` writer - Falling trigger event configuration bit of line 19"] pub type Tr19W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR20` reader - Falling trigger event configuration bit of line 20"] pub type Tr20R = crate :: BitReader ;
#[doc = "Field `TR20` writer - Falling trigger event configuration bit of line 20"] pub type Tr20W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TR24` reader - Falling trigger event configuration bit of line 24"] pub type Tr24R = crate :: BitReader ;
#[doc = "Field `TR24` writer - Falling trigger event configuration bit of line 24"] pub type Tr24W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Falling trigger event configuration bit of line 0"]
#[inline (always)] pub fn tr0 (& self) -> Tr0R { Tr0R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Falling trigger event configuration bit of line 1"]
#[inline (always)] pub fn tr1 (& self) -> Tr1R { Tr1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Falling trigger event configuration bit of line 2"]
#[inline (always)] pub fn tr2 (& self) -> Tr2R { Tr2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Falling trigger event configuration bit of line 3"]
#[inline (always)] pub fn tr3 (& self) -> Tr3R { Tr3R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Falling trigger event configuration bit of line 4"]
#[inline (always)] pub fn tr4 (& self) -> Tr4R { Tr4R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Falling trigger event configuration bit of line 5"]
#[inline (always)] pub fn tr5 (& self) -> Tr5R { Tr5R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Falling trigger event configuration bit of line 6"]
#[inline (always)] pub fn tr6 (& self) -> Tr6R { Tr6R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Falling trigger event configuration bit of line 7"]
#[inline (always)] pub fn tr7 (& self) -> Tr7R { Tr7R :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Falling trigger event configuration bit of line 8"]
#[inline (always)] pub fn tr8 (& self) -> Tr8R { Tr8R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Falling trigger event configuration bit of line 9"]
#[inline (always)] pub fn tr9 (& self) -> Tr9R { Tr9R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Falling trigger event configuration bit of line 10"]
#[inline (always)] pub fn tr10 (& self) -> Tr10R { Tr10R :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Falling trigger event configuration bit of line 11"]
#[inline (always)] pub fn tr11 (& self) -> Tr11R { Tr11R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Falling trigger event configuration bit of line 12"]
#[inline (always)] pub fn tr12 (& self) -> Tr12R { Tr12R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Falling trigger event configuration bit of line 13"]
#[inline (always)] pub fn tr13 (& self) -> Tr13R { Tr13R :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - Falling trigger event configuration bit of line 14"]
#[inline (always)] pub fn tr14 (& self) -> Tr14R { Tr14R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Falling trigger event configuration bit of line 15"]
#[inline (always)] pub fn tr15 (& self) -> Tr15R { Tr15R :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - Falling trigger event configuration bit of line 16"]
#[inline (always)] pub fn tr16 (& self) -> Tr16R { Tr16R :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - Falling trigger event configuration bit of line 17"]
#[inline (always)] pub fn tr17 (& self) -> Tr17R { Tr17R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - Falling trigger event configuration bit of line 18"]
#[inline (always)] pub fn tr18 (& self) -> Tr18R { Tr18R :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - Falling trigger event configuration bit of line 19"]
#[inline (always)] pub fn tr19 (& self) -> Tr19R { Tr19R :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bit 20 - Falling trigger event configuration bit of line 20"]
#[inline (always)] pub fn tr20 (& self) -> Tr20R { Tr20R :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 24 - Falling trigger event configuration bit of line 24"]
#[inline (always)] pub fn tr24 (& self) -> Tr24R { Tr24R :: new (((self . bits >> 24) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Falling trigger event configuration bit of line 0"]
#[inline (always)] pub fn tr0 (& mut self) -> Tr0W < '_ , FtsrSpec > { Tr0W :: new (self , 0) }
#[doc = "Bit 1 - Falling trigger event configuration bit of line 1"]
#[inline (always)] pub fn tr1 (& mut self) -> Tr1W < '_ , FtsrSpec > { Tr1W :: new (self , 1) }
#[doc = "Bit 2 - Falling trigger event configuration bit of line 2"]
#[inline (always)] pub fn tr2 (& mut self) -> Tr2W < '_ , FtsrSpec > { Tr2W :: new (self , 2) }
#[doc = "Bit 3 - Falling trigger event configuration bit of line 3"]
#[inline (always)] pub fn tr3 (& mut self) -> Tr3W < '_ , FtsrSpec > { Tr3W :: new (self , 3) }
#[doc = "Bit 4 - Falling trigger event configuration bit of line 4"]
#[inline (always)] pub fn tr4 (& mut self) -> Tr4W < '_ , FtsrSpec > { Tr4W :: new (self , 4) }
#[doc = "Bit 5 - Falling trigger event configuration bit of line 5"]
#[inline (always)] pub fn tr5 (& mut self) -> Tr5W < '_ , FtsrSpec > { Tr5W :: new (self , 5) }
#[doc = "Bit 6 - Falling trigger event configuration bit of line 6"]
#[inline (always)] pub fn tr6 (& mut self) -> Tr6W < '_ , FtsrSpec > { Tr6W :: new (self , 6) }
#[doc = "Bit 7 - Falling trigger event configuration bit of line 7"]
#[inline (always)] pub fn tr7 (& mut self) -> Tr7W < '_ , FtsrSpec > { Tr7W :: new (self , 7) }
#[doc = "Bit 8 - Falling trigger event configuration bit of line 8"]
#[inline (always)] pub fn tr8 (& mut self) -> Tr8W < '_ , FtsrSpec > { Tr8W :: new (self , 8) }
#[doc = "Bit 9 - Falling trigger event configuration bit of line 9"]
#[inline (always)] pub fn tr9 (& mut self) -> Tr9W < '_ , FtsrSpec > { Tr9W :: new (self , 9) }
#[doc = "Bit 10 - Falling trigger event configuration bit of line 10"]
#[inline (always)] pub fn tr10 (& mut self) -> Tr10W < '_ , FtsrSpec > { Tr10W :: new (self , 10) }
#[doc = "Bit 11 - Falling trigger event configuration bit of line 11"]
#[inline (always)] pub fn tr11 (& mut self) -> Tr11W < '_ , FtsrSpec > { Tr11W :: new (self , 11) }
#[doc = "Bit 12 - Falling trigger event configuration bit of line 12"]
#[inline (always)] pub fn tr12 (& mut self) -> Tr12W < '_ , FtsrSpec > { Tr12W :: new (self , 12) }
#[doc = "Bit 13 - Falling trigger event configuration bit of line 13"]
#[inline (always)] pub fn tr13 (& mut self) -> Tr13W < '_ , FtsrSpec > { Tr13W :: new (self , 13) }
#[doc = "Bit 14 - Falling trigger event configuration bit of line 14"]
#[inline (always)] pub fn tr14 (& mut self) -> Tr14W < '_ , FtsrSpec > { Tr14W :: new (self , 14) }
#[doc = "Bit 15 - Falling trigger event configuration bit of line 15"]
#[inline (always)] pub fn tr15 (& mut self) -> Tr15W < '_ , FtsrSpec > { Tr15W :: new (self , 15) }
#[doc = "Bit 16 - Falling trigger event configuration bit of line 16"]
#[inline (always)] pub fn tr16 (& mut self) -> Tr16W < '_ , FtsrSpec > { Tr16W :: new (self , 16) }
#[doc = "Bit 17 - Falling trigger event configuration bit of line 17"]
#[inline (always)] pub fn tr17 (& mut self) -> Tr17W < '_ , FtsrSpec > { Tr17W :: new (self , 17) }
#[doc = "Bit 18 - Falling trigger event configuration bit of line 18"]
#[inline (always)] pub fn tr18 (& mut self) -> Tr18W < '_ , FtsrSpec > { Tr18W :: new (self , 18) }
#[doc = "Bit 19 - Falling trigger event configuration bit of line 19"]
#[inline (always)] pub fn tr19 (& mut self) -> Tr19W < '_ , FtsrSpec > { Tr19W :: new (self , 19) }
#[doc = "Bit 20 - Falling trigger event configuration bit of line 20"]
#[inline (always)] pub fn tr20 (& mut self) -> Tr20W < '_ , FtsrSpec > { Tr20W :: new (self , 20) }
#[doc = "Bit 24 - Falling trigger event configuration bit of line 24"]
#[inline (always)] pub fn tr24 (& mut self) -> Tr24W < '_ , FtsrSpec > { Tr24W :: new (self , 24) } }
#[doc = "Falling trigger selection register\n\nYou can [`read`](crate::Reg::read) this register and get [`ftsr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ftsr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct FtsrSpec ; impl crate :: RegisterSpec for FtsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ftsr::R`](R) reader structure"] impl crate :: Readable for FtsrSpec { }
#[doc = "`write(|w| ..)` method takes [`ftsr::W`](W) writer structure"] impl crate :: Writable for FtsrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets FTSR to value 0"] impl crate :: Resettable for FtsrSpec { } }
#[doc = "SWIER (rw) register accessor: Software interrupt event register\n\nYou can [`read`](crate::Reg::read) this register and get [`swier::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swier::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@swier`] module"]
#[doc (alias = "SWIER")] pub type Swier = crate :: Reg < swier :: SwierSpec > ;
#[doc = "Software interrupt event register"] pub mod swier {
#[doc = "Register `SWIER` reader"] pub type R = crate :: R < SwierSpec > ;
#[doc = "Register `SWIER` writer"] pub type W = crate :: W < SwierSpec > ;
#[doc = "Field `SWIER0` reader - Software interrupt on line 0"] pub type Swier0R = crate :: BitReader ;
#[doc = "Field `SWIER0` writer - Software interrupt on line 0"] pub type Swier0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER1` reader - Software interrupt on line 1"] pub type Swier1R = crate :: BitReader ;
#[doc = "Field `SWIER1` writer - Software interrupt on line 1"] pub type Swier1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER2` reader - Software interrupt on line 2"] pub type Swier2R = crate :: BitReader ;
#[doc = "Field `SWIER2` writer - Software interrupt on line 2"] pub type Swier2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER3` reader - Software interrupt on line 3"] pub type Swier3R = crate :: BitReader ;
#[doc = "Field `SWIER3` writer - Software interrupt on line 3"] pub type Swier3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER4` reader - Software interrupt on line 4"] pub type Swier4R = crate :: BitReader ;
#[doc = "Field `SWIER4` writer - Software interrupt on line 4"] pub type Swier4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER5` reader - Software interrupt on line 5"] pub type Swier5R = crate :: BitReader ;
#[doc = "Field `SWIER5` writer - Software interrupt on line 5"] pub type Swier5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER6` reader - Software interrupt on line 6"] pub type Swier6R = crate :: BitReader ;
#[doc = "Field `SWIER6` writer - Software interrupt on line 6"] pub type Swier6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER7` reader - Software interrupt on line 7"] pub type Swier7R = crate :: BitReader ;
#[doc = "Field `SWIER7` writer - Software interrupt on line 7"] pub type Swier7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER8` reader - Software interrupt on line 8"] pub type Swier8R = crate :: BitReader ;
#[doc = "Field `SWIER8` writer - Software interrupt on line 8"] pub type Swier8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER9` reader - Software interrupt on line 9"] pub type Swier9R = crate :: BitReader ;
#[doc = "Field `SWIER9` writer - Software interrupt on line 9"] pub type Swier9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER10` reader - Software interrupt on line 10"] pub type Swier10R = crate :: BitReader ;
#[doc = "Field `SWIER10` writer - Software interrupt on line 10"] pub type Swier10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER11` reader - Software interrupt on line 11"] pub type Swier11R = crate :: BitReader ;
#[doc = "Field `SWIER11` writer - Software interrupt on line 11"] pub type Swier11W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER12` reader - Software interrupt on line 12"] pub type Swier12R = crate :: BitReader ;
#[doc = "Field `SWIER12` writer - Software interrupt on line 12"] pub type Swier12W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER13` reader - Software interrupt on line 13"] pub type Swier13R = crate :: BitReader ;
#[doc = "Field `SWIER13` writer - Software interrupt on line 13"] pub type Swier13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER14` reader - Software interrupt on line 14"] pub type Swier14R = crate :: BitReader ;
#[doc = "Field `SWIER14` writer - Software interrupt on line 14"] pub type Swier14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER15` reader - Software interrupt on line 15"] pub type Swier15R = crate :: BitReader ;
#[doc = "Field `SWIER15` writer - Software interrupt on line 15"] pub type Swier15W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER16` reader - Software interrupt on line 16"] pub type Swier16R = crate :: BitReader ;
#[doc = "Field `SWIER16` writer - Software interrupt on line 16"] pub type Swier16W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER17` reader - Software interrupt on line 17"] pub type Swier17R = crate :: BitReader ;
#[doc = "Field `SWIER17` writer - Software interrupt on line 17"] pub type Swier17W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER18` reader - Software interrupt on line 18"] pub type Swier18R = crate :: BitReader ;
#[doc = "Field `SWIER18` writer - Software interrupt on line 18"] pub type Swier18W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER19` reader - Software interrupt on line 19"] pub type Swier19R = crate :: BitReader ;
#[doc = "Field `SWIER19` writer - Software interrupt on line 19"] pub type Swier19W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER20` reader - Software interrupt on line 20"] pub type Swier20R = crate :: BitReader ;
#[doc = "Field `SWIER20` writer - Software interrupt on line 20"] pub type Swier20W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWIER24` reader - Software interrupt on line 24"] pub type Swier24R = crate :: BitReader ;
#[doc = "Field `SWIER24` writer - Software interrupt on line 24"] pub type Swier24W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Software interrupt on line 0"]
#[inline (always)] pub fn swier0 (& self) -> Swier0R { Swier0R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Software interrupt on line 1"]
#[inline (always)] pub fn swier1 (& self) -> Swier1R { Swier1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Software interrupt on line 2"]
#[inline (always)] pub fn swier2 (& self) -> Swier2R { Swier2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Software interrupt on line 3"]
#[inline (always)] pub fn swier3 (& self) -> Swier3R { Swier3R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Software interrupt on line 4"]
#[inline (always)] pub fn swier4 (& self) -> Swier4R { Swier4R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Software interrupt on line 5"]
#[inline (always)] pub fn swier5 (& self) -> Swier5R { Swier5R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Software interrupt on line 6"]
#[inline (always)] pub fn swier6 (& self) -> Swier6R { Swier6R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Software interrupt on line 7"]
#[inline (always)] pub fn swier7 (& self) -> Swier7R { Swier7R :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Software interrupt on line 8"]
#[inline (always)] pub fn swier8 (& self) -> Swier8R { Swier8R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Software interrupt on line 9"]
#[inline (always)] pub fn swier9 (& self) -> Swier9R { Swier9R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Software interrupt on line 10"]
#[inline (always)] pub fn swier10 (& self) -> Swier10R { Swier10R :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Software interrupt on line 11"]
#[inline (always)] pub fn swier11 (& self) -> Swier11R { Swier11R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Software interrupt on line 12"]
#[inline (always)] pub fn swier12 (& self) -> Swier12R { Swier12R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Software interrupt on line 13"]
#[inline (always)] pub fn swier13 (& self) -> Swier13R { Swier13R :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - Software interrupt on line 14"]
#[inline (always)] pub fn swier14 (& self) -> Swier14R { Swier14R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Software interrupt on line 15"]
#[inline (always)] pub fn swier15 (& self) -> Swier15R { Swier15R :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - Software interrupt on line 16"]
#[inline (always)] pub fn swier16 (& self) -> Swier16R { Swier16R :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - Software interrupt on line 17"]
#[inline (always)] pub fn swier17 (& self) -> Swier17R { Swier17R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - Software interrupt on line 18"]
#[inline (always)] pub fn swier18 (& self) -> Swier18R { Swier18R :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - Software interrupt on line 19"]
#[inline (always)] pub fn swier19 (& self) -> Swier19R { Swier19R :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bit 20 - Software interrupt on line 20"]
#[inline (always)] pub fn swier20 (& self) -> Swier20R { Swier20R :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 24 - Software interrupt on line 24"]
#[inline (always)] pub fn swier24 (& self) -> Swier24R { Swier24R :: new (((self . bits >> 24) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Software interrupt on line 0"]
#[inline (always)] pub fn swier0 (& mut self) -> Swier0W < '_ , SwierSpec > { Swier0W :: new (self , 0) }
#[doc = "Bit 1 - Software interrupt on line 1"]
#[inline (always)] pub fn swier1 (& mut self) -> Swier1W < '_ , SwierSpec > { Swier1W :: new (self , 1) }
#[doc = "Bit 2 - Software interrupt on line 2"]
#[inline (always)] pub fn swier2 (& mut self) -> Swier2W < '_ , SwierSpec > { Swier2W :: new (self , 2) }
#[doc = "Bit 3 - Software interrupt on line 3"]
#[inline (always)] pub fn swier3 (& mut self) -> Swier3W < '_ , SwierSpec > { Swier3W :: new (self , 3) }
#[doc = "Bit 4 - Software interrupt on line 4"]
#[inline (always)] pub fn swier4 (& mut self) -> Swier4W < '_ , SwierSpec > { Swier4W :: new (self , 4) }
#[doc = "Bit 5 - Software interrupt on line 5"]
#[inline (always)] pub fn swier5 (& mut self) -> Swier5W < '_ , SwierSpec > { Swier5W :: new (self , 5) }
#[doc = "Bit 6 - Software interrupt on line 6"]
#[inline (always)] pub fn swier6 (& mut self) -> Swier6W < '_ , SwierSpec > { Swier6W :: new (self , 6) }
#[doc = "Bit 7 - Software interrupt on line 7"]
#[inline (always)] pub fn swier7 (& mut self) -> Swier7W < '_ , SwierSpec > { Swier7W :: new (self , 7) }
#[doc = "Bit 8 - Software interrupt on line 8"]
#[inline (always)] pub fn swier8 (& mut self) -> Swier8W < '_ , SwierSpec > { Swier8W :: new (self , 8) }
#[doc = "Bit 9 - Software interrupt on line 9"]
#[inline (always)] pub fn swier9 (& mut self) -> Swier9W < '_ , SwierSpec > { Swier9W :: new (self , 9) }
#[doc = "Bit 10 - Software interrupt on line 10"]
#[inline (always)] pub fn swier10 (& mut self) -> Swier10W < '_ , SwierSpec > { Swier10W :: new (self , 10) }
#[doc = "Bit 11 - Software interrupt on line 11"]
#[inline (always)] pub fn swier11 (& mut self) -> Swier11W < '_ , SwierSpec > { Swier11W :: new (self , 11) }
#[doc = "Bit 12 - Software interrupt on line 12"]
#[inline (always)] pub fn swier12 (& mut self) -> Swier12W < '_ , SwierSpec > { Swier12W :: new (self , 12) }
#[doc = "Bit 13 - Software interrupt on line 13"]
#[inline (always)] pub fn swier13 (& mut self) -> Swier13W < '_ , SwierSpec > { Swier13W :: new (self , 13) }
#[doc = "Bit 14 - Software interrupt on line 14"]
#[inline (always)] pub fn swier14 (& mut self) -> Swier14W < '_ , SwierSpec > { Swier14W :: new (self , 14) }
#[doc = "Bit 15 - Software interrupt on line 15"]
#[inline (always)] pub fn swier15 (& mut self) -> Swier15W < '_ , SwierSpec > { Swier15W :: new (self , 15) }
#[doc = "Bit 16 - Software interrupt on line 16"]
#[inline (always)] pub fn swier16 (& mut self) -> Swier16W < '_ , SwierSpec > { Swier16W :: new (self , 16) }
#[doc = "Bit 17 - Software interrupt on line 17"]
#[inline (always)] pub fn swier17 (& mut self) -> Swier17W < '_ , SwierSpec > { Swier17W :: new (self , 17) }
#[doc = "Bit 18 - Software interrupt on line 18"]
#[inline (always)] pub fn swier18 (& mut self) -> Swier18W < '_ , SwierSpec > { Swier18W :: new (self , 18) }
#[doc = "Bit 19 - Software interrupt on line 19"]
#[inline (always)] pub fn swier19 (& mut self) -> Swier19W < '_ , SwierSpec > { Swier19W :: new (self , 19) }
#[doc = "Bit 20 - Software interrupt on line 20"]
#[inline (always)] pub fn swier20 (& mut self) -> Swier20W < '_ , SwierSpec > { Swier20W :: new (self , 20) }
#[doc = "Bit 24 - Software interrupt on line 24"]
#[inline (always)] pub fn swier24 (& mut self) -> Swier24W < '_ , SwierSpec > { Swier24W :: new (self , 24) } }
#[doc = "Software interrupt event register\n\nYou can [`read`](crate::Reg::read) this register and get [`swier::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swier::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SwierSpec ; impl crate :: RegisterSpec for SwierSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`swier::R`](R) reader structure"] impl crate :: Readable for SwierSpec { }
#[doc = "`write(|w| ..)` method takes [`swier::W`](W) writer structure"] impl crate :: Writable for SwierSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SWIER to value 0"] impl crate :: Resettable for SwierSpec { } }
#[doc = "PR (rw) register accessor: Pending register\n\nYou can [`read`](crate::Reg::read) this register and get [`pr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pr`] module"]
#[doc (alias = "PR")] pub type Pr = crate :: Reg < pr :: PrSpec > ;
#[doc = "Pending register"] pub mod pr {
#[doc = "Register `PR` reader"] pub type R = crate :: R < PrSpec > ;
#[doc = "Register `PR` writer"] pub type W = crate :: W < PrSpec > ;
#[doc = "Field `PR0` reader - Pending bit"] pub type Pr0R = crate :: BitReader ;
#[doc = "Field `PR0` writer - Pending bit"] pub type Pr0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR1` reader - Pending bit"] pub type Pr1R = crate :: BitReader ;
#[doc = "Field `PR1` writer - Pending bit"] pub type Pr1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR2` reader - Pending bit"] pub type Pr2R = crate :: BitReader ;
#[doc = "Field `PR2` writer - Pending bit"] pub type Pr2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR3` reader - Pending bit"] pub type Pr3R = crate :: BitReader ;
#[doc = "Field `PR3` writer - Pending bit"] pub type Pr3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR4` reader - Pending bit"] pub type Pr4R = crate :: BitReader ;
#[doc = "Field `PR4` writer - Pending bit"] pub type Pr4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR5` reader - Pending bit"] pub type Pr5R = crate :: BitReader ;
#[doc = "Field `PR5` writer - Pending bit"] pub type Pr5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR6` reader - Pending bit"] pub type Pr6R = crate :: BitReader ;
#[doc = "Field `PR6` writer - Pending bit"] pub type Pr6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR7` reader - Pending bit"] pub type Pr7R = crate :: BitReader ;
#[doc = "Field `PR7` writer - Pending bit"] pub type Pr7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR8` reader - Pending bit"] pub type Pr8R = crate :: BitReader ;
#[doc = "Field `PR8` writer - Pending bit"] pub type Pr8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR9` reader - Pending bit"] pub type Pr9R = crate :: BitReader ;
#[doc = "Field `PR9` writer - Pending bit"] pub type Pr9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR10` reader - Pending bit"] pub type Pr10R = crate :: BitReader ;
#[doc = "Field `PR10` writer - Pending bit"] pub type Pr10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR11` reader - Pending bit"] pub type Pr11R = crate :: BitReader ;
#[doc = "Field `PR11` writer - Pending bit"] pub type Pr11W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR12` reader - Pending bit"] pub type Pr12R = crate :: BitReader ;
#[doc = "Field `PR12` writer - Pending bit"] pub type Pr12W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR13` reader - Pending bit"] pub type Pr13R = crate :: BitReader ;
#[doc = "Field `PR13` writer - Pending bit"] pub type Pr13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR14` reader - Pending bit"] pub type Pr14R = crate :: BitReader ;
#[doc = "Field `PR14` writer - Pending bit"] pub type Pr14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR15` reader - Pending bit"] pub type Pr15R = crate :: BitReader ;
#[doc = "Field `PR15` writer - Pending bit"] pub type Pr15W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR16` reader - Pending bit"] pub type Pr16R = crate :: BitReader ;
#[doc = "Field `PR16` writer - Pending bit"] pub type Pr16W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR17` reader - Pending bit"] pub type Pr17R = crate :: BitReader ;
#[doc = "Field `PR17` writer - Pending bit"] pub type Pr17W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR18` reader - Pending bit"] pub type Pr18R = crate :: BitReader ;
#[doc = "Field `PR18` writer - Pending bit"] pub type Pr18W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR19` reader - Pending bit"] pub type Pr19R = crate :: BitReader ;
#[doc = "Field `PR19` writer - Pending bit"] pub type Pr19W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR20` reader - Pending bit"] pub type Pr20R = crate :: BitReader ;
#[doc = "Field `PR20` writer - Pending bit"] pub type Pr20W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PR24` reader - Pending bit"] pub type Pr24R = crate :: BitReader ;
#[doc = "Field `PR24` writer - Pending bit"] pub type Pr24W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Pending bit"]
#[inline (always)] pub fn pr0 (& self) -> Pr0R { Pr0R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Pending bit"]
#[inline (always)] pub fn pr1 (& self) -> Pr1R { Pr1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Pending bit"]
#[inline (always)] pub fn pr2 (& self) -> Pr2R { Pr2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Pending bit"]
#[inline (always)] pub fn pr3 (& self) -> Pr3R { Pr3R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Pending bit"]
#[inline (always)] pub fn pr4 (& self) -> Pr4R { Pr4R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Pending bit"]
#[inline (always)] pub fn pr5 (& self) -> Pr5R { Pr5R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Pending bit"]
#[inline (always)] pub fn pr6 (& self) -> Pr6R { Pr6R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Pending bit"]
#[inline (always)] pub fn pr7 (& self) -> Pr7R { Pr7R :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Pending bit"]
#[inline (always)] pub fn pr8 (& self) -> Pr8R { Pr8R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Pending bit"]
#[inline (always)] pub fn pr9 (& self) -> Pr9R { Pr9R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Pending bit"]
#[inline (always)] pub fn pr10 (& self) -> Pr10R { Pr10R :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Pending bit"]
#[inline (always)] pub fn pr11 (& self) -> Pr11R { Pr11R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Pending bit"]
#[inline (always)] pub fn pr12 (& self) -> Pr12R { Pr12R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Pending bit"]
#[inline (always)] pub fn pr13 (& self) -> Pr13R { Pr13R :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - Pending bit"]
#[inline (always)] pub fn pr14 (& self) -> Pr14R { Pr14R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Pending bit"]
#[inline (always)] pub fn pr15 (& self) -> Pr15R { Pr15R :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - Pending bit"]
#[inline (always)] pub fn pr16 (& self) -> Pr16R { Pr16R :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - Pending bit"]
#[inline (always)] pub fn pr17 (& self) -> Pr17R { Pr17R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - Pending bit"]
#[inline (always)] pub fn pr18 (& self) -> Pr18R { Pr18R :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - Pending bit"]
#[inline (always)] pub fn pr19 (& self) -> Pr19R { Pr19R :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bit 20 - Pending bit"]
#[inline (always)] pub fn pr20 (& self) -> Pr20R { Pr20R :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 24 - Pending bit"]
#[inline (always)] pub fn pr24 (& self) -> Pr24R { Pr24R :: new (((self . bits >> 24) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Pending bit"]
#[inline (always)] pub fn pr0 (& mut self) -> Pr0W < '_ , PrSpec > { Pr0W :: new (self , 0) }
#[doc = "Bit 1 - Pending bit"]
#[inline (always)] pub fn pr1 (& mut self) -> Pr1W < '_ , PrSpec > { Pr1W :: new (self , 1) }
#[doc = "Bit 2 - Pending bit"]
#[inline (always)] pub fn pr2 (& mut self) -> Pr2W < '_ , PrSpec > { Pr2W :: new (self , 2) }
#[doc = "Bit 3 - Pending bit"]
#[inline (always)] pub fn pr3 (& mut self) -> Pr3W < '_ , PrSpec > { Pr3W :: new (self , 3) }
#[doc = "Bit 4 - Pending bit"]
#[inline (always)] pub fn pr4 (& mut self) -> Pr4W < '_ , PrSpec > { Pr4W :: new (self , 4) }
#[doc = "Bit 5 - Pending bit"]
#[inline (always)] pub fn pr5 (& mut self) -> Pr5W < '_ , PrSpec > { Pr5W :: new (self , 5) }
#[doc = "Bit 6 - Pending bit"]
#[inline (always)] pub fn pr6 (& mut self) -> Pr6W < '_ , PrSpec > { Pr6W :: new (self , 6) }
#[doc = "Bit 7 - Pending bit"]
#[inline (always)] pub fn pr7 (& mut self) -> Pr7W < '_ , PrSpec > { Pr7W :: new (self , 7) }
#[doc = "Bit 8 - Pending bit"]
#[inline (always)] pub fn pr8 (& mut self) -> Pr8W < '_ , PrSpec > { Pr8W :: new (self , 8) }
#[doc = "Bit 9 - Pending bit"]
#[inline (always)] pub fn pr9 (& mut self) -> Pr9W < '_ , PrSpec > { Pr9W :: new (self , 9) }
#[doc = "Bit 10 - Pending bit"]
#[inline (always)] pub fn pr10 (& mut self) -> Pr10W < '_ , PrSpec > { Pr10W :: new (self , 10) }
#[doc = "Bit 11 - Pending bit"]
#[inline (always)] pub fn pr11 (& mut self) -> Pr11W < '_ , PrSpec > { Pr11W :: new (self , 11) }
#[doc = "Bit 12 - Pending bit"]
#[inline (always)] pub fn pr12 (& mut self) -> Pr12W < '_ , PrSpec > { Pr12W :: new (self , 12) }
#[doc = "Bit 13 - Pending bit"]
#[inline (always)] pub fn pr13 (& mut self) -> Pr13W < '_ , PrSpec > { Pr13W :: new (self , 13) }
#[doc = "Bit 14 - Pending bit"]
#[inline (always)] pub fn pr14 (& mut self) -> Pr14W < '_ , PrSpec > { Pr14W :: new (self , 14) }
#[doc = "Bit 15 - Pending bit"]
#[inline (always)] pub fn pr15 (& mut self) -> Pr15W < '_ , PrSpec > { Pr15W :: new (self , 15) }
#[doc = "Bit 16 - Pending bit"]
#[inline (always)] pub fn pr16 (& mut self) -> Pr16W < '_ , PrSpec > { Pr16W :: new (self , 16) }
#[doc = "Bit 17 - Pending bit"]
#[inline (always)] pub fn pr17 (& mut self) -> Pr17W < '_ , PrSpec > { Pr17W :: new (self , 17) }
#[doc = "Bit 18 - Pending bit"]
#[inline (always)] pub fn pr18 (& mut self) -> Pr18W < '_ , PrSpec > { Pr18W :: new (self , 18) }
#[doc = "Bit 19 - Pending bit"]
#[inline (always)] pub fn pr19 (& mut self) -> Pr19W < '_ , PrSpec > { Pr19W :: new (self , 19) }
#[doc = "Bit 20 - Pending bit"]
#[inline (always)] pub fn pr20 (& mut self) -> Pr20W < '_ , PrSpec > { Pr20W :: new (self , 20) }
#[doc = "Bit 24 - Pending bit"]
#[inline (always)] pub fn pr24 (& mut self) -> Pr24W < '_ , PrSpec > { Pr24W :: new (self , 24) } }
#[doc = "Pending register\n\nYou can [`read`](crate::Reg::read) this register and get [`pr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PrSpec ; impl crate :: RegisterSpec for PrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`pr::R`](R) reader structure"] impl crate :: Readable for PrSpec { }
#[doc = "`write(|w| ..)` method takes [`pr::W`](W) writer structure"] impl crate :: Writable for PrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PR to value 0"] impl crate :: Resettable for PrSpec { } } }
#[doc = "FLASH"] pub type Flash = crate :: Periph < flash :: RegisterBlock , 0x4002_2000 > ; impl core :: fmt :: Debug for Flash { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Flash") . finish () } }
#[doc = "FLASH"] pub mod flash {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { acr : Acr , keyr : Keyr , optkeyr : Optkeyr , sr : Sr , cr : Cr , ar : Ar , _reserved6 : [u8 ; 0x04] , obr : Obr , wrpr : Wrpr , } impl RegisterBlock {
#[doc = "0x00 - Flash access control register"]
#[inline (always)] pub const fn acr (& self) -> & Acr { & self . acr }
#[doc = "0x04 - Flash key"]
#[inline (always)] pub const fn keyr (& self) -> & Keyr { & self . keyr }
#[doc = "0x08 - Option byte key"]
#[inline (always)] pub const fn optkeyr (& self) -> & Optkeyr { & self . optkeyr }
#[doc = "0x0c - Flash status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x10 - Flash control register"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr }
#[doc = "0x14 - Flash address register"]
#[inline (always)] pub const fn ar (& self) -> & Ar { & self . ar }
#[doc = "0x1c - Option byte register"]
#[inline (always)] pub const fn obr (& self) -> & Obr { & self . obr }
#[doc = "0x20 - Write protect register"]
#[inline (always)] pub const fn wrpr (& self) -> & Wrpr { & self . wrpr } }
#[doc = "ACR (rw) register accessor: Flash access control register\n\nYou can [`read`](crate::Reg::read) this register and get [`acr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`acr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@acr`] module"]
#[doc (alias = "ACR")] pub type Acr = crate :: Reg < acr :: AcrSpec > ;
#[doc = "Flash access control register"] pub mod acr {
#[doc = "Register `ACR` reader"] pub type R = crate :: R < AcrSpec > ;
#[doc = "Register `ACR` writer"] pub type W = crate :: W < AcrSpec > ;
#[doc = "Field `LATENCY` reader - Latency"] pub type LatencyR = crate :: FieldReader ;
#[doc = "Field `LATENCY` writer - Latency"] pub type LatencyW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `PRFTBE` reader - Prefetch enable"] pub type PrftbeR = crate :: BitReader ;
#[doc = "Field `PRFTBE` writer - Prefetch enable"] pub type PrftbeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PRFTBS` reader - Prefetch buffer status"] pub type PrftbsR = crate :: BitReader ;
#[doc = "Field `PRFTBS` writer - Prefetch buffer status"] pub type PrftbsW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:2 - Latency"]
#[inline (always)] pub fn latency (& self) -> LatencyR { LatencyR :: new ((self . bits & 7) as u8) }
#[doc = "Bit 4 - Prefetch enable"]
#[inline (always)] pub fn prftbe (& self) -> PrftbeR { PrftbeR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Prefetch buffer status"]
#[inline (always)] pub fn prftbs (& self) -> PrftbsR { PrftbsR :: new (((self . bits >> 5) & 1) != 0) } } impl W {
#[doc = "Bits 0:2 - Latency"]
#[inline (always)] pub fn latency (& mut self) -> LatencyW < '_ , AcrSpec > { LatencyW :: new (self , 0) }
#[doc = "Bit 4 - Prefetch enable"]
#[inline (always)] pub fn prftbe (& mut self) -> PrftbeW < '_ , AcrSpec > { PrftbeW :: new (self , 4) }
#[doc = "Bit 5 - Prefetch buffer status"]
#[inline (always)] pub fn prftbs (& mut self) -> PrftbsW < '_ , AcrSpec > { PrftbsW :: new (self , 5) } }
#[doc = "Flash access control register\n\nYou can [`read`](crate::Reg::read) this register and get [`acr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`acr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AcrSpec ; impl crate :: RegisterSpec for AcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`acr::R`](R) reader structure"] impl crate :: Readable for AcrSpec { }
#[doc = "`write(|w| ..)` method takes [`acr::W`](W) writer structure"] impl crate :: Writable for AcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ACR to value 0x38"] impl crate :: Resettable for AcrSpec { const RESET_VALUE : u32 = 0x38 ; } }
#[doc = "KEYR (w) register accessor: Flash key\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`keyr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@keyr`] module"]
#[doc (alias = "KEYR")] pub type Keyr = crate :: Reg < keyr :: KeyrSpec > ;
#[doc = "Flash key"] pub mod keyr {
#[doc = "Register `KEYR` writer"] pub type W = crate :: W < KeyrSpec > ;
#[doc = "Field `FKEYR` writer - Flash key"] pub type FkeyrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl W {
#[doc = "Bits 0:31 - Flash key"]
#[inline (always)] pub fn fkeyr (& mut self) -> FkeyrW < '_ , KeyrSpec > { FkeyrW :: new (self , 0) } }
#[doc = "Flash key\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`keyr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct KeyrSpec ; impl crate :: RegisterSpec for KeyrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`keyr::W`](W) writer structure"] impl crate :: Writable for KeyrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets KEYR to value 0"] impl crate :: Resettable for KeyrSpec { } }
#[doc = "OPTKEYR (w) register accessor: Option byte key\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`optkeyr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@optkeyr`] module"]
#[doc (alias = "OPTKEYR")] pub type Optkeyr = crate :: Reg < optkeyr :: OptkeyrSpec > ;
#[doc = "Option byte key"] pub mod optkeyr {
#[doc = "Register `OPTKEYR` writer"] pub type W = crate :: W < OptkeyrSpec > ;
#[doc = "Field `OPTKEYR` writer - Option byte key"] pub type OptkeyrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl W {
#[doc = "Bits 0:31 - Option byte key"]
#[inline (always)] pub fn optkeyr (& mut self) -> OptkeyrW < '_ , OptkeyrSpec > { OptkeyrW :: new (self , 0) } }
#[doc = "Option byte key\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`optkeyr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct OptkeyrSpec ; impl crate :: RegisterSpec for OptkeyrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`optkeyr::W`](W) writer structure"] impl crate :: Writable for OptkeyrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets OPTKEYR to value 0"] impl crate :: Resettable for OptkeyrSpec { } }
#[doc = "SR (rw) register accessor: Flash status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "Flash status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ;
#[doc = "Field `BSY` reader - Busy"] pub type BsyR = crate :: BitReader ;
#[doc = "Field `BSY` writer - Busy"] pub type BsyW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PGERR` reader - Programming error"] pub type PgerrR = crate :: BitReader ;
#[doc = "Field `PGERR` writer - Programming error"] pub type PgerrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `WRPRTERR` reader - Write protection error"] pub type WrprterrR = crate :: BitReader ;
#[doc = "Field `WRPRTERR` writer - Write protection error"] pub type WrprterrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EOP` reader - End of operation"] pub type EopR = crate :: BitReader ;
#[doc = "Field `EOP` writer - End of operation"] pub type EopW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Busy"]
#[inline (always)] pub fn bsy (& self) -> BsyR { BsyR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 2 - Programming error"]
#[inline (always)] pub fn pgerr (& self) -> PgerrR { PgerrR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 4 - Write protection error"]
#[inline (always)] pub fn wrprterr (& self) -> WrprterrR { WrprterrR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - End of operation"]
#[inline (always)] pub fn eop (& self) -> EopR { EopR :: new (((self . bits >> 5) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Busy"]
#[inline (always)] pub fn bsy (& mut self) -> BsyW < '_ , SrSpec > { BsyW :: new (self , 0) }
#[doc = "Bit 2 - Programming error"]
#[inline (always)] pub fn pgerr (& mut self) -> PgerrW < '_ , SrSpec > { PgerrW :: new (self , 2) }
#[doc = "Bit 4 - Write protection error"]
#[inline (always)] pub fn wrprterr (& mut self) -> WrprterrW < '_ , SrSpec > { WrprterrW :: new (self , 4) }
#[doc = "Bit 5 - End of operation"]
#[inline (always)] pub fn eop (& mut self) -> EopW < '_ , SrSpec > { EopW :: new (self , 5) } }
#[doc = "Flash status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } }
#[doc = "CR (rw) register accessor: Flash control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "Flash control register"] pub mod cr {
#[doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ;
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `PG` reader - Programming"] pub type PgR = crate :: BitReader ;
#[doc = "Field `PG` writer - Programming"] pub type PgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PER` reader - Page erase"] pub type PerR = crate :: BitReader ;
#[doc = "Field `PER` writer - Page erase"] pub type PerW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MER` reader - Mass erase"] pub type MerR = crate :: BitReader ;
#[doc = "Field `MER` writer - Mass erase"] pub type MerW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OPTPG` reader - Option byte programming"] pub type OptpgR = crate :: BitReader ;
#[doc = "Field `OPTPG` writer - Option byte programming"] pub type OptpgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OPTER` reader - Option byte erase"] pub type OpterR = crate :: BitReader ;
#[doc = "Field `OPTER` writer - Option byte erase"] pub type OpterW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `STRT` reader - Start"] pub type StrtR = crate :: BitReader ;
#[doc = "Field `STRT` writer - Start"] pub type StrtW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LOCK` reader - Lock"] pub type LockR = crate :: BitReader ;
#[doc = "Field `LOCK` writer - Lock"] pub type LockW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OPTWRE` reader - Option byte write enable"] pub type OptwreR = crate :: BitReader ;
#[doc = "Field `OPTWRE` writer - Option byte write enable"] pub type OptwreW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ERRIE` reader - Error interrupt enable"] pub type ErrieR = crate :: BitReader ;
#[doc = "Field `ERRIE` writer - Error interrupt enable"] pub type ErrieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EOPIE` reader - End of operation interrupt enable"] pub type EopieR = crate :: BitReader ;
#[doc = "Field `EOPIE` writer - End of operation interrupt enable"] pub type EopieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Programming"]
#[inline (always)] pub fn pg (& self) -> PgR { PgR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Page erase"]
#[inline (always)] pub fn per (& self) -> PerR { PerR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Mass erase"]
#[inline (always)] pub fn mer (& self) -> MerR { MerR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 4 - Option byte programming"]
#[inline (always)] pub fn optpg (& self) -> OptpgR { OptpgR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Option byte erase"]
#[inline (always)] pub fn opter (& self) -> OpterR { OpterR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Start"]
#[inline (always)] pub fn strt (& self) -> StrtR { StrtR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Lock"]
#[inline (always)] pub fn lock (& self) -> LockR { LockR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 9 - Option byte write enable"]
#[inline (always)] pub fn optwre (& self) -> OptwreR { OptwreR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Error interrupt enable"]
#[inline (always)] pub fn errie (& self) -> ErrieR { ErrieR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 12 - End of operation interrupt enable"]
#[inline (always)] pub fn eopie (& self) -> EopieR { EopieR :: new (((self . bits >> 12) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Programming"]
#[inline (always)] pub fn pg (& mut self) -> PgW < '_ , CrSpec > { PgW :: new (self , 0) }
#[doc = "Bit 1 - Page erase"]
#[inline (always)] pub fn per (& mut self) -> PerW < '_ , CrSpec > { PerW :: new (self , 1) }
#[doc = "Bit 2 - Mass erase"]
#[inline (always)] pub fn mer (& mut self) -> MerW < '_ , CrSpec > { MerW :: new (self , 2) }
#[doc = "Bit 4 - Option byte programming"]
#[inline (always)] pub fn optpg (& mut self) -> OptpgW < '_ , CrSpec > { OptpgW :: new (self , 4) }
#[doc = "Bit 5 - Option byte erase"]
#[inline (always)] pub fn opter (& mut self) -> OpterW < '_ , CrSpec > { OpterW :: new (self , 5) }
#[doc = "Bit 6 - Start"]
#[inline (always)] pub fn strt (& mut self) -> StrtW < '_ , CrSpec > { StrtW :: new (self , 6) }
#[doc = "Bit 7 - Lock"]
#[inline (always)] pub fn lock (& mut self) -> LockW < '_ , CrSpec > { LockW :: new (self , 7) }
#[doc = "Bit 9 - Option byte write enable"]
#[inline (always)] pub fn optwre (& mut self) -> OptwreW < '_ , CrSpec > { OptwreW :: new (self , 9) }
#[doc = "Bit 10 - Error interrupt enable"]
#[inline (always)] pub fn errie (& mut self) -> ErrieW < '_ , CrSpec > { ErrieW :: new (self , 10) }
#[doc = "Bit 12 - End of operation interrupt enable"]
#[inline (always)] pub fn eopie (& mut self) -> EopieW < '_ , CrSpec > { EopieW :: new (self , 12) } }
#[doc = "Flash control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0x80"] impl crate :: Resettable for CrSpec { const RESET_VALUE : u32 = 0x80 ; } }
#[doc = "AR (w) register accessor: Flash address register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ar::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ar`] module"]
#[doc (alias = "AR")] pub type Ar = crate :: Reg < ar :: ArSpec > ;
#[doc = "Flash address register"] pub mod ar {
#[doc = "Register `AR` writer"] pub type W = crate :: W < ArSpec > ;
#[doc = "Field `FAR` writer - Flash Address"] pub type FarW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl W {
#[doc = "Bits 0:31 - Flash Address"]
#[inline (always)] pub fn far (& mut self) -> FarW < '_ , ArSpec > { FarW :: new (self , 0) } }
#[doc = "Flash address register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ar::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ArSpec ; impl crate :: RegisterSpec for ArSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`ar::W`](W) writer structure"] impl crate :: Writable for ArSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets AR to value 0"] impl crate :: Resettable for ArSpec { } }
#[doc = "OBR (r) register accessor: Option byte register\n\nYou can [`read`](crate::Reg::read) this register and get [`obr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@obr`] module"]
#[doc (alias = "OBR")] pub type Obr = crate :: Reg < obr :: ObrSpec > ;
#[doc = "Option byte register"] pub mod obr {
#[doc = "Register `OBR` reader"] pub type R = crate :: R < ObrSpec > ;
#[doc = "Field `OPTERR` reader - Option byte error"] pub type OpterrR = crate :: BitReader ;
#[doc = "Field `WDG_SW` reader - WDG_SW"] pub type WdgSwR = crate :: BitReader ;
#[doc = "Field `nBOOT1` reader - nBOOT1"] pub type NBoot1R = crate :: BitReader ;
#[doc = "Field `Data0` reader - Data0"] pub type Data0R = crate :: FieldReader ;
#[doc = "Field `Data1` reader - Data1"] pub type Data1R = crate :: FieldReader ; impl R {
#[doc = "Bit 0 - Option byte error"]
#[inline (always)] pub fn opterr (& self) -> OpterrR { OpterrR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 2 - WDG_SW"]
#[inline (always)] pub fn wdg_sw (& self) -> WdgSwR { WdgSwR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 6 - nBOOT1"]
#[inline (always)] pub fn n_boot1 (& self) -> NBoot1R { NBoot1R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bits 10:17 - Data0"]
#[inline (always)] pub fn data0 (& self) -> Data0R { Data0R :: new (((self . bits >> 10) & 0xff) as u8) }
#[doc = "Bits 18:25 - Data1"]
#[inline (always)] pub fn data1 (& self) -> Data1R { Data1R :: new (((self . bits >> 18) & 0xff) as u8) } }
#[doc = "Option byte register\n\nYou can [`read`](crate::Reg::read) this register and get [`obr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ObrSpec ; impl crate :: RegisterSpec for ObrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`obr::R`](R) reader structure"] impl crate :: Readable for ObrSpec { }
#[doc = "`reset()` method sets OBR to value 0x03ff_fc1c"] impl crate :: Resettable for ObrSpec { const RESET_VALUE : u32 = 0x03ff_fc1c ; } }
#[doc = "WRPR (r) register accessor: Write protect register\n\nYou can [`read`](crate::Reg::read) this register and get [`wrpr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wrpr`] module"]
#[doc (alias = "WRPR")] pub type Wrpr = crate :: Reg < wrpr :: WrprSpec > ;
#[doc = "Write protect register"] pub mod wrpr {
#[doc = "Register `WRPR` reader"] pub type R = crate :: R < WrprSpec > ;
#[doc = "Field `WRP` reader - Write protect"] pub type WrpR = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - Write protect"]
#[inline (always)] pub fn wrp (& self) -> WrpR { WrpR :: new (self . bits) } }
#[doc = "Write protect register\n\nYou can [`read`](crate::Reg::read) this register and get [`wrpr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct WrprSpec ; impl crate :: RegisterSpec for WrprSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`wrpr::R`](R) reader structure"] impl crate :: Readable for WrprSpec { }
#[doc = "`reset()` method sets WRPR to value 0xffff_ffff"] impl crate :: Resettable for WrprSpec { const RESET_VALUE : u32 = 0xffff_ffff ; } } }
#[doc = "General purpose I/O"] pub type Gpioa = crate :: Periph < gpioa :: RegisterBlock , 0x4800_0000 > ; impl core :: fmt :: Debug for Gpioa { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Gpioa") . finish () } }
#[doc = "General purpose I/O"] pub mod gpioa {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { crl : Crl , crh : Crh , idr : Idr , odr : Odr , bsrr : Bsrr , brr : Brr , lckr : Lckr , dcr : Dcr , afrl : Afrl , afrh : Afrh , } impl RegisterBlock {
#[doc = "0x00 - configuration low register"]
#[inline (always)] pub const fn crl (& self) -> & Crl { & self . crl }
#[doc = "0x04 - configuration high register"]
#[inline (always)] pub const fn crh (& self) -> & Crh { & self . crh }
#[doc = "0x08 - input data register"]
#[inline (always)] pub const fn idr (& self) -> & Idr { & self . idr }
#[doc = "0x0c - output data register"]
#[inline (always)] pub const fn odr (& self) -> & Odr { & self . odr }
#[doc = "0x10 - bit set/reset register"]
#[inline (always)] pub const fn bsrr (& self) -> & Bsrr { & self . bsrr }
#[doc = "0x14 - bit reset register"]
#[inline (always)] pub const fn brr (& self) -> & Brr { & self . brr }
#[doc = "0x18 - Port configuration lock register"]
#[inline (always)] pub const fn lckr (& self) -> & Lckr { & self . lckr }
#[doc = "0x1c - Port output open drain control register"]
#[inline (always)] pub const fn dcr (& self) -> & Dcr { & self . dcr }
#[doc = "0x20 - Port Multiplexing Function Low Register"]
#[inline (always)] pub const fn afrl (& self) -> & Afrl { & self . afrl }
#[doc = "0x24 - Port Multiplexing Function High Register"]
#[inline (always)] pub const fn afrh (& self) -> & Afrh { & self . afrh } }
#[doc = "CRL (rw) register accessor: configuration low register\n\nYou can [`read`](crate::Reg::read) this register and get [`crl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`crl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@crl`] module"]
#[doc (alias = "CRL")] pub type Crl = crate :: Reg < crl :: CrlSpec > ;
#[doc = "configuration low register"] pub mod crl {
#[doc = "Register `CRL` reader"] pub type R = crate :: R < CrlSpec > ;
#[doc = "Register `CRL` writer"] pub type W = crate :: W < CrlSpec > ;
#[doc = "Field `MODE0` reader - Port 0 mode bits"] pub type Mode0R = crate :: FieldReader ;
#[doc = "Field `MODE0` writer - Port 0 mode bits"] pub type Mode0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF0` reader - Port 0 configuration bits"] pub type Cnf0R = crate :: FieldReader ;
#[doc = "Field `CNF0` writer - Port 0 configuration bits"] pub type Cnf0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE1` reader - Port 1 mode bits"] pub type Mode1R = crate :: FieldReader ;
#[doc = "Field `MODE1` writer - Port 1 mode bits"] pub type Mode1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF1` reader - Port 1 configuration bits"] pub type Cnf1R = crate :: FieldReader ;
#[doc = "Field `CNF1` writer - Port 1 configuration bits"] pub type Cnf1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE2` reader - Port 2 mode bits"] pub type Mode2R = crate :: FieldReader ;
#[doc = "Field `MODE2` writer - Port 2 mode bits"] pub type Mode2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF2` reader - Port 2 configuration bits"] pub type Cnf2R = crate :: FieldReader ;
#[doc = "Field `CNF2` writer - Port 2 configuration bits"] pub type Cnf2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE3` reader - Port 3 mode bits"] pub type Mode3R = crate :: FieldReader ;
#[doc = "Field `MODE3` writer - Port 3 mode bits"] pub type Mode3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF3` reader - Port 3 configuration bits"] pub type Cnf3R = crate :: FieldReader ;
#[doc = "Field `CNF3` writer - Port 3 configuration bits"] pub type Cnf3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE4` reader - Port 4 mode bits"] pub type Mode4R = crate :: FieldReader ;
#[doc = "Field `MODE4` writer - Port 4 mode bits"] pub type Mode4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF4` reader - Port 4 configuration bits"] pub type Cnf4R = crate :: FieldReader ;
#[doc = "Field `CNF4` writer - Port 4 configuration bits"] pub type Cnf4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE5` reader - Port 5 mode bits"] pub type Mode5R = crate :: FieldReader ;
#[doc = "Field `MODE5` writer - Port 5 mode bits"] pub type Mode5W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF5` reader - Port 5 configuration bits"] pub type Cnf5R = crate :: FieldReader ;
#[doc = "Field `CNF5` writer - Port 5 configuration bits"] pub type Cnf5W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE6` reader - Port 6 mode bits"] pub type Mode6R = crate :: FieldReader ;
#[doc = "Field `MODE6` writer - Port 6 mode bits"] pub type Mode6W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF6` reader - Port 6 configuration bits"] pub type Cnf6R = crate :: FieldReader ;
#[doc = "Field `CNF6` writer - Port 6 configuration bits"] pub type Cnf6W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE7` reader - Port 7 mode bits"] pub type Mode7R = crate :: FieldReader ;
#[doc = "Field `MODE7` writer - Port 7 mode bits"] pub type Mode7W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF7` reader - Port 7 configuration bits"] pub type Cnf7R = crate :: FieldReader ;
#[doc = "Field `CNF7` writer - Port 7 configuration bits"] pub type Cnf7W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bits 0:1 - Port 0 mode bits"]
#[inline (always)] pub fn mode0 (& self) -> Mode0R { Mode0R :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Port 0 configuration bits"]
#[inline (always)] pub fn cnf0 (& self) -> Cnf0R { Cnf0R :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:5 - Port 1 mode bits"]
#[inline (always)] pub fn mode1 (& self) -> Mode1R { Mode1R :: new (((self . bits >> 4) & 3) as u8) }
#[doc = "Bits 6:7 - Port 1 configuration bits"]
#[inline (always)] pub fn cnf1 (& self) -> Cnf1R { Cnf1R :: new (((self . bits >> 6) & 3) as u8) }
#[doc = "Bits 8:9 - Port 2 mode bits"]
#[inline (always)] pub fn mode2 (& self) -> Mode2R { Mode2R :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - Port 2 configuration bits"]
#[inline (always)] pub fn cnf2 (& self) -> Cnf2R { Cnf2R :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:13 - Port 3 mode bits"]
#[inline (always)] pub fn mode3 (& self) -> Mode3R { Mode3R :: new (((self . bits >> 12) & 3) as u8) }
#[doc = "Bits 14:15 - Port 3 configuration bits"]
#[inline (always)] pub fn cnf3 (& self) -> Cnf3R { Cnf3R :: new (((self . bits >> 14) & 3) as u8) }
#[doc = "Bits 16:17 - Port 4 mode bits"]
#[inline (always)] pub fn mode4 (& self) -> Mode4R { Mode4R :: new (((self . bits >> 16) & 3) as u8) }
#[doc = "Bits 18:19 - Port 4 configuration bits"]
#[inline (always)] pub fn cnf4 (& self) -> Cnf4R { Cnf4R :: new (((self . bits >> 18) & 3) as u8) }
#[doc = "Bits 20:21 - Port 5 mode bits"]
#[inline (always)] pub fn mode5 (& self) -> Mode5R { Mode5R :: new (((self . bits >> 20) & 3) as u8) }
#[doc = "Bits 22:23 - Port 5 configuration bits"]
#[inline (always)] pub fn cnf5 (& self) -> Cnf5R { Cnf5R :: new (((self . bits >> 22) & 3) as u8) }
#[doc = "Bits 24:25 - Port 6 mode bits"]
#[inline (always)] pub fn mode6 (& self) -> Mode6R { Mode6R :: new (((self . bits >> 24) & 3) as u8) }
#[doc = "Bits 26:27 - Port 6 configuration bits"]
#[inline (always)] pub fn cnf6 (& self) -> Cnf6R { Cnf6R :: new (((self . bits >> 26) & 3) as u8) }
#[doc = "Bits 28:29 - Port 7 mode bits"]
#[inline (always)] pub fn mode7 (& self) -> Mode7R { Mode7R :: new (((self . bits >> 28) & 3) as u8) }
#[doc = "Bits 30:31 - Port 7 configuration bits"]
#[inline (always)] pub fn cnf7 (& self) -> Cnf7R { Cnf7R :: new (((self . bits >> 30) & 3) as u8) } } impl W {
#[doc = "Bits 0:1 - Port 0 mode bits"]
#[inline (always)] pub fn mode0 (& mut self) -> Mode0W < '_ , CrlSpec > { Mode0W :: new (self , 0) }
#[doc = "Bits 2:3 - Port 0 configuration bits"]
#[inline (always)] pub fn cnf0 (& mut self) -> Cnf0W < '_ , CrlSpec > { Cnf0W :: new (self , 2) }
#[doc = "Bits 4:5 - Port 1 mode bits"]
#[inline (always)] pub fn mode1 (& mut self) -> Mode1W < '_ , CrlSpec > { Mode1W :: new (self , 4) }
#[doc = "Bits 6:7 - Port 1 configuration bits"]
#[inline (always)] pub fn cnf1 (& mut self) -> Cnf1W < '_ , CrlSpec > { Cnf1W :: new (self , 6) }
#[doc = "Bits 8:9 - Port 2 mode bits"]
#[inline (always)] pub fn mode2 (& mut self) -> Mode2W < '_ , CrlSpec > { Mode2W :: new (self , 8) }
#[doc = "Bits 10:11 - Port 2 configuration bits"]
#[inline (always)] pub fn cnf2 (& mut self) -> Cnf2W < '_ , CrlSpec > { Cnf2W :: new (self , 10) }
#[doc = "Bits 12:13 - Port 3 mode bits"]
#[inline (always)] pub fn mode3 (& mut self) -> Mode3W < '_ , CrlSpec > { Mode3W :: new (self , 12) }
#[doc = "Bits 14:15 - Port 3 configuration bits"]
#[inline (always)] pub fn cnf3 (& mut self) -> Cnf3W < '_ , CrlSpec > { Cnf3W :: new (self , 14) }
#[doc = "Bits 16:17 - Port 4 mode bits"]
#[inline (always)] pub fn mode4 (& mut self) -> Mode4W < '_ , CrlSpec > { Mode4W :: new (self , 16) }
#[doc = "Bits 18:19 - Port 4 configuration bits"]
#[inline (always)] pub fn cnf4 (& mut self) -> Cnf4W < '_ , CrlSpec > { Cnf4W :: new (self , 18) }
#[doc = "Bits 20:21 - Port 5 mode bits"]
#[inline (always)] pub fn mode5 (& mut self) -> Mode5W < '_ , CrlSpec > { Mode5W :: new (self , 20) }
#[doc = "Bits 22:23 - Port 5 configuration bits"]
#[inline (always)] pub fn cnf5 (& mut self) -> Cnf5W < '_ , CrlSpec > { Cnf5W :: new (self , 22) }
#[doc = "Bits 24:25 - Port 6 mode bits"]
#[inline (always)] pub fn mode6 (& mut self) -> Mode6W < '_ , CrlSpec > { Mode6W :: new (self , 24) }
#[doc = "Bits 26:27 - Port 6 configuration bits"]
#[inline (always)] pub fn cnf6 (& mut self) -> Cnf6W < '_ , CrlSpec > { Cnf6W :: new (self , 26) }
#[doc = "Bits 28:29 - Port 7 mode bits"]
#[inline (always)] pub fn mode7 (& mut self) -> Mode7W < '_ , CrlSpec > { Mode7W :: new (self , 28) }
#[doc = "Bits 30:31 - Port 7 configuration bits"]
#[inline (always)] pub fn cnf7 (& mut self) -> Cnf7W < '_ , CrlSpec > { Cnf7W :: new (self , 30) } }
#[doc = "configuration low register\n\nYou can [`read`](crate::Reg::read) this register and get [`crl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`crl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrlSpec ; impl crate :: RegisterSpec for CrlSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`crl::R`](R) reader structure"] impl crate :: Readable for CrlSpec { }
#[doc = "`write(|w| ..)` method takes [`crl::W`](W) writer structure"] impl crate :: Writable for CrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CRL to value 0x4444_4444"] impl crate :: Resettable for CrlSpec { const RESET_VALUE : u32 = 0x4444_4444 ; } }
#[doc = "CRH (rw) register accessor: configuration high register\n\nYou can [`read`](crate::Reg::read) this register and get [`crh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`crh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@crh`] module"]
#[doc (alias = "CRH")] pub type Crh = crate :: Reg < crh :: CrhSpec > ;
#[doc = "configuration high register"] pub mod crh {
#[doc = "Register `CRH` reader"] pub type R = crate :: R < CrhSpec > ;
#[doc = "Register `CRH` writer"] pub type W = crate :: W < CrhSpec > ;
#[doc = "Field `MODE8` reader - Port 8 mode bits"] pub type Mode8R = crate :: FieldReader ;
#[doc = "Field `MODE8` writer - Port 8 mode bits"] pub type Mode8W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF8` reader - Port 8 configuration bits"] pub type Cnf8R = crate :: FieldReader ;
#[doc = "Field `CNF8` writer - Port 8 configuration bits"] pub type Cnf8W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE9` reader - Port 9 mode bits"] pub type Mode9R = crate :: FieldReader ;
#[doc = "Field `MODE9` writer - Port 9 mode bits"] pub type Mode9W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF9` reader - Port 9 configuration bits"] pub type Cnf9R = crate :: FieldReader ;
#[doc = "Field `CNF9` writer - Port 9 configuration bits"] pub type Cnf9W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE10` reader - Port 10 mode bits"] pub type Mode10R = crate :: FieldReader ;
#[doc = "Field `MODE10` writer - Port 10 mode bits"] pub type Mode10W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF10` reader - Port 10 configuration bits"] pub type Cnf10R = crate :: FieldReader ;
#[doc = "Field `CNF10` writer - Port 10 configuration bits"] pub type Cnf10W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE11` reader - Port 11 mode bits"] pub type Mode11R = crate :: FieldReader ;
#[doc = "Field `MODE11` writer - Port 11 mode bits"] pub type Mode11W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF11` reader - Port 11 configuration bits"] pub type Cnf11R = crate :: FieldReader ;
#[doc = "Field `CNF11` writer - Port 11 configuration bits"] pub type Cnf11W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE12` reader - Port 12 mode bits"] pub type Mode12R = crate :: FieldReader ;
#[doc = "Field `MODE12` writer - Port 12 mode bits"] pub type Mode12W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF12` reader - Port 12 configuration bits"] pub type Cnf12R = crate :: FieldReader ;
#[doc = "Field `CNF12` writer - Port 12 configuration bits"] pub type Cnf12W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE13` reader - Port 13 mode bits"] pub type Mode13R = crate :: FieldReader ;
#[doc = "Field `MODE13` writer - Port 13 mode bits"] pub type Mode13W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF13` reader - Port 13 configuration bits"] pub type Cnf13R = crate :: FieldReader ;
#[doc = "Field `CNF13` writer - Port 13 configuration bits"] pub type Cnf13W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE14` reader - Port 14 mode bits"] pub type Mode14R = crate :: FieldReader ;
#[doc = "Field `MODE14` writer - Port 14 mode bits"] pub type Mode14W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF14` reader - Port 14 configuration bits"] pub type Cnf14R = crate :: FieldReader ;
#[doc = "Field `CNF14` writer - Port 14 configuration bits"] pub type Cnf14W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MODE15` reader - Port 15 mode bits"] pub type Mode15R = crate :: FieldReader ;
#[doc = "Field `MODE15` writer - Port 15 mode bits"] pub type Mode15W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CNF15` reader - Port 15 configuration bits"] pub type Cnf15R = crate :: FieldReader ;
#[doc = "Field `CNF15` writer - Port 15 configuration bits"] pub type Cnf15W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bits 0:1 - Port 8 mode bits"]
#[inline (always)] pub fn mode8 (& self) -> Mode8R { Mode8R :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Port 8 configuration bits"]
#[inline (always)] pub fn cnf8 (& self) -> Cnf8R { Cnf8R :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:5 - Port 9 mode bits"]
#[inline (always)] pub fn mode9 (& self) -> Mode9R { Mode9R :: new (((self . bits >> 4) & 3) as u8) }
#[doc = "Bits 6:7 - Port 9 configuration bits"]
#[inline (always)] pub fn cnf9 (& self) -> Cnf9R { Cnf9R :: new (((self . bits >> 6) & 3) as u8) }
#[doc = "Bits 8:9 - Port 10 mode bits"]
#[inline (always)] pub fn mode10 (& self) -> Mode10R { Mode10R :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - Port 10 configuration bits"]
#[inline (always)] pub fn cnf10 (& self) -> Cnf10R { Cnf10R :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:13 - Port 11 mode bits"]
#[inline (always)] pub fn mode11 (& self) -> Mode11R { Mode11R :: new (((self . bits >> 12) & 3) as u8) }
#[doc = "Bits 14:15 - Port 11 configuration bits"]
#[inline (always)] pub fn cnf11 (& self) -> Cnf11R { Cnf11R :: new (((self . bits >> 14) & 3) as u8) }
#[doc = "Bits 16:17 - Port 12 mode bits"]
#[inline (always)] pub fn mode12 (& self) -> Mode12R { Mode12R :: new (((self . bits >> 16) & 3) as u8) }
#[doc = "Bits 18:19 - Port 12 configuration bits"]
#[inline (always)] pub fn cnf12 (& self) -> Cnf12R { Cnf12R :: new (((self . bits >> 18) & 3) as u8) }
#[doc = "Bits 20:21 - Port 13 mode bits"]
#[inline (always)] pub fn mode13 (& self) -> Mode13R { Mode13R :: new (((self . bits >> 20) & 3) as u8) }
#[doc = "Bits 22:23 - Port 13 configuration bits"]
#[inline (always)] pub fn cnf13 (& self) -> Cnf13R { Cnf13R :: new (((self . bits >> 22) & 3) as u8) }
#[doc = "Bits 24:25 - Port 14 mode bits"]
#[inline (always)] pub fn mode14 (& self) -> Mode14R { Mode14R :: new (((self . bits >> 24) & 3) as u8) }
#[doc = "Bits 26:27 - Port 14 configuration bits"]
#[inline (always)] pub fn cnf14 (& self) -> Cnf14R { Cnf14R :: new (((self . bits >> 26) & 3) as u8) }
#[doc = "Bits 28:29 - Port 15 mode bits"]
#[inline (always)] pub fn mode15 (& self) -> Mode15R { Mode15R :: new (((self . bits >> 28) & 3) as u8) }
#[doc = "Bits 30:31 - Port 15 configuration bits"]
#[inline (always)] pub fn cnf15 (& self) -> Cnf15R { Cnf15R :: new (((self . bits >> 30) & 3) as u8) } } impl W {
#[doc = "Bits 0:1 - Port 8 mode bits"]
#[inline (always)] pub fn mode8 (& mut self) -> Mode8W < '_ , CrhSpec > { Mode8W :: new (self , 0) }
#[doc = "Bits 2:3 - Port 8 configuration bits"]
#[inline (always)] pub fn cnf8 (& mut self) -> Cnf8W < '_ , CrhSpec > { Cnf8W :: new (self , 2) }
#[doc = "Bits 4:5 - Port 9 mode bits"]
#[inline (always)] pub fn mode9 (& mut self) -> Mode9W < '_ , CrhSpec > { Mode9W :: new (self , 4) }
#[doc = "Bits 6:7 - Port 9 configuration bits"]
#[inline (always)] pub fn cnf9 (& mut self) -> Cnf9W < '_ , CrhSpec > { Cnf9W :: new (self , 6) }
#[doc = "Bits 8:9 - Port 10 mode bits"]
#[inline (always)] pub fn mode10 (& mut self) -> Mode10W < '_ , CrhSpec > { Mode10W :: new (self , 8) }
#[doc = "Bits 10:11 - Port 10 configuration bits"]
#[inline (always)] pub fn cnf10 (& mut self) -> Cnf10W < '_ , CrhSpec > { Cnf10W :: new (self , 10) }
#[doc = "Bits 12:13 - Port 11 mode bits"]
#[inline (always)] pub fn mode11 (& mut self) -> Mode11W < '_ , CrhSpec > { Mode11W :: new (self , 12) }
#[doc = "Bits 14:15 - Port 11 configuration bits"]
#[inline (always)] pub fn cnf11 (& mut self) -> Cnf11W < '_ , CrhSpec > { Cnf11W :: new (self , 14) }
#[doc = "Bits 16:17 - Port 12 mode bits"]
#[inline (always)] pub fn mode12 (& mut self) -> Mode12W < '_ , CrhSpec > { Mode12W :: new (self , 16) }
#[doc = "Bits 18:19 - Port 12 configuration bits"]
#[inline (always)] pub fn cnf12 (& mut self) -> Cnf12W < '_ , CrhSpec > { Cnf12W :: new (self , 18) }
#[doc = "Bits 20:21 - Port 13 mode bits"]
#[inline (always)] pub fn mode13 (& mut self) -> Mode13W < '_ , CrhSpec > { Mode13W :: new (self , 20) }
#[doc = "Bits 22:23 - Port 13 configuration bits"]
#[inline (always)] pub fn cnf13 (& mut self) -> Cnf13W < '_ , CrhSpec > { Cnf13W :: new (self , 22) }
#[doc = "Bits 24:25 - Port 14 mode bits"]
#[inline (always)] pub fn mode14 (& mut self) -> Mode14W < '_ , CrhSpec > { Mode14W :: new (self , 24) }
#[doc = "Bits 26:27 - Port 14 configuration bits"]
#[inline (always)] pub fn cnf14 (& mut self) -> Cnf14W < '_ , CrhSpec > { Cnf14W :: new (self , 26) }
#[doc = "Bits 28:29 - Port 15 mode bits"]
#[inline (always)] pub fn mode15 (& mut self) -> Mode15W < '_ , CrhSpec > { Mode15W :: new (self , 28) }
#[doc = "Bits 30:31 - Port 15 configuration bits"]
#[inline (always)] pub fn cnf15 (& mut self) -> Cnf15W < '_ , CrhSpec > { Cnf15W :: new (self , 30) } }
#[doc = "configuration high register\n\nYou can [`read`](crate::Reg::read) this register and get [`crh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`crh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrhSpec ; impl crate :: RegisterSpec for CrhSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`crh::R`](R) reader structure"] impl crate :: Readable for CrhSpec { }
#[doc = "`write(|w| ..)` method takes [`crh::W`](W) writer structure"] impl crate :: Writable for CrhSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CRH to value 0x4444_4444"] impl crate :: Resettable for CrhSpec { const RESET_VALUE : u32 = 0x4444_4444 ; } }
#[doc = "IDR (r) register accessor: input data register\n\nYou can [`read`](crate::Reg::read) this register and get [`idr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idr`] module"]
#[doc (alias = "IDR")] pub type Idr = crate :: Reg < idr :: IdrSpec > ;
#[doc = "input data register"] pub mod idr {
#[doc = "Register `IDR` reader"] pub type R = crate :: R < IdrSpec > ;
#[doc = "Field `IDR` reader - Port input data"] pub type IdrR = crate :: FieldReader < u16 > ; impl R {
#[doc = "Bits 0:15 - Port input data"]
#[inline (always)] pub fn idr (& self) -> IdrR { IdrR :: new ((self . bits & 0xffff) as u16) } }
#[doc = "input data register\n\nYou can [`read`](crate::Reg::read) this register and get [`idr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IdrSpec ; impl crate :: RegisterSpec for IdrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`idr::R`](R) reader structure"] impl crate :: Readable for IdrSpec { }
#[doc = "`reset()` method sets IDR to value 0"] impl crate :: Resettable for IdrSpec { } }
#[doc = "ODR (rw) register accessor: output data register\n\nYou can [`read`](crate::Reg::read) this register and get [`odr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`odr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@odr`] module"]
#[doc (alias = "ODR")] pub type Odr = crate :: Reg < odr :: OdrSpec > ;
#[doc = "output data register"] pub mod odr {
#[doc = "Register `ODR` reader"] pub type R = crate :: R < OdrSpec > ;
#[doc = "Register `ODR` writer"] pub type W = crate :: W < OdrSpec > ;
#[doc = "Field `ODR` reader - Port output data"] pub type OdrR = crate :: FieldReader < u16 > ;
#[doc = "Field `ODR` writer - Port output data"] pub type OdrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Port output data"]
#[inline (always)] pub fn odr (& self) -> OdrR { OdrR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Port output data"]
#[inline (always)] pub fn odr (& mut self) -> OdrW < '_ , OdrSpec > { OdrW :: new (self , 0) } }
#[doc = "output data register\n\nYou can [`read`](crate::Reg::read) this register and get [`odr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`odr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct OdrSpec ; impl crate :: RegisterSpec for OdrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`odr::R`](R) reader structure"] impl crate :: Readable for OdrSpec { }
#[doc = "`write(|w| ..)` method takes [`odr::W`](W) writer structure"] impl crate :: Writable for OdrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ODR to value 0"] impl crate :: Resettable for OdrSpec { } }
#[doc = "BSRR (w) register accessor: bit set/reset register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bsrr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bsrr`] module"]
#[doc (alias = "BSRR")] pub type Bsrr = crate :: Reg < bsrr :: BsrrSpec > ;
#[doc = "bit set/reset register"] pub mod bsrr {
#[doc = "Register `BSRR` writer"] pub type W = crate :: W < BsrrSpec > ;
#[doc = "Field `BS0` writer - Port x Set bit 0"] pub type Bs0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS1` writer - Port x Set bit 1"] pub type Bs1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS2` writer - Port x Set bit 2"] pub type Bs2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS3` writer - Port x Set bit 3"] pub type Bs3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS4` writer - Port x Set bit 4"] pub type Bs4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS5` writer - Port x Set bit 5"] pub type Bs5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS6` writer - Port x Set bit 6"] pub type Bs6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS7` writer - Port x Set bit 7"] pub type Bs7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS8` writer - Port x Set bit 8"] pub type Bs8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS9` writer - Port x Set bit 9"] pub type Bs9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS10` writer - Port x Set bit 10"] pub type Bs10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS11` writer - Port x Set bit 11"] pub type Bs11W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS12` writer - Port x Set bit 12"] pub type Bs12W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS13` writer - Port x Set bit 13"] pub type Bs13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS14` writer - Port x Set bit 14"] pub type Bs14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BS15` writer - Port x Set bit 15"] pub type Bs15W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR0` writer - Port x Reset bit 0"] pub type Br0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR1` writer - Port x Reset bit 1"] pub type Br1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR2` writer - Port x Reset bit 2"] pub type Br2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR3` writer - Port x Reset bit 3"] pub type Br3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR4` writer - Port x Reset bit 4"] pub type Br4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR5` writer - Port x Reset bit 5"] pub type Br5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR6` writer - Port x Reset bit 6"] pub type Br6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR7` writer - Port x Reset bit 7"] pub type Br7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR8` writer - Port x Reset bit 8"] pub type Br8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR9` writer - Port x Reset bit 9"] pub type Br9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR10` writer - Port x Reset bit 10"] pub type Br10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR11` writer - Port x Reset bit 11"] pub type Br11W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR12` writer - Port x Reset bit 12"] pub type Br12W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR13` writer - Port x Reset bit 13"] pub type Br13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR14` writer - Port x Reset bit 14"] pub type Br14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR15` writer - Port x Reset bit 15"] pub type Br15W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - Port x Set bit 0"]
#[inline (always)] pub fn bs0 (& mut self) -> Bs0W < '_ , BsrrSpec > { Bs0W :: new (self , 0) }
#[doc = "Bit 1 - Port x Set bit 1"]
#[inline (always)] pub fn bs1 (& mut self) -> Bs1W < '_ , BsrrSpec > { Bs1W :: new (self , 1) }
#[doc = "Bit 2 - Port x Set bit 2"]
#[inline (always)] pub fn bs2 (& mut self) -> Bs2W < '_ , BsrrSpec > { Bs2W :: new (self , 2) }
#[doc = "Bit 3 - Port x Set bit 3"]
#[inline (always)] pub fn bs3 (& mut self) -> Bs3W < '_ , BsrrSpec > { Bs3W :: new (self , 3) }
#[doc = "Bit 4 - Port x Set bit 4"]
#[inline (always)] pub fn bs4 (& mut self) -> Bs4W < '_ , BsrrSpec > { Bs4W :: new (self , 4) }
#[doc = "Bit 5 - Port x Set bit 5"]
#[inline (always)] pub fn bs5 (& mut self) -> Bs5W < '_ , BsrrSpec > { Bs5W :: new (self , 5) }
#[doc = "Bit 6 - Port x Set bit 6"]
#[inline (always)] pub fn bs6 (& mut self) -> Bs6W < '_ , BsrrSpec > { Bs6W :: new (self , 6) }
#[doc = "Bit 7 - Port x Set bit 7"]
#[inline (always)] pub fn bs7 (& mut self) -> Bs7W < '_ , BsrrSpec > { Bs7W :: new (self , 7) }
#[doc = "Bit 8 - Port x Set bit 8"]
#[inline (always)] pub fn bs8 (& mut self) -> Bs8W < '_ , BsrrSpec > { Bs8W :: new (self , 8) }
#[doc = "Bit 9 - Port x Set bit 9"]
#[inline (always)] pub fn bs9 (& mut self) -> Bs9W < '_ , BsrrSpec > { Bs9W :: new (self , 9) }
#[doc = "Bit 10 - Port x Set bit 10"]
#[inline (always)] pub fn bs10 (& mut self) -> Bs10W < '_ , BsrrSpec > { Bs10W :: new (self , 10) }
#[doc = "Bit 11 - Port x Set bit 11"]
#[inline (always)] pub fn bs11 (& mut self) -> Bs11W < '_ , BsrrSpec > { Bs11W :: new (self , 11) }
#[doc = "Bit 12 - Port x Set bit 12"]
#[inline (always)] pub fn bs12 (& mut self) -> Bs12W < '_ , BsrrSpec > { Bs12W :: new (self , 12) }
#[doc = "Bit 13 - Port x Set bit 13"]
#[inline (always)] pub fn bs13 (& mut self) -> Bs13W < '_ , BsrrSpec > { Bs13W :: new (self , 13) }
#[doc = "Bit 14 - Port x Set bit 14"]
#[inline (always)] pub fn bs14 (& mut self) -> Bs14W < '_ , BsrrSpec > { Bs14W :: new (self , 14) }
#[doc = "Bit 15 - Port x Set bit 15"]
#[inline (always)] pub fn bs15 (& mut self) -> Bs15W < '_ , BsrrSpec > { Bs15W :: new (self , 15) }
#[doc = "Bit 16 - Port x Reset bit 0"]
#[inline (always)] pub fn br0 (& mut self) -> Br0W < '_ , BsrrSpec > { Br0W :: new (self , 16) }
#[doc = "Bit 17 - Port x Reset bit 1"]
#[inline (always)] pub fn br1 (& mut self) -> Br1W < '_ , BsrrSpec > { Br1W :: new (self , 17) }
#[doc = "Bit 18 - Port x Reset bit 2"]
#[inline (always)] pub fn br2 (& mut self) -> Br2W < '_ , BsrrSpec > { Br2W :: new (self , 18) }
#[doc = "Bit 19 - Port x Reset bit 3"]
#[inline (always)] pub fn br3 (& mut self) -> Br3W < '_ , BsrrSpec > { Br3W :: new (self , 19) }
#[doc = "Bit 20 - Port x Reset bit 4"]
#[inline (always)] pub fn br4 (& mut self) -> Br4W < '_ , BsrrSpec > { Br4W :: new (self , 20) }
#[doc = "Bit 21 - Port x Reset bit 5"]
#[inline (always)] pub fn br5 (& mut self) -> Br5W < '_ , BsrrSpec > { Br5W :: new (self , 21) }
#[doc = "Bit 22 - Port x Reset bit 6"]
#[inline (always)] pub fn br6 (& mut self) -> Br6W < '_ , BsrrSpec > { Br6W :: new (self , 22) }
#[doc = "Bit 23 - Port x Reset bit 7"]
#[inline (always)] pub fn br7 (& mut self) -> Br7W < '_ , BsrrSpec > { Br7W :: new (self , 23) }
#[doc = "Bit 24 - Port x Reset bit 8"]
#[inline (always)] pub fn br8 (& mut self) -> Br8W < '_ , BsrrSpec > { Br8W :: new (self , 24) }
#[doc = "Bit 25 - Port x Reset bit 9"]
#[inline (always)] pub fn br9 (& mut self) -> Br9W < '_ , BsrrSpec > { Br9W :: new (self , 25) }
#[doc = "Bit 26 - Port x Reset bit 10"]
#[inline (always)] pub fn br10 (& mut self) -> Br10W < '_ , BsrrSpec > { Br10W :: new (self , 26) }
#[doc = "Bit 27 - Port x Reset bit 11"]
#[inline (always)] pub fn br11 (& mut self) -> Br11W < '_ , BsrrSpec > { Br11W :: new (self , 27) }
#[doc = "Bit 28 - Port x Reset bit 12"]
#[inline (always)] pub fn br12 (& mut self) -> Br12W < '_ , BsrrSpec > { Br12W :: new (self , 28) }
#[doc = "Bit 29 - Port x Reset bit 13"]
#[inline (always)] pub fn br13 (& mut self) -> Br13W < '_ , BsrrSpec > { Br13W :: new (self , 29) }
#[doc = "Bit 30 - Port x Reset bit 14"]
#[inline (always)] pub fn br14 (& mut self) -> Br14W < '_ , BsrrSpec > { Br14W :: new (self , 30) }
#[doc = "Bit 31 - Port x Reset bit 15"]
#[inline (always)] pub fn br15 (& mut self) -> Br15W < '_ , BsrrSpec > { Br15W :: new (self , 31) } }
#[doc = "bit set/reset register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bsrr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BsrrSpec ; impl crate :: RegisterSpec for BsrrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`bsrr::W`](W) writer structure"] impl crate :: Writable for BsrrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets BSRR to value 0"] impl crate :: Resettable for BsrrSpec { } }
#[doc = "BRR (w) register accessor: bit reset register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`brr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@brr`] module"]
#[doc (alias = "BRR")] pub type Brr = crate :: Reg < brr :: BrrSpec > ;
#[doc = "bit reset register"] pub mod brr {
#[doc = "Register `BRR` writer"] pub type W = crate :: W < BrrSpec > ;
#[doc = "Field `BR0` writer - Port x Reset bit 0"] pub type Br0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR1` writer - Port x Reset bit 1"] pub type Br1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR2` writer - Port x Reset bit 2"] pub type Br2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR3` writer - Port x Reset bit 3"] pub type Br3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR4` writer - Port x Reset bit 4"] pub type Br4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR5` writer - Port x Reset bit 5"] pub type Br5W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR6` writer - Port x Reset bit 6"] pub type Br6W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR7` writer - Port x Reset bit 7"] pub type Br7W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR8` writer - Port x Reset bit 8"] pub type Br8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR9` writer - Port x Reset bit 9"] pub type Br9W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR10` writer - Port x Reset bit 10"] pub type Br10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR11` writer - Port x Reset bit 11"] pub type Br11W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR12` writer - Port x Reset bit 12"] pub type Br12W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR13` writer - Port x Reset bit 13"] pub type Br13W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR14` writer - Port x Reset bit 14"] pub type Br14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BR15` writer - Port x Reset bit 15"] pub type Br15W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - Port x Reset bit 0"]
#[inline (always)] pub fn br0 (& mut self) -> Br0W < '_ , BrrSpec > { Br0W :: new (self , 0) }
#[doc = "Bit 1 - Port x Reset bit 1"]
#[inline (always)] pub fn br1 (& mut self) -> Br1W < '_ , BrrSpec > { Br1W :: new (self , 1) }
#[doc = "Bit 2 - Port x Reset bit 2"]
#[inline (always)] pub fn br2 (& mut self) -> Br2W < '_ , BrrSpec > { Br2W :: new (self , 2) }
#[doc = "Bit 3 - Port x Reset bit 3"]
#[inline (always)] pub fn br3 (& mut self) -> Br3W < '_ , BrrSpec > { Br3W :: new (self , 3) }
#[doc = "Bit 4 - Port x Reset bit 4"]
#[inline (always)] pub fn br4 (& mut self) -> Br4W < '_ , BrrSpec > { Br4W :: new (self , 4) }
#[doc = "Bit 5 - Port x Reset bit 5"]
#[inline (always)] pub fn br5 (& mut self) -> Br5W < '_ , BrrSpec > { Br5W :: new (self , 5) }
#[doc = "Bit 6 - Port x Reset bit 6"]
#[inline (always)] pub fn br6 (& mut self) -> Br6W < '_ , BrrSpec > { Br6W :: new (self , 6) }
#[doc = "Bit 7 - Port x Reset bit 7"]
#[inline (always)] pub fn br7 (& mut self) -> Br7W < '_ , BrrSpec > { Br7W :: new (self , 7) }
#[doc = "Bit 8 - Port x Reset bit 8"]
#[inline (always)] pub fn br8 (& mut self) -> Br8W < '_ , BrrSpec > { Br8W :: new (self , 8) }
#[doc = "Bit 9 - Port x Reset bit 9"]
#[inline (always)] pub fn br9 (& mut self) -> Br9W < '_ , BrrSpec > { Br9W :: new (self , 9) }
#[doc = "Bit 10 - Port x Reset bit 10"]
#[inline (always)] pub fn br10 (& mut self) -> Br10W < '_ , BrrSpec > { Br10W :: new (self , 10) }
#[doc = "Bit 11 - Port x Reset bit 11"]
#[inline (always)] pub fn br11 (& mut self) -> Br11W < '_ , BrrSpec > { Br11W :: new (self , 11) }
#[doc = "Bit 12 - Port x Reset bit 12"]
#[inline (always)] pub fn br12 (& mut self) -> Br12W < '_ , BrrSpec > { Br12W :: new (self , 12) }
#[doc = "Bit 13 - Port x Reset bit 13"]
#[inline (always)] pub fn br13 (& mut self) -> Br13W < '_ , BrrSpec > { Br13W :: new (self , 13) }
#[doc = "Bit 14 - Port x Reset bit 14"]
#[inline (always)] pub fn br14 (& mut self) -> Br14W < '_ , BrrSpec > { Br14W :: new (self , 14) }
#[doc = "Bit 15 - Port x Reset bit 15"]
#[inline (always)] pub fn br15 (& mut self) -> Br15W < '_ , BrrSpec > { Br15W :: new (self , 15) } }
#[doc = "bit reset register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`brr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BrrSpec ; impl crate :: RegisterSpec for BrrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`brr::W`](W) writer structure"] impl crate :: Writable for BrrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets BRR to value 0"] impl crate :: Resettable for BrrSpec { } }
#[doc = "LCKR (rw) register accessor: Port configuration lock register\n\nYou can [`read`](crate::Reg::read) this register and get [`lckr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`lckr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@lckr`] module"]
#[doc (alias = "LCKR")] pub type Lckr = crate :: Reg < lckr :: LckrSpec > ;
#[doc = "Port configuration lock register"] pub mod lckr {
#[doc = "Register `LCKR` reader"] pub type R = crate :: R < LckrSpec > ;
#[doc = "Register `LCKR` writer"] pub type W = crate :: W < LckrSpec > ;
#[doc = "Field `LCK` reader - Port x Lock bit y"] pub type LckR = crate :: FieldReader < u16 > ;
#[doc = "Field `LCK` writer - Port x Lock bit y"] pub type LckW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ;
#[doc = "Field `LCKK` reader - Lock key"] pub type LckkR = crate :: BitReader ;
#[doc = "Field `LCKK` writer - Lock key"] pub type LckkW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:15 - Port x Lock bit y"]
#[inline (always)] pub fn lck (& self) -> LckR { LckR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bit 16 - Lock key"]
#[inline (always)] pub fn lckk (& self) -> LckkR { LckkR :: new (((self . bits >> 16) & 1) != 0) } } impl W {
#[doc = "Bits 0:15 - Port x Lock bit y"]
#[inline (always)] pub fn lck (& mut self) -> LckW < '_ , LckrSpec > { LckW :: new (self , 0) }
#[doc = "Bit 16 - Lock key"]
#[inline (always)] pub fn lckk (& mut self) -> LckkW < '_ , LckrSpec > { LckkW :: new (self , 16) } }
#[doc = "Port configuration lock register\n\nYou can [`read`](crate::Reg::read) this register and get [`lckr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`lckr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct LckrSpec ; impl crate :: RegisterSpec for LckrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`lckr::R`](R) reader structure"] impl crate :: Readable for LckrSpec { }
#[doc = "`write(|w| ..)` method takes [`lckr::W`](W) writer structure"] impl crate :: Writable for LckrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets LCKR to value 0"] impl crate :: Resettable for LckrSpec { } }
#[doc = "DCR (rw) register accessor: Port output open drain control register\n\nYou can [`read`](crate::Reg::read) this register and get [`dcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dcr`] module"]
#[doc (alias = "DCR")] pub type Dcr = crate :: Reg < dcr :: DcrSpec > ;
#[doc = "Port output open drain control register"] pub mod dcr {
#[doc = "Register `DCR` reader"] pub type R = crate :: R < DcrSpec > ;
#[doc = "Register `DCR` writer"] pub type W = crate :: W < DcrSpec > ;
#[doc = "Field `PX0` reader - PX0"] pub type Px0R = crate :: FieldReader ;
#[doc = "Field `PX0` writer - PX0"] pub type Px0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX1` reader - PX1"] pub type Px1R = crate :: FieldReader ;
#[doc = "Field `PX1` writer - PX1"] pub type Px1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX2` reader - PX2"] pub type Px2R = crate :: FieldReader ;
#[doc = "Field `PX2` writer - PX2"] pub type Px2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX3` reader - PX3"] pub type Px3R = crate :: FieldReader ;
#[doc = "Field `PX3` writer - PX3"] pub type Px3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX4` reader - PX4"] pub type Px4R = crate :: FieldReader ;
#[doc = "Field `PX4` writer - PX4"] pub type Px4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX5` reader - PX5"] pub type Px5R = crate :: FieldReader ;
#[doc = "Field `PX5` writer - PX5"] pub type Px5W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX6` reader - PX6"] pub type Px6R = crate :: FieldReader ;
#[doc = "Field `PX6` writer - PX6"] pub type Px6W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX7` reader - PX7"] pub type Px7R = crate :: FieldReader ;
#[doc = "Field `PX7` writer - PX7"] pub type Px7W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX8` reader - PX8"] pub type Px8R = crate :: FieldReader ;
#[doc = "Field `PX8` writer - PX8"] pub type Px8W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX9` reader - PX9"] pub type Px9R = crate :: FieldReader ;
#[doc = "Field `PX9` writer - PX9"] pub type Px9W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX10` reader - PX10"] pub type Px10R = crate :: FieldReader ;
#[doc = "Field `PX10` writer - PX10"] pub type Px10W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX11` reader - PX11"] pub type Px11R = crate :: FieldReader ;
#[doc = "Field `PX11` writer - PX11"] pub type Px11W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX12` reader - PX12"] pub type Px12R = crate :: FieldReader ;
#[doc = "Field `PX12` writer - PX12"] pub type Px12W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX13` reader - PX13"] pub type Px13R = crate :: FieldReader ;
#[doc = "Field `PX13` writer - PX13"] pub type Px13W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX14` reader - PX14"] pub type Px14R = crate :: FieldReader ;
#[doc = "Field `PX14` writer - PX14"] pub type Px14W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `PX15` reader - PX15"] pub type Px15R = crate :: FieldReader ;
#[doc = "Field `PX15` writer - PX15"] pub type Px15W < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bits 0:1 - PX0"]
#[inline (always)] pub fn px0 (& self) -> Px0R { Px0R :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - PX1"]
#[inline (always)] pub fn px1 (& self) -> Px1R { Px1R :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:5 - PX2"]
#[inline (always)] pub fn px2 (& self) -> Px2R { Px2R :: new (((self . bits >> 4) & 3) as u8) }
#[doc = "Bits 6:7 - PX3"]
#[inline (always)] pub fn px3 (& self) -> Px3R { Px3R :: new (((self . bits >> 6) & 3) as u8) }
#[doc = "Bits 8:9 - PX4"]
#[inline (always)] pub fn px4 (& self) -> Px4R { Px4R :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - PX5"]
#[inline (always)] pub fn px5 (& self) -> Px5R { Px5R :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:13 - PX6"]
#[inline (always)] pub fn px6 (& self) -> Px6R { Px6R :: new (((self . bits >> 12) & 3) as u8) }
#[doc = "Bits 14:15 - PX7"]
#[inline (always)] pub fn px7 (& self) -> Px7R { Px7R :: new (((self . bits >> 14) & 3) as u8) }
#[doc = "Bits 16:17 - PX8"]
#[inline (always)] pub fn px8 (& self) -> Px8R { Px8R :: new (((self . bits >> 16) & 3) as u8) }
#[doc = "Bits 18:19 - PX9"]
#[inline (always)] pub fn px9 (& self) -> Px9R { Px9R :: new (((self . bits >> 18) & 3) as u8) }
#[doc = "Bits 20:21 - PX10"]
#[inline (always)] pub fn px10 (& self) -> Px10R { Px10R :: new (((self . bits >> 20) & 3) as u8) }
#[doc = "Bits 22:23 - PX11"]
#[inline (always)] pub fn px11 (& self) -> Px11R { Px11R :: new (((self . bits >> 22) & 3) as u8) }
#[doc = "Bits 24:25 - PX12"]
#[inline (always)] pub fn px12 (& self) -> Px12R { Px12R :: new (((self . bits >> 24) & 3) as u8) }
#[doc = "Bits 26:27 - PX13"]
#[inline (always)] pub fn px13 (& self) -> Px13R { Px13R :: new (((self . bits >> 26) & 3) as u8) }
#[doc = "Bits 28:29 - PX14"]
#[inline (always)] pub fn px14 (& self) -> Px14R { Px14R :: new (((self . bits >> 28) & 3) as u8) }
#[doc = "Bits 30:31 - PX15"]
#[inline (always)] pub fn px15 (& self) -> Px15R { Px15R :: new (((self . bits >> 30) & 3) as u8) } } impl W {
#[doc = "Bits 0:1 - PX0"]
#[inline (always)] pub fn px0 (& mut self) -> Px0W < '_ , DcrSpec > { Px0W :: new (self , 0) }
#[doc = "Bits 2:3 - PX1"]
#[inline (always)] pub fn px1 (& mut self) -> Px1W < '_ , DcrSpec > { Px1W :: new (self , 2) }
#[doc = "Bits 4:5 - PX2"]
#[inline (always)] pub fn px2 (& mut self) -> Px2W < '_ , DcrSpec > { Px2W :: new (self , 4) }
#[doc = "Bits 6:7 - PX3"]
#[inline (always)] pub fn px3 (& mut self) -> Px3W < '_ , DcrSpec > { Px3W :: new (self , 6) }
#[doc = "Bits 8:9 - PX4"]
#[inline (always)] pub fn px4 (& mut self) -> Px4W < '_ , DcrSpec > { Px4W :: new (self , 8) }
#[doc = "Bits 10:11 - PX5"]
#[inline (always)] pub fn px5 (& mut self) -> Px5W < '_ , DcrSpec > { Px5W :: new (self , 10) }
#[doc = "Bits 12:13 - PX6"]
#[inline (always)] pub fn px6 (& mut self) -> Px6W < '_ , DcrSpec > { Px6W :: new (self , 12) }
#[doc = "Bits 14:15 - PX7"]
#[inline (always)] pub fn px7 (& mut self) -> Px7W < '_ , DcrSpec > { Px7W :: new (self , 14) }
#[doc = "Bits 16:17 - PX8"]
#[inline (always)] pub fn px8 (& mut self) -> Px8W < '_ , DcrSpec > { Px8W :: new (self , 16) }
#[doc = "Bits 18:19 - PX9"]
#[inline (always)] pub fn px9 (& mut self) -> Px9W < '_ , DcrSpec > { Px9W :: new (self , 18) }
#[doc = "Bits 20:21 - PX10"]
#[inline (always)] pub fn px10 (& mut self) -> Px10W < '_ , DcrSpec > { Px10W :: new (self , 20) }
#[doc = "Bits 22:23 - PX11"]
#[inline (always)] pub fn px11 (& mut self) -> Px11W < '_ , DcrSpec > { Px11W :: new (self , 22) }
#[doc = "Bits 24:25 - PX12"]
#[inline (always)] pub fn px12 (& mut self) -> Px12W < '_ , DcrSpec > { Px12W :: new (self , 24) }
#[doc = "Bits 26:27 - PX13"]
#[inline (always)] pub fn px13 (& mut self) -> Px13W < '_ , DcrSpec > { Px13W :: new (self , 26) }
#[doc = "Bits 28:29 - PX14"]
#[inline (always)] pub fn px14 (& mut self) -> Px14W < '_ , DcrSpec > { Px14W :: new (self , 28) }
#[doc = "Bits 30:31 - PX15"]
#[inline (always)] pub fn px15 (& mut self) -> Px15W < '_ , DcrSpec > { Px15W :: new (self , 30) } }
#[doc = "Port output open drain control register\n\nYou can [`read`](crate::Reg::read) this register and get [`dcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DcrSpec ; impl crate :: RegisterSpec for DcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dcr::R`](R) reader structure"] impl crate :: Readable for DcrSpec { }
#[doc = "`write(|w| ..)` method takes [`dcr::W`](W) writer structure"] impl crate :: Writable for DcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DCR to value 0"] impl crate :: Resettable for DcrSpec { } }
#[doc = "AFRL (rw) register accessor: Port Multiplexing Function Low Register\n\nYou can [`read`](crate::Reg::read) this register and get [`afrl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afrl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@afrl`] module"]
#[doc (alias = "AFRL")] pub type Afrl = crate :: Reg < afrl :: AfrlSpec > ;
#[doc = "Port Multiplexing Function Low Register"] pub mod afrl {
#[doc = "Register `AFRL` reader"] pub type R = crate :: R < AfrlSpec > ;
#[doc = "Register `AFRL` writer"] pub type W = crate :: W < AfrlSpec > ;
#[doc = "Field `AFR0` reader - Multiplexing function selection for bit 0 of portx"] pub type Afr0R = crate :: FieldReader ;
#[doc = "Field `AFR0` writer - Multiplexing function selection for bit 0 of portx"] pub type Afr0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR1` reader - Multiplexing function selection for bit 1 of portx"] pub type Afr1R = crate :: FieldReader ;
#[doc = "Field `AFR1` writer - Multiplexing function selection for bit 1 of portx"] pub type Afr1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR2` reader - Multiplexing function selection for bit 2 of portx"] pub type Afr2R = crate :: FieldReader ;
#[doc = "Field `AFR2` writer - Multiplexing function selection for bit 2 of portx"] pub type Afr2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR3` reader - Multiplexing function selection for bit 3 of portx"] pub type Afr3R = crate :: FieldReader ;
#[doc = "Field `AFR3` writer - Multiplexing function selection for bit 3 of portx"] pub type Afr3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR4` reader - Multiplexing function selection for bit 4 of portx"] pub type Afr4R = crate :: FieldReader ;
#[doc = "Field `AFR4` writer - Multiplexing function selection for bit 4 of portx"] pub type Afr4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR5` reader - Multiplexing function selection for bit 5 of portx"] pub type Afr5R = crate :: FieldReader ;
#[doc = "Field `AFR5` writer - Multiplexing function selection for bit 5 of portx"] pub type Afr5W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR6` reader - Multiplexing function selection for bit 6 of portx"] pub type Afr6R = crate :: FieldReader ;
#[doc = "Field `AFR6` writer - Multiplexing function selection for bit 6 of portx"] pub type Afr6W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR7` reader - Multiplexing function selection for bit 7 of portx"] pub type Afr7R = crate :: FieldReader ;
#[doc = "Field `AFR7` writer - Multiplexing function selection for bit 7 of portx"] pub type Afr7W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - Multiplexing function selection for bit 0 of portx"]
#[inline (always)] pub fn afr0 (& self) -> Afr0R { Afr0R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - Multiplexing function selection for bit 1 of portx"]
#[inline (always)] pub fn afr1 (& self) -> Afr1R { Afr1R :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:11 - Multiplexing function selection for bit 2 of portx"]
#[inline (always)] pub fn afr2 (& self) -> Afr2R { Afr2R :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:15 - Multiplexing function selection for bit 3 of portx"]
#[inline (always)] pub fn afr3 (& self) -> Afr3R { Afr3R :: new (((self . bits >> 12) & 0x0f) as u8) }
#[doc = "Bits 16:19 - Multiplexing function selection for bit 4 of portx"]
#[inline (always)] pub fn afr4 (& self) -> Afr4R { Afr4R :: new (((self . bits >> 16) & 0x0f) as u8) }
#[doc = "Bits 20:23 - Multiplexing function selection for bit 5 of portx"]
#[inline (always)] pub fn afr5 (& self) -> Afr5R { Afr5R :: new (((self . bits >> 20) & 0x0f) as u8) }
#[doc = "Bits 24:27 - Multiplexing function selection for bit 6 of portx"]
#[inline (always)] pub fn afr6 (& self) -> Afr6R { Afr6R :: new (((self . bits >> 24) & 0x0f) as u8) }
#[doc = "Bits 28:31 - Multiplexing function selection for bit 7 of portx"]
#[inline (always)] pub fn afr7 (& self) -> Afr7R { Afr7R :: new (((self . bits >> 28) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - Multiplexing function selection for bit 0 of portx"]
#[inline (always)] pub fn afr0 (& mut self) -> Afr0W < '_ , AfrlSpec > { Afr0W :: new (self , 0) }
#[doc = "Bits 4:7 - Multiplexing function selection for bit 1 of portx"]
#[inline (always)] pub fn afr1 (& mut self) -> Afr1W < '_ , AfrlSpec > { Afr1W :: new (self , 4) }
#[doc = "Bits 8:11 - Multiplexing function selection for bit 2 of portx"]
#[inline (always)] pub fn afr2 (& mut self) -> Afr2W < '_ , AfrlSpec > { Afr2W :: new (self , 8) }
#[doc = "Bits 12:15 - Multiplexing function selection for bit 3 of portx"]
#[inline (always)] pub fn afr3 (& mut self) -> Afr3W < '_ , AfrlSpec > { Afr3W :: new (self , 12) }
#[doc = "Bits 16:19 - Multiplexing function selection for bit 4 of portx"]
#[inline (always)] pub fn afr4 (& mut self) -> Afr4W < '_ , AfrlSpec > { Afr4W :: new (self , 16) }
#[doc = "Bits 20:23 - Multiplexing function selection for bit 5 of portx"]
#[inline (always)] pub fn afr5 (& mut self) -> Afr5W < '_ , AfrlSpec > { Afr5W :: new (self , 20) }
#[doc = "Bits 24:27 - Multiplexing function selection for bit 6 of portx"]
#[inline (always)] pub fn afr6 (& mut self) -> Afr6W < '_ , AfrlSpec > { Afr6W :: new (self , 24) }
#[doc = "Bits 28:31 - Multiplexing function selection for bit 7 of portx"]
#[inline (always)] pub fn afr7 (& mut self) -> Afr7W < '_ , AfrlSpec > { Afr7W :: new (self , 28) } }
#[doc = "Port Multiplexing Function Low Register\n\nYou can [`read`](crate::Reg::read) this register and get [`afrl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afrl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AfrlSpec ; impl crate :: RegisterSpec for AfrlSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`afrl::R`](R) reader structure"] impl crate :: Readable for AfrlSpec { }
#[doc = "`write(|w| ..)` method takes [`afrl::W`](W) writer structure"] impl crate :: Writable for AfrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets AFRL to value 0xffff_ffff"] impl crate :: Resettable for AfrlSpec { const RESET_VALUE : u32 = 0xffff_ffff ; } }
#[doc = "AFRH (rw) register accessor: Port Multiplexing Function High Register\n\nYou can [`read`](crate::Reg::read) this register and get [`afrh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afrh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@afrh`] module"]
#[doc (alias = "AFRH")] pub type Afrh = crate :: Reg < afrh :: AfrhSpec > ;
#[doc = "Port Multiplexing Function High Register"] pub mod afrh {
#[doc = "Register `AFRH` reader"] pub type R = crate :: R < AfrhSpec > ;
#[doc = "Register `AFRH` writer"] pub type W = crate :: W < AfrhSpec > ;
#[doc = "Field `AFR8` reader - Multiplexing function selection for bit 8 of portx"] pub type Afr8R = crate :: FieldReader ;
#[doc = "Field `AFR8` writer - Multiplexing function selection for bit 8 of portx"] pub type Afr8W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR9` reader - Multiplexing function selection for bit 9 of portx"] pub type Afr9R = crate :: FieldReader ;
#[doc = "Field `AFR9` writer - Multiplexing function selection for bit 9 of portx"] pub type Afr9W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR10` reader - Multiplexing function selection for bit 10 of portx"] pub type Afr10R = crate :: FieldReader ;
#[doc = "Field `AFR10` writer - Multiplexing function selection for bit 10 of portx"] pub type Afr10W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR11` reader - Multiplexing function selection for bit 11 of portx"] pub type Afr11R = crate :: FieldReader ;
#[doc = "Field `AFR11` writer - Multiplexing function selection for bit 11 of portx"] pub type Afr11W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR12` reader - Multiplexing function selection for bit 12 of portx"] pub type Afr12R = crate :: FieldReader ;
#[doc = "Field `AFR12` writer - Multiplexing function selection for bit 12 of portx"] pub type Afr12W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR13` reader - Multiplexing function selection for bit 13 of portx"] pub type Afr13R = crate :: FieldReader ;
#[doc = "Field `AFR13` writer - Multiplexing function selection for bit 13 of portx"] pub type Afr13W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR14` reader - Multiplexing function selection for bit 14 of portx"] pub type Afr14R = crate :: FieldReader ;
#[doc = "Field `AFR14` writer - Multiplexing function selection for bit 14 of portx"] pub type Afr14W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `AFR15` reader - Multiplexing function selection for bit 15 of portx"] pub type Afr15R = crate :: FieldReader ;
#[doc = "Field `AFR15` writer - Multiplexing function selection for bit 15 of portx"] pub type Afr15W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - Multiplexing function selection for bit 8 of portx"]
#[inline (always)] pub fn afr8 (& self) -> Afr8R { Afr8R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - Multiplexing function selection for bit 9 of portx"]
#[inline (always)] pub fn afr9 (& self) -> Afr9R { Afr9R :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:11 - Multiplexing function selection for bit 10 of portx"]
#[inline (always)] pub fn afr10 (& self) -> Afr10R { Afr10R :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:15 - Multiplexing function selection for bit 11 of portx"]
#[inline (always)] pub fn afr11 (& self) -> Afr11R { Afr11R :: new (((self . bits >> 12) & 0x0f) as u8) }
#[doc = "Bits 16:19 - Multiplexing function selection for bit 12 of portx"]
#[inline (always)] pub fn afr12 (& self) -> Afr12R { Afr12R :: new (((self . bits >> 16) & 0x0f) as u8) }
#[doc = "Bits 20:23 - Multiplexing function selection for bit 13 of portx"]
#[inline (always)] pub fn afr13 (& self) -> Afr13R { Afr13R :: new (((self . bits >> 20) & 0x0f) as u8) }
#[doc = "Bits 24:27 - Multiplexing function selection for bit 14 of portx"]
#[inline (always)] pub fn afr14 (& self) -> Afr14R { Afr14R :: new (((self . bits >> 24) & 0x0f) as u8) }
#[doc = "Bits 28:31 - Multiplexing function selection for bit 15 of portx"]
#[inline (always)] pub fn afr15 (& self) -> Afr15R { Afr15R :: new (((self . bits >> 28) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - Multiplexing function selection for bit 8 of portx"]
#[inline (always)] pub fn afr8 (& mut self) -> Afr8W < '_ , AfrhSpec > { Afr8W :: new (self , 0) }
#[doc = "Bits 4:7 - Multiplexing function selection for bit 9 of portx"]
#[inline (always)] pub fn afr9 (& mut self) -> Afr9W < '_ , AfrhSpec > { Afr9W :: new (self , 4) }
#[doc = "Bits 8:11 - Multiplexing function selection for bit 10 of portx"]
#[inline (always)] pub fn afr10 (& mut self) -> Afr10W < '_ , AfrhSpec > { Afr10W :: new (self , 8) }
#[doc = "Bits 12:15 - Multiplexing function selection for bit 11 of portx"]
#[inline (always)] pub fn afr11 (& mut self) -> Afr11W < '_ , AfrhSpec > { Afr11W :: new (self , 12) }
#[doc = "Bits 16:19 - Multiplexing function selection for bit 12 of portx"]
#[inline (always)] pub fn afr12 (& mut self) -> Afr12W < '_ , AfrhSpec > { Afr12W :: new (self , 16) }
#[doc = "Bits 20:23 - Multiplexing function selection for bit 13 of portx"]
#[inline (always)] pub fn afr13 (& mut self) -> Afr13W < '_ , AfrhSpec > { Afr13W :: new (self , 20) }
#[doc = "Bits 24:27 - Multiplexing function selection for bit 14 of portx"]
#[inline (always)] pub fn afr14 (& mut self) -> Afr14W < '_ , AfrhSpec > { Afr14W :: new (self , 24) }
#[doc = "Bits 28:31 - Multiplexing function selection for bit 15 of portx"]
#[inline (always)] pub fn afr15 (& mut self) -> Afr15W < '_ , AfrhSpec > { Afr15W :: new (self , 28) } }
#[doc = "Port Multiplexing Function High Register\n\nYou can [`read`](crate::Reg::read) this register and get [`afrh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`afrh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AfrhSpec ; impl crate :: RegisterSpec for AfrhSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`afrh::R`](R) reader structure"] impl crate :: Readable for AfrhSpec { }
#[doc = "`write(|w| ..)` method takes [`afrh::W`](W) writer structure"] impl crate :: Writable for AfrhSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets AFRH to value 0xffff_ffff"] impl crate :: Resettable for AfrhSpec { const RESET_VALUE : u32 = 0xffff_ffff ; } } }
#[doc = "General purpose I/O"] pub type Gpiob = crate :: Periph < gpioa :: RegisterBlock , 0x4800_0400 > ; impl core :: fmt :: Debug for Gpiob { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Gpiob") . finish () } }
#[doc = "General purpose I/O"] pub use self :: gpioa as gpiob ;
#[doc = "General purpose I/O"] pub type Gpioc = crate :: Periph < gpioa :: RegisterBlock , 0x4800_0800 > ; impl core :: fmt :: Debug for Gpioc { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Gpioc") . finish () } }
#[doc = "General purpose I/O"] pub use self :: gpioa as gpioc ;
#[doc = "General purpose I/O"] pub type Gpiod = crate :: Periph < gpioa :: RegisterBlock , 0x4800_0c00 > ; impl core :: fmt :: Debug for Gpiod { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Gpiod") . finish () } }
#[doc = "General purpose I/O"] pub use self :: gpioa as gpiod ;
#[doc = "Hardware divider"] pub type Hwdiv = crate :: Periph < hwdiv :: RegisterBlock , 0x4003_0000 > ; impl core :: fmt :: Debug for Hwdiv { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Hwdiv") . finish () } }
#[doc = "Hardware divider"] pub mod hwdiv {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { dvdr : Dvdr , dvsr : Dvsr , quotr : Quotr , rmdr : Rmdr , sr : Sr , cr : Cr , } impl RegisterBlock {
#[doc = "0x00 - Dividend register"]
#[inline (always)] pub const fn dvdr (& self) -> & Dvdr { & self . dvdr }
#[doc = "0x04 - Divisor register"]
#[inline (always)] pub const fn dvsr (& self) -> & Dvsr { & self . dvsr }
#[doc = "0x08 - Quotient register"]
#[inline (always)] pub const fn quotr (& self) -> & Quotr { & self . quotr }
#[doc = "0x0c - Remainder register"]
#[inline (always)] pub const fn rmdr (& self) -> & Rmdr { & self . rmdr }
#[doc = "0x10 - status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x14 - control register"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr } }
#[doc = "DVDR (rw) register accessor: Dividend register\n\nYou can [`read`](crate::Reg::read) this register and get [`dvdr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dvdr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dvdr`] module"]
#[doc (alias = "DVDR")] pub type Dvdr = crate :: Reg < dvdr :: DvdrSpec > ;
#[doc = "Dividend register"] pub mod dvdr {
#[doc = "Register `DVDR` reader"] pub type R = crate :: R < DvdrSpec > ;
#[doc = "Register `DVDR` writer"] pub type W = crate :: W < DvdrSpec > ;
#[doc = "Field `DIVIDEND` reader - Dividend data"] pub type DividendR = crate :: FieldReader < u32 > ;
#[doc = "Field `DIVIDEND` writer - Dividend data"] pub type DividendW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Dividend data"]
#[inline (always)] pub fn dividend (& self) -> DividendR { DividendR :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Dividend data"]
#[inline (always)] pub fn dividend (& mut self) -> DividendW < '_ , DvdrSpec > { DividendW :: new (self , 0) } }
#[doc = "Dividend register\n\nYou can [`read`](crate::Reg::read) this register and get [`dvdr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dvdr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DvdrSpec ; impl crate :: RegisterSpec for DvdrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dvdr::R`](R) reader structure"] impl crate :: Readable for DvdrSpec { }
#[doc = "`write(|w| ..)` method takes [`dvdr::W`](W) writer structure"] impl crate :: Writable for DvdrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DVDR to value 0"] impl crate :: Resettable for DvdrSpec { } }
#[doc = "DVSR (rw) register accessor: Divisor register\n\nYou can [`read`](crate::Reg::read) this register and get [`dvsr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dvsr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dvsr`] module"]
#[doc (alias = "DVSR")] pub type Dvsr = crate :: Reg < dvsr :: DvsrSpec > ;
#[doc = "Divisor register"] pub mod dvsr {
#[doc = "Register `DVSR` reader"] pub type R = crate :: R < DvsrSpec > ;
#[doc = "Register `DVSR` writer"] pub type W = crate :: W < DvsrSpec > ;
#[doc = "Field `DIVISOR` reader - Divisor data"] pub type DivisorR = crate :: FieldReader < u32 > ;
#[doc = "Field `DIVISOR` writer - Divisor data"] pub type DivisorW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Divisor data"]
#[inline (always)] pub fn divisor (& self) -> DivisorR { DivisorR :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Divisor data"]
#[inline (always)] pub fn divisor (& mut self) -> DivisorW < '_ , DvsrSpec > { DivisorW :: new (self , 0) } }
#[doc = "Divisor register\n\nYou can [`read`](crate::Reg::read) this register and get [`dvsr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dvsr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DvsrSpec ; impl crate :: RegisterSpec for DvsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dvsr::R`](R) reader structure"] impl crate :: Readable for DvsrSpec { }
#[doc = "`write(|w| ..)` method takes [`dvsr::W`](W) writer structure"] impl crate :: Writable for DvsrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DVSR to value 0x01"] impl crate :: Resettable for DvsrSpec { const RESET_VALUE : u32 = 0x01 ; } }
#[doc = "QUOTR (r) register accessor: Quotient register\n\nYou can [`read`](crate::Reg::read) this register and get [`quotr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@quotr`] module"]
#[doc (alias = "QUOTR")] pub type Quotr = crate :: Reg < quotr :: QuotrSpec > ;
#[doc = "Quotient register"] pub mod quotr {
#[doc = "Register `QUOTR` reader"] pub type R = crate :: R < QuotrSpec > ;
#[doc = "Field `QUOTIENT` reader - Quotient data"] pub type QuotientR = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - Quotient data"]
#[inline (always)] pub fn quotient (& self) -> QuotientR { QuotientR :: new (self . bits) } }
#[doc = "Quotient register\n\nYou can [`read`](crate::Reg::read) this register and get [`quotr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct QuotrSpec ; impl crate :: RegisterSpec for QuotrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`quotr::R`](R) reader structure"] impl crate :: Readable for QuotrSpec { }
#[doc = "`reset()` method sets QUOTR to value 0"] impl crate :: Resettable for QuotrSpec { } }
#[doc = "RMDR (r) register accessor: Remainder register\n\nYou can [`read`](crate::Reg::read) this register and get [`rmdr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rmdr`] module"]
#[doc (alias = "RMDR")] pub type Rmdr = crate :: Reg < rmdr :: RmdrSpec > ;
#[doc = "Remainder register"] pub mod rmdr {
#[doc = "Register `RMDR` reader"] pub type R = crate :: R < RmdrSpec > ;
#[doc = "Field `REMAINDER` reader - Remainder data"] pub type RemainderR = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - Remainder data"]
#[inline (always)] pub fn remainder (& self) -> RemainderR { RemainderR :: new (self . bits) } }
#[doc = "Remainder register\n\nYou can [`read`](crate::Reg::read) this register and get [`rmdr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RmdrSpec ; impl crate :: RegisterSpec for RmdrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rmdr::R`](R) reader structure"] impl crate :: Readable for RmdrSpec { }
#[doc = "`reset()` method sets RMDR to value 0"] impl crate :: Resettable for RmdrSpec { } }
#[doc = "SR (r) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Field `OVF` reader - Overflow flag"] pub type OvfR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Overflow flag"]
#[inline (always)] pub fn ovf (& self) -> OvfR { OvfR :: new ((self . bits & 1) != 0) } }
#[doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } }
#[doc = "CR (rw) register accessor: control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "control register"] pub mod cr {
#[doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ;
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `USIGN` reader - unsigned enable"] pub type UsignR = crate :: BitReader ;
#[doc = "Field `USIGN` writer - unsigned enable"] pub type UsignW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OVFE` reader - Overflow interrupt enable"] pub type OvfeR = crate :: BitReader ;
#[doc = "Field `OVFE` writer - Overflow interrupt enable"] pub type OvfeW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - unsigned enable"]
#[inline (always)] pub fn usign (& self) -> UsignR { UsignR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Overflow interrupt enable"]
#[inline (always)] pub fn ovfe (& self) -> OvfeR { OvfeR :: new (((self . bits >> 1) & 1) != 0) } } impl W {
#[doc = "Bit 0 - unsigned enable"]
#[inline (always)] pub fn usign (& mut self) -> UsignW < '_ , CrSpec > { UsignW :: new (self , 0) }
#[doc = "Bit 1 - Overflow interrupt enable"]
#[inline (always)] pub fn ovfe (& mut self) -> OvfeW < '_ , CrSpec > { OvfeW :: new (self , 1) } }
#[doc = "control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0x01"] impl crate :: Resettable for CrSpec { const RESET_VALUE : u32 = 0x01 ; } } }
#[doc = "Inter integrated circuit"] pub type I2c1 = crate :: Periph < i2c1 :: RegisterBlock , 0x4000_5400 > ; impl core :: fmt :: Debug for I2c1 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("I2c1") . finish () } }
#[doc = "Inter integrated circuit"] pub mod i2c1 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cr : Cr , tar : Tar , sar : Sar , _reserved3 : [u8 ; 0x04] , dr : Dr , sshr : Sshr , sslr : Sslr , fshr : Fshr , fslr : Fslr , _reserved8 : [u8 ; 0x08] , isr : Isr , imr : Imr , rawisr : Rawisr , rxtlr : Rxtlr , txtlr : Txtlr , icr : Icr , rx_under : RxUnder , rx_over : RxOver , tx_over : TxOver , rd_req : RdReq , tx_abrt : TxAbrt , rx_done : RxDone , activ : Activ , stop : Stop , start : Start , gc : Gc , enr : Enr , sr : Sr , txflr : Txflr , rxflr : Rxflr , hold : Hold , _reserved29 : [u8 ; 0x08] , dma : Dma , _reserved30 : [u8 ; 0x08] , setup : Setup , gcr : Gcr , _reserved32 : [u8 ; 0x14] , slvmask : Slvmask , slvrcvaddr : Slvrcvaddr , } impl RegisterBlock {
#[doc = "0x00 - Control Register"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr }
#[doc = "0x04 - Target Register"]
#[inline (always)] pub const fn tar (& self) -> & Tar { & self . tar }
#[doc = "0x08 - Slave Address Register"]
#[inline (always)] pub const fn sar (& self) -> & Sar { & self . sar }
#[doc = "0x10 - Data Command Register"]
#[inline (always)] pub const fn dr (& self) -> & Dr { & self . dr }
#[doc = "0x14 - SCL High Period Count for Std. Speed Register"]
#[inline (always)] pub const fn sshr (& self) -> & Sshr { & self . sshr }
#[doc = "0x18 - SCL Low Period Count for Std. Speed Register"]
#[inline (always)] pub const fn sslr (& self) -> & Sslr { & self . sslr }
#[doc = "0x1c - SCL High Period Count for Fast Speed Register"]
#[inline (always)] pub const fn fshr (& self) -> & Fshr { & self . fshr }
#[doc = "0x20 - SCL Low Period Count for Fast Speed Register"]
#[inline (always)] pub const fn fslr (& self) -> & Fslr { & self . fslr }
#[doc = "0x2c - Interrupt Status Register"]
#[inline (always)] pub const fn isr (& self) -> & Isr { & self . isr }
#[doc = "0x30 - Interrupt Mask Register"]
#[inline (always)] pub const fn imr (& self) -> & Imr { & self . imr }
#[doc = "0x34 - RAW Interrupt Status Register"]
#[inline (always)] pub const fn rawisr (& self) -> & Rawisr { & self . rawisr }
#[doc = "0x38 - Receive FIFO Threshold Level Register"]
#[inline (always)] pub const fn rxtlr (& self) -> & Rxtlr { & self . rxtlr }
#[doc = "0x3c - Transmit FIFO Threshold Level Register"]
#[inline (always)] pub const fn txtlr (& self) -> & Txtlr { & self . txtlr }
#[doc = "0x40 - Clear All Interrupt Register"]
#[inline (always)] pub const fn icr (& self) -> & Icr { & self . icr }
#[doc = "0x44 - Clear RX_UNDER Interrupt Register"]
#[inline (always)] pub const fn rx_under (& self) -> & RxUnder { & self . rx_under }
#[doc = "0x48 - Clear RX_OVER Interrupt Register"]
#[inline (always)] pub const fn rx_over (& self) -> & RxOver { & self . rx_over }
#[doc = "0x4c - Clear TX_OVER Interrupt Register"]
#[inline (always)] pub const fn tx_over (& self) -> & TxOver { & self . tx_over }
#[doc = "0x50 - Clear RD_REQ Interrupt Register"]
#[inline (always)] pub const fn rd_req (& self) -> & RdReq { & self . rd_req }
#[doc = "0x54 - Clear TX_ABRT Interrupt Register"]
#[inline (always)] pub const fn tx_abrt (& self) -> & TxAbrt { & self . tx_abrt }
#[doc = "0x58 - Clear RX_DONE Interrupt Register"]
#[inline (always)] pub const fn rx_done (& self) -> & RxDone { & self . rx_done }
#[doc = "0x5c - Clear ACTIVITY Interrupt Register"]
#[inline (always)] pub const fn activ (& self) -> & Activ { & self . activ }
#[doc = "0x60 - Clear STOP_DET Interrupt Register"]
#[inline (always)] pub const fn stop (& self) -> & Stop { & self . stop }
#[doc = "0x64 - Clear START_DET Interrupt Register"]
#[inline (always)] pub const fn start (& self) -> & Start { & self . start }
#[doc = "0x68 - Clear GEN_CALL Interrupt Register"]
#[inline (always)] pub const fn gc (& self) -> & Gc { & self . gc }
#[doc = "0x6c - Enable Register"]
#[inline (always)] pub const fn enr (& self) -> & Enr { & self . enr }
#[doc = "0x70 - Status Register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x74 - Transmit FIFO Level Register"]
#[inline (always)] pub const fn txflr (& self) -> & Txflr { & self . txflr }
#[doc = "0x78 - Receive FIFO Level Register"]
#[inline (always)] pub const fn rxflr (& self) -> & Rxflr { & self . rxflr }
#[doc = "0x7c - SDA Hold Time Register"]
#[inline (always)] pub const fn hold (& self) -> & Hold { & self . hold }
#[doc = "0x88 - DMA Control Register"]
#[inline (always)] pub const fn dma (& self) -> & Dma { & self . dma }
#[doc = "0x94 - SDA Setup Time Register"]
#[inline (always)] pub const fn setup (& self) -> & Setup { & self . setup }
#[doc = "0x98 - ACK General Call Register"]
#[inline (always)] pub const fn gcr (& self) -> & Gcr { & self . gcr }
#[doc = "0xb0 - Slave Address Mask Register"]
#[inline (always)] pub const fn slvmask (& self) -> & Slvmask { & self . slvmask }
#[doc = "0xb4 - Receiver Address Register"]
#[inline (always)] pub const fn slvrcvaddr (& self) -> & Slvrcvaddr { & self . slvrcvaddr } }
#[doc = "CR (rw) register accessor: Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "Control Register"] pub mod cr {
#[doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ;
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `MASTER` reader - This bit controls whether the DW_apb_i2c master is enabled"] pub type MasterR = crate :: BitReader ;
#[doc = "Field `MASTER` writer - This bit controls whether the DW_apb_i2c master is enabled"] pub type MasterW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SPEED` reader - These bits control at which speed the DW_apb_i2c operates"] pub type SpeedR = crate :: FieldReader ;
#[doc = "Field `SPEED` writer - These bits control at which speed the DW_apb_i2c operates"] pub type SpeedW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `SLAVE10` reader - When acting as a alsve"] pub type Slave10R = crate :: BitReader ;
#[doc = "Field `SLAVE10` writer - When acting as a alsve"] pub type Slave10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MASTER10` reader - Address mode when acting as a master"] pub type Master10R = crate :: BitReader ;
#[doc = "Field `MASTER10` writer - Address mode when acting as a master"] pub type Master10W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `REPEN` reader - Determines whether RESTART comdtions may be sent when acting as a master"] pub type RepenR = crate :: BitReader ;
#[doc = "Field `REPEN` writer - Determines whether RESTART comdtions may be sent when acting as a master"] pub type RepenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DISSLAVE` reader - This bit controls whether I2C has its slave diabled"] pub type DisslaveR = crate :: BitReader ;
#[doc = "Field `DISSLAVE` writer - This bit controls whether I2C has its slave diabled"] pub type DisslaveW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `STOPINT` reader - STOP_DET_IFADDRESSED"] pub type StopintR = crate :: BitReader ;
#[doc = "Field `STOPINT` writer - STOP_DET_IFADDRESSED"] pub type StopintW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EMPINT` reader - This bit controls the generation of the TX_EMPTY interrupt"] pub type EmpintR = crate :: BitReader ;
#[doc = "Field `EMPINT` writer - This bit controls the generation of the TX_EMPTY interrupt"] pub type EmpintW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `STOP` reader - Whether to generate a STOP signal after sending or receiving"] pub type StopR = crate :: BitReader ;
#[doc = "Field `STOP` writer - Whether to generate a STOP signal after sending or receiving"] pub type StopW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RESTART` reader - Whether to generate a RESTART signal after sending or receiving"] pub type RestartR = crate :: BitReader ;
#[doc = "Field `RESTART` writer - Whether to generate a RESTART signal after sending or receiving"] pub type RestartW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SLV_TX_ABRT_DIS` reader - when acting as a slave"] pub type SlvTxAbrtDisR = crate :: BitReader ;
#[doc = "Field `SLV_TX_ABRT_DIS` writer - when acting as a slave"] pub type SlvTxAbrtDisW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - This bit controls whether the DW_apb_i2c master is enabled"]
#[inline (always)] pub fn master (& self) -> MasterR { MasterR :: new ((self . bits & 1) != 0) }
#[doc = "Bits 1:2 - These bits control at which speed the DW_apb_i2c operates"]
#[inline (always)] pub fn speed (& self) -> SpeedR { SpeedR :: new (((self . bits >> 1) & 3) as u8) }
#[doc = "Bit 3 - When acting as a alsve"]
#[inline (always)] pub fn slave10 (& self) -> Slave10R { Slave10R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Address mode when acting as a master"]
#[inline (always)] pub fn master10 (& self) -> Master10R { Master10R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Determines whether RESTART comdtions may be sent when acting as a master"]
#[inline (always)] pub fn repen (& self) -> RepenR { RepenR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - This bit controls whether I2C has its slave diabled"]
#[inline (always)] pub fn disslave (& self) -> DisslaveR { DisslaveR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - STOP_DET_IFADDRESSED"]
#[inline (always)] pub fn stopint (& self) -> StopintR { StopintR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - This bit controls the generation of the TX_EMPTY interrupt"]
#[inline (always)] pub fn empint (& self) -> EmpintR { EmpintR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Whether to generate a STOP signal after sending or receiving"]
#[inline (always)] pub fn stop (& self) -> StopR { StopR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Whether to generate a RESTART signal after sending or receiving"]
#[inline (always)] pub fn restart (& self) -> RestartR { RestartR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - when acting as a slave"]
#[inline (always)] pub fn slv_tx_abrt_dis (& self) -> SlvTxAbrtDisR { SlvTxAbrtDisR :: new (((self . bits >> 11) & 1) != 0) } } impl W {
#[doc = "Bit 0 - This bit controls whether the DW_apb_i2c master is enabled"]
#[inline (always)] pub fn master (& mut self) -> MasterW < '_ , CrSpec > { MasterW :: new (self , 0) }
#[doc = "Bits 1:2 - These bits control at which speed the DW_apb_i2c operates"]
#[inline (always)] pub fn speed (& mut self) -> SpeedW < '_ , CrSpec > { SpeedW :: new (self , 1) }
#[doc = "Bit 3 - When acting as a alsve"]
#[inline (always)] pub fn slave10 (& mut self) -> Slave10W < '_ , CrSpec > { Slave10W :: new (self , 3) }
#[doc = "Bit 4 - Address mode when acting as a master"]
#[inline (always)] pub fn master10 (& mut self) -> Master10W < '_ , CrSpec > { Master10W :: new (self , 4) }
#[doc = "Bit 5 - Determines whether RESTART comdtions may be sent when acting as a master"]
#[inline (always)] pub fn repen (& mut self) -> RepenW < '_ , CrSpec > { RepenW :: new (self , 5) }
#[doc = "Bit 6 - This bit controls whether I2C has its slave diabled"]
#[inline (always)] pub fn disslave (& mut self) -> DisslaveW < '_ , CrSpec > { DisslaveW :: new (self , 6) }
#[doc = "Bit 7 - STOP_DET_IFADDRESSED"]
#[inline (always)] pub fn stopint (& mut self) -> StopintW < '_ , CrSpec > { StopintW :: new (self , 7) }
#[doc = "Bit 8 - This bit controls the generation of the TX_EMPTY interrupt"]
#[inline (always)] pub fn empint (& mut self) -> EmpintW < '_ , CrSpec > { EmpintW :: new (self , 8) }
#[doc = "Bit 9 - Whether to generate a STOP signal after sending or receiving"]
#[inline (always)] pub fn stop (& mut self) -> StopW < '_ , CrSpec > { StopW :: new (self , 9) }
#[doc = "Bit 10 - Whether to generate a RESTART signal after sending or receiving"]
#[inline (always)] pub fn restart (& mut self) -> RestartW < '_ , CrSpec > { RestartW :: new (self , 10) }
#[doc = "Bit 11 - when acting as a slave"]
#[inline (always)] pub fn slv_tx_abrt_dis (& mut self) -> SlvTxAbrtDisW < '_ , CrSpec > { SlvTxAbrtDisW :: new (self , 11) } }
#[doc = "Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0x7f"] impl crate :: Resettable for CrSpec { const RESET_VALUE : u32 = 0x7f ; } }
#[doc = "TAR (rw) register accessor: Target Register\n\nYou can [`read`](crate::Reg::read) this register and get [`tar::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tar::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tar`] module"]
#[doc (alias = "TAR")] pub type Tar = crate :: Reg < tar :: TarSpec > ;
#[doc = "Target Register"] pub mod tar {
#[doc = "Register `TAR` reader"] pub type R = crate :: R < TarSpec > ;
#[doc = "Register `TAR` writer"] pub type W = crate :: W < TarSpec > ;
#[doc = "Field `ADDR` reader - This is the target address for any master transaction"] pub type AddrR = crate :: FieldReader < u16 > ;
#[doc = "Field `ADDR` writer - This is the target address for any master transaction"] pub type AddrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 10 , u16 > ;
#[doc = "Field `GC` reader - If bit 11(SPECIAL)is set to 1"] pub type GcR = crate :: BitReader ;
#[doc = "Field `GC` writer - If bit 11(SPECIAL)is set to 1"] pub type GcW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SPECIAL` reader - This bit indicates whether software performs a General Call or START BYTE conmmend"] pub type SpecialR = crate :: BitReader ;
#[doc = "Field `SPECIAL` writer - This bit indicates whether software performs a General Call or START BYTE conmmend"] pub type SpecialW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:9 - This is the target address for any master transaction"]
#[inline (always)] pub fn addr (& self) -> AddrR { AddrR :: new ((self . bits & 0x03ff) as u16) }
#[doc = "Bit 10 - If bit 11(SPECIAL)is set to 1"]
#[inline (always)] pub fn gc (& self) -> GcR { GcR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - This bit indicates whether software performs a General Call or START BYTE conmmend"]
#[inline (always)] pub fn special (& self) -> SpecialR { SpecialR :: new (((self . bits >> 11) & 1) != 0) } } impl W {
#[doc = "Bits 0:9 - This is the target address for any master transaction"]
#[inline (always)] pub fn addr (& mut self) -> AddrW < '_ , TarSpec > { AddrW :: new (self , 0) }
#[doc = "Bit 10 - If bit 11(SPECIAL)is set to 1"]
#[inline (always)] pub fn gc (& mut self) -> GcW < '_ , TarSpec > { GcW :: new (self , 10) }
#[doc = "Bit 11 - This bit indicates whether software performs a General Call or START BYTE conmmend"]
#[inline (always)] pub fn special (& mut self) -> SpecialW < '_ , TarSpec > { SpecialW :: new (self , 11) } }
#[doc = "Target Register\n\nYou can [`read`](crate::Reg::read) this register and get [`tar::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tar::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TarSpec ; impl crate :: RegisterSpec for TarSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`tar::R`](R) reader structure"] impl crate :: Readable for TarSpec { }
#[doc = "`write(|w| ..)` method takes [`tar::W`](W) writer structure"] impl crate :: Writable for TarSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TAR to value 0x55"] impl crate :: Resettable for TarSpec { const RESET_VALUE : u32 = 0x55 ; } }
#[doc = "SAR (rw) register accessor: Slave Address Register\n\nYou can [`read`](crate::Reg::read) this register and get [`sar::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sar::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sar`] module"]
#[doc (alias = "SAR")] pub type Sar = crate :: Reg < sar :: SarSpec > ;
#[doc = "Slave Address Register"] pub mod sar {
#[doc = "Register `SAR` reader"] pub type R = crate :: R < SarSpec > ;
#[doc = "Register `SAR` writer"] pub type W = crate :: W < SarSpec > ;
#[doc = "Field `ADDR` reader - The SAR holds the slave address when the i2c is operation as a slave"] pub type AddrR = crate :: FieldReader < u16 > ;
#[doc = "Field `ADDR` writer - The SAR holds the slave address when the i2c is operation as a slave"] pub type AddrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 10 , u16 > ; impl R {
#[doc = "Bits 0:9 - The SAR holds the slave address when the i2c is operation as a slave"]
#[inline (always)] pub fn addr (& self) -> AddrR { AddrR :: new ((self . bits & 0x03ff) as u16) } } impl W {
#[doc = "Bits 0:9 - The SAR holds the slave address when the i2c is operation as a slave"]
#[inline (always)] pub fn addr (& mut self) -> AddrW < '_ , SarSpec > { AddrW :: new (self , 0) } }
#[doc = "Slave Address Register\n\nYou can [`read`](crate::Reg::read) this register and get [`sar::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sar::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SarSpec ; impl crate :: RegisterSpec for SarSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sar::R`](R) reader structure"] impl crate :: Readable for SarSpec { }
#[doc = "`write(|w| ..)` method takes [`sar::W`](W) writer structure"] impl crate :: Writable for SarSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SAR to value 0x55"] impl crate :: Resettable for SarSpec { const RESET_VALUE : u32 = 0x55 ; } }
#[doc = "DR (rw) register accessor: Data Command Register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr`] module"]
#[doc (alias = "DR")] pub type Dr = crate :: Reg < dr :: DrSpec > ;
#[doc = "Data Command Register"] pub mod dr {
#[doc = "Register `DR` reader"] pub type R = crate :: R < DrSpec > ;
#[doc = "Register `DR` writer"] pub type W = crate :: W < DrSpec > ;
#[doc = "Field `DAT` reader - This register contains the data to be transimitted or received on the i2c bus."] pub type DatR = crate :: FieldReader ;
#[doc = "Field `DAT` writer - This register contains the data to be transimitted or received on the i2c bus."] pub type DatW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ;
#[doc = "Field `CMD` reader - This bit controls whether a read or a write is perormed"] pub type CmdR = crate :: BitReader ;
#[doc = "Field `CMD` writer - This bit controls whether a read or a write is perormed"] pub type CmdW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:7 - This register contains the data to be transimitted or received on the i2c bus."]
#[inline (always)] pub fn dat (& self) -> DatR { DatR :: new ((self . bits & 0xff) as u8) }
#[doc = "Bit 8 - This bit controls whether a read or a write is perormed"]
#[inline (always)] pub fn cmd (& self) -> CmdR { CmdR :: new (((self . bits >> 8) & 1) != 0) } } impl W {
#[doc = "Bits 0:7 - This register contains the data to be transimitted or received on the i2c bus."]
#[inline (always)] pub fn dat (& mut self) -> DatW < '_ , DrSpec > { DatW :: new (self , 0) }
#[doc = "Bit 8 - This bit controls whether a read or a write is perormed"]
#[inline (always)] pub fn cmd (& mut self) -> CmdW < '_ , DrSpec > { CmdW :: new (self , 8) } }
#[doc = "Data Command Register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DrSpec ; impl crate :: RegisterSpec for DrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dr::R`](R) reader structure"] impl crate :: Readable for DrSpec { }
#[doc = "`write(|w| ..)` method takes [`dr::W`](W) writer structure"] impl crate :: Writable for DrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DR to value 0"] impl crate :: Resettable for DrSpec { } }
#[doc = "SSHR (rw) register accessor: SCL High Period Count for Std. Speed Register\n\nYou can [`read`](crate::Reg::read) this register and get [`sshr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sshr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sshr`] module"]
#[doc (alias = "SSHR")] pub type Sshr = crate :: Reg < sshr :: SshrSpec > ;
#[doc = "SCL High Period Count for Std. Speed Register"] pub mod sshr {
#[doc = "Register `SSHR` reader"] pub type R = crate :: R < SshrSpec > ;
#[doc = "Register `SSHR` writer"] pub type W = crate :: W < SshrSpec > ;
#[doc = "Field `CNT` reader - This register sets the SCL clock high period count for standard speed"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - This register sets the SCL clock high period count for standard speed"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - This register sets the SCL clock high period count for standard speed"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - This register sets the SCL clock high period count for standard speed"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , SshrSpec > { CntW :: new (self , 0) } }
#[doc = "SCL High Period Count for Std. Speed Register\n\nYou can [`read`](crate::Reg::read) this register and get [`sshr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sshr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SshrSpec ; impl crate :: RegisterSpec for SshrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sshr::R`](R) reader structure"] impl crate :: Readable for SshrSpec { }
#[doc = "`write(|w| ..)` method takes [`sshr::W`](W) writer structure"] impl crate :: Writable for SshrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SSHR to value 0x0190"] impl crate :: Resettable for SshrSpec { const RESET_VALUE : u32 = 0x0190 ; } }
#[doc = "SSLR (rw) register accessor: SCL Low Period Count for Std. Speed Register\n\nYou can [`read`](crate::Reg::read) this register and get [`sslr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sslr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sslr`] module"]
#[doc (alias = "SSLR")] pub type Sslr = crate :: Reg < sslr :: SslrSpec > ;
#[doc = "SCL Low Period Count for Std. Speed Register"] pub mod sslr {
#[doc = "Register `SSLR` reader"] pub type R = crate :: R < SslrSpec > ;
#[doc = "Register `SSLR` writer"] pub type W = crate :: W < SslrSpec > ;
#[doc = "Field `CNT` reader - This register sets the SCL clock low period count for standard speed"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - This register sets the SCL clock low period count for standard speed"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - This register sets the SCL clock low period count for standard speed"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - This register sets the SCL clock low period count for standard speed"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , SslrSpec > { CntW :: new (self , 0) } }
#[doc = "SCL Low Period Count for Std. Speed Register\n\nYou can [`read`](crate::Reg::read) this register and get [`sslr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sslr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SslrSpec ; impl crate :: RegisterSpec for SslrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sslr::R`](R) reader structure"] impl crate :: Readable for SslrSpec { }
#[doc = "`write(|w| ..)` method takes [`sslr::W`](W) writer structure"] impl crate :: Writable for SslrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SSLR to value 0x01d6"] impl crate :: Resettable for SslrSpec { const RESET_VALUE : u32 = 0x01d6 ; } }
#[doc = "FSHR (rw) register accessor: SCL High Period Count for Fast Speed Register\n\nYou can [`read`](crate::Reg::read) this register and get [`fshr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fshr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fshr`] module"]
#[doc (alias = "FSHR")] pub type Fshr = crate :: Reg < fshr :: FshrSpec > ;
#[doc = "SCL High Period Count for Fast Speed Register"] pub mod fshr {
#[doc = "Register `FSHR` reader"] pub type R = crate :: R < FshrSpec > ;
#[doc = "Register `FSHR` writer"] pub type W = crate :: W < FshrSpec > ;
#[doc = "Field `CNT` reader - This register sets the SCL clock high_period count for standard speed"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - This register sets the SCL clock high_period count for standard speed"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - This register sets the SCL clock high_period count for standard speed"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - This register sets the SCL clock high_period count for standard speed"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , FshrSpec > { CntW :: new (self , 0) } }
#[doc = "SCL High Period Count for Fast Speed Register\n\nYou can [`read`](crate::Reg::read) this register and get [`fshr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fshr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct FshrSpec ; impl crate :: RegisterSpec for FshrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`fshr::R`](R) reader structure"] impl crate :: Readable for FshrSpec { }
#[doc = "`write(|w| ..)` method takes [`fshr::W`](W) writer structure"] impl crate :: Writable for FshrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets FSHR to value 0x3c"] impl crate :: Resettable for FshrSpec { const RESET_VALUE : u32 = 0x3c ; } }
#[doc = "FSLR (rw) register accessor: SCL Low Period Count for Fast Speed Register\n\nYou can [`read`](crate::Reg::read) this register and get [`fslr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fslr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fslr`] module"]
#[doc (alias = "FSLR")] pub type Fslr = crate :: Reg < fslr :: FslrSpec > ;
#[doc = "SCL Low Period Count for Fast Speed Register"] pub mod fslr {
#[doc = "Register `FSLR` reader"] pub type R = crate :: R < FslrSpec > ;
#[doc = "Register `FSLR` writer"] pub type W = crate :: W < FslrSpec > ;
#[doc = "Field `CNT` reader - This register sets the SCL clock low period count for standard speed"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - This register sets the SCL clock low period count for standard speed"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - This register sets the SCL clock low period count for standard speed"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - This register sets the SCL clock low period count for standard speed"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , FslrSpec > { CntW :: new (self , 0) } }
#[doc = "SCL Low Period Count for Fast Speed Register\n\nYou can [`read`](crate::Reg::read) this register and get [`fslr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fslr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct FslrSpec ; impl crate :: RegisterSpec for FslrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`fslr::R`](R) reader structure"] impl crate :: Readable for FslrSpec { }
#[doc = "`write(|w| ..)` method takes [`fslr::W`](W) writer structure"] impl crate :: Writable for FslrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets FSLR to value 0x82"] impl crate :: Resettable for FslrSpec { const RESET_VALUE : u32 = 0x82 ; } }
#[doc = "ISR (r) register accessor: Interrupt Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`isr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@isr`] module"]
#[doc (alias = "ISR")] pub type Isr = crate :: Reg < isr :: IsrSpec > ;
#[doc = "Interrupt Status Register"] pub mod isr {
#[doc = "Register `ISR` reader"] pub type R = crate :: R < IsrSpec > ;
#[doc = "Field `ISR` reader - Specific bit description refer to RAWISR"] pub type IsrR = crate :: FieldReader < u16 > ; impl R {
#[doc = "Bits 0:11 - Specific bit description refer to RAWISR"]
#[inline (always)] pub fn isr (& self) -> IsrR { IsrR :: new ((self . bits & 0x0fff) as u16) } }
#[doc = "Interrupt Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`isr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IsrSpec ; impl crate :: RegisterSpec for IsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`isr::R`](R) reader structure"] impl crate :: Readable for IsrSpec { }
#[doc = "`reset()` method sets ISR to value 0"] impl crate :: Resettable for IsrSpec { } }
#[doc = "IMR (rw) register accessor: Interrupt Mask Register\n\nYou can [`read`](crate::Reg::read) this register and get [`imr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`imr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@imr`] module"]
#[doc (alias = "IMR")] pub type Imr = crate :: Reg < imr :: ImrSpec > ;
#[doc = "Interrupt Mask Register"] pub mod imr {
#[doc = "Register `IMR` reader"] pub type R = crate :: R < ImrSpec > ;
#[doc = "Register `IMR` writer"] pub type W = crate :: W < ImrSpec > ;
#[doc = "Field `IMR` reader - Specific bit description shield RAWISR"] pub type ImrR = crate :: FieldReader < u16 > ;
#[doc = "Field `IMR` writer - Specific bit description shield RAWISR"] pub type ImrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 12 , u16 > ; impl R {
#[doc = "Bits 0:11 - Specific bit description shield RAWISR"]
#[inline (always)] pub fn imr (& self) -> ImrR { ImrR :: new ((self . bits & 0x0fff) as u16) } } impl W {
#[doc = "Bits 0:11 - Specific bit description shield RAWISR"]
#[inline (always)] pub fn imr (& mut self) -> ImrW < '_ , ImrSpec > { ImrW :: new (self , 0) } }
#[doc = "Interrupt Mask Register\n\nYou can [`read`](crate::Reg::read) this register and get [`imr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`imr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ImrSpec ; impl crate :: RegisterSpec for ImrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`imr::R`](R) reader structure"] impl crate :: Readable for ImrSpec { }
#[doc = "`write(|w| ..)` method takes [`imr::W`](W) writer structure"] impl crate :: Writable for ImrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets IMR to value 0x08ff"] impl crate :: Resettable for ImrSpec { const RESET_VALUE : u32 = 0x08ff ; } }
#[doc = "RAWISR (r) register accessor: RAW Interrupt Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rawisr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rawisr`] module"]
#[doc (alias = "RAWISR")] pub type Rawisr = crate :: Reg < rawisr :: RawisrSpec > ;
#[doc = "RAW Interrupt Status Register"] pub mod rawisr {
#[doc = "Register `RAWISR` reader"] pub type R = crate :: R < RawisrSpec > ;
#[doc = "Field `RX_UNDER` reader - Receive buffer under"] pub type RxUnderR = crate :: BitReader ;
#[doc = "Field `RX_OVER` reader - Receive buffer over"] pub type RxOverR = crate :: BitReader ;
#[doc = "Field `RX_FULL` reader - Receive buffer not empty"] pub type RxFullR = crate :: BitReader ;
#[doc = "Field `TX_OVER` reader - Transmit buffer over"] pub type TxOverR = crate :: BitReader ;
#[doc = "Field `TX_EMPTY` reader - Transmit buffer empty"] pub type TxEmptyR = crate :: BitReader ;
#[doc = "Field `RD_REQ` reader - Read request"] pub type RdReqR = crate :: BitReader ;
#[doc = "Field `TX_ABRT` reader - Transmit abort"] pub type TxAbrtR = crate :: BitReader ;
#[doc = "Field `RX_DONE` reader - Transmit done"] pub type RxDoneR = crate :: BitReader ;
#[doc = "Field `ACTIV` reader - This bit captures DW_spb_i2c acticity and stays set until it is cleared"] pub type ActivR = crate :: BitReader ;
#[doc = "Field `STOP` reader - Stop condition detection"] pub type StopR = crate :: BitReader ;
#[doc = "Field `START` reader - Start condition detection"] pub type StartR = crate :: BitReader ;
#[doc = "Field `GC` reader - General call"] pub type GcR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Receive buffer under"]
#[inline (always)] pub fn rx_under (& self) -> RxUnderR { RxUnderR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive buffer over"]
#[inline (always)] pub fn rx_over (& self) -> RxOverR { RxOverR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Receive buffer not empty"]
#[inline (always)] pub fn rx_full (& self) -> RxFullR { RxFullR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Transmit buffer over"]
#[inline (always)] pub fn tx_over (& self) -> TxOverR { TxOverR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Transmit buffer empty"]
#[inline (always)] pub fn tx_empty (& self) -> TxEmptyR { TxEmptyR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Read request"]
#[inline (always)] pub fn rd_req (& self) -> RdReqR { RdReqR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Transmit abort"]
#[inline (always)] pub fn tx_abrt (& self) -> TxAbrtR { TxAbrtR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Transmit done"]
#[inline (always)] pub fn rx_done (& self) -> RxDoneR { RxDoneR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - This bit captures DW_spb_i2c acticity and stays set until it is cleared"]
#[inline (always)] pub fn activ (& self) -> ActivR { ActivR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Stop condition detection"]
#[inline (always)] pub fn stop (& self) -> StopR { StopR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Start condition detection"]
#[inline (always)] pub fn start (& self) -> StartR { StartR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - General call"]
#[inline (always)] pub fn gc (& self) -> GcR { GcR :: new (((self . bits >> 11) & 1) != 0) } }
#[doc = "RAW Interrupt Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rawisr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RawisrSpec ; impl crate :: RegisterSpec for RawisrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rawisr::R`](R) reader structure"] impl crate :: Readable for RawisrSpec { }
#[doc = "`reset()` method sets RAWISR to value 0"] impl crate :: Resettable for RawisrSpec { } }
#[doc = "RXTLR (rw) register accessor: Receive FIFO Threshold Level Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rxtlr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxtlr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxtlr`] module"]
#[doc (alias = "RXTLR")] pub type Rxtlr = crate :: Reg < rxtlr :: RxtlrSpec > ;
#[doc = "Receive FIFO Threshold Level Register"] pub mod rxtlr {
#[doc = "Register `RXTLR` reader"] pub type R = crate :: R < RxtlrSpec > ;
#[doc = "Register `RXTLR` writer"] pub type W = crate :: W < RxtlrSpec > ;
#[doc = "Field `TL` reader - Receive FIFO threshold level"] pub type TlR = crate :: FieldReader ;
#[doc = "Field `TL` writer - Receive FIFO threshold level"] pub type TlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Receive FIFO threshold level"]
#[inline (always)] pub fn tl (& self) -> TlR { TlR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Receive FIFO threshold level"]
#[inline (always)] pub fn tl (& mut self) -> TlW < '_ , RxtlrSpec > { TlW :: new (self , 0) } }
#[doc = "Receive FIFO Threshold Level Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rxtlr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxtlr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxtlrSpec ; impl crate :: RegisterSpec for RxtlrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rxtlr::R`](R) reader structure"] impl crate :: Readable for RxtlrSpec { }
#[doc = "`write(|w| ..)` method takes [`rxtlr::W`](W) writer structure"] impl crate :: Writable for RxtlrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RXTLR to value 0"] impl crate :: Resettable for RxtlrSpec { } }
#[doc = "TXTLR (rw) register accessor: Transmit FIFO Threshold Level Register\n\nYou can [`read`](crate::Reg::read) this register and get [`txtlr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txtlr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txtlr`] module"]
#[doc (alias = "TXTLR")] pub type Txtlr = crate :: Reg < txtlr :: TxtlrSpec > ;
#[doc = "Transmit FIFO Threshold Level Register"] pub mod txtlr {
#[doc = "Register `TXTLR` reader"] pub type R = crate :: R < TxtlrSpec > ;
#[doc = "Register `TXTLR` writer"] pub type W = crate :: W < TxtlrSpec > ;
#[doc = "Field `TL` reader - Transmit FIFO threshold level"] pub type TlR = crate :: FieldReader ;
#[doc = "Field `TL` writer - Transmit FIFO threshold level"] pub type TlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Transmit FIFO threshold level"]
#[inline (always)] pub fn tl (& self) -> TlR { TlR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Transmit FIFO threshold level"]
#[inline (always)] pub fn tl (& mut self) -> TlW < '_ , TxtlrSpec > { TlW :: new (self , 0) } }
#[doc = "Transmit FIFO Threshold Level Register\n\nYou can [`read`](crate::Reg::read) this register and get [`txtlr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txtlr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TxtlrSpec ; impl crate :: RegisterSpec for TxtlrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txtlr::R`](R) reader structure"] impl crate :: Readable for TxtlrSpec { }
#[doc = "`write(|w| ..)` method takes [`txtlr::W`](W) writer structure"] impl crate :: Writable for TxtlrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXTLR to value 0"] impl crate :: Resettable for TxtlrSpec { } }
#[doc = "ICR (r) register accessor: Clear All Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`icr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@icr`] module"]
#[doc (alias = "ICR")] pub type Icr = crate :: Reg < icr :: IcrSpec > ;
#[doc = "Clear All Interrupt Register"] pub mod icr {
#[doc = "Register `ICR` reader"] pub type R = crate :: R < IcrSpec > ;
#[doc = "Field `ICR` reader - Read this register to clear the combined interrupt"] pub type IcrR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the combined interrupt"]
#[inline (always)] pub fn icr (& self) -> IcrR { IcrR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear All Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`icr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IcrSpec ; impl crate :: RegisterSpec for IcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`icr::R`](R) reader structure"] impl crate :: Readable for IcrSpec { }
#[doc = "`reset()` method sets ICR to value 0"] impl crate :: Resettable for IcrSpec { } }
#[doc = "RX_UNDER (r) register accessor: Clear RX_UNDER Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rx_under::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_under`] module"]
#[doc (alias = "RX_UNDER")] pub type RxUnder = crate :: Reg < rx_under :: RxUnderSpec > ;
#[doc = "Clear RX_UNDER Interrupt Register"] pub mod rx_under {
#[doc = "Register `RX_UNDER` reader"] pub type R = crate :: R < RxUnderSpec > ;
#[doc = "Field `RX_UNDER` reader - Read this register to clear the RX_UNDER interrupt(bit 0)of the RAWISR register"] pub type RxUnderR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the RX_UNDER interrupt(bit 0)of the RAWISR register"]
#[inline (always)] pub fn rx_under (& self) -> RxUnderR { RxUnderR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear RX_UNDER Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rx_under::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxUnderSpec ; impl crate :: RegisterSpec for RxUnderSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rx_under::R`](R) reader structure"] impl crate :: Readable for RxUnderSpec { }
#[doc = "`reset()` method sets RX_UNDER to value 0"] impl crate :: Resettable for RxUnderSpec { } }
#[doc = "RX_OVER (r) register accessor: Clear RX_OVER Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rx_over::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_over`] module"]
#[doc (alias = "RX_OVER")] pub type RxOver = crate :: Reg < rx_over :: RxOverSpec > ;
#[doc = "Clear RX_OVER Interrupt Register"] pub mod rx_over {
#[doc = "Register `RX_OVER` reader"] pub type R = crate :: R < RxOverSpec > ;
#[doc = "Field `RX_OVER` reader - Read this register to clear the RX_UNDER interrupt(bit 1)of the RAWISR register"] pub type RxOverR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the RX_UNDER interrupt(bit 1)of the RAWISR register"]
#[inline (always)] pub fn rx_over (& self) -> RxOverR { RxOverR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear RX_OVER Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rx_over::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxOverSpec ; impl crate :: RegisterSpec for RxOverSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rx_over::R`](R) reader structure"] impl crate :: Readable for RxOverSpec { }
#[doc = "`reset()` method sets RX_OVER to value 0"] impl crate :: Resettable for RxOverSpec { } }
#[doc = "TX_OVER (r) register accessor: Clear TX_OVER Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`tx_over::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_over`] module"]
#[doc (alias = "TX_OVER")] pub type TxOver = crate :: Reg < tx_over :: TxOverSpec > ;
#[doc = "Clear TX_OVER Interrupt Register"] pub mod tx_over {
#[doc = "Register `TX_OVER` reader"] pub type R = crate :: R < TxOverSpec > ;
#[doc = "Field `TX_OVER` reader - Read this register to clear the RX_UNDER interrupt(bit 3)of the RAWISR register"] pub type TxOverR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the RX_UNDER interrupt(bit 3)of the RAWISR register"]
#[inline (always)] pub fn tx_over (& self) -> TxOverR { TxOverR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear TX_OVER Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`tx_over::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TxOverSpec ; impl crate :: RegisterSpec for TxOverSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`tx_over::R`](R) reader structure"] impl crate :: Readable for TxOverSpec { }
#[doc = "`reset()` method sets TX_OVER to value 0"] impl crate :: Resettable for TxOverSpec { } }
#[doc = "RD_REQ (r) register accessor: Clear RD_REQ Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rd_req::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rd_req`] module"]
#[doc (alias = "RD_REQ")] pub type RdReq = crate :: Reg < rd_req :: RdReqSpec > ;
#[doc = "Clear RD_REQ Interrupt Register"] pub mod rd_req {
#[doc = "Register `RD_REQ` reader"] pub type R = crate :: R < RdReqSpec > ;
#[doc = "Field `RD_REQ` reader - Read this register to clear the RX_UNDER interrupt(bit 5)of the RAWISR register"] pub type RdReqR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the RX_UNDER interrupt(bit 5)of the RAWISR register"]
#[inline (always)] pub fn rd_req (& self) -> RdReqR { RdReqR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear RD_REQ Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rd_req::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RdReqSpec ; impl crate :: RegisterSpec for RdReqSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rd_req::R`](R) reader structure"] impl crate :: Readable for RdReqSpec { }
#[doc = "`reset()` method sets RD_REQ to value 0"] impl crate :: Resettable for RdReqSpec { } }
#[doc = "TX_ABRT (r) register accessor: Clear TX_ABRT Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`tx_abrt::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_abrt`] module"]
#[doc (alias = "TX_ABRT")] pub type TxAbrt = crate :: Reg < tx_abrt :: TxAbrtSpec > ;
#[doc = "Clear TX_ABRT Interrupt Register"] pub mod tx_abrt {
#[doc = "Register `TX_ABRT` reader"] pub type R = crate :: R < TxAbrtSpec > ;
#[doc = "Field `TX_ABRT` reader - Read this register to clear the RX_UNDER interrupt(bit 6)of the RAWISR register"] pub type TxAbrtR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the RX_UNDER interrupt(bit 6)of the RAWISR register"]
#[inline (always)] pub fn tx_abrt (& self) -> TxAbrtR { TxAbrtR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear TX_ABRT Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`tx_abrt::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TxAbrtSpec ; impl crate :: RegisterSpec for TxAbrtSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`tx_abrt::R`](R) reader structure"] impl crate :: Readable for TxAbrtSpec { }
#[doc = "`reset()` method sets TX_ABRT to value 0"] impl crate :: Resettable for TxAbrtSpec { } }
#[doc = "RX_DONE (r) register accessor: Clear RX_DONE Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rx_done::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_done`] module"]
#[doc (alias = "RX_DONE")] pub type RxDone = crate :: Reg < rx_done :: RxDoneSpec > ;
#[doc = "Clear RX_DONE Interrupt Register"] pub mod rx_done {
#[doc = "Register `RX_DONE` reader"] pub type R = crate :: R < RxDoneSpec > ;
#[doc = "Field `RX_DONE` reader - Read this register to clear the RX_UNDER interrupt(bit 7)of the RAWISR register"] pub type RxDoneR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the RX_UNDER interrupt(bit 7)of the RAWISR register"]
#[inline (always)] pub fn rx_done (& self) -> RxDoneR { RxDoneR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear RX_DONE Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rx_done::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxDoneSpec ; impl crate :: RegisterSpec for RxDoneSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rx_done::R`](R) reader structure"] impl crate :: Readable for RxDoneSpec { }
#[doc = "`reset()` method sets RX_DONE to value 0"] impl crate :: Resettable for RxDoneSpec { } }
#[doc = "ACTIV (r) register accessor: Clear ACTIVITY Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`activ::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@activ`] module"]
#[doc (alias = "ACTIV")] pub type Activ = crate :: Reg < activ :: ActivSpec > ;
#[doc = "Clear ACTIVITY Interrupt Register"] pub mod activ {
#[doc = "Register `ACTIV` reader"] pub type R = crate :: R < ActivSpec > ;
#[doc = "Field `ACTIV` reader - Reading this register clears the ACTIVITY interrupt if the I2C is not active anymore"] pub type ActivR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Reading this register clears the ACTIVITY interrupt if the I2C is not active anymore"]
#[inline (always)] pub fn activ (& self) -> ActivR { ActivR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear ACTIVITY Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`activ::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ActivSpec ; impl crate :: RegisterSpec for ActivSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`activ::R`](R) reader structure"] impl crate :: Readable for ActivSpec { }
#[doc = "`reset()` method sets ACTIV to value 0"] impl crate :: Resettable for ActivSpec { } }
#[doc = "STOP (r) register accessor: Clear STOP_DET Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`stop::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stop`] module"]
#[doc (alias = "STOP")] pub type Stop = crate :: Reg < stop :: StopSpec > ;
#[doc = "Clear STOP_DET Interrupt Register"] pub mod stop {
#[doc = "Register `STOP` reader"] pub type R = crate :: R < StopSpec > ;
#[doc = "Field `STOP` reader - Read this register to clear the STOP_DET interrupt(bit 9)of the RAWISR register"] pub type StopR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the STOP_DET interrupt(bit 9)of the RAWISR register"]
#[inline (always)] pub fn stop (& self) -> StopR { StopR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear STOP_DET Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`stop::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct StopSpec ; impl crate :: RegisterSpec for StopSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`stop::R`](R) reader structure"] impl crate :: Readable for StopSpec { }
#[doc = "`reset()` method sets STOP to value 0"] impl crate :: Resettable for StopSpec { } }
#[doc = "START (r) register accessor: Clear START_DET Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`start::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@start`] module"]
#[doc (alias = "START")] pub type Start = crate :: Reg < start :: StartSpec > ;
#[doc = "Clear START_DET Interrupt Register"] pub mod start {
#[doc = "Register `START` reader"] pub type R = crate :: R < StartSpec > ;
#[doc = "Field `START` reader - Read this register to clear the START_DET interrupt(bit 10)of the RAWISR register"] pub type StartR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the START_DET interrupt(bit 10)of the RAWISR register"]
#[inline (always)] pub fn start (& self) -> StartR { StartR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear START_DET Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`start::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct StartSpec ; impl crate :: RegisterSpec for StartSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`start::R`](R) reader structure"] impl crate :: Readable for StartSpec { }
#[doc = "`reset()` method sets START to value 0"] impl crate :: Resettable for StartSpec { } }
#[doc = "GC (r) register accessor: Clear GEN_CALL Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`gc::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@gc`] module"]
#[doc (alias = "GC")] pub type Gc = crate :: Reg < gc :: GcSpec > ;
#[doc = "Clear GEN_CALL Interrupt Register"] pub mod gc {
#[doc = "Register `GC` reader"] pub type R = crate :: R < GcSpec > ;
#[doc = "Field `GC` reader - Read this register to clear the GEN_CALL interrupt(bit 11)of the RAWISR register"] pub type GcR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Read this register to clear the GEN_CALL interrupt(bit 11)of the RAWISR register"]
#[inline (always)] pub fn gc (& self) -> GcR { GcR :: new ((self . bits & 1) != 0) } }
#[doc = "Clear GEN_CALL Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`gc::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct GcSpec ; impl crate :: RegisterSpec for GcSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`gc::R`](R) reader structure"] impl crate :: Readable for GcSpec { }
#[doc = "`reset()` method sets GC to value 0"] impl crate :: Resettable for GcSpec { } }
#[doc = "ENR (rw) register accessor: Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`enr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`enr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@enr`] module"]
#[doc (alias = "ENR")] pub type Enr = crate :: Reg < enr :: EnrSpec > ;
#[doc = "Enable Register"] pub mod enr {
#[doc = "Register `ENR` reader"] pub type R = crate :: R < EnrSpec > ;
#[doc = "Register `ENR` writer"] pub type W = crate :: W < EnrSpec > ;
#[doc = "Field `ENABLE` reader - I2C mode enable"] pub type EnableR = crate :: BitReader ;
#[doc = "Field `ENABLE` writer - I2C mode enable"] pub type EnableW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ABORT` reader - I2C transfer abort"] pub type AbortR = crate :: BitReader ;
#[doc = "Field `ABORT` writer - I2C transfer abort"] pub type AbortW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - I2C mode enable"]
#[inline (always)] pub fn enable (& self) -> EnableR { EnableR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - I2C transfer abort"]
#[inline (always)] pub fn abort (& self) -> AbortR { AbortR :: new (((self . bits >> 1) & 1) != 0) } } impl W {
#[doc = "Bit 0 - I2C mode enable"]
#[inline (always)] pub fn enable (& mut self) -> EnableW < '_ , EnrSpec > { EnableW :: new (self , 0) }
#[doc = "Bit 1 - I2C transfer abort"]
#[inline (always)] pub fn abort (& mut self) -> AbortW < '_ , EnrSpec > { AbortW :: new (self , 1) } }
#[doc = "Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`enr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`enr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EnrSpec ; impl crate :: RegisterSpec for EnrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`enr::R`](R) reader structure"] impl crate :: Readable for EnrSpec { }
#[doc = "`write(|w| ..)` method takes [`enr::W`](W) writer structure"] impl crate :: Writable for EnrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ENR to value 0"] impl crate :: Resettable for EnrSpec { } }
#[doc = "SR (r) register accessor: Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "Status Register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Field `ACTIV` reader - I2C activity status"] pub type ActivR = crate :: BitReader ;
#[doc = "Field `TFNF` reader - Transmit FIFO not full"] pub type TfnfR = crate :: BitReader ;
#[doc = "Field `TFE` reader - Transmit FIFO completely empty"] pub type TfeR = crate :: BitReader ;
#[doc = "Field `RFNE` reader - Receive FIFO not empty"] pub type RfneR = crate :: BitReader ;
#[doc = "Field `RFF` reader - Receive FIFO completely full"] pub type RffR = crate :: BitReader ;
#[doc = "Field `MST_ACTIV` reader - Master FSM activity status"] pub type MstActivR = crate :: BitReader ;
#[doc = "Field `SLV_ACTIV` reader - Slave FSM activity status"] pub type SlvActivR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - I2C activity status"]
#[inline (always)] pub fn activ (& self) -> ActivR { ActivR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Transmit FIFO not full"]
#[inline (always)] pub fn tfnf (& self) -> TfnfR { TfnfR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmit FIFO completely empty"]
#[inline (always)] pub fn tfe (& self) -> TfeR { TfeR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Receive FIFO not empty"]
#[inline (always)] pub fn rfne (& self) -> RfneR { RfneR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Receive FIFO completely full"]
#[inline (always)] pub fn rff (& self) -> RffR { RffR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Master FSM activity status"]
#[inline (always)] pub fn mst_activ (& self) -> MstActivR { MstActivR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Slave FSM activity status"]
#[inline (always)] pub fn slv_activ (& self) -> SlvActivR { SlvActivR :: new (((self . bits >> 6) & 1) != 0) } }
#[doc = "Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`reset()` method sets SR to value 0x06"] impl crate :: Resettable for SrSpec { const RESET_VALUE : u32 = 0x06 ; } }
#[doc = "TXFLR (r) register accessor: Transmit FIFO Level Register\n\nYou can [`read`](crate::Reg::read) this register and get [`txflr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txflr`] module"]
#[doc (alias = "TXFLR")] pub type Txflr = crate :: Reg < txflr :: TxflrSpec > ;
#[doc = "Transmit FIFO Level Register"] pub mod txflr {
#[doc = "Register `TXFLR` reader"] pub type R = crate :: R < TxflrSpec > ;
#[doc = "Field `CNT` reader - Transmit FIFO level.Contains the number of valid data entires in the transmit FIFO"] pub type CntR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:1 - Transmit FIFO level.Contains the number of valid data entires in the transmit FIFO"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 3) as u8) } }
#[doc = "Transmit FIFO Level Register\n\nYou can [`read`](crate::Reg::read) this register and get [`txflr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TxflrSpec ; impl crate :: RegisterSpec for TxflrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txflr::R`](R) reader structure"] impl crate :: Readable for TxflrSpec { }
#[doc = "`reset()` method sets TXFLR to value 0"] impl crate :: Resettable for TxflrSpec { } }
#[doc = "RXFLR (r) register accessor: Receive FIFO Level Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rxflr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxflr`] module"]
#[doc (alias = "RXFLR")] pub type Rxflr = crate :: Reg < rxflr :: RxflrSpec > ;
#[doc = "Receive FIFO Level Register"] pub mod rxflr {
#[doc = "Register `RXFLR` reader"] pub type R = crate :: R < RxflrSpec > ;
#[doc = "Field `CNT` reader - Receive FIFO level. Contains the number of valid data entires in the receive FIFO"] pub type CntR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:1 - Receive FIFO level. Contains the number of valid data entires in the receive FIFO"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 3) as u8) } }
#[doc = "Receive FIFO Level Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rxflr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxflrSpec ; impl crate :: RegisterSpec for RxflrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rxflr::R`](R) reader structure"] impl crate :: Readable for RxflrSpec { }
#[doc = "`reset()` method sets RXFLR to value 0"] impl crate :: Resettable for RxflrSpec { } }
#[doc = "HOLD (rw) register accessor: SDA Hold Time Register\n\nYou can [`read`](crate::Reg::read) this register and get [`hold::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`hold::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@hold`] module"]
#[doc (alias = "HOLD")] pub type Hold = crate :: Reg < hold :: HoldSpec > ;
#[doc = "SDA Hold Time Register"] pub mod hold {
#[doc = "Register `HOLD` reader"] pub type R = crate :: R < HoldSpec > ;
#[doc = "Register `HOLD` writer"] pub type W = crate :: W < HoldSpec > ;
#[doc = "Field `TX_HOLD` reader - Sets the required SDA hold time in units of ic_clk period"] pub type TxHoldR = crate :: FieldReader < u16 > ;
#[doc = "Field `TX_HOLD` writer - Sets the required SDA hold time in units of ic_clk period"] pub type TxHoldW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ;
#[doc = "Field `RX_HOLD` reader - Sets the required SDA hold time in units of ic_clk period"] pub type RxHoldR = crate :: FieldReader ;
#[doc = "Field `RX_HOLD` writer - Sets the required SDA hold time in units of ic_clk period"] pub type RxHoldW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:15 - Sets the required SDA hold time in units of ic_clk period"]
#[inline (always)] pub fn tx_hold (& self) -> TxHoldR { TxHoldR :: new ((self . bits & 0xffff) as u16) }
#[doc = "Bits 16:23 - Sets the required SDA hold time in units of ic_clk period"]
#[inline (always)] pub fn rx_hold (& self) -> RxHoldR { RxHoldR :: new (((self . bits >> 16) & 0xff) as u8) } } impl W {
#[doc = "Bits 0:15 - Sets the required SDA hold time in units of ic_clk period"]
#[inline (always)] pub fn tx_hold (& mut self) -> TxHoldW < '_ , HoldSpec > { TxHoldW :: new (self , 0) }
#[doc = "Bits 16:23 - Sets the required SDA hold time in units of ic_clk period"]
#[inline (always)] pub fn rx_hold (& mut self) -> RxHoldW < '_ , HoldSpec > { RxHoldW :: new (self , 16) } }
#[doc = "SDA Hold Time Register\n\nYou can [`read`](crate::Reg::read) this register and get [`hold::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`hold::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct HoldSpec ; impl crate :: RegisterSpec for HoldSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`hold::R`](R) reader structure"] impl crate :: Readable for HoldSpec { }
#[doc = "`write(|w| ..)` method takes [`hold::W`](W) writer structure"] impl crate :: Writable for HoldSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets HOLD to value 0x01"] impl crate :: Resettable for HoldSpec { const RESET_VALUE : u32 = 0x01 ; } }
#[doc = "DMA (rw) register accessor: DMA Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma`] module"]
#[doc (alias = "DMA")] pub type Dma = crate :: Reg < dma :: DmaSpec > ;
#[doc = "DMA Control Register"] pub mod dma {
#[doc = "Register `DMA` reader"] pub type R = crate :: R < DmaSpec > ;
#[doc = "Register `DMA` writer"] pub type W = crate :: W < DmaSpec > ;
#[doc = "Field `RXEN` reader - Receive DMA enable"] pub type RxenR = crate :: BitReader ;
#[doc = "Field `RXEN` writer - Receive DMA enable"] pub type RxenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXEN` reader - Transmit DMA enable"] pub type TxenR = crate :: BitReader ;
#[doc = "Field `TXEN` writer - Transmit DMA enable"] pub type TxenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Receive DMA enable"]
#[inline (always)] pub fn rxen (& self) -> RxenR { RxenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Transmit DMA enable"]
#[inline (always)] pub fn txen (& self) -> TxenR { TxenR :: new (((self . bits >> 1) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Receive DMA enable"]
#[inline (always)] pub fn rxen (& mut self) -> RxenW < '_ , DmaSpec > { RxenW :: new (self , 0) }
#[doc = "Bit 1 - Transmit DMA enable"]
#[inline (always)] pub fn txen (& mut self) -> TxenW < '_ , DmaSpec > { TxenW :: new (self , 1) } }
#[doc = "DMA Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaSpec ; impl crate :: RegisterSpec for DmaSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dma::R`](R) reader structure"] impl crate :: Readable for DmaSpec { }
#[doc = "`write(|w| ..)` method takes [`dma::W`](W) writer structure"] impl crate :: Writable for DmaSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMA to value 0"] impl crate :: Resettable for DmaSpec { } }
#[doc = "SETUP (rw) register accessor: SDA Setup Time Register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`setup::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@setup`] module"]
#[doc (alias = "SETUP")] pub type Setup = crate :: Reg < setup :: SetupSpec > ;
#[doc = "SDA Setup Time Register"] pub mod setup {
#[doc = "Register `SETUP` reader"] pub type R = crate :: R < SetupSpec > ;
#[doc = "Register `SETUP` writer"] pub type W = crate :: W < SetupSpec > ;
#[doc = "Field `CNT` reader - SDA setup"] pub type CntR = crate :: FieldReader ;
#[doc = "Field `CNT` writer - SDA setup"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - SDA setup"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - SDA setup"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , SetupSpec > { CntW :: new (self , 0) } }
#[doc = "SDA Setup Time Register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`setup::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SetupSpec ; impl crate :: RegisterSpec for SetupSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`setup::R`](R) reader structure"] impl crate :: Readable for SetupSpec { }
#[doc = "`write(|w| ..)` method takes [`setup::W`](W) writer structure"] impl crate :: Writable for SetupSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SETUP to value 0x64"] impl crate :: Resettable for SetupSpec { const RESET_VALUE : u32 = 0x64 ; } }
#[doc = "GCR (rw) register accessor: ACK General Call Register\n\nYou can [`read`](crate::Reg::read) this register and get [`gcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@gcr`] module"]
#[doc (alias = "GCR")] pub type Gcr = crate :: Reg < gcr :: GcrSpec > ;
#[doc = "ACK General Call Register"] pub mod gcr {
#[doc = "Register `GCR` reader"] pub type R = crate :: R < GcrSpec > ;
#[doc = "Register `GCR` writer"] pub type W = crate :: W < GcrSpec > ;
#[doc = "Field `GC` reader - ACK general call"] pub type GcR = crate :: BitReader ;
#[doc = "Field `GC` writer - ACK general call"] pub type GcW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - ACK general call"]
#[inline (always)] pub fn gc (& self) -> GcR { GcR :: new ((self . bits & 1) != 0) } } impl W {
#[doc = "Bit 0 - ACK general call"]
#[inline (always)] pub fn gc (& mut self) -> GcW < '_ , GcrSpec > { GcW :: new (self , 0) } }
#[doc = "ACK General Call Register\n\nYou can [`read`](crate::Reg::read) this register and get [`gcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct GcrSpec ; impl crate :: RegisterSpec for GcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`gcr::R`](R) reader structure"] impl crate :: Readable for GcrSpec { }
#[doc = "`write(|w| ..)` method takes [`gcr::W`](W) writer structure"] impl crate :: Writable for GcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GCR to value 0x01"] impl crate :: Resettable for GcrSpec { const RESET_VALUE : u32 = 0x01 ; } }
#[doc = "SLVMASK (rw) register accessor: Slave Address Mask Register\n\nYou can [`read`](crate::Reg::read) this register and get [`slvmask::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`slvmask::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@slvmask`] module"]
#[doc (alias = "SLVMASK")] pub type Slvmask = crate :: Reg < slvmask :: SlvmaskSpec > ;
#[doc = "Slave Address Mask Register"] pub mod slvmask {
#[doc = "Register `SLVMASK` reader"] pub type R = crate :: R < SlvmaskSpec > ;
#[doc = "Register `SLVMASK` writer"] pub type W = crate :: W < SlvmaskSpec > ;
#[doc = "Field `Mask` reader - Slave Address Mask"] pub type MaskR = crate :: FieldReader < u16 > ;
#[doc = "Field `Mask` writer - Slave Address Mask"] pub type MaskW < 'a , REG > = crate :: FieldWriter < 'a , REG , 10 , u16 > ; impl R {
#[doc = "Bits 0:9 - Slave Address Mask"]
#[inline (always)] pub fn mask (& self) -> MaskR { MaskR :: new ((self . bits & 0x03ff) as u16) } } impl W {
#[doc = "Bits 0:9 - Slave Address Mask"]
#[inline (always)] pub fn mask (& mut self) -> MaskW < '_ , SlvmaskSpec > { MaskW :: new (self , 0) } }
#[doc = "Slave Address Mask Register\n\nYou can [`read`](crate::Reg::read) this register and get [`slvmask::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`slvmask::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SlvmaskSpec ; impl crate :: RegisterSpec for SlvmaskSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`slvmask::R`](R) reader structure"] impl crate :: Readable for SlvmaskSpec { }
#[doc = "`write(|w| ..)` method takes [`slvmask::W`](W) writer structure"] impl crate :: Writable for SlvmaskSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SLVMASK to value 0x03ff"] impl crate :: Resettable for SlvmaskSpec { const RESET_VALUE : u32 = 0x03ff ; } }
#[doc = "SLVRCVADDR (r) register accessor: Receiver Address Register\n\nYou can [`read`](crate::Reg::read) this register and get [`slvrcvaddr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@slvrcvaddr`] module"]
#[doc (alias = "SLVRCVADDR")] pub type Slvrcvaddr = crate :: Reg < slvrcvaddr :: SlvrcvaddrSpec > ;
#[doc = "Receiver Address Register"] pub mod slvrcvaddr {
#[doc = "Register `SLVRCVADDR` reader"] pub type R = crate :: R < SlvrcvaddrSpec > ;
#[doc = "Field `ADDR` reader - Slave Address"] pub type AddrR = crate :: FieldReader < u16 > ; impl R {
#[doc = "Bits 0:9 - Slave Address"]
#[inline (always)] pub fn addr (& self) -> AddrR { AddrR :: new ((self . bits & 0x03ff) as u16) } }
#[doc = "Receiver Address Register\n\nYou can [`read`](crate::Reg::read) this register and get [`slvrcvaddr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SlvrcvaddrSpec ; impl crate :: RegisterSpec for SlvrcvaddrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`slvrcvaddr::R`](R) reader structure"] impl crate :: Readable for SlvrcvaddrSpec { }
#[doc = "`reset()` method sets SLVRCVADDR to value 0"] impl crate :: Resettable for SlvrcvaddrSpec { } } }
#[doc = "Independent watchdog"] pub type Iwdg = crate :: Periph < iwdg :: RegisterBlock , 0x4000_3000 > ; impl core :: fmt :: Debug for Iwdg { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Iwdg") . finish () } }
#[doc = "Independent watchdog"] pub mod iwdg {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { kr : Kr , pr : Pr , rlr : Rlr , sr : Sr , cr : Cr , igen : Igen , } impl RegisterBlock {
#[doc = "0x00 - Key register"]
#[inline (always)] pub const fn kr (& self) -> & Kr { & self . kr }
#[doc = "0x04 - Prescaler register"]
#[inline (always)] pub const fn pr (& self) -> & Pr { & self . pr }
#[doc = "0x08 - Reload register"]
#[inline (always)] pub const fn rlr (& self) -> & Rlr { & self . rlr }
#[doc = "0x0c - Status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x10 - Control register"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr }
#[doc = "0x14 - Interruput generate value register"]
#[inline (always)] pub const fn igen (& self) -> & Igen { & self . igen } }
#[doc = "KR (w) register accessor: Key register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`kr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@kr`] module"]
#[doc (alias = "KR")] pub type Kr = crate :: Reg < kr :: KrSpec > ;
#[doc = "Key register"] pub mod kr {
#[doc = "Register `KR` writer"] pub type W = crate :: W < KrSpec > ;
#[doc = "Field `KEY` writer - Key value"] pub type KeyW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl W {
#[doc = "Bits 0:15 - Key value"]
#[inline (always)] pub fn key (& mut self) -> KeyW < '_ , KrSpec > { KeyW :: new (self , 0) } }
#[doc = "Key register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`kr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct KrSpec ; impl crate :: RegisterSpec for KrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`kr::W`](W) writer structure"] impl crate :: Writable for KrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets KR to value 0"] impl crate :: Resettable for KrSpec { } }
#[doc = "PR (rw) register accessor: Prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`pr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pr`] module"]
#[doc (alias = "PR")] pub type Pr = crate :: Reg < pr :: PrSpec > ;
#[doc = "Prescaler register"] pub mod pr {
#[doc = "Register `PR` reader"] pub type R = crate :: R < PrSpec > ;
#[doc = "Register `PR` writer"] pub type W = crate :: W < PrSpec > ;
#[doc = "Field `PR` reader - Prescaler divider"] pub type PrR = crate :: FieldReader ;
#[doc = "Field `PR` writer - Prescaler divider"] pub type PrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ; impl R {
#[doc = "Bits 0:2 - Prescaler divider"]
#[inline (always)] pub fn pr (& self) -> PrR { PrR :: new ((self . bits & 7) as u8) } } impl W {
#[doc = "Bits 0:2 - Prescaler divider"]
#[inline (always)] pub fn pr (& mut self) -> PrW < '_ , PrSpec > { PrW :: new (self , 0) } }
#[doc = "Prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`pr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PrSpec ; impl crate :: RegisterSpec for PrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`pr::R`](R) reader structure"] impl crate :: Readable for PrSpec { }
#[doc = "`write(|w| ..)` method takes [`pr::W`](W) writer structure"] impl crate :: Writable for PrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PR to value 0"] impl crate :: Resettable for PrSpec { } }
#[doc = "RLR (rw) register accessor: Reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`rlr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rlr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rlr`] module"]
#[doc (alias = "RLR")] pub type Rlr = crate :: Reg < rlr :: RlrSpec > ;
#[doc = "Reload register"] pub mod rlr {
#[doc = "Register `RLR` reader"] pub type R = crate :: R < RlrSpec > ;
#[doc = "Register `RLR` writer"] pub type W = crate :: W < RlrSpec > ;
#[doc = "Field `RL` reader - Watchdog counter reload value"] pub type RlR = crate :: FieldReader < u16 > ;
#[doc = "Field `RL` writer - Watchdog counter reload value"] pub type RlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 12 , u16 > ; impl R {
#[doc = "Bits 0:11 - Watchdog counter reload value"]
#[inline (always)] pub fn rl (& self) -> RlR { RlR :: new ((self . bits & 0x0fff) as u16) } } impl W {
#[doc = "Bits 0:11 - Watchdog counter reload value"]
#[inline (always)] pub fn rl (& mut self) -> RlW < '_ , RlrSpec > { RlW :: new (self , 0) } }
#[doc = "Reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`rlr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rlr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RlrSpec ; impl crate :: RegisterSpec for RlrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rlr::R`](R) reader structure"] impl crate :: Readable for RlrSpec { }
#[doc = "`write(|w| ..)` method takes [`rlr::W`](W) writer structure"] impl crate :: Writable for RlrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RLR to value 0x0fff"] impl crate :: Resettable for RlrSpec { const RESET_VALUE : u32 = 0x0fff ; } }
#[doc = "SR (r) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "Status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Field `PVU` reader - Watchdog prescaler value update"] pub type PvuR = crate :: BitReader ;
#[doc = "Field `RVU` reader - Watchdog counter reload value update"] pub type RvuR = crate :: BitReader ;
#[doc = "Field `IVU` reader - Watchdog interrupt generate value update"] pub type IvuR = crate :: BitReader ;
#[doc = "Field `UPDATE` reader - Watchdog reload value update flag"] pub type UpdateR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Watchdog prescaler value update"]
#[inline (always)] pub fn pvu (& self) -> PvuR { PvuR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Watchdog counter reload value update"]
#[inline (always)] pub fn rvu (& self) -> RvuR { RvuR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Watchdog interrupt generate value update"]
#[inline (always)] pub fn ivu (& self) -> IvuR { IvuR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Watchdog reload value update flag"]
#[inline (always)] pub fn update (& self) -> UpdateR { UpdateR :: new (((self . bits >> 3) & 1) != 0) } }
#[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } }
#[doc = "CR (rw) register accessor: Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "Control register"] pub mod cr {
#[doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ;
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `IRQ_SEL` reader - Interruput select"] pub type IrqSelR = crate :: BitReader ;
#[doc = "Field `IRQ_SEL` writer - Interruput select"] pub type IrqSelW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IRQ_CLR` reader - Interruput clear"] pub type IrqClrR = crate :: BitReader ;
#[doc = "Field `IRQ_CLR` writer - Interruput clear"] pub type IrqClrW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Interruput select"]
#[inline (always)] pub fn irq_sel (& self) -> IrqSelR { IrqSelR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Interruput clear"]
#[inline (always)] pub fn irq_clr (& self) -> IrqClrR { IrqClrR :: new (((self . bits >> 1) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Interruput select"]
#[inline (always)] pub fn irq_sel (& mut self) -> IrqSelW < '_ , CrSpec > { IrqSelW :: new (self , 0) }
#[doc = "Bit 1 - Interruput clear"]
#[inline (always)] pub fn irq_clr (& mut self) -> IrqClrW < '_ , CrSpec > { IrqClrW :: new (self , 1) } }
#[doc = "Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0"] impl crate :: Resettable for CrSpec { } }
#[doc = "IGEN (rw) register accessor: Interruput generate value register\n\nYou can [`read`](crate::Reg::read) this register and get [`igen::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`igen::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@igen`] module"]
#[doc (alias = "IGEN")] pub type Igen = crate :: Reg < igen :: IgenSpec > ;
#[doc = "Interruput generate value register"] pub mod igen {
#[doc = "Register `IGEN` reader"] pub type R = crate :: R < IgenSpec > ;
#[doc = "Register `IGEN` writer"] pub type W = crate :: W < IgenSpec > ;
#[doc = "Field `IGEN` reader - Watchdog Interrupt Generate value"] pub type IgenR = crate :: FieldReader < u16 > ;
#[doc = "Field `IGEN` writer - Watchdog Interrupt Generate value"] pub type IgenW < 'a , REG > = crate :: FieldWriter < 'a , REG , 12 , u16 > ; impl R {
#[doc = "Bits 0:11 - Watchdog Interrupt Generate value"]
#[inline (always)] pub fn igen (& self) -> IgenR { IgenR :: new ((self . bits & 0x0fff) as u16) } } impl W {
#[doc = "Bits 0:11 - Watchdog Interrupt Generate value"]
#[inline (always)] pub fn igen (& mut self) -> IgenW < '_ , IgenSpec > { IgenW :: new (self , 0) } }
#[doc = "Interruput generate value register\n\nYou can [`read`](crate::Reg::read) this register and get [`igen::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`igen::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IgenSpec ; impl crate :: RegisterSpec for IgenSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`igen::R`](R) reader structure"] impl crate :: Readable for IgenSpec { }
#[doc = "`write(|w| ..)` method takes [`igen::W`](W) writer structure"] impl crate :: Writable for IgenSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets IGEN to value 0"] impl crate :: Resettable for IgenSpec { } } }
#[doc = "Power control"] pub type Pwr = crate :: Periph < pwr :: RegisterBlock , 0x4000_7000 > ; impl core :: fmt :: Debug for Pwr { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Pwr") . finish () } }
#[doc = "Power control"] pub mod pwr {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cr : Cr , csr : Csr , } impl RegisterBlock {
#[doc = "0x00 - CR"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr }
#[doc = "0x04 - CSR"]
#[inline (always)] pub const fn csr (& self) -> & Csr { & self . csr } }
#[doc = "CR (rw) register accessor: CR\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "CR"] pub mod cr {
#[doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ;
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `LPDS` reader - Low power deepsleep"] pub type LpdsR = crate :: BitReader ;
#[doc = "Field `LPDS` writer - Low power deepsleep"] pub type LpdsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PDDS` reader - Power down deepsleep"] pub type PddsR = crate :: BitReader ;
#[doc = "Field `PDDS` writer - Power down deepsleep"] pub type PddsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CWUF` reader - Clear wakeup flag"] pub type CwufR = crate :: BitReader ;
#[doc = "Field `CWUF` writer - Clear wakeup flag"] pub type CwufW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CSBF` reader - Clear standby flag"] pub type CsbfR = crate :: BitReader ;
#[doc = "Field `CSBF` writer - Clear standby flag"] pub type CsbfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PVDE` reader - Power voltage detector enable"] pub type PvdeR = crate :: BitReader ;
#[doc = "Field `PVDE` writer - Power voltage detector enable"] pub type PvdeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBP` reader - domain write protection"] pub type DbpR = crate :: BitReader ;
#[doc = "Field `DBP` writer - domain write protection"] pub type DbpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PLS` reader - PVD level selection"] pub type PlsR = crate :: FieldReader ;
#[doc = "Field `PLS` writer - PVD level selection"] pub type PlsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `STDBY_FS_WK` reader - Quickly wake-up standby mode selection"] pub type StdbyFsWkR = crate :: FieldReader ;
#[doc = "Field `STDBY_FS_WK` writer - Quickly wake-up standby mode selection"] pub type StdbyFsWkW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bit 0 - Low power deepsleep"]
#[inline (always)] pub fn lpds (& self) -> LpdsR { LpdsR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Power down deepsleep"]
#[inline (always)] pub fn pdds (& self) -> PddsR { PddsR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Clear wakeup flag"]
#[inline (always)] pub fn cwuf (& self) -> CwufR { CwufR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Clear standby flag"]
#[inline (always)] pub fn csbf (& self) -> CsbfR { CsbfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Power voltage detector enable"]
#[inline (always)] pub fn pvde (& self) -> PvdeR { PvdeR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 8 - domain write protection"]
#[inline (always)] pub fn dbp (& self) -> DbpR { DbpR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bits 9:12 - PVD level selection"]
#[inline (always)] pub fn pls (& self) -> PlsR { PlsR :: new (((self . bits >> 9) & 0x0f) as u8) }
#[doc = "Bits 14:15 - Quickly wake-up standby mode selection"]
#[inline (always)] pub fn stdby_fs_wk (& self) -> StdbyFsWkR { StdbyFsWkR :: new (((self . bits >> 14) & 3) as u8) } } impl W {
#[doc = "Bit 0 - Low power deepsleep"]
#[inline (always)] pub fn lpds (& mut self) -> LpdsW < '_ , CrSpec > { LpdsW :: new (self , 0) }
#[doc = "Bit 1 - Power down deepsleep"]
#[inline (always)] pub fn pdds (& mut self) -> PddsW < '_ , CrSpec > { PddsW :: new (self , 1) }
#[doc = "Bit 2 - Clear wakeup flag"]
#[inline (always)] pub fn cwuf (& mut self) -> CwufW < '_ , CrSpec > { CwufW :: new (self , 2) }
#[doc = "Bit 3 - Clear standby flag"]
#[inline (always)] pub fn csbf (& mut self) -> CsbfW < '_ , CrSpec > { CsbfW :: new (self , 3) }
#[doc = "Bit 4 - Power voltage detector enable"]
#[inline (always)] pub fn pvde (& mut self) -> PvdeW < '_ , CrSpec > { PvdeW :: new (self , 4) }
#[doc = "Bit 8 - domain write protection"]
#[inline (always)] pub fn dbp (& mut self) -> DbpW < '_ , CrSpec > { DbpW :: new (self , 8) }
#[doc = "Bits 9:12 - PVD level selection"]
#[inline (always)] pub fn pls (& mut self) -> PlsW < '_ , CrSpec > { PlsW :: new (self , 9) }
#[doc = "Bits 14:15 - Quickly wake-up standby mode selection"]
#[inline (always)] pub fn stdby_fs_wk (& mut self) -> StdbyFsWkW < '_ , CrSpec > { StdbyFsWkW :: new (self , 14) } }
#[doc = "CR\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0"] impl crate :: Resettable for CrSpec { } }
#[doc = "CSR (rw) register accessor: CSR\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`csr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@csr`] module"]
#[doc (alias = "CSR")] pub type Csr = crate :: Reg < csr :: CsrSpec > ;
#[doc = "CSR"] pub mod csr {
#[doc = "Register `CSR` reader"] pub type R = crate :: R < CsrSpec > ;
#[doc = "Register `CSR` writer"] pub type W = crate :: W < CsrSpec > ;
#[doc = "Field `WUF` reader - Wakeup flag"] pub type WufR = crate :: BitReader ;
#[doc = "Field `WUF` writer - Wakeup flag"] pub type WufW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SBF` reader - Standby flag"] pub type SbfR = crate :: BitReader ;
#[doc = "Field `SBF` writer - Standby flag"] pub type SbfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PVDO` reader - PVD output"] pub type PvdoR = crate :: BitReader ;
#[doc = "Field `PVDO` writer - PVD output"] pub type PvdoW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EWUP` reader - Enable WKUP pin"] pub type EwupR = crate :: BitReader ;
#[doc = "Field `EWUP` writer - Enable WKUP pin"] pub type EwupW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Wakeup flag"]
#[inline (always)] pub fn wuf (& self) -> WufR { WufR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Standby flag"]
#[inline (always)] pub fn sbf (& self) -> SbfR { SbfR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - PVD output"]
#[inline (always)] pub fn pvdo (& self) -> PvdoR { PvdoR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 8 - Enable WKUP pin"]
#[inline (always)] pub fn ewup (& self) -> EwupR { EwupR :: new (((self . bits >> 8) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Wakeup flag"]
#[inline (always)] pub fn wuf (& mut self) -> WufW < '_ , CsrSpec > { WufW :: new (self , 0) }
#[doc = "Bit 1 - Standby flag"]
#[inline (always)] pub fn sbf (& mut self) -> SbfW < '_ , CsrSpec > { SbfW :: new (self , 1) }
#[doc = "Bit 2 - PVD output"]
#[inline (always)] pub fn pvdo (& mut self) -> PvdoW < '_ , CsrSpec > { PvdoW :: new (self , 2) }
#[doc = "Bit 8 - Enable WKUP pin"]
#[inline (always)] pub fn ewup (& mut self) -> EwupW < '_ , CsrSpec > { EwupW :: new (self , 8) } }
#[doc = "CSR\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`csr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CsrSpec ; impl crate :: RegisterSpec for CsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`csr::R`](R) reader structure"] impl crate :: Readable for CsrSpec { }
#[doc = "`write(|w| ..)` method takes [`csr::W`](W) writer structure"] impl crate :: Writable for CsrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CSR to value 0"] impl crate :: Resettable for CsrSpec { } } }
#[doc = "Reset and clock control"] pub type Rcc = crate :: Periph < rcc :: RegisterBlock , 0x4002_1000 > ; impl core :: fmt :: Debug for Rcc { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Rcc") . finish () } }
#[doc = "Reset and clock control"] pub mod rcc {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cr : Cr , cfgr : Cfgr , cir : Cir , apb2rstr : Apb2rstr , apb1rstr : Apb1rstr , ahbenr : Ahbenr , apb2enr : Apb2enr , apb1enr : Apb1enr , bdcr : Bdcr , csr : Csr , ahbrstr : Ahbrstr , cfgr2 : Cfgr2 , rng : Rng , _reserved13 : [u8 ; 0x0c] , syscfg : Syscfg , } impl RegisterBlock {
#[doc = "0x00 - Control Register"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr }
#[doc = "0x04 - Configuration Register"]
#[inline (always)] pub const fn cfgr (& self) -> & Cfgr { & self . cfgr }
#[doc = "0x08 - Clock Interrupt Register"]
#[inline (always)] pub const fn cir (& self) -> & Cir { & self . cir }
#[doc = "0x0c - Advanced Peripheral Bus 2 Reset Register"]
#[inline (always)] pub const fn apb2rstr (& self) -> & Apb2rstr { & self . apb2rstr }
#[doc = "0x10 - Advanced Peripheral Bus 1 Reset Register"]
#[inline (always)] pub const fn apb1rstr (& self) -> & Apb1rstr { & self . apb1rstr }
#[doc = "0x14 - Advanced High Performance Bus Enable Register"]
#[inline (always)] pub const fn ahbenr (& self) -> & Ahbenr { & self . ahbenr }
#[doc = "0x18 - Advanced Peripheral Bus 2 Enable Register"]
#[inline (always)] pub const fn apb2enr (& self) -> & Apb2enr { & self . apb2enr }
#[doc = "0x1c - Advanced Peripheral Bus 1 Enable Register"]
#[inline (always)] pub const fn apb1enr (& self) -> & Apb1enr { & self . apb1enr }
#[doc = "0x20 - Backup Domain Control Register"]
#[inline (always)] pub const fn bdcr (& self) -> & Bdcr { & self . bdcr }
#[doc = "0x24 - Control Status Register"]
#[inline (always)] pub const fn csr (& self) -> & Csr { & self . csr }
#[doc = "0x28 - Advanced High Performance Bus Reset Register"]
#[inline (always)] pub const fn ahbrstr (& self) -> & Ahbrstr { & self . ahbrstr }
#[doc = "0x2c - Configure Register 2"]
#[inline (always)] pub const fn cfgr2 (& self) -> & Cfgr2 { & self . cfgr2 }
#[doc = "0x30 - Random number register"]
#[inline (always)] pub const fn rng (& self) -> & Rng { & self . rng }
#[doc = "0x40 - System Configuration Register"]
#[inline (always)] pub const fn syscfg (& self) -> & Syscfg { & self . syscfg } }
#[doc = "CR (rw) register accessor: Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "Control Register"] pub mod cr {
#[doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ;
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `HSION` reader - Internal high-speed clock enable"] pub type HsionR = crate :: BitReader ;
#[doc = "Field `HSION` writer - Internal high-speed clock enable"] pub type HsionW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSIRDY` reader - Internal high-speed clock ready flag"] pub type HsirdyR = crate :: BitReader ;
#[doc = "Field `HSIRDY` writer - Internal high-speed clock ready flag"] pub type HsirdyW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSITEN` reader - Internal high-speed clock temperature enable"] pub type HsitenR = crate :: BitReader ;
#[doc = "Field `HSITEN` writer - Internal high-speed clock temperature enable"] pub type HsitenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSEON` reader - External high-speed clock enable"] pub type HseonR = crate :: BitReader ;
#[doc = "Field `HSEON` writer - External high-speed clock enable"] pub type HseonW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSERDY` reader - External high-speed clock ready flag"] pub type HserdyR = crate :: BitReader ;
#[doc = "Field `HSERDY` writer - External high-speed clock ready flag"] pub type HserdyW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSEBYP` reader - External high-speed clock bypass"] pub type HsebypR = crate :: BitReader ;
#[doc = "Field `HSEBYP` writer - External high-speed clock bypass"] pub type HsebypW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCSON` reader - Clock security system enable"] pub type CcsonR = crate :: BitReader ;
#[doc = "Field `CCSON` writer - Clock security system enable"] pub type CcsonW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PLLDIV` reader - PLL divider factor"] pub type PlldivR = crate :: FieldReader ;
#[doc = "Field `PLLDIV` writer - PLL divider factor"] pub type PlldivW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `PLLON` reader - PLL enable"] pub type PllonR = crate :: BitReader ;
#[doc = "Field `PLLON` writer - PLL enable"] pub type PllonW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PLLRDY` reader - PLL clock ready flag"] pub type PllrdyR = crate :: BitReader ;
#[doc = "Field `PLLRDY` writer - PLL clock ready flag"] pub type PllrdyW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PLLMUL` reader - PLL multiplication factor"] pub type PllmulR = crate :: FieldReader ;
#[doc = "Field `PLLMUL` writer - PLL multiplication factor"] pub type PllmulW < 'a , REG > = crate :: FieldWriter < 'a , REG , 6 > ; impl R {
#[doc = "Bit 0 - Internal high-speed clock enable"]
#[inline (always)] pub fn hsion (& self) -> HsionR { HsionR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Internal high-speed clock ready flag"]
#[inline (always)] pub fn hsirdy (& self) -> HsirdyR { HsirdyR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Internal high-speed clock temperature enable"]
#[inline (always)] pub fn hsiten (& self) -> HsitenR { HsitenR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 16 - External high-speed clock enable"]
#[inline (always)] pub fn hseon (& self) -> HseonR { HseonR :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - External high-speed clock ready flag"]
#[inline (always)] pub fn hserdy (& self) -> HserdyR { HserdyR :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - External high-speed clock bypass"]
#[inline (always)] pub fn hsebyp (& self) -> HsebypR { HsebypR :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - Clock security system enable"]
#[inline (always)] pub fn ccson (& self) -> CcsonR { CcsonR :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bits 20:22 - PLL divider factor"]
#[inline (always)] pub fn plldiv (& self) -> PlldivR { PlldivR :: new (((self . bits >> 20) & 7) as u8) }
#[doc = "Bit 24 - PLL enable"]
#[inline (always)] pub fn pllon (& self) -> PllonR { PllonR :: new (((self . bits >> 24) & 1) != 0) }
#[doc = "Bit 25 - PLL clock ready flag"]
#[inline (always)] pub fn pllrdy (& self) -> PllrdyR { PllrdyR :: new (((self . bits >> 25) & 1) != 0) }
#[doc = "Bits 26:31 - PLL multiplication factor"]
#[inline (always)] pub fn pllmul (& self) -> PllmulR { PllmulR :: new (((self . bits >> 26) & 0x3f) as u8) } } impl W {
#[doc = "Bit 0 - Internal high-speed clock enable"]
#[inline (always)] pub fn hsion (& mut self) -> HsionW < '_ , CrSpec > { HsionW :: new (self , 0) }
#[doc = "Bit 1 - Internal high-speed clock ready flag"]
#[inline (always)] pub fn hsirdy (& mut self) -> HsirdyW < '_ , CrSpec > { HsirdyW :: new (self , 1) }
#[doc = "Bit 2 - Internal high-speed clock temperature enable"]
#[inline (always)] pub fn hsiten (& mut self) -> HsitenW < '_ , CrSpec > { HsitenW :: new (self , 2) }
#[doc = "Bit 16 - External high-speed clock enable"]
#[inline (always)] pub fn hseon (& mut self) -> HseonW < '_ , CrSpec > { HseonW :: new (self , 16) }
#[doc = "Bit 17 - External high-speed clock ready flag"]
#[inline (always)] pub fn hserdy (& mut self) -> HserdyW < '_ , CrSpec > { HserdyW :: new (self , 17) }
#[doc = "Bit 18 - External high-speed clock bypass"]
#[inline (always)] pub fn hsebyp (& mut self) -> HsebypW < '_ , CrSpec > { HsebypW :: new (self , 18) }
#[doc = "Bit 19 - Clock security system enable"]
#[inline (always)] pub fn ccson (& mut self) -> CcsonW < '_ , CrSpec > { CcsonW :: new (self , 19) }
#[doc = "Bits 20:22 - PLL divider factor"]
#[inline (always)] pub fn plldiv (& mut self) -> PlldivW < '_ , CrSpec > { PlldivW :: new (self , 20) }
#[doc = "Bit 24 - PLL enable"]
#[inline (always)] pub fn pllon (& mut self) -> PllonW < '_ , CrSpec > { PllonW :: new (self , 24) }
#[doc = "Bit 25 - PLL clock ready flag"]
#[inline (always)] pub fn pllrdy (& mut self) -> PllrdyW < '_ , CrSpec > { PllrdyW :: new (self , 25) }
#[doc = "Bits 26:31 - PLL multiplication factor"]
#[inline (always)] pub fn pllmul (& mut self) -> PllmulW < '_ , CrSpec > { PllmulW :: new (self , 26) } }
#[doc = "Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0x01"] impl crate :: Resettable for CrSpec { const RESET_VALUE : u32 = 0x01 ; } }
#[doc = "CFGR (rw) register accessor: Configuration Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cfgr`] module"]
#[doc (alias = "CFGR")] pub type Cfgr = crate :: Reg < cfgr :: CfgrSpec > ;
#[doc = "Configuration Register"] pub mod cfgr {
#[doc = "Register `CFGR` reader"] pub type R = crate :: R < CfgrSpec > ;
#[doc = "Register `CFGR` writer"] pub type W = crate :: W < CfgrSpec > ;
#[doc = "Field `SW` reader - System clock switch"] pub type SwR = crate :: FieldReader ;
#[doc = "Field `SW` writer - System clock switch"] pub type SwW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `SWS` reader - System clock switch status"] pub type SwsR = crate :: FieldReader ;
#[doc = "Field `SWS` writer - System clock switch status"] pub type SwsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `HPRE` reader - AHB Prescaler"] pub type HpreR = crate :: FieldReader ;
#[doc = "Field `HPRE` writer - AHB Prescaler"] pub type HpreW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `PPRE1` reader - APB low-speed prescaler(APB1)"] pub type Ppre1R = crate :: FieldReader ;
#[doc = "Field `PPRE1` writer - APB low-speed prescaler(APB1)"] pub type Ppre1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `PPRE2` reader - APB high-speed prescaler(APB2)"] pub type Ppre2R = crate :: FieldReader ;
#[doc = "Field `PPRE2` writer - APB high-speed prescaler(APB2)"] pub type Ppre2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `CLK48SEL` reader - USB 48M clock selection"] pub type Clk48selR = crate :: BitReader ;
#[doc = "Field `CLK48SEL` writer - USB 48M clock selection"] pub type Clk48selW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PLLSRC` reader - PLL entry clock source"] pub type PllsrcR = crate :: BitReader ;
#[doc = "Field `PLLSRC` writer - PLL entry clock source"] pub type PllsrcW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PLLXTPRE` reader - HSE divider for PLL entry"] pub type PllxtpreR = crate :: BitReader ;
#[doc = "Field `PLLXTPRE` writer - HSE divider for PLL entry"] pub type PllxtpreW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `USBRPE` reader - USB prescaler"] pub type UsbrpeR = crate :: FieldReader ;
#[doc = "Field `USBRPE` writer - USB prescaler"] pub type UsbrpeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `MCO` reader - Microcontroller clock output"] pub type McoR = crate :: FieldReader ;
#[doc = "Field `MCO` writer - Microcontroller clock output"] pub type McoW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `PLLDN` reader - PLL configuration factor expansion"] pub type PlldnR = crate :: FieldReader ;
#[doc = "Field `PLLDN` writer - PLL configuration factor expansion"] pub type PlldnW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bits 0:1 - System clock switch"]
#[inline (always)] pub fn sw (& self) -> SwR { SwR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - System clock switch status"]
#[inline (always)] pub fn sws (& self) -> SwsR { SwsR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:7 - AHB Prescaler"]
#[inline (always)] pub fn hpre (& self) -> HpreR { HpreR :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:10 - APB low-speed prescaler(APB1)"]
#[inline (always)] pub fn ppre1 (& self) -> Ppre1R { Ppre1R :: new (((self . bits >> 8) & 7) as u8) }
#[doc = "Bits 11:13 - APB high-speed prescaler(APB2)"]
#[inline (always)] pub fn ppre2 (& self) -> Ppre2R { Ppre2R :: new (((self . bits >> 11) & 7) as u8) }
#[doc = "Bit 15 - USB 48M clock selection"]
#[inline (always)] pub fn clk48sel (& self) -> Clk48selR { Clk48selR :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - PLL entry clock source"]
#[inline (always)] pub fn pllsrc (& self) -> PllsrcR { PllsrcR :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - HSE divider for PLL entry"]
#[inline (always)] pub fn pllxtpre (& self) -> PllxtpreR { PllxtpreR :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bits 22:23 - USB prescaler"]
#[inline (always)] pub fn usbrpe (& self) -> UsbrpeR { UsbrpeR :: new (((self . bits >> 22) & 3) as u8) }
#[doc = "Bits 24:27 - Microcontroller clock output"]
#[inline (always)] pub fn mco (& self) -> McoR { McoR :: new (((self . bits >> 24) & 0x0f) as u8) }
#[doc = "Bits 30:31 - PLL configuration factor expansion"]
#[inline (always)] pub fn plldn (& self) -> PlldnR { PlldnR :: new (((self . bits >> 30) & 3) as u8) } } impl W {
#[doc = "Bits 0:1 - System clock switch"]
#[inline (always)] pub fn sw (& mut self) -> SwW < '_ , CfgrSpec > { SwW :: new (self , 0) }
#[doc = "Bits 2:3 - System clock switch status"]
#[inline (always)] pub fn sws (& mut self) -> SwsW < '_ , CfgrSpec > { SwsW :: new (self , 2) }
#[doc = "Bits 4:7 - AHB Prescaler"]
#[inline (always)] pub fn hpre (& mut self) -> HpreW < '_ , CfgrSpec > { HpreW :: new (self , 4) }
#[doc = "Bits 8:10 - APB low-speed prescaler(APB1)"]
#[inline (always)] pub fn ppre1 (& mut self) -> Ppre1W < '_ , CfgrSpec > { Ppre1W :: new (self , 8) }
#[doc = "Bits 11:13 - APB high-speed prescaler(APB2)"]
#[inline (always)] pub fn ppre2 (& mut self) -> Ppre2W < '_ , CfgrSpec > { Ppre2W :: new (self , 11) }
#[doc = "Bit 15 - USB 48M clock selection"]
#[inline (always)] pub fn clk48sel (& mut self) -> Clk48selW < '_ , CfgrSpec > { Clk48selW :: new (self , 15) }
#[doc = "Bit 16 - PLL entry clock source"]
#[inline (always)] pub fn pllsrc (& mut self) -> PllsrcW < '_ , CfgrSpec > { PllsrcW :: new (self , 16) }
#[doc = "Bit 17 - HSE divider for PLL entry"]
#[inline (always)] pub fn pllxtpre (& mut self) -> PllxtpreW < '_ , CfgrSpec > { PllxtpreW :: new (self , 17) }
#[doc = "Bits 22:23 - USB prescaler"]
#[inline (always)] pub fn usbrpe (& mut self) -> UsbrpeW < '_ , CfgrSpec > { UsbrpeW :: new (self , 22) }
#[doc = "Bits 24:27 - Microcontroller clock output"]
#[inline (always)] pub fn mco (& mut self) -> McoW < '_ , CfgrSpec > { McoW :: new (self , 24) }
#[doc = "Bits 30:31 - PLL configuration factor expansion"]
#[inline (always)] pub fn plldn (& mut self) -> PlldnW < '_ , CfgrSpec > { PlldnW :: new (self , 30) } }
#[doc = "Configuration Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CfgrSpec ; impl crate :: RegisterSpec for CfgrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cfgr::R`](R) reader structure"] impl crate :: Readable for CfgrSpec { }
#[doc = "`write(|w| ..)` method takes [`cfgr::W`](W) writer structure"] impl crate :: Writable for CfgrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CFGR to value 0"] impl crate :: Resettable for CfgrSpec { } }
#[doc = "CIR (rw) register accessor: Clock Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cir::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cir::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cir`] module"]
#[doc (alias = "CIR")] pub type Cir = crate :: Reg < cir :: CirSpec > ;
#[doc = "Clock Interrupt Register"] pub mod cir {
#[doc = "Register `CIR` reader"] pub type R = crate :: R < CirSpec > ;
#[doc = "Register `CIR` writer"] pub type W = crate :: W < CirSpec > ;
#[doc = "Field `LSIRDYF` reader - LSI ready interrupt flag"] pub type LsirdyfR = crate :: BitReader ;
#[doc = "Field `LSIRDYF` writer - LSI ready interrupt flag"] pub type LsirdyfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LSERDYF` reader - LSE ready interrupt flag"] pub type LserdyfR = crate :: BitReader ;
#[doc = "Field `LSERDYF` writer - LSE ready interrupt flag"] pub type LserdyfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSIRDYF` reader - HSI ready interrupt flag"] pub type HsirdyfR = crate :: BitReader ;
#[doc = "Field `HSIRDYF` writer - HSI ready interrupt flag"] pub type HsirdyfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSERDYF` reader - HSE ready interrupt flag"] pub type HserdyfR = crate :: BitReader ;
#[doc = "Field `HSERDYF` writer - HSE ready interrupt flag"] pub type HserdyfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PLLRDYF` reader - PLL ready interrupt flag"] pub type PllrdyfR = crate :: BitReader ;
#[doc = "Field `PLLRDYF` writer - PLL ready interrupt flag"] pub type PllrdyfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CSSF` reader - Clock security system interrupt flag"] pub type CssfR = crate :: BitReader ;
#[doc = "Field `CSSF` writer - Clock security system interrupt flag"] pub type CssfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LSIRDYIE` reader - LSI ready interrupt enable"] pub type LsirdyieR = crate :: BitReader ;
#[doc = "Field `LSIRDYIE` writer - LSI ready interrupt enable"] pub type LsirdyieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LSERDYIE` reader - LSE ready interrupt enable"] pub type LserdyieR = crate :: BitReader ;
#[doc = "Field `LSERDYIE` writer - LSE ready interrupt enable"] pub type LserdyieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSIRDYIE` reader - HSI ready interrupt enable"] pub type HsirdyieR = crate :: BitReader ;
#[doc = "Field `HSIRDYIE` writer - HSI ready interrupt enable"] pub type HsirdyieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSERDYIE` reader - HSE ready interrupt enable"] pub type HserdyieR = crate :: BitReader ;
#[doc = "Field `HSERDYIE` writer - HSE ready interrupt enable"] pub type HserdyieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PLLRDYIE` reader - PLL ready interrupt enable"] pub type PllrdyieR = crate :: BitReader ;
#[doc = "Field `PLLRDYIE` writer - PLL ready interrupt enable"] pub type PllrdyieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LSIRDYC` reader - LSI ready interrupt clear"] pub type LsirdycR = crate :: BitReader ;
#[doc = "Field `LSIRDYC` writer - LSI ready interrupt clear"] pub type LsirdycW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LSERDYC` reader - LSE ready interrupt clear"] pub type LserdycR = crate :: BitReader ;
#[doc = "Field `LSERDYC` writer - LSE ready interrupt clear"] pub type LserdycW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSIRDYC` reader - HSI ready interrupt clear"] pub type HsirdycR = crate :: BitReader ;
#[doc = "Field `HSIRDYC` writer - HSI ready interrupt clear"] pub type HsirdycW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HSERDYC` reader - HSE ready interrupt clear"] pub type HserdycR = crate :: BitReader ;
#[doc = "Field `HSERDYC` writer - HSE ready interrupt clear"] pub type HserdycW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PLLRDYC` reader - PLL ready interrupt clear"] pub type PllrdycR = crate :: BitReader ;
#[doc = "Field `PLLRDYC` writer - PLL ready interrupt clear"] pub type PllrdycW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CSSC` reader - Clock security system interrupt clear"] pub type CsscR = crate :: BitReader ;
#[doc = "Field `CSSC` writer - Clock security system interrupt clear"] pub type CsscW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - LSI ready interrupt flag"]
#[inline (always)] pub fn lsirdyf (& self) -> LsirdyfR { LsirdyfR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - LSE ready interrupt flag"]
#[inline (always)] pub fn lserdyf (& self) -> LserdyfR { LserdyfR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - HSI ready interrupt flag"]
#[inline (always)] pub fn hsirdyf (& self) -> HsirdyfR { HsirdyfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - HSE ready interrupt flag"]
#[inline (always)] pub fn hserdyf (& self) -> HserdyfR { HserdyfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - PLL ready interrupt flag"]
#[inline (always)] pub fn pllrdyf (& self) -> PllrdyfR { PllrdyfR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 7 - Clock security system interrupt flag"]
#[inline (always)] pub fn cssf (& self) -> CssfR { CssfR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - LSI ready interrupt enable"]
#[inline (always)] pub fn lsirdyie (& self) -> LsirdyieR { LsirdyieR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - LSE ready interrupt enable"]
#[inline (always)] pub fn lserdyie (& self) -> LserdyieR { LserdyieR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - HSI ready interrupt enable"]
#[inline (always)] pub fn hsirdyie (& self) -> HsirdyieR { HsirdyieR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - HSE ready interrupt enable"]
#[inline (always)] pub fn hserdyie (& self) -> HserdyieR { HserdyieR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - PLL ready interrupt enable"]
#[inline (always)] pub fn pllrdyie (& self) -> PllrdyieR { PllrdyieR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 16 - LSI ready interrupt clear"]
#[inline (always)] pub fn lsirdyc (& self) -> LsirdycR { LsirdycR :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - LSE ready interrupt clear"]
#[inline (always)] pub fn lserdyc (& self) -> LserdycR { LserdycR :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - HSI ready interrupt clear"]
#[inline (always)] pub fn hsirdyc (& self) -> HsirdycR { HsirdycR :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - HSE ready interrupt clear"]
#[inline (always)] pub fn hserdyc (& self) -> HserdycR { HserdycR :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bit 20 - PLL ready interrupt clear"]
#[inline (always)] pub fn pllrdyc (& self) -> PllrdycR { PllrdycR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 23 - Clock security system interrupt clear"]
#[inline (always)] pub fn cssc (& self) -> CsscR { CsscR :: new (((self . bits >> 23) & 1) != 0) } } impl W {
#[doc = "Bit 0 - LSI ready interrupt flag"]
#[inline (always)] pub fn lsirdyf (& mut self) -> LsirdyfW < '_ , CirSpec > { LsirdyfW :: new (self , 0) }
#[doc = "Bit 1 - LSE ready interrupt flag"]
#[inline (always)] pub fn lserdyf (& mut self) -> LserdyfW < '_ , CirSpec > { LserdyfW :: new (self , 1) }
#[doc = "Bit 2 - HSI ready interrupt flag"]
#[inline (always)] pub fn hsirdyf (& mut self) -> HsirdyfW < '_ , CirSpec > { HsirdyfW :: new (self , 2) }
#[doc = "Bit 3 - HSE ready interrupt flag"]
#[inline (always)] pub fn hserdyf (& mut self) -> HserdyfW < '_ , CirSpec > { HserdyfW :: new (self , 3) }
#[doc = "Bit 4 - PLL ready interrupt flag"]
#[inline (always)] pub fn pllrdyf (& mut self) -> PllrdyfW < '_ , CirSpec > { PllrdyfW :: new (self , 4) }
#[doc = "Bit 7 - Clock security system interrupt flag"]
#[inline (always)] pub fn cssf (& mut self) -> CssfW < '_ , CirSpec > { CssfW :: new (self , 7) }
#[doc = "Bit 8 - LSI ready interrupt enable"]
#[inline (always)] pub fn lsirdyie (& mut self) -> LsirdyieW < '_ , CirSpec > { LsirdyieW :: new (self , 8) }
#[doc = "Bit 9 - LSE ready interrupt enable"]
#[inline (always)] pub fn lserdyie (& mut self) -> LserdyieW < '_ , CirSpec > { LserdyieW :: new (self , 9) }
#[doc = "Bit 10 - HSI ready interrupt enable"]
#[inline (always)] pub fn hsirdyie (& mut self) -> HsirdyieW < '_ , CirSpec > { HsirdyieW :: new (self , 10) }
#[doc = "Bit 11 - HSE ready interrupt enable"]
#[inline (always)] pub fn hserdyie (& mut self) -> HserdyieW < '_ , CirSpec > { HserdyieW :: new (self , 11) }
#[doc = "Bit 12 - PLL ready interrupt enable"]
#[inline (always)] pub fn pllrdyie (& mut self) -> PllrdyieW < '_ , CirSpec > { PllrdyieW :: new (self , 12) }
#[doc = "Bit 16 - LSI ready interrupt clear"]
#[inline (always)] pub fn lsirdyc (& mut self) -> LsirdycW < '_ , CirSpec > { LsirdycW :: new (self , 16) }
#[doc = "Bit 17 - LSE ready interrupt clear"]
#[inline (always)] pub fn lserdyc (& mut self) -> LserdycW < '_ , CirSpec > { LserdycW :: new (self , 17) }
#[doc = "Bit 18 - HSI ready interrupt clear"]
#[inline (always)] pub fn hsirdyc (& mut self) -> HsirdycW < '_ , CirSpec > { HsirdycW :: new (self , 18) }
#[doc = "Bit 19 - HSE ready interrupt clear"]
#[inline (always)] pub fn hserdyc (& mut self) -> HserdycW < '_ , CirSpec > { HserdycW :: new (self , 19) }
#[doc = "Bit 20 - PLL ready interrupt clear"]
#[inline (always)] pub fn pllrdyc (& mut self) -> PllrdycW < '_ , CirSpec > { PllrdycW :: new (self , 20) }
#[doc = "Bit 23 - Clock security system interrupt clear"]
#[inline (always)] pub fn cssc (& mut self) -> CsscW < '_ , CirSpec > { CsscW :: new (self , 23) } }
#[doc = "Clock Interrupt Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cir::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cir::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CirSpec ; impl crate :: RegisterSpec for CirSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cir::R`](R) reader structure"] impl crate :: Readable for CirSpec { }
#[doc = "`write(|w| ..)` method takes [`cir::W`](W) writer structure"] impl crate :: Writable for CirSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CIR to value 0"] impl crate :: Resettable for CirSpec { } }
#[doc = "APB2RSTR (rw) register accessor: Advanced Peripheral Bus 2 Reset Register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb2rstr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb2rstr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@apb2rstr`] module"]
#[doc (alias = "APB2RSTR")] pub type Apb2rstr = crate :: Reg < apb2rstr :: Apb2rstrSpec > ;
#[doc = "Advanced Peripheral Bus 2 Reset Register"] pub mod apb2rstr {
#[doc = "Register `APB2RSTR` reader"] pub type R = crate :: R < Apb2rstrSpec > ;
#[doc = "Register `APB2RSTR` writer"] pub type W = crate :: W < Apb2rstrSpec > ;
#[doc = "Field `SYSCFG` reader - Syscfg configuration register reset"] pub type SyscfgR = crate :: BitReader ;
#[doc = "Field `SYSCFG` writer - Syscfg configuration register reset"] pub type SyscfgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ADC1` reader - ADC1 interface reset"] pub type Adc1R = crate :: BitReader ;
#[doc = "Field `ADC1` writer - ADC1 interface reset"] pub type Adc1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM1` reader - TIM1 timer reset"] pub type Tim1R = crate :: BitReader ;
#[doc = "Field `TIM1` writer - TIM1 timer reset"] pub type Tim1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SPI1` reader - SPI1 reset"] pub type Spi1R = crate :: BitReader ;
#[doc = "Field `SPI1` writer - SPI1 reset"] pub type Spi1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UART1` reader - UART1 reset"] pub type Uart1R = crate :: BitReader ;
#[doc = "Field `UART1` writer - UART1 reset"] pub type Uart1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMP` reader - Comparator reset"] pub type CompR = crate :: BitReader ;
#[doc = "Field `COMP` writer - Comparator reset"] pub type CompW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM14` reader - TIM14 timer reset"] pub type Tim14R = crate :: BitReader ;
#[doc = "Field `TIM14` writer - TIM14 timer reset"] pub type Tim14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM16` reader - TIM16 timer reset"] pub type Tim16R = crate :: BitReader ;
#[doc = "Field `TIM16` writer - TIM16 timer reset"] pub type Tim16W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM17` reader - TIM17 timer reset"] pub type Tim17R = crate :: BitReader ;
#[doc = "Field `TIM17` writer - TIM17 timer reset"] pub type Tim17W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBGMCU` reader - DBGMCU reset"] pub type DbgmcuR = crate :: BitReader ;
#[doc = "Field `DBGMCU` writer - DBGMCU reset"] pub type DbgmcuW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Syscfg configuration register reset"]
#[inline (always)] pub fn syscfg (& self) -> SyscfgR { SyscfgR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 9 - ADC1 interface reset"]
#[inline (always)] pub fn adc1 (& self) -> Adc1R { Adc1R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 11 - TIM1 timer reset"]
#[inline (always)] pub fn tim1 (& self) -> Tim1R { Tim1R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - SPI1 reset"]
#[inline (always)] pub fn spi1 (& self) -> Spi1R { Spi1R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 14 - UART1 reset"]
#[inline (always)] pub fn uart1 (& self) -> Uart1R { Uart1R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Comparator reset"]
#[inline (always)] pub fn comp (& self) -> CompR { CompR :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - TIM14 timer reset"]
#[inline (always)] pub fn tim14 (& self) -> Tim14R { Tim14R :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - TIM16 timer reset"]
#[inline (always)] pub fn tim16 (& self) -> Tim16R { Tim16R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - TIM17 timer reset"]
#[inline (always)] pub fn tim17 (& self) -> Tim17R { Tim17R :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 22 - DBGMCU reset"]
#[inline (always)] pub fn dbgmcu (& self) -> DbgmcuR { DbgmcuR :: new (((self . bits >> 22) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Syscfg configuration register reset"]
#[inline (always)] pub fn syscfg (& mut self) -> SyscfgW < '_ , Apb2rstrSpec > { SyscfgW :: new (self , 0) }
#[doc = "Bit 9 - ADC1 interface reset"]
#[inline (always)] pub fn adc1 (& mut self) -> Adc1W < '_ , Apb2rstrSpec > { Adc1W :: new (self , 9) }
#[doc = "Bit 11 - TIM1 timer reset"]
#[inline (always)] pub fn tim1 (& mut self) -> Tim1W < '_ , Apb2rstrSpec > { Tim1W :: new (self , 11) }
#[doc = "Bit 12 - SPI1 reset"]
#[inline (always)] pub fn spi1 (& mut self) -> Spi1W < '_ , Apb2rstrSpec > { Spi1W :: new (self , 12) }
#[doc = "Bit 14 - UART1 reset"]
#[inline (always)] pub fn uart1 (& mut self) -> Uart1W < '_ , Apb2rstrSpec > { Uart1W :: new (self , 14) }
#[doc = "Bit 15 - Comparator reset"]
#[inline (always)] pub fn comp (& mut self) -> CompW < '_ , Apb2rstrSpec > { CompW :: new (self , 15) }
#[doc = "Bit 16 - TIM14 timer reset"]
#[inline (always)] pub fn tim14 (& mut self) -> Tim14W < '_ , Apb2rstrSpec > { Tim14W :: new (self , 16) }
#[doc = "Bit 17 - TIM16 timer reset"]
#[inline (always)] pub fn tim16 (& mut self) -> Tim16W < '_ , Apb2rstrSpec > { Tim16W :: new (self , 17) }
#[doc = "Bit 18 - TIM17 timer reset"]
#[inline (always)] pub fn tim17 (& mut self) -> Tim17W < '_ , Apb2rstrSpec > { Tim17W :: new (self , 18) }
#[doc = "Bit 22 - DBGMCU reset"]
#[inline (always)] pub fn dbgmcu (& mut self) -> DbgmcuW < '_ , Apb2rstrSpec > { DbgmcuW :: new (self , 22) } }
#[doc = "Advanced Peripheral Bus 2 Reset Register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb2rstr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb2rstr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Apb2rstrSpec ; impl crate :: RegisterSpec for Apb2rstrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`apb2rstr::R`](R) reader structure"] impl crate :: Readable for Apb2rstrSpec { }
#[doc = "`write(|w| ..)` method takes [`apb2rstr::W`](W) writer structure"] impl crate :: Writable for Apb2rstrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets APB2RSTR to value 0"] impl crate :: Resettable for Apb2rstrSpec { } }
#[doc = "APB1RSTR (rw) register accessor: Advanced Peripheral Bus 1 Reset Register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1rstr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1rstr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@apb1rstr`] module"]
#[doc (alias = "APB1RSTR")] pub type Apb1rstr = crate :: Reg < apb1rstr :: Apb1rstrSpec > ;
#[doc = "Advanced Peripheral Bus 1 Reset Register"] pub mod apb1rstr {
#[doc = "Register `APB1RSTR` reader"] pub type R = crate :: R < Apb1rstrSpec > ;
#[doc = "Register `APB1RSTR` writer"] pub type W = crate :: W < Apb1rstrSpec > ;
#[doc = "Field `TIM2` reader - TIM2 reset"] pub type Tim2R = crate :: BitReader ;
#[doc = "Field `TIM2` writer - TIM2 reset"] pub type Tim2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM3` reader - TIM3 reset"] pub type Tim3R = crate :: BitReader ;
#[doc = "Field `TIM3` writer - TIM3 reset"] pub type Tim3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `WWDG` reader - Window watchdog reset"] pub type WwdgR = crate :: BitReader ;
#[doc = "Field `WWDG` writer - Window watchdog reset"] pub type WwdgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SPI2` reader - SPI2 reset"] pub type Spi2R = crate :: BitReader ;
#[doc = "Field `SPI2` writer - SPI2 reset"] pub type Spi2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UART2` reader - UART2 reset"] pub type Uart2R = crate :: BitReader ;
#[doc = "Field `UART2` writer - UART2 reset"] pub type Uart2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `I2C1` reader - I2C1 reset"] pub type I2c1R = crate :: BitReader ;
#[doc = "Field `I2C1` writer - I2C1 reset"] pub type I2c1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `USB` reader - USB reset"] pub type UsbR = crate :: BitReader ;
#[doc = "Field `USB` writer - USB reset"] pub type UsbW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CAN` reader - CAN reset"] pub type CanR = crate :: BitReader ;
#[doc = "Field `CAN` writer - CAN reset"] pub type CanW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CSM` reader - CSM reset"] pub type CsmR = crate :: BitReader ;
#[doc = "Field `CSM` writer - CSM reset"] pub type CsmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CRS` reader - CRS interface reset"] pub type CrsR = crate :: BitReader ;
#[doc = "Field `CRS` writer - CRS interface reset"] pub type CrsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PWR` reader - Power interface reset"] pub type PwrR = crate :: BitReader ;
#[doc = "Field `PWR` writer - Power interface reset"] pub type PwrW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - TIM2 reset"]
#[inline (always)] pub fn tim2 (& self) -> Tim2R { Tim2R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - TIM3 reset"]
#[inline (always)] pub fn tim3 (& self) -> Tim3R { Tim3R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 11 - Window watchdog reset"]
#[inline (always)] pub fn wwdg (& self) -> WwdgR { WwdgR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 14 - SPI2 reset"]
#[inline (always)] pub fn spi2 (& self) -> Spi2R { Spi2R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 17 - UART2 reset"]
#[inline (always)] pub fn uart2 (& self) -> Uart2R { Uart2R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 21 - I2C1 reset"]
#[inline (always)] pub fn i2c1 (& self) -> I2c1R { I2c1R :: new (((self . bits >> 21) & 1) != 0) }
#[doc = "Bit 23 - USB reset"]
#[inline (always)] pub fn usb (& self) -> UsbR { UsbR :: new (((self . bits >> 23) & 1) != 0) }
#[doc = "Bit 25 - CAN reset"]
#[inline (always)] pub fn can (& self) -> CanR { CanR :: new (((self . bits >> 25) & 1) != 0) }
#[doc = "Bit 26 - CSM reset"]
#[inline (always)] pub fn csm (& self) -> CsmR { CsmR :: new (((self . bits >> 26) & 1) != 0) }
#[doc = "Bit 27 - CRS interface reset"]
#[inline (always)] pub fn crs (& self) -> CrsR { CrsR :: new (((self . bits >> 27) & 1) != 0) }
#[doc = "Bit 28 - Power interface reset"]
#[inline (always)] pub fn pwr (& self) -> PwrR { PwrR :: new (((self . bits >> 28) & 1) != 0) } } impl W {
#[doc = "Bit 0 - TIM2 reset"]
#[inline (always)] pub fn tim2 (& mut self) -> Tim2W < '_ , Apb1rstrSpec > { Tim2W :: new (self , 0) }
#[doc = "Bit 1 - TIM3 reset"]
#[inline (always)] pub fn tim3 (& mut self) -> Tim3W < '_ , Apb1rstrSpec > { Tim3W :: new (self , 1) }
#[doc = "Bit 11 - Window watchdog reset"]
#[inline (always)] pub fn wwdg (& mut self) -> WwdgW < '_ , Apb1rstrSpec > { WwdgW :: new (self , 11) }
#[doc = "Bit 14 - SPI2 reset"]
#[inline (always)] pub fn spi2 (& mut self) -> Spi2W < '_ , Apb1rstrSpec > { Spi2W :: new (self , 14) }
#[doc = "Bit 17 - UART2 reset"]
#[inline (always)] pub fn uart2 (& mut self) -> Uart2W < '_ , Apb1rstrSpec > { Uart2W :: new (self , 17) }
#[doc = "Bit 21 - I2C1 reset"]
#[inline (always)] pub fn i2c1 (& mut self) -> I2c1W < '_ , Apb1rstrSpec > { I2c1W :: new (self , 21) }
#[doc = "Bit 23 - USB reset"]
#[inline (always)] pub fn usb (& mut self) -> UsbW < '_ , Apb1rstrSpec > { UsbW :: new (self , 23) }
#[doc = "Bit 25 - CAN reset"]
#[inline (always)] pub fn can (& mut self) -> CanW < '_ , Apb1rstrSpec > { CanW :: new (self , 25) }
#[doc = "Bit 26 - CSM reset"]
#[inline (always)] pub fn csm (& mut self) -> CsmW < '_ , Apb1rstrSpec > { CsmW :: new (self , 26) }
#[doc = "Bit 27 - CRS interface reset"]
#[inline (always)] pub fn crs (& mut self) -> CrsW < '_ , Apb1rstrSpec > { CrsW :: new (self , 27) }
#[doc = "Bit 28 - Power interface reset"]
#[inline (always)] pub fn pwr (& mut self) -> PwrW < '_ , Apb1rstrSpec > { PwrW :: new (self , 28) } }
#[doc = "Advanced Peripheral Bus 1 Reset Register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1rstr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1rstr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Apb1rstrSpec ; impl crate :: RegisterSpec for Apb1rstrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`apb1rstr::R`](R) reader structure"] impl crate :: Readable for Apb1rstrSpec { }
#[doc = "`write(|w| ..)` method takes [`apb1rstr::W`](W) writer structure"] impl crate :: Writable for Apb1rstrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets APB1RSTR to value 0"] impl crate :: Resettable for Apb1rstrSpec { } }
#[doc = "AHBENR (rw) register accessor: Advanced High Performance Bus Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahbenr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahbenr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ahbenr`] module"]
#[doc (alias = "AHBENR")] pub type Ahbenr = crate :: Reg < ahbenr :: AhbenrSpec > ;
#[doc = "Advanced High Performance Bus Enable Register"] pub mod ahbenr {
#[doc = "Register `AHBENR` reader"] pub type R = crate :: R < AhbenrSpec > ;
#[doc = "Register `AHBENR` writer"] pub type W = crate :: W < AhbenrSpec > ;
#[doc = "Field `DMA` reader - DMA clock enable"] pub type DmaR = crate :: BitReader ;
#[doc = "Field `DMA` writer - DMA clock enable"] pub type DmaW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SRAM` reader - SRAM interface clock enable"] pub type SramR = crate :: BitReader ;
#[doc = "Field `SRAM` writer - SRAM interface clock enable"] pub type SramW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `FLASH` reader - FLASH clock enable"] pub type FlashR = crate :: BitReader ;
#[doc = "Field `FLASH` writer - FLASH clock enable"] pub type FlashW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CRC` reader - CRC clock enable"] pub type CrcR = crate :: BitReader ;
#[doc = "Field `CRC` writer - CRC clock enable"] pub type CrcW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `GPIOA` reader - GPIOA clock enable"] pub type GpioaR = crate :: BitReader ;
#[doc = "Field `GPIOA` writer - GPIOA clock enable"] pub type GpioaW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `GPIOB` reader - GPIOB clock enable"] pub type GpiobR = crate :: BitReader ;
#[doc = "Field `GPIOB` writer - GPIOB clock enable"] pub type GpiobW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `GPIOC` reader - GPIOC clock enable"] pub type GpiocR = crate :: BitReader ;
#[doc = "Field `GPIOC` writer - GPIOC clock enable"] pub type GpiocW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `GPIOD` reader - GPIOD clock enable"] pub type GpiodR = crate :: BitReader ;
#[doc = "Field `GPIOD` writer - GPIOD clock enable"] pub type GpiodW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HWDIV` reader - HWDIV clock enable"] pub type HwdivR = crate :: BitReader ;
#[doc = "Field `HWDIV` writer - HWDIV clock enable"] pub type HwdivW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - DMA clock enable"]
#[inline (always)] pub fn dma (& self) -> DmaR { DmaR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 2 - SRAM interface clock enable"]
#[inline (always)] pub fn sram (& self) -> SramR { SramR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 4 - FLASH clock enable"]
#[inline (always)] pub fn flash (& self) -> FlashR { FlashR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 6 - CRC clock enable"]
#[inline (always)] pub fn crc (& self) -> CrcR { CrcR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 17 - GPIOA clock enable"]
#[inline (always)] pub fn gpioa (& self) -> GpioaR { GpioaR :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - GPIOB clock enable"]
#[inline (always)] pub fn gpiob (& self) -> GpiobR { GpiobR :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - GPIOC clock enable"]
#[inline (always)] pub fn gpioc (& self) -> GpiocR { GpiocR :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bit 20 - GPIOD clock enable"]
#[inline (always)] pub fn gpiod (& self) -> GpiodR { GpiodR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 26 - HWDIV clock enable"]
#[inline (always)] pub fn hwdiv (& self) -> HwdivR { HwdivR :: new (((self . bits >> 26) & 1) != 0) } } impl W {
#[doc = "Bit 0 - DMA clock enable"]
#[inline (always)] pub fn dma (& mut self) -> DmaW < '_ , AhbenrSpec > { DmaW :: new (self , 0) }
#[doc = "Bit 2 - SRAM interface clock enable"]
#[inline (always)] pub fn sram (& mut self) -> SramW < '_ , AhbenrSpec > { SramW :: new (self , 2) }
#[doc = "Bit 4 - FLASH clock enable"]
#[inline (always)] pub fn flash (& mut self) -> FlashW < '_ , AhbenrSpec > { FlashW :: new (self , 4) }
#[doc = "Bit 6 - CRC clock enable"]
#[inline (always)] pub fn crc (& mut self) -> CrcW < '_ , AhbenrSpec > { CrcW :: new (self , 6) }
#[doc = "Bit 17 - GPIOA clock enable"]
#[inline (always)] pub fn gpioa (& mut self) -> GpioaW < '_ , AhbenrSpec > { GpioaW :: new (self , 17) }
#[doc = "Bit 18 - GPIOB clock enable"]
#[inline (always)] pub fn gpiob (& mut self) -> GpiobW < '_ , AhbenrSpec > { GpiobW :: new (self , 18) }
#[doc = "Bit 19 - GPIOC clock enable"]
#[inline (always)] pub fn gpioc (& mut self) -> GpiocW < '_ , AhbenrSpec > { GpiocW :: new (self , 19) }
#[doc = "Bit 20 - GPIOD clock enable"]
#[inline (always)] pub fn gpiod (& mut self) -> GpiodW < '_ , AhbenrSpec > { GpiodW :: new (self , 20) }
#[doc = "Bit 26 - HWDIV clock enable"]
#[inline (always)] pub fn hwdiv (& mut self) -> HwdivW < '_ , AhbenrSpec > { HwdivW :: new (self , 26) } }
#[doc = "Advanced High Performance Bus Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahbenr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahbenr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AhbenrSpec ; impl crate :: RegisterSpec for AhbenrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ahbenr::R`](R) reader structure"] impl crate :: Readable for AhbenrSpec { }
#[doc = "`write(|w| ..)` method takes [`ahbenr::W`](W) writer structure"] impl crate :: Writable for AhbenrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets AHBENR to value 0x14"] impl crate :: Resettable for AhbenrSpec { const RESET_VALUE : u32 = 0x14 ; } }
#[doc = "APB2ENR (rw) register accessor: Advanced Peripheral Bus 2 Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb2enr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb2enr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@apb2enr`] module"]
#[doc (alias = "APB2ENR")] pub type Apb2enr = crate :: Reg < apb2enr :: Apb2enrSpec > ;
#[doc = "Advanced Peripheral Bus 2 Enable Register"] pub mod apb2enr {
#[doc = "Register `APB2ENR` reader"] pub type R = crate :: R < Apb2enrSpec > ;
#[doc = "Register `APB2ENR` writer"] pub type W = crate :: W < Apb2enrSpec > ;
#[doc = "Field `SYSCFG` reader - Syscfg configuration register enable"] pub type SyscfgR = crate :: BitReader ;
#[doc = "Field `SYSCFG` writer - Syscfg configuration register enable"] pub type SyscfgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ADC1` reader - ADC1 interface enable"] pub type Adc1R = crate :: BitReader ;
#[doc = "Field `ADC1` writer - ADC1 interface enable"] pub type Adc1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM1` reader - TIM1 Timer clock enable"] pub type Tim1R = crate :: BitReader ;
#[doc = "Field `TIM1` writer - TIM1 Timer clock enable"] pub type Tim1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SPI1` reader - SPI1 clock enable"] pub type Spi1R = crate :: BitReader ;
#[doc = "Field `SPI1` writer - SPI1 clock enable"] pub type Spi1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UART1` reader - UART1 clock enable"] pub type Uart1R = crate :: BitReader ;
#[doc = "Field `UART1` writer - UART1 clock enable"] pub type Uart1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMP` reader - COMP Comparator enable"] pub type CompR = crate :: BitReader ;
#[doc = "Field `COMP` writer - COMP Comparator enable"] pub type CompW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM14` reader - TIM14 timer enable"] pub type Tim14R = crate :: BitReader ;
#[doc = "Field `TIM14` writer - TIM14 timer enable"] pub type Tim14W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM16` reader - TIM16 timer enable"] pub type Tim16R = crate :: BitReader ;
#[doc = "Field `TIM16` writer - TIM16 timer enable"] pub type Tim16W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM17` reader - TIM17 timer enable"] pub type Tim17R = crate :: BitReader ;
#[doc = "Field `TIM17` writer - TIM17 timer enable"] pub type Tim17W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DBGMCU` reader - DBGMCU enable"] pub type DbgmcuR = crate :: BitReader ;
#[doc = "Field `DBGMCU` writer - DBGMCU enable"] pub type DbgmcuW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Syscfg configuration register enable"]
#[inline (always)] pub fn syscfg (& self) -> SyscfgR { SyscfgR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 9 - ADC1 interface enable"]
#[inline (always)] pub fn adc1 (& self) -> Adc1R { Adc1R :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 11 - TIM1 Timer clock enable"]
#[inline (always)] pub fn tim1 (& self) -> Tim1R { Tim1R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - SPI1 clock enable"]
#[inline (always)] pub fn spi1 (& self) -> Spi1R { Spi1R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 14 - UART1 clock enable"]
#[inline (always)] pub fn uart1 (& self) -> Uart1R { Uart1R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - COMP Comparator enable"]
#[inline (always)] pub fn comp (& self) -> CompR { CompR :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - TIM14 timer enable"]
#[inline (always)] pub fn tim14 (& self) -> Tim14R { Tim14R :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - TIM16 timer enable"]
#[inline (always)] pub fn tim16 (& self) -> Tim16R { Tim16R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - TIM17 timer enable"]
#[inline (always)] pub fn tim17 (& self) -> Tim17R { Tim17R :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 22 - DBGMCU enable"]
#[inline (always)] pub fn dbgmcu (& self) -> DbgmcuR { DbgmcuR :: new (((self . bits >> 22) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Syscfg configuration register enable"]
#[inline (always)] pub fn syscfg (& mut self) -> SyscfgW < '_ , Apb2enrSpec > { SyscfgW :: new (self , 0) }
#[doc = "Bit 9 - ADC1 interface enable"]
#[inline (always)] pub fn adc1 (& mut self) -> Adc1W < '_ , Apb2enrSpec > { Adc1W :: new (self , 9) }
#[doc = "Bit 11 - TIM1 Timer clock enable"]
#[inline (always)] pub fn tim1 (& mut self) -> Tim1W < '_ , Apb2enrSpec > { Tim1W :: new (self , 11) }
#[doc = "Bit 12 - SPI1 clock enable"]
#[inline (always)] pub fn spi1 (& mut self) -> Spi1W < '_ , Apb2enrSpec > { Spi1W :: new (self , 12) }
#[doc = "Bit 14 - UART1 clock enable"]
#[inline (always)] pub fn uart1 (& mut self) -> Uart1W < '_ , Apb2enrSpec > { Uart1W :: new (self , 14) }
#[doc = "Bit 15 - COMP Comparator enable"]
#[inline (always)] pub fn comp (& mut self) -> CompW < '_ , Apb2enrSpec > { CompW :: new (self , 15) }
#[doc = "Bit 16 - TIM14 timer enable"]
#[inline (always)] pub fn tim14 (& mut self) -> Tim14W < '_ , Apb2enrSpec > { Tim14W :: new (self , 16) }
#[doc = "Bit 17 - TIM16 timer enable"]
#[inline (always)] pub fn tim16 (& mut self) -> Tim16W < '_ , Apb2enrSpec > { Tim16W :: new (self , 17) }
#[doc = "Bit 18 - TIM17 timer enable"]
#[inline (always)] pub fn tim17 (& mut self) -> Tim17W < '_ , Apb2enrSpec > { Tim17W :: new (self , 18) }
#[doc = "Bit 22 - DBGMCU enable"]
#[inline (always)] pub fn dbgmcu (& mut self) -> DbgmcuW < '_ , Apb2enrSpec > { DbgmcuW :: new (self , 22) } }
#[doc = "Advanced Peripheral Bus 2 Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb2enr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb2enr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Apb2enrSpec ; impl crate :: RegisterSpec for Apb2enrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`apb2enr::R`](R) reader structure"] impl crate :: Readable for Apb2enrSpec { }
#[doc = "`write(|w| ..)` method takes [`apb2enr::W`](W) writer structure"] impl crate :: Writable for Apb2enrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets APB2ENR to value 0"] impl crate :: Resettable for Apb2enrSpec { } }
#[doc = "APB1ENR (rw) register accessor: Advanced Peripheral Bus 1 Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1enr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1enr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@apb1enr`] module"]
#[doc (alias = "APB1ENR")] pub type Apb1enr = crate :: Reg < apb1enr :: Apb1enrSpec > ;
#[doc = "Advanced Peripheral Bus 1 Enable Register"] pub mod apb1enr {
#[doc = "Register `APB1ENR` reader"] pub type R = crate :: R < Apb1enrSpec > ;
#[doc = "Register `APB1ENR` writer"] pub type W = crate :: W < Apb1enrSpec > ;
#[doc = "Field `TIM2` reader - TIM2 clock enable"] pub type Tim2R = crate :: BitReader ;
#[doc = "Field `TIM2` writer - TIM2 clock enable"] pub type Tim2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIM3` reader - TIM3 clock enable"] pub type Tim3R = crate :: BitReader ;
#[doc = "Field `TIM3` writer - TIM3 clock enable"] pub type Tim3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `WWDG` reader - Window watchdog clock enable"] pub type WwdgR = crate :: BitReader ;
#[doc = "Field `WWDG` writer - Window watchdog clock enable"] pub type WwdgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SPI2` reader - SPI2 clock enable"] pub type Spi2R = crate :: BitReader ;
#[doc = "Field `SPI2` writer - SPI2 clock enable"] pub type Spi2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UART2` reader - UART2 clock enable"] pub type Uart2R = crate :: BitReader ;
#[doc = "Field `UART2` writer - UART2 clock enable"] pub type Uart2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `I2C1` reader - I2C1 clock enable"] pub type I2c1R = crate :: BitReader ;
#[doc = "Field `I2C1` writer - I2C1 clock enable"] pub type I2c1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `USB` reader - USB clock enable"] pub type UsbR = crate :: BitReader ;
#[doc = "Field `USB` writer - USB clock enable"] pub type UsbW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CAN` reader - CAN 2C1 clock enable"] pub type CanR = crate :: BitReader ;
#[doc = "Field `CAN` writer - CAN 2C1 clock enable"] pub type CanW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CSM` reader - CSM clock enable"] pub type CsmR = crate :: BitReader ;
#[doc = "Field `CSM` writer - CSM clock enable"] pub type CsmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CRS` reader - CRS clock enable"] pub type CrsR = crate :: BitReader ;
#[doc = "Field `CRS` writer - CRS clock enable"] pub type CrsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PWR` reader - Power interface clock enable"] pub type PwrR = crate :: BitReader ;
#[doc = "Field `PWR` writer - Power interface clock enable"] pub type PwrW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - TIM2 clock enable"]
#[inline (always)] pub fn tim2 (& self) -> Tim2R { Tim2R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - TIM3 clock enable"]
#[inline (always)] pub fn tim3 (& self) -> Tim3R { Tim3R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 11 - Window watchdog clock enable"]
#[inline (always)] pub fn wwdg (& self) -> WwdgR { WwdgR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 14 - SPI2 clock enable"]
#[inline (always)] pub fn spi2 (& self) -> Spi2R { Spi2R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 17 - UART2 clock enable"]
#[inline (always)] pub fn uart2 (& self) -> Uart2R { Uart2R :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 21 - I2C1 clock enable"]
#[inline (always)] pub fn i2c1 (& self) -> I2c1R { I2c1R :: new (((self . bits >> 21) & 1) != 0) }
#[doc = "Bit 23 - USB clock enable"]
#[inline (always)] pub fn usb (& self) -> UsbR { UsbR :: new (((self . bits >> 23) & 1) != 0) }
#[doc = "Bit 25 - CAN 2C1 clock enable"]
#[inline (always)] pub fn can (& self) -> CanR { CanR :: new (((self . bits >> 25) & 1) != 0) }
#[doc = "Bit 26 - CSM clock enable"]
#[inline (always)] pub fn csm (& self) -> CsmR { CsmR :: new (((self . bits >> 26) & 1) != 0) }
#[doc = "Bit 27 - CRS clock enable"]
#[inline (always)] pub fn crs (& self) -> CrsR { CrsR :: new (((self . bits >> 27) & 1) != 0) }
#[doc = "Bit 28 - Power interface clock enable"]
#[inline (always)] pub fn pwr (& self) -> PwrR { PwrR :: new (((self . bits >> 28) & 1) != 0) } } impl W {
#[doc = "Bit 0 - TIM2 clock enable"]
#[inline (always)] pub fn tim2 (& mut self) -> Tim2W < '_ , Apb1enrSpec > { Tim2W :: new (self , 0) }
#[doc = "Bit 1 - TIM3 clock enable"]
#[inline (always)] pub fn tim3 (& mut self) -> Tim3W < '_ , Apb1enrSpec > { Tim3W :: new (self , 1) }
#[doc = "Bit 11 - Window watchdog clock enable"]
#[inline (always)] pub fn wwdg (& mut self) -> WwdgW < '_ , Apb1enrSpec > { WwdgW :: new (self , 11) }
#[doc = "Bit 14 - SPI2 clock enable"]
#[inline (always)] pub fn spi2 (& mut self) -> Spi2W < '_ , Apb1enrSpec > { Spi2W :: new (self , 14) }
#[doc = "Bit 17 - UART2 clock enable"]
#[inline (always)] pub fn uart2 (& mut self) -> Uart2W < '_ , Apb1enrSpec > { Uart2W :: new (self , 17) }
#[doc = "Bit 21 - I2C1 clock enable"]
#[inline (always)] pub fn i2c1 (& mut self) -> I2c1W < '_ , Apb1enrSpec > { I2c1W :: new (self , 21) }
#[doc = "Bit 23 - USB clock enable"]
#[inline (always)] pub fn usb (& mut self) -> UsbW < '_ , Apb1enrSpec > { UsbW :: new (self , 23) }
#[doc = "Bit 25 - CAN 2C1 clock enable"]
#[inline (always)] pub fn can (& mut self) -> CanW < '_ , Apb1enrSpec > { CanW :: new (self , 25) }
#[doc = "Bit 26 - CSM clock enable"]
#[inline (always)] pub fn csm (& mut self) -> CsmW < '_ , Apb1enrSpec > { CsmW :: new (self , 26) }
#[doc = "Bit 27 - CRS clock enable"]
#[inline (always)] pub fn crs (& mut self) -> CrsW < '_ , Apb1enrSpec > { CrsW :: new (self , 27) }
#[doc = "Bit 28 - Power interface clock enable"]
#[inline (always)] pub fn pwr (& mut self) -> PwrW < '_ , Apb1enrSpec > { PwrW :: new (self , 28) } }
#[doc = "Advanced Peripheral Bus 1 Enable Register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1enr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1enr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Apb1enrSpec ; impl crate :: RegisterSpec for Apb1enrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`apb1enr::R`](R) reader structure"] impl crate :: Readable for Apb1enrSpec { }
#[doc = "`write(|w| ..)` method takes [`apb1enr::W`](W) writer structure"] impl crate :: Writable for Apb1enrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets APB1ENR to value 0"] impl crate :: Resettable for Apb1enrSpec { } }
#[doc = "BDCR (rw) register accessor: Backup Domain Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`bdcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bdcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bdcr`] module"]
#[doc (alias = "BDCR")] pub type Bdcr = crate :: Reg < bdcr :: BdcrSpec > ;
#[doc = "Backup Domain Control Register"] pub mod bdcr {
#[doc = "Register `BDCR` reader"] pub type R = crate :: R < BdcrSpec > ;
#[doc = "Register `BDCR` writer"] pub type W = crate :: W < BdcrSpec > ;
#[doc = "Field `LSEON` reader - External low-speed oscillator enable"] pub type LseonR = crate :: BitReader ;
#[doc = "Field `LSEON` writer - External low-speed oscillator enable"] pub type LseonW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LSERDY` reader - External low-speed oscillator ready"] pub type LserdyR = crate :: BitReader ;
#[doc = "Field `LSERDY` writer - External low-speed oscillator ready"] pub type LserdyW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LSEBYP` reader - External low-speed oscillator bypass"] pub type LsebypR = crate :: BitReader ;
#[doc = "Field `LSEBYP` writer - External low-speed oscillator bypass"] pub type LsebypW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RTCSEL` reader - RTC clock source selection"] pub type RtcselR = crate :: FieldReader ;
#[doc = "Field `RTCSEL` writer - RTC clock source selection"] pub type RtcselW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `RTCEN` reader - RTC clock enable"] pub type RtcenR = crate :: BitReader ;
#[doc = "Field `RTCEN` writer - RTC clock enable"] pub type RtcenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BDRST` reader - Backup domain software reset"] pub type BdrstR = crate :: BitReader ;
#[doc = "Field `BDRST` writer - Backup domain software reset"] pub type BdrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - External low-speed oscillator enable"]
#[inline (always)] pub fn lseon (& self) -> LseonR { LseonR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - External low-speed oscillator ready"]
#[inline (always)] pub fn lserdy (& self) -> LserdyR { LserdyR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - External low-speed oscillator bypass"]
#[inline (always)] pub fn lsebyp (& self) -> LsebypR { LsebypR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bits 9:10 - RTC clock source selection"]
#[inline (always)] pub fn rtcsel (& self) -> RtcselR { RtcselR :: new (((self . bits >> 9) & 3) as u8) }
#[doc = "Bit 15 - RTC clock enable"]
#[inline (always)] pub fn rtcen (& self) -> RtcenR { RtcenR :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - Backup domain software reset"]
#[inline (always)] pub fn bdrst (& self) -> BdrstR { BdrstR :: new (((self . bits >> 16) & 1) != 0) } } impl W {
#[doc = "Bit 0 - External low-speed oscillator enable"]
#[inline (always)] pub fn lseon (& mut self) -> LseonW < '_ , BdcrSpec > { LseonW :: new (self , 0) }
#[doc = "Bit 1 - External low-speed oscillator ready"]
#[inline (always)] pub fn lserdy (& mut self) -> LserdyW < '_ , BdcrSpec > { LserdyW :: new (self , 1) }
#[doc = "Bit 2 - External low-speed oscillator bypass"]
#[inline (always)] pub fn lsebyp (& mut self) -> LsebypW < '_ , BdcrSpec > { LsebypW :: new (self , 2) }
#[doc = "Bits 9:10 - RTC clock source selection"]
#[inline (always)] pub fn rtcsel (& mut self) -> RtcselW < '_ , BdcrSpec > { RtcselW :: new (self , 9) }
#[doc = "Bit 15 - RTC clock enable"]
#[inline (always)] pub fn rtcen (& mut self) -> RtcenW < '_ , BdcrSpec > { RtcenW :: new (self , 15) }
#[doc = "Bit 16 - Backup domain software reset"]
#[inline (always)] pub fn bdrst (& mut self) -> BdrstW < '_ , BdcrSpec > { BdrstW :: new (self , 16) } }
#[doc = "Backup Domain Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`bdcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bdcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BdcrSpec ; impl crate :: RegisterSpec for BdcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`bdcr::R`](R) reader structure"] impl crate :: Readable for BdcrSpec { }
#[doc = "`write(|w| ..)` method takes [`bdcr::W`](W) writer structure"] impl crate :: Writable for BdcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets BDCR to value 0"] impl crate :: Resettable for BdcrSpec { } }
#[doc = "CSR (rw) register accessor: Control Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`csr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@csr`] module"]
#[doc (alias = "CSR")] pub type Csr = crate :: Reg < csr :: CsrSpec > ;
#[doc = "Control Status Register"] pub mod csr {
#[doc = "Register `CSR` reader"] pub type R = crate :: R < CsrSpec > ;
#[doc = "Register `CSR` writer"] pub type W = crate :: W < CsrSpec > ;
#[doc = "Field `LSION` reader - Internal low-speed oscillator enable"] pub type LsionR = crate :: BitReader ;
#[doc = "Field `LSION` writer - Internal low-speed oscillator enable"] pub type LsionW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LSIRDY` reader - Internal low-speed oscillator ready"] pub type LsirdyR = crate :: BitReader ;
#[doc = "Field `LSIRDY` writer - Internal low-speed oscillator ready"] pub type LsirdyW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PVDRSTEN` reader - PVD reset enable"] pub type PvdrstenR = crate :: BitReader ;
#[doc = "Field `PVDRSTEN` writer - PVD reset enable"] pub type PvdrstenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LOCKUPEN` reader - CPU lockup reset enable"] pub type LockupenR = crate :: BitReader ;
#[doc = "Field `LOCKUPEN` writer - CPU lockup reset enable"] pub type LockupenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PVDRSTF` reader - PVD reset flag"] pub type PvdrstfR = crate :: BitReader ;
#[doc = "Field `PVDRSTF` writer - PVD reset flag"] pub type PvdrstfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LOCKUPF` reader - CPU lockup reset flag"] pub type LockupfR = crate :: BitReader ;
#[doc = "Field `LOCKUPF` writer - CPU lockup reset flag"] pub type LockupfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RMVF` reader - Remove reset flag"] pub type RmvfR = crate :: BitReader ;
#[doc = "Field `RMVF` writer - Remove reset flag"] pub type RmvfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PINRSTF` reader - PIN reset flag"] pub type PinrstfR = crate :: BitReader ;
#[doc = "Field `PINRSTF` writer - PIN reset flag"] pub type PinrstfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PORRSTF` reader - POR/PDR reset flag"] pub type PorrstfR = crate :: BitReader ;
#[doc = "Field `PORRSTF` writer - POR/PDR reset flag"] pub type PorrstfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SFTRSTF` reader - Software reset flag"] pub type SftrstfR = crate :: BitReader ;
#[doc = "Field `SFTRSTF` writer - Software reset flag"] pub type SftrstfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IWDGRSTF` reader - Independent watchdog reset flag"] pub type IwdgrstfR = crate :: BitReader ;
#[doc = "Field `IWDGRSTF` writer - Independent watchdog reset flag"] pub type IwdgrstfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `WWDGRSTF` reader - Window watchdog reset flag"] pub type WwdgrstfR = crate :: BitReader ;
#[doc = "Field `WWDGRSTF` writer - Window watchdog reset flag"] pub type WwdgrstfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Internal low-speed oscillator enable"]
#[inline (always)] pub fn lsion (& self) -> LsionR { LsionR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Internal low-speed oscillator ready"]
#[inline (always)] pub fn lsirdy (& self) -> LsirdyR { LsirdyR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 6 - PVD reset enable"]
#[inline (always)] pub fn pvdrsten (& self) -> PvdrstenR { PvdrstenR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - CPU lockup reset enable"]
#[inline (always)] pub fn lockupen (& self) -> LockupenR { LockupenR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 22 - PVD reset flag"]
#[inline (always)] pub fn pvdrstf (& self) -> PvdrstfR { PvdrstfR :: new (((self . bits >> 22) & 1) != 0) }
#[doc = "Bit 23 - CPU lockup reset flag"]
#[inline (always)] pub fn lockupf (& self) -> LockupfR { LockupfR :: new (((self . bits >> 23) & 1) != 0) }
#[doc = "Bit 24 - Remove reset flag"]
#[inline (always)] pub fn rmvf (& self) -> RmvfR { RmvfR :: new (((self . bits >> 24) & 1) != 0) }
#[doc = "Bit 26 - PIN reset flag"]
#[inline (always)] pub fn pinrstf (& self) -> PinrstfR { PinrstfR :: new (((self . bits >> 26) & 1) != 0) }
#[doc = "Bit 27 - POR/PDR reset flag"]
#[inline (always)] pub fn porrstf (& self) -> PorrstfR { PorrstfR :: new (((self . bits >> 27) & 1) != 0) }
#[doc = "Bit 28 - Software reset flag"]
#[inline (always)] pub fn sftrstf (& self) -> SftrstfR { SftrstfR :: new (((self . bits >> 28) & 1) != 0) }
#[doc = "Bit 29 - Independent watchdog reset flag"]
#[inline (always)] pub fn iwdgrstf (& self) -> IwdgrstfR { IwdgrstfR :: new (((self . bits >> 29) & 1) != 0) }
#[doc = "Bit 30 - Window watchdog reset flag"]
#[inline (always)] pub fn wwdgrstf (& self) -> WwdgrstfR { WwdgrstfR :: new (((self . bits >> 30) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Internal low-speed oscillator enable"]
#[inline (always)] pub fn lsion (& mut self) -> LsionW < '_ , CsrSpec > { LsionW :: new (self , 0) }
#[doc = "Bit 1 - Internal low-speed oscillator ready"]
#[inline (always)] pub fn lsirdy (& mut self) -> LsirdyW < '_ , CsrSpec > { LsirdyW :: new (self , 1) }
#[doc = "Bit 6 - PVD reset enable"]
#[inline (always)] pub fn pvdrsten (& mut self) -> PvdrstenW < '_ , CsrSpec > { PvdrstenW :: new (self , 6) }
#[doc = "Bit 7 - CPU lockup reset enable"]
#[inline (always)] pub fn lockupen (& mut self) -> LockupenW < '_ , CsrSpec > { LockupenW :: new (self , 7) }
#[doc = "Bit 22 - PVD reset flag"]
#[inline (always)] pub fn pvdrstf (& mut self) -> PvdrstfW < '_ , CsrSpec > { PvdrstfW :: new (self , 22) }
#[doc = "Bit 23 - CPU lockup reset flag"]
#[inline (always)] pub fn lockupf (& mut self) -> LockupfW < '_ , CsrSpec > { LockupfW :: new (self , 23) }
#[doc = "Bit 24 - Remove reset flag"]
#[inline (always)] pub fn rmvf (& mut self) -> RmvfW < '_ , CsrSpec > { RmvfW :: new (self , 24) }
#[doc = "Bit 26 - PIN reset flag"]
#[inline (always)] pub fn pinrstf (& mut self) -> PinrstfW < '_ , CsrSpec > { PinrstfW :: new (self , 26) }
#[doc = "Bit 27 - POR/PDR reset flag"]
#[inline (always)] pub fn porrstf (& mut self) -> PorrstfW < '_ , CsrSpec > { PorrstfW :: new (self , 27) }
#[doc = "Bit 28 - Software reset flag"]
#[inline (always)] pub fn sftrstf (& mut self) -> SftrstfW < '_ , CsrSpec > { SftrstfW :: new (self , 28) }
#[doc = "Bit 29 - Independent watchdog reset flag"]
#[inline (always)] pub fn iwdgrstf (& mut self) -> IwdgrstfW < '_ , CsrSpec > { IwdgrstfW :: new (self , 29) }
#[doc = "Bit 30 - Window watchdog reset flag"]
#[inline (always)] pub fn wwdgrstf (& mut self) -> WwdgrstfW < '_ , CsrSpec > { WwdgrstfW :: new (self , 30) } }
#[doc = "Control Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`csr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CsrSpec ; impl crate :: RegisterSpec for CsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`csr::R`](R) reader structure"] impl crate :: Readable for CsrSpec { }
#[doc = "`write(|w| ..)` method takes [`csr::W`](W) writer structure"] impl crate :: Writable for CsrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CSR to value 0x0c00_0000"] impl crate :: Resettable for CsrSpec { const RESET_VALUE : u32 = 0x0c00_0000 ; } }
#[doc = "AHBRSTR (rw) register accessor: Advanced High Performance Bus Reset Register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahbrstr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahbrstr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ahbrstr`] module"]
#[doc (alias = "AHBRSTR")] pub type Ahbrstr = crate :: Reg < ahbrstr :: AhbrstrSpec > ;
#[doc = "Advanced High Performance Bus Reset Register"] pub mod ahbrstr {
#[doc = "Register `AHBRSTR` reader"] pub type R = crate :: R < AhbrstrSpec > ;
#[doc = "Register `AHBRSTR` writer"] pub type W = crate :: W < AhbrstrSpec > ;
#[doc = "Field `GPIOA` reader - GPIOA reset"] pub type GpioaR = crate :: BitReader ;
#[doc = "Field `GPIOA` writer - GPIOA reset"] pub type GpioaW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `GPIOB` reader - GPIOB reset"] pub type GpiobR = crate :: BitReader ;
#[doc = "Field `GPIOB` writer - GPIOB reset"] pub type GpiobW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `GPIOC` reader - GPIOC reset"] pub type GpiocR = crate :: BitReader ;
#[doc = "Field `GPIOC` writer - GPIOC reset"] pub type GpiocW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `GPIOD` reader - GPIOD reset"] pub type GpiodR = crate :: BitReader ;
#[doc = "Field `GPIOD` writer - GPIOD reset"] pub type GpiodW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HWDIV` reader - HWDIV reset"] pub type HwdivR = crate :: BitReader ;
#[doc = "Field `HWDIV` writer - HWDIV reset"] pub type HwdivW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 17 - GPIOA reset"]
#[inline (always)] pub fn gpioa (& self) -> GpioaR { GpioaR :: new (((self . bits >> 17) & 1) != 0) }
#[doc = "Bit 18 - GPIOB reset"]
#[inline (always)] pub fn gpiob (& self) -> GpiobR { GpiobR :: new (((self . bits >> 18) & 1) != 0) }
#[doc = "Bit 19 - GPIOC reset"]
#[inline (always)] pub fn gpioc (& self) -> GpiocR { GpiocR :: new (((self . bits >> 19) & 1) != 0) }
#[doc = "Bit 20 - GPIOD reset"]
#[inline (always)] pub fn gpiod (& self) -> GpiodR { GpiodR :: new (((self . bits >> 20) & 1) != 0) }
#[doc = "Bit 26 - HWDIV reset"]
#[inline (always)] pub fn hwdiv (& self) -> HwdivR { HwdivR :: new (((self . bits >> 26) & 1) != 0) } } impl W {
#[doc = "Bit 17 - GPIOA reset"]
#[inline (always)] pub fn gpioa (& mut self) -> GpioaW < '_ , AhbrstrSpec > { GpioaW :: new (self , 17) }
#[doc = "Bit 18 - GPIOB reset"]
#[inline (always)] pub fn gpiob (& mut self) -> GpiobW < '_ , AhbrstrSpec > { GpiobW :: new (self , 18) }
#[doc = "Bit 19 - GPIOC reset"]
#[inline (always)] pub fn gpioc (& mut self) -> GpiocW < '_ , AhbrstrSpec > { GpiocW :: new (self , 19) }
#[doc = "Bit 20 - GPIOD reset"]
#[inline (always)] pub fn gpiod (& mut self) -> GpiodW < '_ , AhbrstrSpec > { GpiodW :: new (self , 20) }
#[doc = "Bit 26 - HWDIV reset"]
#[inline (always)] pub fn hwdiv (& mut self) -> HwdivW < '_ , AhbrstrSpec > { HwdivW :: new (self , 26) } }
#[doc = "Advanced High Performance Bus Reset Register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahbrstr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahbrstr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AhbrstrSpec ; impl crate :: RegisterSpec for AhbrstrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ahbrstr::R`](R) reader structure"] impl crate :: Readable for AhbrstrSpec { }
#[doc = "`write(|w| ..)` method takes [`ahbrstr::W`](W) writer structure"] impl crate :: Writable for AhbrstrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets AHBRSTR to value 0"] impl crate :: Resettable for AhbrstrSpec { } }
#[doc = "CFGR2 (rw) register accessor: Configure Register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cfgr2`] module"]
#[doc (alias = "CFGR2")] pub type Cfgr2 = crate :: Reg < cfgr2 :: Cfgr2Spec > ;
#[doc = "Configure Register 2"] pub mod cfgr2 {
#[doc = "Register `CFGR2` reader"] pub type R = crate :: R < Cfgr2Spec > ;
#[doc = "Register `CFGR2` writer"] pub type W = crate :: W < Cfgr2Spec > ;
#[doc = "Field `TIMADV_CLKSEL` reader - TIMADV clock selection"] pub type TimadvClkselR = crate :: BitReader ;
#[doc = "Field `TIMADV_CLKSEL` writer - TIMADV clock selection"] pub type TimadvClkselW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIMADV_PRE` reader - TIMADV lock prescaler"] pub type TimadvPreR = crate :: FieldReader ;
#[doc = "Field `TIMADV_PRE` writer - TIMADV lock prescaler"] pub type TimadvPreW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ; impl R {
#[doc = "Bit 0 - TIMADV clock selection"]
#[inline (always)] pub fn timadv_clksel (& self) -> TimadvClkselR { TimadvClkselR :: new ((self . bits & 1) != 0) }
#[doc = "Bits 1:3 - TIMADV lock prescaler"]
#[inline (always)] pub fn timadv_pre (& self) -> TimadvPreR { TimadvPreR :: new (((self . bits >> 1) & 7) as u8) } } impl W {
#[doc = "Bit 0 - TIMADV clock selection"]
#[inline (always)] pub fn timadv_clksel (& mut self) -> TimadvClkselW < '_ , Cfgr2Spec > { TimadvClkselW :: new (self , 0) }
#[doc = "Bits 1:3 - TIMADV lock prescaler"]
#[inline (always)] pub fn timadv_pre (& mut self) -> TimadvPreW < '_ , Cfgr2Spec > { TimadvPreW :: new (self , 1) } }
#[doc = "Configure Register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cfgr2Spec ; impl crate :: RegisterSpec for Cfgr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cfgr2::R`](R) reader structure"] impl crate :: Readable for Cfgr2Spec { }
#[doc = "`write(|w| ..)` method takes [`cfgr2::W`](W) writer structure"] impl crate :: Writable for Cfgr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CFGR2 to value 0x20"] impl crate :: Resettable for Cfgr2Spec { const RESET_VALUE : u32 = 0x20 ; } }
#[doc = "RNG (rw) register accessor: Random number register\n\nYou can [`read`](crate::Reg::read) this register and get [`rng::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rng::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rng`] module"]
#[doc (alias = "RNG")] pub type Rng = crate :: Reg < rng :: RngSpec > ;
#[doc = "Random number register"] pub mod rng {
#[doc = "Register `RNG` reader"] pub type R = crate :: R < RngSpec > ;
#[doc = "Register `RNG` writer"] pub type W = crate :: W < RngSpec > ;
#[doc = "Field `RNG_EN` reader - RNG enable"] pub type RngEnR = crate :: BitReader ;
#[doc = "Field `RNG_EN` writer - RNG enable"] pub type RngEnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RNG_LDSD` reader - RNG load seed"] pub type RngLdsdR = crate :: BitReader ;
#[doc = "Field `RNG_LDSD` writer - RNG load seed"] pub type RngLdsdW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RNG_DONE` reader - RNG done"] pub type RngDoneR = crate :: BitReader ;
#[doc = "Field `RNG_DONE` writer - RNG done"] pub type RngDoneW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RNG_DATA` reader - RNG data"] pub type RngDataR = crate :: FieldReader < u16 > ;
#[doc = "Field `RNG_DATA` writer - RNG data"] pub type RngDataW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bit 0 - RNG enable"]
#[inline (always)] pub fn rng_en (& self) -> RngEnR { RngEnR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - RNG load seed"]
#[inline (always)] pub fn rng_ldsd (& self) -> RngLdsdR { RngLdsdR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - RNG done"]
#[inline (always)] pub fn rng_done (& self) -> RngDoneR { RngDoneR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bits 16:31 - RNG data"]
#[inline (always)] pub fn rng_data (& self) -> RngDataR { RngDataR :: new (((self . bits >> 16) & 0xffff) as u16) } } impl W {
#[doc = "Bit 0 - RNG enable"]
#[inline (always)] pub fn rng_en (& mut self) -> RngEnW < '_ , RngSpec > { RngEnW :: new (self , 0) }
#[doc = "Bit 1 - RNG load seed"]
#[inline (always)] pub fn rng_ldsd (& mut self) -> RngLdsdW < '_ , RngSpec > { RngLdsdW :: new (self , 1) }
#[doc = "Bit 2 - RNG done"]
#[inline (always)] pub fn rng_done (& mut self) -> RngDoneW < '_ , RngSpec > { RngDoneW :: new (self , 2) }
#[doc = "Bits 16:31 - RNG data"]
#[inline (always)] pub fn rng_data (& mut self) -> RngDataW < '_ , RngSpec > { RngDataW :: new (self , 16) } }
#[doc = "Random number register\n\nYou can [`read`](crate::Reg::read) this register and get [`rng::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rng::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RngSpec ; impl crate :: RegisterSpec for RngSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rng::R`](R) reader structure"] impl crate :: Readable for RngSpec { }
#[doc = "`write(|w| ..)` method takes [`rng::W`](W) writer structure"] impl crate :: Writable for RngSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RNG to value 0"] impl crate :: Resettable for RngSpec { } }
#[doc = "SYSCFG (rw) register accessor: System Configuration Register\n\nYou can [`read`](crate::Reg::read) this register and get [`syscfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`syscfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@syscfg`] module"]
#[doc (alias = "SYSCFG")] pub type Syscfg = crate :: Reg < syscfg :: SyscfgSpec > ;
#[doc = "System Configuration Register"] pub mod syscfg {
#[doc = "Register `SYSCFG` reader"] pub type R = crate :: R < SyscfgSpec > ;
#[doc = "Register `SYSCFG` writer"] pub type W = crate :: W < SyscfgSpec > ;
#[doc = "Field `PROG_CHECK_EN` reader - Whether to check if the data in Flash is 0xFF when writing Flash"] pub type ProgCheckEnR = crate :: BitReader ;
#[doc = "Field `PROG_CHECK_EN` writer - Whether to check if the data in Flash is 0xFF when writing Flash"] pub type ProgCheckEnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SECTOR_1K_CFG` reader - The size of flash page erase"] pub type Sector1kCfgR = crate :: BitReader ;
#[doc = "Field `SECTOR_1K_CFG` writer - The size of flash page erase"] pub type Sector1kCfgW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Whether to check if the data in Flash is 0xFF when writing Flash"]
#[inline (always)] pub fn prog_check_en (& self) -> ProgCheckEnR { ProgCheckEnR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - The size of flash page erase"]
#[inline (always)] pub fn sector_1k_cfg (& self) -> Sector1kCfgR { Sector1kCfgR :: new (((self . bits >> 1) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Whether to check if the data in Flash is 0xFF when writing Flash"]
#[inline (always)] pub fn prog_check_en (& mut self) -> ProgCheckEnW < '_ , SyscfgSpec > { ProgCheckEnW :: new (self , 0) }
#[doc = "Bit 1 - The size of flash page erase"]
#[inline (always)] pub fn sector_1k_cfg (& mut self) -> Sector1kCfgW < '_ , SyscfgSpec > { Sector1kCfgW :: new (self , 1) } }
#[doc = "System Configuration Register\n\nYou can [`read`](crate::Reg::read) this register and get [`syscfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`syscfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SyscfgSpec ; impl crate :: RegisterSpec for SyscfgSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`syscfg::R`](R) reader structure"] impl crate :: Readable for SyscfgSpec { }
#[doc = "`write(|w| ..)` method takes [`syscfg::W`](W) writer structure"] impl crate :: Writable for SyscfgSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SYSCFG to value 0x0010_0c03"] impl crate :: Resettable for SyscfgSpec { const RESET_VALUE : u32 = 0x0010_0c03 ; } } }
#[doc = "Real time clock"] pub type Rtc = crate :: Periph < rtc :: RegisterBlock , 0x4000_2800 > ; impl core :: fmt :: Debug for Rtc { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Rtc") . finish () } }
#[doc = "Real time clock"] pub mod rtc {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { rtc_crh : RtcCrh , _reserved1 : [u8 ; 0x02] , rtc_crl : RtcCrl , _reserved2 : [u8 ; 0x02] , rtc_prlh : RtcPrlh , _reserved3 : [u8 ; 0x02] , rtc_prll : RtcPrll , _reserved4 : [u8 ; 0x02] , rtc_divh : RtcDivh , _reserved5 : [u8 ; 0x02] , rtc_divl : RtcDivl , _reserved6 : [u8 ; 0x02] , rtc_cnth : RtcCnth , _reserved7 : [u8 ; 0x02] , rtc_cntl : RtcCntl , _reserved8 : [u8 ; 0x02] , rtc_alrh : RtcAlrh , _reserved9 : [u8 ; 0x02] , rtc_alrl : RtcAlrl , _reserved10 : [u8 ; 0x02] , rtc_msrh : RtcMsrh , _reserved11 : [u8 ; 0x02] , rtc_msrl : RtcMsrl , } impl RegisterBlock {
#[doc = "0x00 - RTC configuration high register"]
#[inline (always)] pub const fn rtc_crh (& self) -> & RtcCrh { & self . rtc_crh }
#[doc = "0x04 - RTC configuration low register"]
#[inline (always)] pub const fn rtc_crl (& self) -> & RtcCrl { & self . rtc_crl }
#[doc = "0x08 - RTC Prescaler load high register"]
#[inline (always)] pub const fn rtc_prlh (& self) -> & RtcPrlh { & self . rtc_prlh }
#[doc = "0x0c - RTC Prescaler load low register"]
#[inline (always)] pub const fn rtc_prll (& self) -> & RtcPrll { & self . rtc_prll }
#[doc = "0x10 - RTC prescaler divider factor high register"]
#[inline (always)] pub const fn rtc_divh (& self) -> & RtcDivh { & self . rtc_divh }
#[doc = "0x14 - RTC prescaler divider factor low register"]
#[inline (always)] pub const fn rtc_divl (& self) -> & RtcDivl { & self . rtc_divl }
#[doc = "0x18 - RTC counter high register"]
#[inline (always)] pub const fn rtc_cnth (& self) -> & RtcCnth { & self . rtc_cnth }
#[doc = "0x1c - RTC counter low register"]
#[inline (always)] pub const fn rtc_cntl (& self) -> & RtcCntl { & self . rtc_cntl }
#[doc = "0x20 - RTC alarm high register"]
#[inline (always)] pub const fn rtc_alrh (& self) -> & RtcAlrh { & self . rtc_alrh }
#[doc = "0x24 - RTC alarm low register"]
#[inline (always)] pub const fn rtc_alrl (& self) -> & RtcAlrl { & self . rtc_alrl }
#[doc = "0x28 - RTC millisecond alarm high register"]
#[inline (always)] pub const fn rtc_msrh (& self) -> & RtcMsrh { & self . rtc_msrh }
#[doc = "0x2c - RTC millisecond alarm low register"]
#[inline (always)] pub const fn rtc_msrl (& self) -> & RtcMsrl { & self . rtc_msrl } }
#[doc = "RTC_CRH (rw) register accessor: RTC configuration high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_crh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_crh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_crh`] module"]
#[doc (alias = "RTC_CRH")] pub type RtcCrh = crate :: Reg < rtc_crh :: RtcCrhSpec > ;
#[doc = "RTC configuration high register"] pub mod rtc_crh {
#[doc = "Register `RTC_CRH` reader"] pub type R = crate :: R < RtcCrhSpec > ;
#[doc = "Register `RTC_CRH` writer"] pub type W = crate :: W < RtcCrhSpec > ;
#[doc = "Field `SECIE` reader - Second interrupt enable"] pub type SecieR = crate :: BitReader ;
#[doc = "Field `SECIE` writer - Second interrupt enable"] pub type SecieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ALRIE` reader - Alarm interrupt enable"] pub type AlrieR = crate :: BitReader ;
#[doc = "Field `ALRIE` writer - Alarm interrupt enable"] pub type AlrieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OWIE` reader - Overflow interrupt enable"] pub type OwieR = crate :: BitReader ;
#[doc = "Field `OWIE` writer - Overflow interrupt enable"] pub type OwieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Second interrupt enable"]
#[inline (always)] pub fn secie (& self) -> SecieR { SecieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Alarm interrupt enable"]
#[inline (always)] pub fn alrie (& self) -> AlrieR { AlrieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Overflow interrupt enable"]
#[inline (always)] pub fn owie (& self) -> OwieR { OwieR :: new (((self . bits >> 2) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Second interrupt enable"]
#[inline (always)] pub fn secie (& mut self) -> SecieW < '_ , RtcCrhSpec > { SecieW :: new (self , 0) }
#[doc = "Bit 1 - Alarm interrupt enable"]
#[inline (always)] pub fn alrie (& mut self) -> AlrieW < '_ , RtcCrhSpec > { AlrieW :: new (self , 1) }
#[doc = "Bit 2 - Overflow interrupt enable"]
#[inline (always)] pub fn owie (& mut self) -> OwieW < '_ , RtcCrhSpec > { OwieW :: new (self , 2) } }
#[doc = "RTC configuration high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_crh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_crh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcCrhSpec ; impl crate :: RegisterSpec for RtcCrhSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_crh::R`](R) reader structure"] impl crate :: Readable for RtcCrhSpec { }
#[doc = "`write(|w| ..)` method takes [`rtc_crh::W`](W) writer structure"] impl crate :: Writable for RtcCrhSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_CRH to value 0"] impl crate :: Resettable for RtcCrhSpec { } }
#[doc = "RTC_CRL (rw) register accessor: RTC configuration low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_crl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_crl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_crl`] module"]
#[doc (alias = "RTC_CRL")] pub type RtcCrl = crate :: Reg < rtc_crl :: RtcCrlSpec > ;
#[doc = "RTC configuration low register"] pub mod rtc_crl {
#[doc = "Register `RTC_CRL` reader"] pub type R = crate :: R < RtcCrlSpec > ;
#[doc = "Register `RTC_CRL` writer"] pub type W = crate :: W < RtcCrlSpec > ;
#[doc = "Field `SECF` reader - Second flag"] pub type SecfR = crate :: BitReader ;
#[doc = "Field `SECF` writer - Second flag"] pub type SecfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ALRF` reader - Alarm flag"] pub type AlrfR = crate :: BitReader ;
#[doc = "Field `ALRF` writer - Alarm flag"] pub type AlrfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OWF` reader - Overflow flag"] pub type OwfR = crate :: BitReader ;
#[doc = "Field `OWF` writer - Overflow flag"] pub type OwfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RSF` reader - Registers synchronized flag"] pub type RsfR = crate :: BitReader ;
#[doc = "Field `RSF` writer - Registers synchronized flag"] pub type RsfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CNF` reader - Configuration flag"] pub type CnfR = crate :: BitReader ;
#[doc = "Field `CNF` writer - Configuration flag"] pub type CnfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RTOFF` reader - RTC operation OFF"] pub type RtoffR = crate :: BitReader ;
#[doc = "Field `RTOFF` writer - RTC operation OFF"] pub type RtoffW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ALPEN` reader - RTC alarm loop enable"] pub type AlpenR = crate :: BitReader ;
#[doc = "Field `ALPEN` writer - RTC alarm loop enable"] pub type AlpenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Second flag"]
#[inline (always)] pub fn secf (& self) -> SecfR { SecfR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Alarm flag"]
#[inline (always)] pub fn alrf (& self) -> AlrfR { AlrfR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Overflow flag"]
#[inline (always)] pub fn owf (& self) -> OwfR { OwfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Registers synchronized flag"]
#[inline (always)] pub fn rsf (& self) -> RsfR { RsfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Configuration flag"]
#[inline (always)] pub fn cnf (& self) -> CnfR { CnfR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - RTC operation OFF"]
#[inline (always)] pub fn rtoff (& self) -> RtoffR { RtoffR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - RTC alarm loop enable"]
#[inline (always)] pub fn alpen (& self) -> AlpenR { AlpenR :: new (((self . bits >> 6) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Second flag"]
#[inline (always)] pub fn secf (& mut self) -> SecfW < '_ , RtcCrlSpec > { SecfW :: new (self , 0) }
#[doc = "Bit 1 - Alarm flag"]
#[inline (always)] pub fn alrf (& mut self) -> AlrfW < '_ , RtcCrlSpec > { AlrfW :: new (self , 1) }
#[doc = "Bit 2 - Overflow flag"]
#[inline (always)] pub fn owf (& mut self) -> OwfW < '_ , RtcCrlSpec > { OwfW :: new (self , 2) }
#[doc = "Bit 3 - Registers synchronized flag"]
#[inline (always)] pub fn rsf (& mut self) -> RsfW < '_ , RtcCrlSpec > { RsfW :: new (self , 3) }
#[doc = "Bit 4 - Configuration flag"]
#[inline (always)] pub fn cnf (& mut self) -> CnfW < '_ , RtcCrlSpec > { CnfW :: new (self , 4) }
#[doc = "Bit 5 - RTC operation OFF"]
#[inline (always)] pub fn rtoff (& mut self) -> RtoffW < '_ , RtcCrlSpec > { RtoffW :: new (self , 5) }
#[doc = "Bit 6 - RTC alarm loop enable"]
#[inline (always)] pub fn alpen (& mut self) -> AlpenW < '_ , RtcCrlSpec > { AlpenW :: new (self , 6) } }
#[doc = "RTC configuration low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_crl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_crl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcCrlSpec ; impl crate :: RegisterSpec for RtcCrlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_crl::R`](R) reader structure"] impl crate :: Readable for RtcCrlSpec { }
#[doc = "`write(|w| ..)` method takes [`rtc_crl::W`](W) writer structure"] impl crate :: Writable for RtcCrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_CRL to value 0x20"] impl crate :: Resettable for RtcCrlSpec { const RESET_VALUE : u16 = 0x20 ; } }
#[doc = "RTC_PRLH (w) register accessor: RTC Prescaler load high register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_prlh::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_prlh`] module"]
#[doc (alias = "RTC_PRLH")] pub type RtcPrlh = crate :: Reg < rtc_prlh :: RtcPrlhSpec > ;
#[doc = "RTC Prescaler load high register"] pub mod rtc_prlh {
#[doc = "Register `RTC_PRLH` writer"] pub type W = crate :: W < RtcPrlhSpec > ;
#[doc = "Field `PRL` writer - RTC prescaler reload value high"] pub type PrlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl W {
#[doc = "Bits 0:3 - RTC prescaler reload value high"]
#[inline (always)] pub fn prl (& mut self) -> PrlW < '_ , RtcPrlhSpec > { PrlW :: new (self , 0) } }
#[doc = "RTC Prescaler load high register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_prlh::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcPrlhSpec ; impl crate :: RegisterSpec for RtcPrlhSpec { type Ux = u16 ; }
#[doc = "`write(|w| ..)` method takes [`rtc_prlh::W`](W) writer structure"] impl crate :: Writable for RtcPrlhSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_PRLH to value 0"] impl crate :: Resettable for RtcPrlhSpec { } }
#[doc = "RTC_PRLL (w) register accessor: RTC Prescaler load low register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_prll::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_prll`] module"]
#[doc (alias = "RTC_PRLL")] pub type RtcPrll = crate :: Reg < rtc_prll :: RtcPrllSpec > ;
#[doc = "RTC Prescaler load low register"] pub mod rtc_prll {
#[doc = "Register `RTC_PRLL` writer"] pub type W = crate :: W < RtcPrllSpec > ;
#[doc = "Field `PRL` writer - RTC prescaler reload value low"] pub type PrlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl W {
#[doc = "Bits 0:15 - RTC prescaler reload value low"]
#[inline (always)] pub fn prl (& mut self) -> PrlW < '_ , RtcPrllSpec > { PrlW :: new (self , 0) } }
#[doc = "RTC Prescaler load low register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_prll::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcPrllSpec ; impl crate :: RegisterSpec for RtcPrllSpec { type Ux = u16 ; }
#[doc = "`write(|w| ..)` method takes [`rtc_prll::W`](W) writer structure"] impl crate :: Writable for RtcPrllSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_PRLL to value 0"] impl crate :: Resettable for RtcPrllSpec { } }
#[doc = "RTC_DIVH (r) register accessor: RTC prescaler divider factor high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_divh::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_divh`] module"]
#[doc (alias = "RTC_DIVH")] pub type RtcDivh = crate :: Reg < rtc_divh :: RtcDivhSpec > ;
#[doc = "RTC prescaler divider factor high register"] pub mod rtc_divh {
#[doc = "Register `RTC_DIVH` reader"] pub type R = crate :: R < RtcDivhSpec > ;
#[doc = "Field `DIV` reader - RTC clock divider high"] pub type DivR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:3 - RTC clock divider high"]
#[inline (always)] pub fn div (& self) -> DivR { DivR :: new ((self . bits & 0x0f) as u8) } }
#[doc = "RTC prescaler divider factor high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_divh::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcDivhSpec ; impl crate :: RegisterSpec for RtcDivhSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_divh::R`](R) reader structure"] impl crate :: Readable for RtcDivhSpec { }
#[doc = "`reset()` method sets RTC_DIVH to value 0"] impl crate :: Resettable for RtcDivhSpec { } }
#[doc = "RTC_DIVL (r) register accessor: RTC prescaler divider factor low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_divl::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_divl`] module"]
#[doc (alias = "RTC_DIVL")] pub type RtcDivl = crate :: Reg < rtc_divl :: RtcDivlSpec > ;
#[doc = "RTC prescaler divider factor low register"] pub mod rtc_divl {
#[doc = "Register `RTC_DIVL` reader"] pub type R = crate :: R < RtcDivlSpec > ;
#[doc = "Field `DIV` reader - RTC clock divider low"] pub type DivR = crate :: FieldReader < u16 > ; impl R {
#[doc = "Bits 0:15 - RTC clock divider low"]
#[inline (always)] pub fn div (& self) -> DivR { DivR :: new (self . bits) } }
#[doc = "RTC prescaler divider factor low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_divl::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcDivlSpec ; impl crate :: RegisterSpec for RtcDivlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_divl::R`](R) reader structure"] impl crate :: Readable for RtcDivlSpec { }
#[doc = "`reset()` method sets RTC_DIVL to value 0"] impl crate :: Resettable for RtcDivlSpec { } }
#[doc = "RTC_CNTH (rw) register accessor: RTC counter high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_cnth::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_cnth::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_cnth`] module"]
#[doc (alias = "RTC_CNTH")] pub type RtcCnth = crate :: Reg < rtc_cnth :: RtcCnthSpec > ;
#[doc = "RTC counter high register"] pub mod rtc_cnth {
#[doc = "Register `RTC_CNTH` reader"] pub type R = crate :: R < RtcCnthSpec > ;
#[doc = "Register `RTC_CNTH` writer"] pub type W = crate :: W < RtcCnthSpec > ;
#[doc = "Field `CNT` reader - RTC counter high"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - RTC counter high"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - RTC counter high"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new (self . bits) } } impl W {
#[doc = "Bits 0:15 - RTC counter high"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , RtcCnthSpec > { CntW :: new (self , 0) } }
#[doc = "RTC counter high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_cnth::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_cnth::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcCnthSpec ; impl crate :: RegisterSpec for RtcCnthSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_cnth::R`](R) reader structure"] impl crate :: Readable for RtcCnthSpec { }
#[doc = "`write(|w| ..)` method takes [`rtc_cnth::W`](W) writer structure"] impl crate :: Writable for RtcCnthSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_CNTH to value 0"] impl crate :: Resettable for RtcCnthSpec { } }
#[doc = "RTC_CNTL (rw) register accessor: RTC counter low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_cntl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_cntl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_cntl`] module"]
#[doc (alias = "RTC_CNTL")] pub type RtcCntl = crate :: Reg < rtc_cntl :: RtcCntlSpec > ;
#[doc = "RTC counter low register"] pub mod rtc_cntl {
#[doc = "Register `RTC_CNTL` reader"] pub type R = crate :: R < RtcCntlSpec > ;
#[doc = "Register `RTC_CNTL` writer"] pub type W = crate :: W < RtcCntlSpec > ;
#[doc = "Field `CNT` reader - RTC counter low"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - RTC counter low"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - RTC counter low"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new (self . bits) } } impl W {
#[doc = "Bits 0:15 - RTC counter low"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , RtcCntlSpec > { CntW :: new (self , 0) } }
#[doc = "RTC counter low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_cntl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_cntl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcCntlSpec ; impl crate :: RegisterSpec for RtcCntlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_cntl::R`](R) reader structure"] impl crate :: Readable for RtcCntlSpec { }
#[doc = "`write(|w| ..)` method takes [`rtc_cntl::W`](W) writer structure"] impl crate :: Writable for RtcCntlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_CNTL to value 0"] impl crate :: Resettable for RtcCntlSpec { } }
#[doc = "RTC_ALRH (rw) register accessor: RTC alarm high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_alrh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_alrh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_alrh`] module"]
#[doc (alias = "RTC_ALRH")] pub type RtcAlrh = crate :: Reg < rtc_alrh :: RtcAlrhSpec > ;
#[doc = "RTC alarm high register"] pub mod rtc_alrh {
#[doc = "Register `RTC_ALRH` reader"] pub type R = crate :: R < RtcAlrhSpec > ;
#[doc = "Register `RTC_ALRH` writer"] pub type W = crate :: W < RtcAlrhSpec > ;
#[doc = "Field `ALR` reader - RTC alarm high"] pub type AlrR = crate :: FieldReader < u16 > ;
#[doc = "Field `ALR` writer - RTC alarm high"] pub type AlrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - RTC alarm high"]
#[inline (always)] pub fn alr (& self) -> AlrR { AlrR :: new (self . bits) } } impl W {
#[doc = "Bits 0:15 - RTC alarm high"]
#[inline (always)] pub fn alr (& mut self) -> AlrW < '_ , RtcAlrhSpec > { AlrW :: new (self , 0) } }
#[doc = "RTC alarm high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_alrh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_alrh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcAlrhSpec ; impl crate :: RegisterSpec for RtcAlrhSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_alrh::R`](R) reader structure"] impl crate :: Readable for RtcAlrhSpec { }
#[doc = "`write(|w| ..)` method takes [`rtc_alrh::W`](W) writer structure"] impl crate :: Writable for RtcAlrhSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_ALRH to value 0xffff"] impl crate :: Resettable for RtcAlrhSpec { const RESET_VALUE : u16 = 0xffff ; } }
#[doc = "RTC_ALRL (rw) register accessor: RTC alarm low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_alrl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_alrl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_alrl`] module"]
#[doc (alias = "RTC_ALRL")] pub type RtcAlrl = crate :: Reg < rtc_alrl :: RtcAlrlSpec > ;
#[doc = "RTC alarm low register"] pub mod rtc_alrl {
#[doc = "Register `RTC_ALRL` reader"] pub type R = crate :: R < RtcAlrlSpec > ;
#[doc = "Register `RTC_ALRL` writer"] pub type W = crate :: W < RtcAlrlSpec > ;
#[doc = "Field `ALR` reader - RTC alarm low"] pub type AlrR = crate :: FieldReader < u16 > ;
#[doc = "Field `ALR` writer - RTC alarm low"] pub type AlrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - RTC alarm low"]
#[inline (always)] pub fn alr (& self) -> AlrR { AlrR :: new (self . bits) } } impl W {
#[doc = "Bits 0:15 - RTC alarm low"]
#[inline (always)] pub fn alr (& mut self) -> AlrW < '_ , RtcAlrlSpec > { AlrW :: new (self , 0) } }
#[doc = "RTC alarm low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_alrl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_alrl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcAlrlSpec ; impl crate :: RegisterSpec for RtcAlrlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_alrl::R`](R) reader structure"] impl crate :: Readable for RtcAlrlSpec { }
#[doc = "`write(|w| ..)` method takes [`rtc_alrl::W`](W) writer structure"] impl crate :: Writable for RtcAlrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_ALRL to value 0xffff"] impl crate :: Resettable for RtcAlrlSpec { const RESET_VALUE : u16 = 0xffff ; } }
#[doc = "RTC_MSRH (rw) register accessor: RTC millisecond alarm high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_msrh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_msrh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_msrh`] module"]
#[doc (alias = "RTC_MSRH")] pub type RtcMsrh = crate :: Reg < rtc_msrh :: RtcMsrhSpec > ;
#[doc = "RTC millisecond alarm high register"] pub mod rtc_msrh {
#[doc = "Register `RTC_MSRH` reader"] pub type R = crate :: R < RtcMsrhSpec > ;
#[doc = "Register `RTC_MSRH` writer"] pub type W = crate :: W < RtcMsrhSpec > ;
#[doc = "Field `MSR` reader - RTC msec high"] pub type MsrR = crate :: FieldReader ;
#[doc = "Field `MSR` writer - RTC msec high"] pub type MsrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - RTC msec high"]
#[inline (always)] pub fn msr (& self) -> MsrR { MsrR :: new ((self . bits & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - RTC msec high"]
#[inline (always)] pub fn msr (& mut self) -> MsrW < '_ , RtcMsrhSpec > { MsrW :: new (self , 0) } }
#[doc = "RTC millisecond alarm high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_msrh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_msrh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcMsrhSpec ; impl crate :: RegisterSpec for RtcMsrhSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_msrh::R`](R) reader structure"] impl crate :: Readable for RtcMsrhSpec { }
#[doc = "`write(|w| ..)` method takes [`rtc_msrh::W`](W) writer structure"] impl crate :: Writable for RtcMsrhSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_MSRH to value 0"] impl crate :: Resettable for RtcMsrhSpec { } }
#[doc = "RTC_MSRL (rw) register accessor: RTC millisecond alarm low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_msrl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_msrl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rtc_msrl`] module"]
#[doc (alias = "RTC_MSRL")] pub type RtcMsrl = crate :: Reg < rtc_msrl :: RtcMsrlSpec > ;
#[doc = "RTC millisecond alarm low register"] pub mod rtc_msrl {
#[doc = "Register `RTC_MSRL` reader"] pub type R = crate :: R < RtcMsrlSpec > ;
#[doc = "Register `RTC_MSRL` writer"] pub type W = crate :: W < RtcMsrlSpec > ;
#[doc = "Field `MSR` reader - RTC msec low"] pub type MsrR = crate :: FieldReader < u16 > ;
#[doc = "Field `MSR` writer - RTC msec low"] pub type MsrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - RTC msec low"]
#[inline (always)] pub fn msr (& self) -> MsrR { MsrR :: new (self . bits) } } impl W {
#[doc = "Bits 0:15 - RTC msec low"]
#[inline (always)] pub fn msr (& mut self) -> MsrW < '_ , RtcMsrlSpec > { MsrW :: new (self , 0) } }
#[doc = "RTC millisecond alarm low register\n\nYou can [`read`](crate::Reg::read) this register and get [`rtc_msrl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtc_msrl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtcMsrlSpec ; impl crate :: RegisterSpec for RtcMsrlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`rtc_msrl::R`](R) reader structure"] impl crate :: Readable for RtcMsrlSpec { }
#[doc = "`write(|w| ..)` method takes [`rtc_msrl::W`](W) writer structure"] impl crate :: Writable for RtcMsrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RTC_MSRL to value 0"] impl crate :: Resettable for RtcMsrlSpec { } } }
#[doc = "Serial peripheral interface"] pub type Spi1 = crate :: Periph < spi1 :: RegisterBlock , 0x4001_3000 > ; impl core :: fmt :: Debug for Spi1 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Spi1") . finish () } }
#[doc = "Serial peripheral interface"] pub mod spi1 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { txreg : Txreg , rxreg : Rxreg , cstat : Cstat , intstat : Intstat , inten : Inten , intclr : Intclr , gctl : Gctl , cctl : Cctl , spbrg : Spbrg , rxdnr : Rxdnr , nssr : Nssr , extctl : Extctl , } impl RegisterBlock {
#[doc = "0x00 - TXREG"]
#[inline (always)] pub const fn txreg (& self) -> & Txreg { & self . txreg }
#[doc = "0x04 - RXREG"]
#[inline (always)] pub const fn rxreg (& self) -> & Rxreg { & self . rxreg }
#[doc = "0x08 - CSTAT"]
#[inline (always)] pub const fn cstat (& self) -> & Cstat { & self . cstat }
#[doc = "0x0c - INTSTAT"]
#[inline (always)] pub const fn intstat (& self) -> & Intstat { & self . intstat }
#[doc = "0x10 - INTEN"]
#[inline (always)] pub const fn inten (& self) -> & Inten { & self . inten }
#[doc = "0x14 - INTCLR"]
#[inline (always)] pub const fn intclr (& self) -> & Intclr { & self . intclr }
#[doc = "0x18 - GCTL"]
#[inline (always)] pub const fn gctl (& self) -> & Gctl { & self . gctl }
#[doc = "0x1c - CCTL"]
#[inline (always)] pub const fn cctl (& self) -> & Cctl { & self . cctl }
#[doc = "0x20 - SPBRG"]
#[inline (always)] pub const fn spbrg (& self) -> & Spbrg { & self . spbrg }
#[doc = "0x24 - RXDNR"]
#[inline (always)] pub const fn rxdnr (& self) -> & Rxdnr { & self . rxdnr }
#[doc = "0x28 - NSSR"]
#[inline (always)] pub const fn nssr (& self) -> & Nssr { & self . nssr }
#[doc = "0x2c - EXTCTL"]
#[inline (always)] pub const fn extctl (& self) -> & Extctl { & self . extctl } }
#[doc = "TXREG (rw) register accessor: TXREG\n\nYou can [`read`](crate::Reg::read) this register and get [`txreg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txreg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txreg`] module"]
#[doc (alias = "TXREG")] pub type Txreg = crate :: Reg < txreg :: TxregSpec > ;
#[doc = "TXREG"] pub mod txreg {
#[doc = "Register `TXREG` reader"] pub type R = crate :: R < TxregSpec > ;
#[doc = "Register `TXREG` writer"] pub type W = crate :: W < TxregSpec > ;
#[doc = "Field `TXREG` reader - Transmit data register"] pub type TxregR = crate :: FieldReader < u32 > ;
#[doc = "Field `TXREG` writer - Transmit data register"] pub type TxregW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txreg (& self) -> TxregR { TxregR :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Transmit data register"]
#[inline (always)] pub fn txreg (& mut self) -> TxregW < '_ , TxregSpec > { TxregW :: new (self , 0) } }
#[doc = "TXREG\n\nYou can [`read`](crate::Reg::read) this register and get [`txreg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`txreg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TxregSpec ; impl crate :: RegisterSpec for TxregSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`txreg::R`](R) reader structure"] impl crate :: Readable for TxregSpec { }
#[doc = "`write(|w| ..)` method takes [`txreg::W`](W) writer structure"] impl crate :: Writable for TxregSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TXREG to value 0"] impl crate :: Resettable for TxregSpec { } }
#[doc = "RXREG (r) register accessor: RXREG\n\nYou can [`read`](crate::Reg::read) this register and get [`rxreg::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxreg`] module"]
#[doc (alias = "RXREG")] pub type Rxreg = crate :: Reg < rxreg :: RxregSpec > ;
#[doc = "RXREG"] pub mod rxreg {
#[doc = "Register `RXREG` reader"] pub type R = crate :: R < RxregSpec > ;
#[doc = "Field `RXREG` reader - Receive data register"] pub type RxregR = crate :: FieldReader < u32 > ; impl R {
#[doc = "Bits 0:31 - Receive data register"]
#[inline (always)] pub fn rxreg (& self) -> RxregR { RxregR :: new (self . bits) } }
#[doc = "RXREG\n\nYou can [`read`](crate::Reg::read) this register and get [`rxreg::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxregSpec ; impl crate :: RegisterSpec for RxregSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rxreg::R`](R) reader structure"] impl crate :: Readable for RxregSpec { }
#[doc = "`reset()` method sets RXREG to value 0"] impl crate :: Resettable for RxregSpec { } }
#[doc = "CSTAT (r) register accessor: CSTAT\n\nYou can [`read`](crate::Reg::read) this register and get [`cstat::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cstat`] module"]
#[doc (alias = "CSTAT")] pub type Cstat = crate :: Reg < cstat :: CstatSpec > ;
#[doc = "CSTAT"] pub mod cstat {
#[doc = "Register `CSTAT` reader"] pub type R = crate :: R < CstatSpec > ;
#[doc = "Field `TXEPT` reader - Transmitter empty bit"] pub type TxeptR = crate :: BitReader ;
#[doc = "Field `RXAVL` reader - Receive available byte data message"] pub type RxavlR = crate :: BitReader ;
#[doc = "Field `TXFULL` reader - Transmitter FIFO full status bit"] pub type TxfullR = crate :: BitReader ;
#[doc = "Field `RXAVL_4BYTE` reader - Receive available 4 byte data message"] pub type Rxavl4byteR = crate :: BitReader ;
#[doc = "Field `TXFADDR` reader - Receive FIFO address"] pub type TxfaddrR = crate :: FieldReader ;
#[doc = "Field `RXFADDR` reader - Transmit FIFO address"] pub type RxfaddrR = crate :: FieldReader ; impl R {
#[doc = "Bit 0 - Transmitter empty bit"]
#[inline (always)] pub fn txept (& self) -> TxeptR { TxeptR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive available byte data message"]
#[inline (always)] pub fn rxavl (& self) -> RxavlR { RxavlR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmitter FIFO full status bit"]
#[inline (always)] pub fn txfull (& self) -> TxfullR { TxfullR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Receive available 4 byte data message"]
#[inline (always)] pub fn rxavl_4byte (& self) -> Rxavl4byteR { Rxavl4byteR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:7 - Receive FIFO address"]
#[inline (always)] pub fn txfaddr (& self) -> TxfaddrR { TxfaddrR :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:11 - Transmit FIFO address"]
#[inline (always)] pub fn rxfaddr (& self) -> RxfaddrR { RxfaddrR :: new (((self . bits >> 8) & 0x0f) as u8) } }
#[doc = "CSTAT\n\nYou can [`read`](crate::Reg::read) this register and get [`cstat::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CstatSpec ; impl crate :: RegisterSpec for CstatSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cstat::R`](R) reader structure"] impl crate :: Readable for CstatSpec { }
#[doc = "`reset()` method sets CSTAT to value 0x01"] impl crate :: Resettable for CstatSpec { const RESET_VALUE : u32 = 0x01 ; } }
#[doc = "INTSTAT (rw) register accessor: INTSTAT\n\nYou can [`read`](crate::Reg::read) this register and get [`intstat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intstat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intstat`] module"]
#[doc (alias = "INTSTAT")] pub type Intstat = crate :: Reg < intstat :: IntstatSpec > ;
#[doc = "INTSTAT"] pub mod intstat {
#[doc = "Register `INTSTAT` reader"] pub type R = crate :: R < IntstatSpec > ;
#[doc = "Register `INTSTAT` writer"] pub type W = crate :: W < IntstatSpec > ;
#[doc = "Field `TX_INTF` reader - Transmit FIFO avialable interrupt flag bit"] pub type TxIntfR = crate :: BitReader ;
#[doc = "Field `TX_INTF` writer - Transmit FIFO avialable interrupt flag bit"] pub type TxIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RX_INTF` reader - Receive data available interrupt flag bit"] pub type RxIntfR = crate :: BitReader ;
#[doc = "Field `RX_INTF` writer - Receive data available interrupt flag bit"] pub type RxIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UNDERRUN_INTF` reader - SPI underrun interrupt flag bit"] pub type UnderrunIntfR = crate :: BitReader ;
#[doc = "Field `UNDERRUN_INTF` writer - SPI underrun interrupt flag bit"] pub type UnderrunIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXOERR_INTF` reader - Receive overrun error interrupt flag bit"] pub type RxoerrIntfR = crate :: BitReader ;
#[doc = "Field `RXOERR_INTF` writer - Receive overrun error interrupt flag bit"] pub type RxoerrIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXMATCH_INTF` reader - Receive data match the RXDNR number"] pub type RxmatchIntfR = crate :: BitReader ;
#[doc = "Field `RXMATCH_INTF` writer - Receive data match the RXDNR number"] pub type RxmatchIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXFULL_INTF` reader - RX FIFO full interrupt flag bit"] pub type RxfullIntfR = crate :: BitReader ;
#[doc = "Field `RXFULL_INTF` writer - RX FIFO full interrupt flag bit"] pub type RxfullIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXEPT_INTF` reader - Transmitter empty interrupt flag bit"] pub type TxeptIntfR = crate :: BitReader ;
#[doc = "Field `TXEPT_INTF` writer - Transmitter empty interrupt flag bit"] pub type TxeptIntfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Transmit FIFO avialable interrupt flag bit"]
#[inline (always)] pub fn tx_intf (& self) -> TxIntfR { TxIntfR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive data available interrupt flag bit"]
#[inline (always)] pub fn rx_intf (& self) -> RxIntfR { RxIntfR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - SPI underrun interrupt flag bit"]
#[inline (always)] pub fn underrun_intf (& self) -> UnderrunIntfR { UnderrunIntfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Receive overrun error interrupt flag bit"]
#[inline (always)] pub fn rxoerr_intf (& self) -> RxoerrIntfR { RxoerrIntfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Receive data match the RXDNR number"]
#[inline (always)] pub fn rxmatch_intf (& self) -> RxmatchIntfR { RxmatchIntfR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - RX FIFO full interrupt flag bit"]
#[inline (always)] pub fn rxfull_intf (& self) -> RxfullIntfR { RxfullIntfR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Transmitter empty interrupt flag bit"]
#[inline (always)] pub fn txept_intf (& self) -> TxeptIntfR { TxeptIntfR :: new (((self . bits >> 6) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Transmit FIFO avialable interrupt flag bit"]
#[inline (always)] pub fn tx_intf (& mut self) -> TxIntfW < '_ , IntstatSpec > { TxIntfW :: new (self , 0) }
#[doc = "Bit 1 - Receive data available interrupt flag bit"]
#[inline (always)] pub fn rx_intf (& mut self) -> RxIntfW < '_ , IntstatSpec > { RxIntfW :: new (self , 1) }
#[doc = "Bit 2 - SPI underrun interrupt flag bit"]
#[inline (always)] pub fn underrun_intf (& mut self) -> UnderrunIntfW < '_ , IntstatSpec > { UnderrunIntfW :: new (self , 2) }
#[doc = "Bit 3 - Receive overrun error interrupt flag bit"]
#[inline (always)] pub fn rxoerr_intf (& mut self) -> RxoerrIntfW < '_ , IntstatSpec > { RxoerrIntfW :: new (self , 3) }
#[doc = "Bit 4 - Receive data match the RXDNR number"]
#[inline (always)] pub fn rxmatch_intf (& mut self) -> RxmatchIntfW < '_ , IntstatSpec > { RxmatchIntfW :: new (self , 4) }
#[doc = "Bit 5 - RX FIFO full interrupt flag bit"]
#[inline (always)] pub fn rxfull_intf (& mut self) -> RxfullIntfW < '_ , IntstatSpec > { RxfullIntfW :: new (self , 5) }
#[doc = "Bit 6 - Transmitter empty interrupt flag bit"]
#[inline (always)] pub fn txept_intf (& mut self) -> TxeptIntfW < '_ , IntstatSpec > { TxeptIntfW :: new (self , 6) } }
#[doc = "INTSTAT\n\nYou can [`read`](crate::Reg::read) this register and get [`intstat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intstat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IntstatSpec ; impl crate :: RegisterSpec for IntstatSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`intstat::R`](R) reader structure"] impl crate :: Readable for IntstatSpec { }
#[doc = "`write(|w| ..)` method takes [`intstat::W`](W) writer structure"] impl crate :: Writable for IntstatSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets INTSTAT to value 0"] impl crate :: Resettable for IntstatSpec { } }
#[doc = "INTEN (rw) register accessor: INTEN\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inten`] module"]
#[doc (alias = "INTEN")] pub type Inten = crate :: Reg < inten :: IntenSpec > ;
#[doc = "INTEN"] pub mod inten {
#[doc = "Register `INTEN` reader"] pub type R = crate :: R < IntenSpec > ;
#[doc = "Register `INTEN` writer"] pub type W = crate :: W < IntenSpec > ;
#[doc = "Field `TX_IEN` reader - Transmit FIFO empty interrupt enable bit"] pub type TxIenR = crate :: BitReader ;
#[doc = "Field `TX_IEN` writer - Transmit FIFO empty interrupt enable bit"] pub type TxIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RX_IEN` reader - Receive FIFO interrupt enable bit"] pub type RxIenR = crate :: BitReader ;
#[doc = "Field `RX_IEN` writer - Receive FIFO interrupt enable bit"] pub type RxIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UNDERRUN_IEN` reader - Transmitter underrun interrupt enable bit(SPI slave mode only)"] pub type UnderrunIenR = crate :: BitReader ;
#[doc = "Field `UNDERRUN_IEN` writer - Transmitter underrun interrupt enable bit(SPI slave mode only)"] pub type UnderrunIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXOERR_IEN` reader - Overrun error interrupt enable bit"] pub type RxoerrIenR = crate :: BitReader ;
#[doc = "Field `RXOERR_IEN` writer - Overrun error interrupt enable bit"] pub type RxoerrIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXMATCH_IEN` reader - Receive data complete interrupt enable bit"] pub type RxmatchIenR = crate :: BitReader ;
#[doc = "Field `RXMATCH_IEN` writer - Receive data complete interrupt enable bit"] pub type RxmatchIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXFULL_IEN` reader - Receive FIFO full interrupt enable bit"] pub type RxfullIenR = crate :: BitReader ;
#[doc = "Field `RXFULL_IEN` writer - Receive FIFO full interrupt enable bit"] pub type RxfullIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXEPT_IEN` reader - Transmit empty interrupt enable bit"] pub type TxeptIenR = crate :: BitReader ;
#[doc = "Field `TXEPT_IEN` writer - Transmit empty interrupt enable bit"] pub type TxeptIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Transmit FIFO empty interrupt enable bit"]
#[inline (always)] pub fn tx_ien (& self) -> TxIenR { TxIenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive FIFO interrupt enable bit"]
#[inline (always)] pub fn rx_ien (& self) -> RxIenR { RxIenR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmitter underrun interrupt enable bit(SPI slave mode only)"]
#[inline (always)] pub fn underrun_ien (& self) -> UnderrunIenR { UnderrunIenR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Overrun error interrupt enable bit"]
#[inline (always)] pub fn rxoerr_ien (& self) -> RxoerrIenR { RxoerrIenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Receive data complete interrupt enable bit"]
#[inline (always)] pub fn rxmatch_ien (& self) -> RxmatchIenR { RxmatchIenR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Receive FIFO full interrupt enable bit"]
#[inline (always)] pub fn rxfull_ien (& self) -> RxfullIenR { RxfullIenR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Transmit empty interrupt enable bit"]
#[inline (always)] pub fn txept_ien (& self) -> TxeptIenR { TxeptIenR :: new (((self . bits >> 6) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Transmit FIFO empty interrupt enable bit"]
#[inline (always)] pub fn tx_ien (& mut self) -> TxIenW < '_ , IntenSpec > { TxIenW :: new (self , 0) }
#[doc = "Bit 1 - Receive FIFO interrupt enable bit"]
#[inline (always)] pub fn rx_ien (& mut self) -> RxIenW < '_ , IntenSpec > { RxIenW :: new (self , 1) }
#[doc = "Bit 2 - Transmitter underrun interrupt enable bit(SPI slave mode only)"]
#[inline (always)] pub fn underrun_ien (& mut self) -> UnderrunIenW < '_ , IntenSpec > { UnderrunIenW :: new (self , 2) }
#[doc = "Bit 3 - Overrun error interrupt enable bit"]
#[inline (always)] pub fn rxoerr_ien (& mut self) -> RxoerrIenW < '_ , IntenSpec > { RxoerrIenW :: new (self , 3) }
#[doc = "Bit 4 - Receive data complete interrupt enable bit"]
#[inline (always)] pub fn rxmatch_ien (& mut self) -> RxmatchIenW < '_ , IntenSpec > { RxmatchIenW :: new (self , 4) }
#[doc = "Bit 5 - Receive FIFO full interrupt enable bit"]
#[inline (always)] pub fn rxfull_ien (& mut self) -> RxfullIenW < '_ , IntenSpec > { RxfullIenW :: new (self , 5) }
#[doc = "Bit 6 - Transmit empty interrupt enable bit"]
#[inline (always)] pub fn txept_ien (& mut self) -> TxeptIenW < '_ , IntenSpec > { TxeptIenW :: new (self , 6) } }
#[doc = "INTEN\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IntenSpec ; impl crate :: RegisterSpec for IntenSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`inten::R`](R) reader structure"] impl crate :: Readable for IntenSpec { }
#[doc = "`write(|w| ..)` method takes [`inten::W`](W) writer structure"] impl crate :: Writable for IntenSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets INTEN to value 0"] impl crate :: Resettable for IntenSpec { } }
#[doc = "INTCLR (rw) register accessor: INTCLR\n\nYou can [`read`](crate::Reg::read) this register and get [`intclr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intclr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intclr`] module"]
#[doc (alias = "INTCLR")] pub type Intclr = crate :: Reg < intclr :: IntclrSpec > ;
#[doc = "INTCLR"] pub mod intclr {
#[doc = "Register `INTCLR` reader"] pub type R = crate :: R < IntclrSpec > ;
#[doc = "Register `INTCLR` writer"] pub type W = crate :: W < IntclrSpec > ;
#[doc = "Field `TX_ICLR` reader - Transmitter FIFO empty interrupt clear bit"] pub type TxIclrR = crate :: BitReader ;
#[doc = "Field `TX_ICLR` writer - Transmitter FIFO empty interrupt clear bit"] pub type TxIclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RX_ICLR` reader - Receive interrupt clear bit"] pub type RxIclrR = crate :: BitReader ;
#[doc = "Field `RX_ICLR` writer - Receive interrupt clear bit"] pub type RxIclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UNDERRUN_ICLR` reader - Transmitter underrun interrupt clear bit(SPI slave mode only)"] pub type UnderrunIclrR = crate :: BitReader ;
#[doc = "Field `UNDERRUN_ICLR` writer - Transmitter underrun interrupt clear bit(SPI slave mode only)"] pub type UnderrunIclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXOERR_ICLR` reader - Overrun error interrupt clear bit"] pub type RxoerrIclrR = crate :: BitReader ;
#[doc = "Field `RXOERR_ICLR` writer - Overrun error interrupt clear bit"] pub type RxoerrIclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXMATCH_ICLR` reader - Receive completed interrupt clear bit"] pub type RxmatchIclrR = crate :: BitReader ;
#[doc = "Field `RXMATCH_ICLR` writer - Receive completed interrupt clear bit"] pub type RxmatchIclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXFULL_ICLR` reader - Receiver buffer full interrupt clear bit"] pub type RxfullIclrR = crate :: BitReader ;
#[doc = "Field `RXFULL_ICLR` writer - Receiver buffer full interrupt clear bit"] pub type RxfullIclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXEPT_ICLR` reader - Transmitter empty interrupt clear bit"] pub type TxeptIclrR = crate :: BitReader ;
#[doc = "Field `TXEPT_ICLR` writer - Transmitter empty interrupt clear bit"] pub type TxeptIclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Transmitter FIFO empty interrupt clear bit"]
#[inline (always)] pub fn tx_iclr (& self) -> TxIclrR { TxIclrR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive interrupt clear bit"]
#[inline (always)] pub fn rx_iclr (& self) -> RxIclrR { RxIclrR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmitter underrun interrupt clear bit(SPI slave mode only)"]
#[inline (always)] pub fn underrun_iclr (& self) -> UnderrunIclrR { UnderrunIclrR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Overrun error interrupt clear bit"]
#[inline (always)] pub fn rxoerr_iclr (& self) -> RxoerrIclrR { RxoerrIclrR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Receive completed interrupt clear bit"]
#[inline (always)] pub fn rxmatch_iclr (& self) -> RxmatchIclrR { RxmatchIclrR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Receiver buffer full interrupt clear bit"]
#[inline (always)] pub fn rxfull_iclr (& self) -> RxfullIclrR { RxfullIclrR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Transmitter empty interrupt clear bit"]
#[inline (always)] pub fn txept_iclr (& self) -> TxeptIclrR { TxeptIclrR :: new (((self . bits >> 6) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Transmitter FIFO empty interrupt clear bit"]
#[inline (always)] pub fn tx_iclr (& mut self) -> TxIclrW < '_ , IntclrSpec > { TxIclrW :: new (self , 0) }
#[doc = "Bit 1 - Receive interrupt clear bit"]
#[inline (always)] pub fn rx_iclr (& mut self) -> RxIclrW < '_ , IntclrSpec > { RxIclrW :: new (self , 1) }
#[doc = "Bit 2 - Transmitter underrun interrupt clear bit(SPI slave mode only)"]
#[inline (always)] pub fn underrun_iclr (& mut self) -> UnderrunIclrW < '_ , IntclrSpec > { UnderrunIclrW :: new (self , 2) }
#[doc = "Bit 3 - Overrun error interrupt clear bit"]
#[inline (always)] pub fn rxoerr_iclr (& mut self) -> RxoerrIclrW < '_ , IntclrSpec > { RxoerrIclrW :: new (self , 3) }
#[doc = "Bit 4 - Receive completed interrupt clear bit"]
#[inline (always)] pub fn rxmatch_iclr (& mut self) -> RxmatchIclrW < '_ , IntclrSpec > { RxmatchIclrW :: new (self , 4) }
#[doc = "Bit 5 - Receiver buffer full interrupt clear bit"]
#[inline (always)] pub fn rxfull_iclr (& mut self) -> RxfullIclrW < '_ , IntclrSpec > { RxfullIclrW :: new (self , 5) }
#[doc = "Bit 6 - Transmitter empty interrupt clear bit"]
#[inline (always)] pub fn txept_iclr (& mut self) -> TxeptIclrW < '_ , IntclrSpec > { TxeptIclrW :: new (self , 6) } }
#[doc = "INTCLR\n\nYou can [`read`](crate::Reg::read) this register and get [`intclr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intclr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IntclrSpec ; impl crate :: RegisterSpec for IntclrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`intclr::R`](R) reader structure"] impl crate :: Readable for IntclrSpec { }
#[doc = "`write(|w| ..)` method takes [`intclr::W`](W) writer structure"] impl crate :: Writable for IntclrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets INTCLR to value 0"] impl crate :: Resettable for IntclrSpec { } }
#[doc = "GCTL (rw) register accessor: GCTL\n\nYou can [`read`](crate::Reg::read) this register and get [`gctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@gctl`] module"]
#[doc (alias = "GCTL")] pub type Gctl = crate :: Reg < gctl :: GctlSpec > ;
#[doc = "GCTL"] pub mod gctl {
#[doc = "Register `GCTL` reader"] pub type R = crate :: R < GctlSpec > ;
#[doc = "Register `GCTL` writer"] pub type W = crate :: W < GctlSpec > ;
#[doc = "Field `SPIEN` reader - SPI select bit"] pub type SpienR = crate :: BitReader ;
#[doc = "Field `SPIEN` writer - SPI select bit"] pub type SpienW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `INT_EN` reader - SPI interrupt enable bit"] pub type IntEnR = crate :: BitReader ;
#[doc = "Field `INT_EN` writer - SPI interrupt enable bit"] pub type IntEnW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MODE` reader - Master mode bit"] pub type ModeR = crate :: BitReader ;
#[doc = "Field `MODE` writer - Master mode bit"] pub type ModeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXEN` reader - Transmit enable bit"] pub type TxenR = crate :: BitReader ;
#[doc = "Field `TXEN` writer - Transmit enable bit"] pub type TxenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXEN` reader - Receive enable bit"] pub type RxenR = crate :: BitReader ;
#[doc = "Field `RXEN` writer - Receive enable bit"] pub type RxenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXTLF` reader - RX FIFO trigger level bit"] pub type RxtlfR = crate :: FieldReader ;
#[doc = "Field `RXTLF` writer - RX FIFO trigger level bit"] pub type RxtlfW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `TXTLF` reader - TX FIFO trigger level bit"] pub type TxtlfR = crate :: FieldReader ;
#[doc = "Field `TXTLF` writer - TX FIFO trigger level bit"] pub type TxtlfW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `DMAEN` reader - DMA access mode enable"] pub type DmaenR = crate :: BitReader ;
#[doc = "Field `DMAEN` writer - DMA access mode enable"] pub type DmaenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `NSS_SEL` reader - NSS select signal that from software and hardware"] pub type NssSelR = crate :: BitReader ;
#[doc = "Field `NSS_SEL` writer - NSS select signal that from software and hardware"] pub type NssSelW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DW8_32` reader - Valid byte or double-word data select signal"] pub type Dw8_32R = crate :: BitReader ;
#[doc = "Field `DW8_32` writer - Valid byte or double-word data select signal"] pub type Dw8_32W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `NSSTOG` reader - NSS selection signal is automatically flipped"] pub type NsstogR = crate :: BitReader ;
#[doc = "Field `NSSTOG` writer - NSS selection signal is automatically flipped"] pub type NsstogW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - SPI select bit"]
#[inline (always)] pub fn spien (& self) -> SpienR { SpienR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - SPI interrupt enable bit"]
#[inline (always)] pub fn int_en (& self) -> IntEnR { IntEnR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Master mode bit"]
#[inline (always)] pub fn mode (& self) -> ModeR { ModeR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Transmit enable bit"]
#[inline (always)] pub fn txen (& self) -> TxenR { TxenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Receive enable bit"]
#[inline (always)] pub fn rxen (& self) -> RxenR { RxenR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bits 5:6 - RX FIFO trigger level bit"]
#[inline (always)] pub fn rxtlf (& self) -> RxtlfR { RxtlfR :: new (((self . bits >> 5) & 3) as u8) }
#[doc = "Bits 7:8 - TX FIFO trigger level bit"]
#[inline (always)] pub fn txtlf (& self) -> TxtlfR { TxtlfR :: new (((self . bits >> 7) & 3) as u8) }
#[doc = "Bit 9 - DMA access mode enable"]
#[inline (always)] pub fn dmaen (& self) -> DmaenR { DmaenR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - NSS select signal that from software and hardware"]
#[inline (always)] pub fn nss_sel (& self) -> NssSelR { NssSelR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Valid byte or double-word data select signal"]
#[inline (always)] pub fn dw8_32 (& self) -> Dw8_32R { Dw8_32R :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - NSS selection signal is automatically flipped"]
#[inline (always)] pub fn nsstog (& self) -> NsstogR { NsstogR :: new (((self . bits >> 12) & 1) != 0) } } impl W {
#[doc = "Bit 0 - SPI select bit"]
#[inline (always)] pub fn spien (& mut self) -> SpienW < '_ , GctlSpec > { SpienW :: new (self , 0) }
#[doc = "Bit 1 - SPI interrupt enable bit"]
#[inline (always)] pub fn int_en (& mut self) -> IntEnW < '_ , GctlSpec > { IntEnW :: new (self , 1) }
#[doc = "Bit 2 - Master mode bit"]
#[inline (always)] pub fn mode (& mut self) -> ModeW < '_ , GctlSpec > { ModeW :: new (self , 2) }
#[doc = "Bit 3 - Transmit enable bit"]
#[inline (always)] pub fn txen (& mut self) -> TxenW < '_ , GctlSpec > { TxenW :: new (self , 3) }
#[doc = "Bit 4 - Receive enable bit"]
#[inline (always)] pub fn rxen (& mut self) -> RxenW < '_ , GctlSpec > { RxenW :: new (self , 4) }
#[doc = "Bits 5:6 - RX FIFO trigger level bit"]
#[inline (always)] pub fn rxtlf (& mut self) -> RxtlfW < '_ , GctlSpec > { RxtlfW :: new (self , 5) }
#[doc = "Bits 7:8 - TX FIFO trigger level bit"]
#[inline (always)] pub fn txtlf (& mut self) -> TxtlfW < '_ , GctlSpec > { TxtlfW :: new (self , 7) }
#[doc = "Bit 9 - DMA access mode enable"]
#[inline (always)] pub fn dmaen (& mut self) -> DmaenW < '_ , GctlSpec > { DmaenW :: new (self , 9) }
#[doc = "Bit 10 - NSS select signal that from software and hardware"]
#[inline (always)] pub fn nss_sel (& mut self) -> NssSelW < '_ , GctlSpec > { NssSelW :: new (self , 10) }
#[doc = "Bit 11 - Valid byte or double-word data select signal"]
#[inline (always)] pub fn dw8_32 (& mut self) -> Dw8_32W < '_ , GctlSpec > { Dw8_32W :: new (self , 11) }
#[doc = "Bit 12 - NSS selection signal is automatically flipped"]
#[inline (always)] pub fn nsstog (& mut self) -> NsstogW < '_ , GctlSpec > { NsstogW :: new (self , 12) } }
#[doc = "GCTL\n\nYou can [`read`](crate::Reg::read) this register and get [`gctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct GctlSpec ; impl crate :: RegisterSpec for GctlSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`gctl::R`](R) reader structure"] impl crate :: Readable for GctlSpec { }
#[doc = "`write(|w| ..)` method takes [`gctl::W`](W) writer structure"] impl crate :: Writable for GctlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GCTL to value 0x04"] impl crate :: Resettable for GctlSpec { const RESET_VALUE : u32 = 0x04 ; } }
#[doc = "CCTL (rw) register accessor: CCTL\n\nYou can [`read`](crate::Reg::read) this register and get [`cctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cctl`] module"]
#[doc (alias = "CCTL")] pub type Cctl = crate :: Reg < cctl :: CctlSpec > ;
#[doc = "CCTL"] pub mod cctl {
#[doc = "Register `CCTL` reader"] pub type R = crate :: R < CctlSpec > ;
#[doc = "Register `CCTL` writer"] pub type W = crate :: W < CctlSpec > ;
#[doc = "Field `CPHA` reader - Clock phase select bit"] pub type CphaR = crate :: BitReader ;
#[doc = "Field `CPHA` writer - Clock phase select bit"] pub type CphaW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CPOL` reader - Clock polarity select bit"] pub type CpolR = crate :: BitReader ;
#[doc = "Field `CPOL` writer - Clock polarity select bit"] pub type CpolW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LSBFE` reader - LSI first enable bit"] pub type LsbfeR = crate :: BitReader ;
#[doc = "Field `LSBFE` writer - LSI first enable bit"] pub type LsbfeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SPILEN` reader - SPI character length bit"] pub type SpilenR = crate :: BitReader ;
#[doc = "Field `SPILEN` writer - SPI character length bit"] pub type SpilenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXEDGE` reader - Receive data edge select"] pub type RxedgeR = crate :: BitReader ;
#[doc = "Field `RXEDGE` writer - Receive data edge select"] pub type RxedgeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXEDGE` reader - Transmit data edge select"] pub type TxedgeR = crate :: BitReader ;
#[doc = "Field `TXEDGE` writer - Transmit data edge select"] pub type TxedgeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CPHASEL` reader - CPHA polarity select"] pub type CphaselR = crate :: BitReader ;
#[doc = "Field `CPHASEL` writer - CPHA polarity select"] pub type CphaselW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HISPD` reader - High speed slave mode"] pub type HispdR = crate :: BitReader ;
#[doc = "Field `HISPD` writer - High speed slave mode"] pub type HispdW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Clock phase select bit"]
#[inline (always)] pub fn cpha (& self) -> CphaR { CphaR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Clock polarity select bit"]
#[inline (always)] pub fn cpol (& self) -> CpolR { CpolR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - LSI first enable bit"]
#[inline (always)] pub fn lsbfe (& self) -> LsbfeR { LsbfeR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - SPI character length bit"]
#[inline (always)] pub fn spilen (& self) -> SpilenR { SpilenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Receive data edge select"]
#[inline (always)] pub fn rxedge (& self) -> RxedgeR { RxedgeR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Transmit data edge select"]
#[inline (always)] pub fn txedge (& self) -> TxedgeR { TxedgeR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - CPHA polarity select"]
#[inline (always)] pub fn cphasel (& self) -> CphaselR { CphaselR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - High speed slave mode"]
#[inline (always)] pub fn hispd (& self) -> HispdR { HispdR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Clock phase select bit"]
#[inline (always)] pub fn cpha (& mut self) -> CphaW < '_ , CctlSpec > { CphaW :: new (self , 0) }
#[doc = "Bit 1 - Clock polarity select bit"]
#[inline (always)] pub fn cpol (& mut self) -> CpolW < '_ , CctlSpec > { CpolW :: new (self , 1) }
#[doc = "Bit 2 - LSI first enable bit"]
#[inline (always)] pub fn lsbfe (& mut self) -> LsbfeW < '_ , CctlSpec > { LsbfeW :: new (self , 2) }
#[doc = "Bit 3 - SPI character length bit"]
#[inline (always)] pub fn spilen (& mut self) -> SpilenW < '_ , CctlSpec > { SpilenW :: new (self , 3) }
#[doc = "Bit 4 - Receive data edge select"]
#[inline (always)] pub fn rxedge (& mut self) -> RxedgeW < '_ , CctlSpec > { RxedgeW :: new (self , 4) }
#[doc = "Bit 5 - Transmit data edge select"]
#[inline (always)] pub fn txedge (& mut self) -> TxedgeW < '_ , CctlSpec > { TxedgeW :: new (self , 5) }
#[doc = "Bit 6 - CPHA polarity select"]
#[inline (always)] pub fn cphasel (& mut self) -> CphaselW < '_ , CctlSpec > { CphaselW :: new (self , 6) }
#[doc = "Bit 7 - High speed slave mode"]
#[inline (always)] pub fn hispd (& mut self) -> HispdW < '_ , CctlSpec > { HispdW :: new (self , 7) } }
#[doc = "CCTL\n\nYou can [`read`](crate::Reg::read) this register and get [`cctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CctlSpec ; impl crate :: RegisterSpec for CctlSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cctl::R`](R) reader structure"] impl crate :: Readable for CctlSpec { }
#[doc = "`write(|w| ..)` method takes [`cctl::W`](W) writer structure"] impl crate :: Writable for CctlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCTL to value 0x08"] impl crate :: Resettable for CctlSpec { const RESET_VALUE : u32 = 0x08 ; } }
#[doc = "SPBRG (rw) register accessor: SPBRG\n\nYou can [`read`](crate::Reg::read) this register and get [`spbrg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`spbrg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@spbrg`] module"]
#[doc (alias = "SPBRG")] pub type Spbrg = crate :: Reg < spbrg :: SpbrgSpec > ;
#[doc = "SPBRG"] pub mod spbrg {
#[doc = "Register `SPBRG` reader"] pub type R = crate :: R < SpbrgSpec > ;
#[doc = "Register `SPBRG` writer"] pub type W = crate :: W < SpbrgSpec > ;
#[doc = "Field `SPBRG` reader - SPI baud rate control register for baud rate"] pub type SpbrgR = crate :: FieldReader < u16 > ;
#[doc = "Field `SPBRG` writer - SPI baud rate control register for baud rate"] pub type SpbrgW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - SPI baud rate control register for baud rate"]
#[inline (always)] pub fn spbrg (& self) -> SpbrgR { SpbrgR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - SPI baud rate control register for baud rate"]
#[inline (always)] pub fn spbrg (& mut self) -> SpbrgW < '_ , SpbrgSpec > { SpbrgW :: new (self , 0) } }
#[doc = "SPBRG\n\nYou can [`read`](crate::Reg::read) this register and get [`spbrg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`spbrg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SpbrgSpec ; impl crate :: RegisterSpec for SpbrgSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`spbrg::R`](R) reader structure"] impl crate :: Readable for SpbrgSpec { }
#[doc = "`write(|w| ..)` method takes [`spbrg::W`](W) writer structure"] impl crate :: Writable for SpbrgSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SPBRG to value 0x02"] impl crate :: Resettable for SpbrgSpec { const RESET_VALUE : u32 = 0x02 ; } }
#[doc = "RXDNR (rw) register accessor: RXDNR\n\nYou can [`read`](crate::Reg::read) this register and get [`rxdnr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxdnr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxdnr`] module"]
#[doc (alias = "RXDNR")] pub type Rxdnr = crate :: Reg < rxdnr :: RxdnrSpec > ;
#[doc = "RXDNR"] pub mod rxdnr {
#[doc = "Register `RXDNR` reader"] pub type R = crate :: R < RxdnrSpec > ;
#[doc = "Register `RXDNR` writer"] pub type W = crate :: W < RxdnrSpec > ;
#[doc = "Field `RXDNR` reader - The register is used to hold a count of to be received bytes in next receive process"] pub type RxdnrR = crate :: FieldReader < u16 > ;
#[doc = "Field `RXDNR` writer - The register is used to hold a count of to be received bytes in next receive process"] pub type RxdnrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - The register is used to hold a count of to be received bytes in next receive process"]
#[inline (always)] pub fn rxdnr (& self) -> RxdnrR { RxdnrR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - The register is used to hold a count of to be received bytes in next receive process"]
#[inline (always)] pub fn rxdnr (& mut self) -> RxdnrW < '_ , RxdnrSpec > { RxdnrW :: new (self , 0) } }
#[doc = "RXDNR\n\nYou can [`read`](crate::Reg::read) this register and get [`rxdnr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxdnr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxdnrSpec ; impl crate :: RegisterSpec for RxdnrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rxdnr::R`](R) reader structure"] impl crate :: Readable for RxdnrSpec { }
#[doc = "`write(|w| ..)` method takes [`rxdnr::W`](W) writer structure"] impl crate :: Writable for RxdnrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RXDNR to value 0x01"] impl crate :: Resettable for RxdnrSpec { const RESET_VALUE : u32 = 0x01 ; } }
#[doc = "NSSR (rw) register accessor: NSSR\n\nYou can [`read`](crate::Reg::read) this register and get [`nssr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`nssr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@nssr`] module"]
#[doc (alias = "NSSR")] pub type Nssr = crate :: Reg < nssr :: NssrSpec > ;
#[doc = "NSSR"] pub mod nssr {
#[doc = "Register `NSSR` reader"] pub type R = crate :: R < NssrSpec > ;
#[doc = "Register `NSSR` writer"] pub type W = crate :: W < NssrSpec > ;
#[doc = "Field `NSS` reader - Chip select output signal in Master mode"] pub type NssR = crate :: BitReader ;
#[doc = "Field `NSS` writer - Chip select output signal in Master mode"] pub type NssW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Chip select output signal in Master mode"]
#[inline (always)] pub fn nss (& self) -> NssR { NssR :: new ((self . bits & 1) != 0) } } impl W {
#[doc = "Bit 0 - Chip select output signal in Master mode"]
#[inline (always)] pub fn nss (& mut self) -> NssW < '_ , NssrSpec > { NssW :: new (self , 0) } }
#[doc = "NSSR\n\nYou can [`read`](crate::Reg::read) this register and get [`nssr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`nssr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct NssrSpec ; impl crate :: RegisterSpec for NssrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`nssr::R`](R) reader structure"] impl crate :: Readable for NssrSpec { }
#[doc = "`write(|w| ..)` method takes [`nssr::W`](W) writer structure"] impl crate :: Writable for NssrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets NSSR to value 0xff"] impl crate :: Resettable for NssrSpec { const RESET_VALUE : u32 = 0xff ; } }
#[doc = "EXTCTL (rw) register accessor: EXTCTL\n\nYou can [`read`](crate::Reg::read) this register and get [`extctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@extctl`] module"]
#[doc (alias = "EXTCTL")] pub type Extctl = crate :: Reg < extctl :: ExtctlSpec > ;
#[doc = "EXTCTL"] pub mod extctl {
#[doc = "Register `EXTCTL` reader"] pub type R = crate :: R < ExtctlSpec > ;
#[doc = "Register `EXTCTL` writer"] pub type W = crate :: W < ExtctlSpec > ;
#[doc = "Field `EXTLEN` reader - Control SPI data length"] pub type ExtlenR = crate :: FieldReader ;
#[doc = "Field `EXTLEN` writer - Control SPI data length"] pub type ExtlenW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ; impl R {
#[doc = "Bits 0:4 - Control SPI data length"]
#[inline (always)] pub fn extlen (& self) -> ExtlenR { ExtlenR :: new ((self . bits & 0x1f) as u8) } } impl W {
#[doc = "Bits 0:4 - Control SPI data length"]
#[inline (always)] pub fn extlen (& mut self) -> ExtlenW < '_ , ExtctlSpec > { ExtlenW :: new (self , 0) } }
#[doc = "EXTCTL\n\nYou can [`read`](crate::Reg::read) this register and get [`extctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ExtctlSpec ; impl crate :: RegisterSpec for ExtctlSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`extctl::R`](R) reader structure"] impl crate :: Readable for ExtctlSpec { }
#[doc = "`write(|w| ..)` method takes [`extctl::W`](W) writer structure"] impl crate :: Writable for ExtctlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EXTCTL to value 0x08"] impl crate :: Resettable for ExtctlSpec { const RESET_VALUE : u32 = 0x08 ; } } }
#[doc = "Serial peripheral interface"] pub type Spi2 = crate :: Periph < spi1 :: RegisterBlock , 0x4000_3800 > ; impl core :: fmt :: Debug for Spi2 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Spi2") . finish () } }
#[doc = "Serial peripheral interface"] pub use self :: spi1 as spi2 ;
#[doc = "Advanced timer"] pub type Tim1 = crate :: Periph < tim1 :: RegisterBlock , 0x4001_2c00 > ; impl core :: fmt :: Debug for Tim1 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Tim1") . finish () } }
#[doc = "Advanced timer"] pub mod tim1 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cr1 : Cr1 , cr2 : Cr2 , smcr : Smcr , dier : Dier , sr : Sr , egr : Egr , _reserved_6_ccmr1 : [u8 ; 0x04] , _reserved_7_ccmr2 : [u8 ; 0x04] , ccer : Ccer , cnt : Cnt , psc : Psc , arr : Arr , rcr : Rcr , ccr1 : Ccr1 , ccr2 : Ccr2 , ccr3 : Ccr3 , ccr4 : Ccr4 , bdtr : Bdtr , dcr : Dcr , dmar : Dmar , _reserved20 : [u8 ; 0x04] , ccmr3_output : Ccmr3Output , ccr5 : Ccr5 , pder : Pder , ccr1fall : Ccr1fall , ccr2fall : Ccr2fall , ccr3fall : Ccr3fall , ccr4fall : Ccr4fall , ccr5fall : Ccr5fall , } impl RegisterBlock {
#[doc = "0x00 - control register 1"]
#[inline (always)] pub const fn cr1 (& self) -> & Cr1 { & self . cr1 }
#[doc = "0x04 - control register 2"]
#[inline (always)] pub const fn cr2 (& self) -> & Cr2 { & self . cr2 }
#[doc = "0x08 - slave mode control register 1"]
#[inline (always)] pub const fn smcr (& self) -> & Smcr { & self . smcr }
#[doc = "0x0c - DMA/Interrupt enable register"]
#[inline (always)] pub const fn dier (& self) -> & Dier { & self . dier }
#[doc = "0x10 - status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x14 - event generation register"]
#[inline (always)] pub const fn egr (& self) -> & Egr { & self . egr }
#[doc = "0x18 - capture/compare mode register 1 (input mode)"]
#[inline (always)] pub const fn ccmr1_input (& self) -> & Ccmr1Input { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x18 - capture/compare mode register 1 (output mode)"]
#[inline (always)] pub const fn ccmr1_output (& self) -> & Ccmr1Output { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x1c - capture/compare mode register 2 (input mode)"]
#[inline (always)] pub const fn ccmr2_input (& self) -> & Ccmr2Input { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (28) . cast () } }
#[doc = "0x1c - capture/compare mode register 2(output mode)"]
#[inline (always)] pub const fn ccmr2_output (& self) -> & Ccmr2Output { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (28) . cast () } }
#[doc = "0x20 - capture/compare enable register"]
#[inline (always)] pub const fn ccer (& self) -> & Ccer { & self . ccer }
#[doc = "0x24 - counter"]
#[inline (always)] pub const fn cnt (& self) -> & Cnt { & self . cnt }
#[doc = "0x28 - prescaler"]
#[inline (always)] pub const fn psc (& self) -> & Psc { & self . psc }
#[doc = "0x2c - auto-reload register"]
#[inline (always)] pub const fn arr (& self) -> & Arr { & self . arr }
#[doc = "0x30 - repetition counter register"]
#[inline (always)] pub const fn rcr (& self) -> & Rcr { & self . rcr }
#[doc = "0x34 - capture/compare register 1"]
#[inline (always)] pub const fn ccr1 (& self) -> & Ccr1 { & self . ccr1 }
#[doc = "0x38 - capture/compare register 2"]
#[inline (always)] pub const fn ccr2 (& self) -> & Ccr2 { & self . ccr2 }
#[doc = "0x3c - capture/compare register 3"]
#[inline (always)] pub const fn ccr3 (& self) -> & Ccr3 { & self . ccr3 }
#[doc = "0x40 - capture/compare register 4"]
#[inline (always)] pub const fn ccr4 (& self) -> & Ccr4 { & self . ccr4 }
#[doc = "0x44 - break and dead-time register"]
#[inline (always)] pub const fn bdtr (& self) -> & Bdtr { & self . bdtr }
#[doc = "0x48 - DMA control register"]
#[inline (always)] pub const fn dcr (& self) -> & Dcr { & self . dcr }
#[doc = "0x4c - DMA address for full transfer"]
#[inline (always)] pub const fn dmar (& self) -> & Dmar { & self . dmar }
#[doc = "0x54 - capture/compare mode register 3 (output mode)"]
#[inline (always)] pub const fn ccmr3_output (& self) -> & Ccmr3Output { & self . ccmr3_output }
#[doc = "0x58 - capture/compare register 5"]
#[inline (always)] pub const fn ccr5 (& self) -> & Ccr5 { & self . ccr5 }
#[doc = "0x5c - PWM/DMA repeat enable register"]
#[inline (always)] pub const fn pder (& self) -> & Pder { & self . pder }
#[doc = "0x60 - pwm shift count CCR1 register"]
#[inline (always)] pub const fn ccr1fall (& self) -> & Ccr1fall { & self . ccr1fall }
#[doc = "0x64 - pwm shift count CCR2 register"]
#[inline (always)] pub const fn ccr2fall (& self) -> & Ccr2fall { & self . ccr2fall }
#[doc = "0x68 - pwm shift count CCR3 register"]
#[inline (always)] pub const fn ccr3fall (& self) -> & Ccr3fall { & self . ccr3fall }
#[doc = "0x6c - pwm shift count CCR4 register"]
#[inline (always)] pub const fn ccr4fall (& self) -> & Ccr4fall { & self . ccr4fall }
#[doc = "0x70 - pwm shift count CCR5 register"]
#[inline (always)] pub const fn ccr5fall (& self) -> & Ccr5fall { & self . ccr5fall } }
#[doc = "CR1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr1`] module"]
#[doc (alias = "CR1")] pub type Cr1 = crate :: Reg < cr1 :: Cr1Spec > ;
#[doc = "control register 1"] pub mod cr1 {
#[doc = "Register `CR1` reader"] pub type R = crate :: R < Cr1Spec > ;
#[doc = "Register `CR1` writer"] pub type W = crate :: W < Cr1Spec > ;
#[doc = "Field `CEN` reader - Counter enable"] pub type CenR = crate :: BitReader ;
#[doc = "Field `CEN` writer - Counter enable"] pub type CenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UDIS` reader - Update disable"] pub type UdisR = crate :: BitReader ;
#[doc = "Field `UDIS` writer - Update disable"] pub type UdisW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `URS` reader - Update request source"] pub type UrsR = crate :: BitReader ;
#[doc = "Field `URS` writer - Update request source"] pub type UrsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OPM` reader - One pulse mode"] pub type OpmR = crate :: BitReader ;
#[doc = "Field `OPM` writer - One pulse mode"] pub type OpmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DIR` reader - Direction"] pub type DirR = crate :: BitReader ;
#[doc = "Field `DIR` writer - Direction"] pub type DirW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CMS` reader - Center-aligned mode selection"] pub type CmsR = crate :: FieldReader ;
#[doc = "Field `CMS` writer - Center-aligned mode selection"] pub type CmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `ARPE` reader - Auto-reload preload enable"] pub type ArpeR = crate :: BitReader ;
#[doc = "Field `ARPE` writer - Auto-reload preload enable"] pub type ArpeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CKD` reader - Clock division"] pub type CkdR = crate :: FieldReader ;
#[doc = "Field `CKD` writer - Clock division"] pub type CkdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& self) -> CenR { CenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& self) -> UdisR { UdisR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& self) -> UrsR { UrsR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - One pulse mode"]
#[inline (always)] pub fn opm (& self) -> OpmR { OpmR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Direction"]
#[inline (always)] pub fn dir (& self) -> DirR { DirR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bits 5:6 - Center-aligned mode selection"]
#[inline (always)] pub fn cms (& self) -> CmsR { CmsR :: new (((self . bits >> 5) & 3) as u8) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& self) -> ArpeR { ArpeR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& self) -> CkdR { CkdR :: new (((self . bits >> 8) & 3) as u8) } } impl W {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& mut self) -> CenW < '_ , Cr1Spec > { CenW :: new (self , 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& mut self) -> UdisW < '_ , Cr1Spec > { UdisW :: new (self , 1) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& mut self) -> UrsW < '_ , Cr1Spec > { UrsW :: new (self , 2) }
#[doc = "Bit 3 - One pulse mode"]
#[inline (always)] pub fn opm (& mut self) -> OpmW < '_ , Cr1Spec > { OpmW :: new (self , 3) }
#[doc = "Bit 4 - Direction"]
#[inline (always)] pub fn dir (& mut self) -> DirW < '_ , Cr1Spec > { DirW :: new (self , 4) }
#[doc = "Bits 5:6 - Center-aligned mode selection"]
#[inline (always)] pub fn cms (& mut self) -> CmsW < '_ , Cr1Spec > { CmsW :: new (self , 5) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& mut self) -> ArpeW < '_ , Cr1Spec > { ArpeW :: new (self , 7) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& mut self) -> CkdW < '_ , Cr1Spec > { CkdW :: new (self , 8) } }
#[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr1Spec ; impl crate :: RegisterSpec for Cr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr1::R`](R) reader structure"] impl crate :: Readable for Cr1Spec { }
#[doc = "`write(|w| ..)` method takes [`cr1::W`](W) writer structure"] impl crate :: Writable for Cr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR1 to value 0"] impl crate :: Resettable for Cr1Spec { } }
#[doc = "CR2 (rw) register accessor: control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr2`] module"]
#[doc (alias = "CR2")] pub type Cr2 = crate :: Reg < cr2 :: Cr2Spec > ;
#[doc = "control register 2"] pub mod cr2 {
#[doc = "Register `CR2` reader"] pub type R = crate :: R < Cr2Spec > ;
#[doc = "Register `CR2` writer"] pub type W = crate :: W < Cr2Spec > ;
#[doc = "Field `CCPC` reader - Capture/compare preloaded control"] pub type CcpcR = crate :: BitReader ;
#[doc = "Field `CCPC` writer - Capture/compare preloaded control"] pub type CcpcW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCUS` reader - Capture/compare control update selection"] pub type CcusR = crate :: BitReader ;
#[doc = "Field `CCUS` writer - Capture/compare control update selection"] pub type CcusW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCDS` reader - Capture/compare DMA selection"] pub type CcdsR = crate :: BitReader ;
#[doc = "Field `CCDS` writer - Capture/compare DMA selection"] pub type CcdsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MMS` reader - Master mode selection"] pub type MmsR = crate :: FieldReader ;
#[doc = "Field `MMS` writer - Master mode selection"] pub type MmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `TI1S` reader - TI1 selection"] pub type Ti1sR = crate :: BitReader ;
#[doc = "Field `TI1S` writer - TI1 selection"] pub type Ti1sW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS1` reader - Output Idle state 1"] pub type Ois1R = crate :: BitReader ;
#[doc = "Field `OIS1` writer - Output Idle state 1"] pub type Ois1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS1N` reader - Output Idle state 1"] pub type Ois1nR = crate :: BitReader ;
#[doc = "Field `OIS1N` writer - Output Idle state 1"] pub type Ois1nW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS2` reader - OIS2"] pub type Ois2R = crate :: BitReader ;
#[doc = "Field `OIS2` writer - OIS2"] pub type Ois2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS2N` reader - OIS2N"] pub type Ois2nR = crate :: BitReader ;
#[doc = "Field `OIS2N` writer - OIS2N"] pub type Ois2nW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS3` reader - OIS3"] pub type Ois3R = crate :: BitReader ;
#[doc = "Field `OIS3` writer - OIS3"] pub type Ois3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS3N` reader - OIS3N"] pub type Ois3nR = crate :: BitReader ;
#[doc = "Field `OIS3N` writer - OIS3N"] pub type Ois3nW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS4` reader - OIS4"] pub type Ois4R = crate :: BitReader ;
#[doc = "Field `OIS4` writer - OIS4"] pub type Ois4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS5` reader - OIS5"] pub type Ois5R = crate :: BitReader ;
#[doc = "Field `OIS5` writer - OIS5"] pub type Ois5W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Capture/compare preloaded control"]
#[inline (always)] pub fn ccpc (& self) -> CcpcR { CcpcR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 2 - Capture/compare control update selection"]
#[inline (always)] pub fn ccus (& self) -> CcusR { CcusR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/compare DMA selection"]
#[inline (always)] pub fn ccds (& self) -> CcdsR { CcdsR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Master mode selection"]
#[inline (always)] pub fn mms (& self) -> MmsR { MmsR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - TI1 selection"]
#[inline (always)] pub fn ti1s (& self) -> Ti1sR { Ti1sR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Output Idle state 1"]
#[inline (always)] pub fn ois1 (& self) -> Ois1R { Ois1R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Output Idle state 1"]
#[inline (always)] pub fn ois1n (& self) -> Ois1nR { Ois1nR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - OIS2"]
#[inline (always)] pub fn ois2 (& self) -> Ois2R { Ois2R :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - OIS2N"]
#[inline (always)] pub fn ois2n (& self) -> Ois2nR { Ois2nR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - OIS3"]
#[inline (always)] pub fn ois3 (& self) -> Ois3R { Ois3R :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - OIS3N"]
#[inline (always)] pub fn ois3n (& self) -> Ois3nR { Ois3nR :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - OIS4"]
#[inline (always)] pub fn ois4 (& self) -> Ois4R { Ois4R :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 16 - OIS5"]
#[inline (always)] pub fn ois5 (& self) -> Ois5R { Ois5R :: new (((self . bits >> 16) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Capture/compare preloaded control"]
#[inline (always)] pub fn ccpc (& mut self) -> CcpcW < '_ , Cr2Spec > { CcpcW :: new (self , 0) }
#[doc = "Bit 2 - Capture/compare control update selection"]
#[inline (always)] pub fn ccus (& mut self) -> CcusW < '_ , Cr2Spec > { CcusW :: new (self , 2) }
#[doc = "Bit 3 - Capture/compare DMA selection"]
#[inline (always)] pub fn ccds (& mut self) -> CcdsW < '_ , Cr2Spec > { CcdsW :: new (self , 3) }
#[doc = "Bits 4:6 - Master mode selection"]
#[inline (always)] pub fn mms (& mut self) -> MmsW < '_ , Cr2Spec > { MmsW :: new (self , 4) }
#[doc = "Bit 7 - TI1 selection"]
#[inline (always)] pub fn ti1s (& mut self) -> Ti1sW < '_ , Cr2Spec > { Ti1sW :: new (self , 7) }
#[doc = "Bit 8 - Output Idle state 1"]
#[inline (always)] pub fn ois1 (& mut self) -> Ois1W < '_ , Cr2Spec > { Ois1W :: new (self , 8) }
#[doc = "Bit 9 - Output Idle state 1"]
#[inline (always)] pub fn ois1n (& mut self) -> Ois1nW < '_ , Cr2Spec > { Ois1nW :: new (self , 9) }
#[doc = "Bit 10 - OIS2"]
#[inline (always)] pub fn ois2 (& mut self) -> Ois2W < '_ , Cr2Spec > { Ois2W :: new (self , 10) }
#[doc = "Bit 11 - OIS2N"]
#[inline (always)] pub fn ois2n (& mut self) -> Ois2nW < '_ , Cr2Spec > { Ois2nW :: new (self , 11) }
#[doc = "Bit 12 - OIS3"]
#[inline (always)] pub fn ois3 (& mut self) -> Ois3W < '_ , Cr2Spec > { Ois3W :: new (self , 12) }
#[doc = "Bit 13 - OIS3N"]
#[inline (always)] pub fn ois3n (& mut self) -> Ois3nW < '_ , Cr2Spec > { Ois3nW :: new (self , 13) }
#[doc = "Bit 14 - OIS4"]
#[inline (always)] pub fn ois4 (& mut self) -> Ois4W < '_ , Cr2Spec > { Ois4W :: new (self , 14) }
#[doc = "Bit 16 - OIS5"]
#[inline (always)] pub fn ois5 (& mut self) -> Ois5W < '_ , Cr2Spec > { Ois5W :: new (self , 16) } }
#[doc = "control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr2Spec ; impl crate :: RegisterSpec for Cr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr2::R`](R) reader structure"] impl crate :: Readable for Cr2Spec { }
#[doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"] impl crate :: Writable for Cr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR2 to value 0"] impl crate :: Resettable for Cr2Spec { } }
#[doc = "SMCR (rw) register accessor: slave mode control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`smcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@smcr`] module"]
#[doc (alias = "SMCR")] pub type Smcr = crate :: Reg < smcr :: SmcrSpec > ;
#[doc = "slave mode control register 1"] pub mod smcr {
#[doc = "Register `SMCR` reader"] pub type R = crate :: R < SmcrSpec > ;
#[doc = "Register `SMCR` writer"] pub type W = crate :: W < SmcrSpec > ;
#[doc = "Field `SMS` reader - Slave mode selection"] pub type SmsR = crate :: FieldReader ;
#[doc = "Field `SMS` writer - Slave mode selection"] pub type SmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OCCS` reader - Output compare clear selection"] pub type OccsR = crate :: BitReader ;
#[doc = "Field `OCCS` writer - Output compare clear selection"] pub type OccsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TS` reader - Trigger selection"] pub type TsR = crate :: FieldReader ;
#[doc = "Field `TS` writer - Trigger selection"] pub type TsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `MSM` reader - Master/slave mode"] pub type MsmR = crate :: BitReader ;
#[doc = "Field `MSM` writer - Master/slave mode"] pub type MsmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ETF` reader - External trigger filter"] pub type EtfR = crate :: FieldReader ;
#[doc = "Field `ETF` writer - External trigger filter"] pub type EtfW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `ETPS` reader - External trigger prescaler"] pub type EtpsR = crate :: FieldReader ;
#[doc = "Field `ETPS` writer - External trigger prescaler"] pub type EtpsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `ECE` reader - External clock enable"] pub type EceR = crate :: BitReader ;
#[doc = "Field `ECE` writer - External clock enable"] pub type EceW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ETP` reader - External trigger polarity"] pub type EtpR = crate :: BitReader ;
#[doc = "Field `ETP` writer - External trigger polarity"] pub type EtpW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:2 - Slave mode selection"]
#[inline (always)] pub fn sms (& self) -> SmsR { SmsR :: new ((self . bits & 7) as u8) }
#[doc = "Bit 3 - Output compare clear selection"]
#[inline (always)] pub fn occs (& self) -> OccsR { OccsR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Trigger selection"]
#[inline (always)] pub fn ts (& self) -> TsR { TsR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Master/slave mode"]
#[inline (always)] pub fn msm (& self) -> MsmR { MsmR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:11 - External trigger filter"]
#[inline (always)] pub fn etf (& self) -> EtfR { EtfR :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:13 - External trigger prescaler"]
#[inline (always)] pub fn etps (& self) -> EtpsR { EtpsR :: new (((self . bits >> 12) & 3) as u8) }
#[doc = "Bit 14 - External clock enable"]
#[inline (always)] pub fn ece (& self) -> EceR { EceR :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - External trigger polarity"]
#[inline (always)] pub fn etp (& self) -> EtpR { EtpR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:2 - Slave mode selection"]
#[inline (always)] pub fn sms (& mut self) -> SmsW < '_ , SmcrSpec > { SmsW :: new (self , 0) }
#[doc = "Bit 3 - Output compare clear selection"]
#[inline (always)] pub fn occs (& mut self) -> OccsW < '_ , SmcrSpec > { OccsW :: new (self , 3) }
#[doc = "Bits 4:6 - Trigger selection"]
#[inline (always)] pub fn ts (& mut self) -> TsW < '_ , SmcrSpec > { TsW :: new (self , 4) }
#[doc = "Bit 7 - Master/slave mode"]
#[inline (always)] pub fn msm (& mut self) -> MsmW < '_ , SmcrSpec > { MsmW :: new (self , 7) }
#[doc = "Bits 8:11 - External trigger filter"]
#[inline (always)] pub fn etf (& mut self) -> EtfW < '_ , SmcrSpec > { EtfW :: new (self , 8) }
#[doc = "Bits 12:13 - External trigger prescaler"]
#[inline (always)] pub fn etps (& mut self) -> EtpsW < '_ , SmcrSpec > { EtpsW :: new (self , 12) }
#[doc = "Bit 14 - External clock enable"]
#[inline (always)] pub fn ece (& mut self) -> EceW < '_ , SmcrSpec > { EceW :: new (self , 14) }
#[doc = "Bit 15 - External trigger polarity"]
#[inline (always)] pub fn etp (& mut self) -> EtpW < '_ , SmcrSpec > { EtpW :: new (self , 15) } }
#[doc = "slave mode control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`smcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SmcrSpec ; impl crate :: RegisterSpec for SmcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`smcr::R`](R) reader structure"] impl crate :: Readable for SmcrSpec { }
#[doc = "`write(|w| ..)` method takes [`smcr::W`](W) writer structure"] impl crate :: Writable for SmcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SMCR to value 0"] impl crate :: Resettable for SmcrSpec { } }
#[doc = "DIER (rw) register accessor: DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dier`] module"]
#[doc (alias = "DIER")] pub type Dier = crate :: Reg < dier :: DierSpec > ;
#[doc = "DMA/Interrupt enable register"] pub mod dier {
#[doc = "Register `DIER` reader"] pub type R = crate :: R < DierSpec > ;
#[doc = "Register `DIER` writer"] pub type W = crate :: W < DierSpec > ;
#[doc = "Field `UIE` reader - Update interrupt enable"] pub type UieR = crate :: BitReader ;
#[doc = "Field `UIE` writer - Update interrupt enable"] pub type UieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IE` reader - Capture/Compare 1 interrupt enable"] pub type Cc1ieR = crate :: BitReader ;
#[doc = "Field `CC1IE` writer - Capture/Compare 1 interrupt enable"] pub type Cc1ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2IE` reader - Capture/Compare 2 interrupt enable"] pub type Cc2ieR = crate :: BitReader ;
#[doc = "Field `CC2IE` writer - Capture/Compare 2 interrupt enable"] pub type Cc2ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3IE` reader - Capture/Compare 3 interrupt enable"] pub type Cc3ieR = crate :: BitReader ;
#[doc = "Field `CC3IE` writer - Capture/Compare 3 interrupt enable"] pub type Cc3ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4IE` reader - Capture/Compare 4 interrupt enable"] pub type Cc4ieR = crate :: BitReader ;
#[doc = "Field `CC4IE` writer - Capture/Compare 4 interrupt enable"] pub type Cc4ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMIE` reader - COM interrupt enable"] pub type ComieR = crate :: BitReader ;
#[doc = "Field `COMIE` writer - COM interrupt enable"] pub type ComieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIE` reader - Trigger interrupt enable"] pub type TieR = crate :: BitReader ;
#[doc = "Field `TIE` writer - Trigger interrupt enable"] pub type TieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BIE` reader - Break interrupt enable"] pub type BieR = crate :: BitReader ;
#[doc = "Field `BIE` writer - Break interrupt enable"] pub type BieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UDE` reader - Update DMA request enable"] pub type UdeR = crate :: BitReader ;
#[doc = "Field `UDE` writer - Update DMA request enable"] pub type UdeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1DE` reader - Capture/Compare 1 DMA request enable"] pub type Cc1deR = crate :: BitReader ;
#[doc = "Field `CC1DE` writer - Capture/Compare 1 DMA request enable"] pub type Cc1deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2DE` reader - Capture/Compare 2 DMA request enable"] pub type Cc2deR = crate :: BitReader ;
#[doc = "Field `CC2DE` writer - Capture/Compare 2 DMA request enable"] pub type Cc2deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3DE` reader - Capture/Compare 3 DMA request enable"] pub type Cc3deR = crate :: BitReader ;
#[doc = "Field `CC3DE` writer - Capture/Compare 3 DMA request enable"] pub type Cc3deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4DE` reader - Capture/Compare 4 DMA request enable"] pub type Cc4deR = crate :: BitReader ;
#[doc = "Field `CC4DE` writer - Capture/Compare 4 DMA request enable"] pub type Cc4deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMDE` reader - COM DMA request enable"] pub type ComdeR = crate :: BitReader ;
#[doc = "Field `COMDE` writer - COM DMA request enable"] pub type ComdeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TDE` reader - Trigger DMA request enable"] pub type TdeR = crate :: BitReader ;
#[doc = "Field `TDE` writer - Trigger DMA request enable"] pub type TdeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC5IE` reader - Capture/Compare 5 interrupt enable"] pub type Cc5ieR = crate :: BitReader ;
#[doc = "Field `CC5IE` writer - Capture/Compare 5 interrupt enable"] pub type Cc5ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC5DE` reader - Capture/Compare 5 DMA request enable"] pub type Cc5deR = crate :: BitReader ;
#[doc = "Field `CC5DE` writer - Capture/Compare 5 DMA request enable"] pub type Cc5deW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& self) -> UieR { UieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& self) -> Cc1ieR { Cc1ieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
#[inline (always)] pub fn cc2ie (& self) -> Cc2ieR { Cc2ieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
#[inline (always)] pub fn cc3ie (& self) -> Cc3ieR { Cc3ieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
#[inline (always)] pub fn cc4ie (& self) -> Cc4ieR { Cc4ieR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - COM interrupt enable"]
#[inline (always)] pub fn comie (& self) -> ComieR { ComieR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Trigger interrupt enable"]
#[inline (always)] pub fn tie (& self) -> TieR { TieR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Break interrupt enable"]
#[inline (always)] pub fn bie (& self) -> BieR { BieR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Update DMA request enable"]
#[inline (always)] pub fn ude (& self) -> UdeR { UdeR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
#[inline (always)] pub fn cc1de (& self) -> Cc1deR { Cc1deR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
#[inline (always)] pub fn cc2de (& self) -> Cc2deR { Cc2deR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
#[inline (always)] pub fn cc3de (& self) -> Cc3deR { Cc3deR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
#[inline (always)] pub fn cc4de (& self) -> Cc4deR { Cc4deR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - COM DMA request enable"]
#[inline (always)] pub fn comde (& self) -> ComdeR { ComdeR :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - Trigger DMA request enable"]
#[inline (always)] pub fn tde (& self) -> TdeR { TdeR :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 16 - Capture/Compare 5 interrupt enable"]
#[inline (always)] pub fn cc5ie (& self) -> Cc5ieR { Cc5ieR :: new (((self . bits >> 16) & 1) != 0) }
#[doc = "Bit 17 - Capture/Compare 5 DMA request enable"]
#[inline (always)] pub fn cc5de (& self) -> Cc5deR { Cc5deR :: new (((self . bits >> 17) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& mut self) -> UieW < '_ , DierSpec > { UieW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& mut self) -> Cc1ieW < '_ , DierSpec > { Cc1ieW :: new (self , 1) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
#[inline (always)] pub fn cc2ie (& mut self) -> Cc2ieW < '_ , DierSpec > { Cc2ieW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
#[inline (always)] pub fn cc3ie (& mut self) -> Cc3ieW < '_ , DierSpec > { Cc3ieW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
#[inline (always)] pub fn cc4ie (& mut self) -> Cc4ieW < '_ , DierSpec > { Cc4ieW :: new (self , 4) }
#[doc = "Bit 5 - COM interrupt enable"]
#[inline (always)] pub fn comie (& mut self) -> ComieW < '_ , DierSpec > { ComieW :: new (self , 5) }
#[doc = "Bit 6 - Trigger interrupt enable"]
#[inline (always)] pub fn tie (& mut self) -> TieW < '_ , DierSpec > { TieW :: new (self , 6) }
#[doc = "Bit 7 - Break interrupt enable"]
#[inline (always)] pub fn bie (& mut self) -> BieW < '_ , DierSpec > { BieW :: new (self , 7) }
#[doc = "Bit 8 - Update DMA request enable"]
#[inline (always)] pub fn ude (& mut self) -> UdeW < '_ , DierSpec > { UdeW :: new (self , 8) }
#[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
#[inline (always)] pub fn cc1de (& mut self) -> Cc1deW < '_ , DierSpec > { Cc1deW :: new (self , 9) }
#[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
#[inline (always)] pub fn cc2de (& mut self) -> Cc2deW < '_ , DierSpec > { Cc2deW :: new (self , 10) }
#[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
#[inline (always)] pub fn cc3de (& mut self) -> Cc3deW < '_ , DierSpec > { Cc3deW :: new (self , 11) }
#[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
#[inline (always)] pub fn cc4de (& mut self) -> Cc4deW < '_ , DierSpec > { Cc4deW :: new (self , 12) }
#[doc = "Bit 13 - COM DMA request enable"]
#[inline (always)] pub fn comde (& mut self) -> ComdeW < '_ , DierSpec > { ComdeW :: new (self , 13) }
#[doc = "Bit 14 - Trigger DMA request enable"]
#[inline (always)] pub fn tde (& mut self) -> TdeW < '_ , DierSpec > { TdeW :: new (self , 14) }
#[doc = "Bit 16 - Capture/Compare 5 interrupt enable"]
#[inline (always)] pub fn cc5ie (& mut self) -> Cc5ieW < '_ , DierSpec > { Cc5ieW :: new (self , 16) }
#[doc = "Bit 17 - Capture/Compare 5 DMA request enable"]
#[inline (always)] pub fn cc5de (& mut self) -> Cc5deW < '_ , DierSpec > { Cc5deW :: new (self , 17) } }
#[doc = "DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DierSpec ; impl crate :: RegisterSpec for DierSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dier::R`](R) reader structure"] impl crate :: Readable for DierSpec { }
#[doc = "`write(|w| ..)` method takes [`dier::W`](W) writer structure"] impl crate :: Writable for DierSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DIER to value 0"] impl crate :: Resettable for DierSpec { } }
#[doc = "SR (rw) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ;
#[doc = "Field `UIF` reader - Update interrupt flag"] pub type UifR = crate :: BitReader ;
#[doc = "Field `UIF` writer - Update interrupt flag"] pub type UifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IF` reader - Capture/Compare 1 interrupt flag"] pub type Cc1ifR = crate :: BitReader ;
#[doc = "Field `CC1IF` writer - Capture/Compare 1 interrupt flag"] pub type Cc1ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2IF` reader - Capture/Compare 2 interrupt flag"] pub type Cc2ifR = crate :: BitReader ;
#[doc = "Field `CC2IF` writer - Capture/Compare 2 interrupt flag"] pub type Cc2ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3IF` reader - Capture/Compare 3 interrupt flag"] pub type Cc3ifR = crate :: BitReader ;
#[doc = "Field `CC3IF` writer - Capture/Compare 3 interrupt flag"] pub type Cc3ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4IF` reader - Capture/Compare 4 interrupt flag"] pub type Cc4ifR = crate :: BitReader ;
#[doc = "Field `CC4IF` writer - Capture/Compare 4 interrupt flag"] pub type Cc4ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMIF` reader - COM interrupt flag"] pub type ComifR = crate :: BitReader ;
#[doc = "Field `COMIF` writer - COM interrupt flag"] pub type ComifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIF` reader - Trigger interrupt flag"] pub type TifR = crate :: BitReader ;
#[doc = "Field `TIF` writer - Trigger interrupt flag"] pub type TifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BIF` reader - Break interrupt flag"] pub type BifR = crate :: BitReader ;
#[doc = "Field `BIF` writer - Break interrupt flag"] pub type BifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1OF` reader - Capture/Compare 1 overcapture flag"] pub type Cc1ofR = crate :: BitReader ;
#[doc = "Field `CC1OF` writer - Capture/Compare 1 overcapture flag"] pub type Cc1ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2OF` reader - Capture/Compare 2 overcapture flag"] pub type Cc2ofR = crate :: BitReader ;
#[doc = "Field `CC2OF` writer - Capture/Compare 2 overcapture flag"] pub type Cc2ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3OF` reader - Capture/Compare 3 overcapture flag"] pub type Cc3ofR = crate :: BitReader ;
#[doc = "Field `CC3OF` writer - Capture/Compare 3 overcapture flag"] pub type Cc3ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4OF` reader - Capture/Compare 4 overcapture flag"] pub type Cc4ofR = crate :: BitReader ;
#[doc = "Field `CC4OF` writer - Capture/Compare 4 overcapture flag"] pub type Cc4ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC5IF` reader - Capture/Compare 5 interrupt flag"] pub type Cc5ifR = crate :: BitReader ;
#[doc = "Field `CC5IF` writer - Capture/Compare 5 interrupt flag"] pub type Cc5ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& self) -> UifR { UifR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& self) -> Cc1ifR { Cc1ifR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
#[inline (always)] pub fn cc2if (& self) -> Cc2ifR { Cc2ifR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
#[inline (always)] pub fn cc3if (& self) -> Cc3ifR { Cc3ifR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
#[inline (always)] pub fn cc4if (& self) -> Cc4ifR { Cc4ifR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - COM interrupt flag"]
#[inline (always)] pub fn comif (& self) -> ComifR { ComifR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Trigger interrupt flag"]
#[inline (always)] pub fn tif (& self) -> TifR { TifR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Break interrupt flag"]
#[inline (always)] pub fn bif (& self) -> BifR { BifR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& self) -> Cc1ofR { Cc1ofR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Capture/Compare 2 overcapture flag"]
#[inline (always)] pub fn cc2of (& self) -> Cc2ofR { Cc2ofR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
#[inline (always)] pub fn cc3of (& self) -> Cc3ofR { Cc3ofR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
#[inline (always)] pub fn cc4of (& self) -> Cc4ofR { Cc4ofR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 16 - Capture/Compare 5 interrupt flag"]
#[inline (always)] pub fn cc5if (& self) -> Cc5ifR { Cc5ifR :: new (((self . bits >> 16) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& mut self) -> UifW < '_ , SrSpec > { UifW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& mut self) -> Cc1ifW < '_ , SrSpec > { Cc1ifW :: new (self , 1) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
#[inline (always)] pub fn cc2if (& mut self) -> Cc2ifW < '_ , SrSpec > { Cc2ifW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
#[inline (always)] pub fn cc3if (& mut self) -> Cc3ifW < '_ , SrSpec > { Cc3ifW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
#[inline (always)] pub fn cc4if (& mut self) -> Cc4ifW < '_ , SrSpec > { Cc4ifW :: new (self , 4) }
#[doc = "Bit 5 - COM interrupt flag"]
#[inline (always)] pub fn comif (& mut self) -> ComifW < '_ , SrSpec > { ComifW :: new (self , 5) }
#[doc = "Bit 6 - Trigger interrupt flag"]
#[inline (always)] pub fn tif (& mut self) -> TifW < '_ , SrSpec > { TifW :: new (self , 6) }
#[doc = "Bit 7 - Break interrupt flag"]
#[inline (always)] pub fn bif (& mut self) -> BifW < '_ , SrSpec > { BifW :: new (self , 7) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& mut self) -> Cc1ofW < '_ , SrSpec > { Cc1ofW :: new (self , 9) }
#[doc = "Bit 10 - Capture/Compare 2 overcapture flag"]
#[inline (always)] pub fn cc2of (& mut self) -> Cc2ofW < '_ , SrSpec > { Cc2ofW :: new (self , 10) }
#[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
#[inline (always)] pub fn cc3of (& mut self) -> Cc3ofW < '_ , SrSpec > { Cc3ofW :: new (self , 11) }
#[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
#[inline (always)] pub fn cc4of (& mut self) -> Cc4ofW < '_ , SrSpec > { Cc4ofW :: new (self , 12) }
#[doc = "Bit 16 - Capture/Compare 5 interrupt flag"]
#[inline (always)] pub fn cc5if (& mut self) -> Cc5ifW < '_ , SrSpec > { Cc5ifW :: new (self , 16) } }
#[doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } }
#[doc = "EGR (w) register accessor: event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@egr`] module"]
#[doc (alias = "EGR")] pub type Egr = crate :: Reg < egr :: EgrSpec > ;
#[doc = "event generation register"] pub mod egr {
#[doc = "Register `EGR` writer"] pub type W = crate :: W < EgrSpec > ;
#[doc = "Field `UG` writer - Update generation"] pub type UgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1G` writer - Capture/Compare 1 generation"] pub type Cc1gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2G` writer - Capture/Compare 2 generation"] pub type Cc2gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3G` writer - Capture/Compare 3 generation"] pub type Cc3gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4G` writer - Capture/Compare 4 generation"] pub type Cc4gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMG` writer - Capture/Compare control update generation"] pub type ComgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TG` writer - Trigger generation"] pub type TgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BG` writer - Break generation"] pub type BgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC5G` writer - Capture/Compare 5 generation"] pub type Cc5gW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - Update generation"]
#[inline (always)] pub fn ug (& mut self) -> UgW < '_ , EgrSpec > { UgW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 generation"]
#[inline (always)] pub fn cc1g (& mut self) -> Cc1gW < '_ , EgrSpec > { Cc1gW :: new (self , 1) }
#[doc = "Bit 2 - Capture/Compare 2 generation"]
#[inline (always)] pub fn cc2g (& mut self) -> Cc2gW < '_ , EgrSpec > { Cc2gW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare 3 generation"]
#[inline (always)] pub fn cc3g (& mut self) -> Cc3gW < '_ , EgrSpec > { Cc3gW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 4 generation"]
#[inline (always)] pub fn cc4g (& mut self) -> Cc4gW < '_ , EgrSpec > { Cc4gW :: new (self , 4) }
#[doc = "Bit 5 - Capture/Compare control update generation"]
#[inline (always)] pub fn comg (& mut self) -> ComgW < '_ , EgrSpec > { ComgW :: new (self , 5) }
#[doc = "Bit 6 - Trigger generation"]
#[inline (always)] pub fn tg (& mut self) -> TgW < '_ , EgrSpec > { TgW :: new (self , 6) }
#[doc = "Bit 7 - Break generation"]
#[inline (always)] pub fn bg (& mut self) -> BgW < '_ , EgrSpec > { BgW :: new (self , 7) }
#[doc = "Bit 16 - Capture/Compare 5 generation"]
#[inline (always)] pub fn cc5g (& mut self) -> Cc5gW < '_ , EgrSpec > { Cc5gW :: new (self , 16) } }
#[doc = "event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EgrSpec ; impl crate :: RegisterSpec for EgrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`egr::W`](W) writer structure"] impl crate :: Writable for EgrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EGR to value 0"] impl crate :: Resettable for EgrSpec { } }
#[doc = "CCMR1_Output (rw) register accessor: capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_output`] module"]
#[doc (alias = "CCMR1_Output")] pub type Ccmr1Output = crate :: Reg < ccmr1_output :: Ccmr1OutputSpec > ;
#[doc = "capture/compare mode register 1 (output mode)"] pub mod ccmr1_output {
#[doc = "Register `CCMR1_Output` reader"] pub type R = crate :: R < Ccmr1OutputSpec > ;
#[doc = "Register `CCMR1_Output` writer"] pub type W = crate :: W < Ccmr1OutputSpec > ;
#[doc = "Field `CC1S` reader - Capture/Compare 2 output enable"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/Compare 2 output enable"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC1FE` reader - Output compare 1 fast enable"] pub type Oc1feR = crate :: BitReader ;
#[doc = "Field `OC1FE` writer - Output compare 1 fast enable"] pub type Oc1feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1PE` reader - Output compare 1 preload enable"] pub type Oc1peR = crate :: BitReader ;
#[doc = "Field `OC1PE` writer - Output compare 1 preload enable"] pub type Oc1peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1M` reader - Output compare 1 mode"] pub type Oc1mR = crate :: FieldReader ;
#[doc = "Field `OC1M` writer - Output compare 1 mode"] pub type Oc1mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC1CE` reader - Output compare 1 clear enable"] pub type Oc1ceR = crate :: BitReader ;
#[doc = "Field `OC1CE` writer - Output compare 1 clear enable"] pub type Oc1ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2S` reader - Capure/Compare 2 selection"] pub type Cc2sR = crate :: FieldReader ;
#[doc = "Field `CC2S` writer - Capure/Compare 2 selection"] pub type Cc2sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC2FE` reader - Output compare 4 fast enable"] pub type Oc2feR = crate :: BitReader ;
#[doc = "Field `OC2FE` writer - Output compare 4 fast enable"] pub type Oc2feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC2PE` reader - Output compare 2 preload enable"] pub type Oc2peR = crate :: BitReader ;
#[doc = "Field `OC2PE` writer - Output compare 2 preload enable"] pub type Oc2peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC2M` reader - Output compare 2 mode"] pub type Oc2mR = crate :: FieldReader ;
#[doc = "Field `OC2M` writer - Output compare 2 mode"] pub type Oc2mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC2CE` reader - Output compare 2 clear enable"] pub type Oc2ceR = crate :: BitReader ;
#[doc = "Field `OC2CE` writer - Output compare 2 clear enable"] pub type Oc2ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& self) -> Oc1feR { Oc1feR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& self) -> Oc1peR { Oc1peR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& self) -> Oc1mR { Oc1mR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Output compare 1 clear enable"]
#[inline (always)] pub fn oc1ce (& self) -> Oc1ceR { Oc1ceR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Capure/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& self) -> Cc2sR { Cc2sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc2fe (& self) -> Oc2feR { Oc2feR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Output compare 2 preload enable"]
#[inline (always)] pub fn oc2pe (& self) -> Oc2peR { Oc2peR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bits 12:14 - Output compare 2 mode"]
#[inline (always)] pub fn oc2m (& self) -> Oc2mR { Oc2mR :: new (((self . bits >> 12) & 7) as u8) }
#[doc = "Bit 15 - Output compare 2 clear enable"]
#[inline (always)] pub fn oc2ce (& self) -> Oc2ceR { Oc2ceR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1OutputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& mut self) -> Oc1feW < '_ , Ccmr1OutputSpec > { Oc1feW :: new (self , 2) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& mut self) -> Oc1peW < '_ , Ccmr1OutputSpec > { Oc1peW :: new (self , 3) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& mut self) -> Oc1mW < '_ , Ccmr1OutputSpec > { Oc1mW :: new (self , 4) }
#[doc = "Bit 7 - Output compare 1 clear enable"]
#[inline (always)] pub fn oc1ce (& mut self) -> Oc1ceW < '_ , Ccmr1OutputSpec > { Oc1ceW :: new (self , 7) }
#[doc = "Bits 8:9 - Capure/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& mut self) -> Cc2sW < '_ , Ccmr1OutputSpec > { Cc2sW :: new (self , 8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc2fe (& mut self) -> Oc2feW < '_ , Ccmr1OutputSpec > { Oc2feW :: new (self , 10) }
#[doc = "Bit 11 - Output compare 2 preload enable"]
#[inline (always)] pub fn oc2pe (& mut self) -> Oc2peW < '_ , Ccmr1OutputSpec > { Oc2peW :: new (self , 11) }
#[doc = "Bits 12:14 - Output compare 2 mode"]
#[inline (always)] pub fn oc2m (& mut self) -> Oc2mW < '_ , Ccmr1OutputSpec > { Oc2mW :: new (self , 12) }
#[doc = "Bit 15 - Output compare 2 clear enable"]
#[inline (always)] pub fn oc2ce (& mut self) -> Oc2ceW < '_ , Ccmr1OutputSpec > { Oc2ceW :: new (self , 15) } }
#[doc = "capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1OutputSpec ; impl crate :: RegisterSpec for Ccmr1OutputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_output::R`](R) reader structure"] impl crate :: Readable for Ccmr1OutputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_output::W`](W) writer structure"] impl crate :: Writable for Ccmr1OutputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Output to value 0"] impl crate :: Resettable for Ccmr1OutputSpec { } }
#[doc = "CCMR1_Input (rw) register accessor: capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_input`] module"]
#[doc (alias = "CCMR1_Input")] pub type Ccmr1Input = crate :: Reg < ccmr1_input :: Ccmr1InputSpec > ;
#[doc = "capture/compare mode register 1 (input mode)"] pub mod ccmr1_input {
#[doc = "Register `CCMR1_Input` reader"] pub type R = crate :: R < Ccmr1InputSpec > ;
#[doc = "Register `CCMR1_Input` writer"] pub type W = crate :: W < Ccmr1InputSpec > ;
#[doc = "Field `CC1S` reader - Capture/compare 1 selection"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/compare 1 selection"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1PSC` reader - Input capture 1 prescaler"] pub type Ic1pscR = crate :: FieldReader ;
#[doc = "Field `IC1PSC` writer - Input capture 1 prescaler"] pub type Ic1pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1F` reader - Input capture 1 filter"] pub type Ic1fR = crate :: FieldReader ;
#[doc = "Field `IC1F` writer - Input capture 1 filter"] pub type Ic1fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CC2S` reader - Capture/Compare 2 selection"] pub type Cc2sR = crate :: FieldReader ;
#[doc = "Field `CC2S` writer - Capture/Compare 2 selection"] pub type Cc2sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC2PSC` reader - Input capture 2 prescaler"] pub type Ic2pscR = crate :: FieldReader ;
#[doc = "Field `IC2PSC` writer - Input capture 2 prescaler"] pub type Ic2pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC2F` reader - Input capture 2 filter"] pub type Ic2fR = crate :: FieldReader ;
#[doc = "Field `IC2F` writer - Input capture 2 filter"] pub type Ic2fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& self) -> Ic1pscR { Ic1pscR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& self) -> Ic1fR { Ic1fR :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:9 - Capture/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& self) -> Cc2sR { Cc2sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - Input capture 2 prescaler"]
#[inline (always)] pub fn ic2psc (& self) -> Ic2pscR { Ic2pscR :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:15 - Input capture 2 filter"]
#[inline (always)] pub fn ic2f (& self) -> Ic2fR { Ic2fR :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1InputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& mut self) -> Ic1pscW < '_ , Ccmr1InputSpec > { Ic1pscW :: new (self , 2) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& mut self) -> Ic1fW < '_ , Ccmr1InputSpec > { Ic1fW :: new (self , 4) }
#[doc = "Bits 8:9 - Capture/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& mut self) -> Cc2sW < '_ , Ccmr1InputSpec > { Cc2sW :: new (self , 8) }
#[doc = "Bits 10:11 - Input capture 2 prescaler"]
#[inline (always)] pub fn ic2psc (& mut self) -> Ic2pscW < '_ , Ccmr1InputSpec > { Ic2pscW :: new (self , 10) }
#[doc = "Bits 12:15 - Input capture 2 filter"]
#[inline (always)] pub fn ic2f (& mut self) -> Ic2fW < '_ , Ccmr1InputSpec > { Ic2fW :: new (self , 12) } }
#[doc = "capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1InputSpec ; impl crate :: RegisterSpec for Ccmr1InputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_input::R`](R) reader structure"] impl crate :: Readable for Ccmr1InputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_input::W`](W) writer structure"] impl crate :: Writable for Ccmr1InputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Input to value 0"] impl crate :: Resettable for Ccmr1InputSpec { } }
#[doc = "CCMR2_Output (rw) register accessor: capture/compare mode register 2(output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr2_output`] module"]
#[doc (alias = "CCMR2_Output")] pub type Ccmr2Output = crate :: Reg < ccmr2_output :: Ccmr2OutputSpec > ;
#[doc = "capture/compare mode register 2(output mode)"] pub mod ccmr2_output {
#[doc = "Register `CCMR2_Output` reader"] pub type R = crate :: R < Ccmr2OutputSpec > ;
#[doc = "Register `CCMR2_Output` writer"] pub type W = crate :: W < Ccmr2OutputSpec > ;
#[doc = "Field `CC3S` reader - Capture/Compare 3 selection"] pub type Cc3sR = crate :: FieldReader ;
#[doc = "Field `CC3S` writer - Capture/Compare 3 selection"] pub type Cc3sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC3FE` reader - Output compare 3 fast enable"] pub type Oc3feR = crate :: BitReader ;
#[doc = "Field `OC3FE` writer - Output compare 3 fast enable"] pub type Oc3feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC3PE` reader - Output compare 3 preload enable"] pub type Oc3peR = crate :: BitReader ;
#[doc = "Field `OC3PE` writer - Output compare 3 preload enable"] pub type Oc3peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC3M` reader - Output compare 3 mode"] pub type Oc3mR = crate :: FieldReader ;
#[doc = "Field `OC3M` writer - Output compare 3 mode"] pub type Oc3mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC3CE` reader - Output compare 3 clear enable"] pub type Oc3ceR = crate :: BitReader ;
#[doc = "Field `OC3CE` writer - Output compare 3 clear enable"] pub type Oc3ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4S` reader - Capture/Compare 4 selection"] pub type Cc4sR = crate :: FieldReader ;
#[doc = "Field `CC4S` writer - Capture/Compare 4 selection"] pub type Cc4sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC4FE` reader - Output compare 4 fast enable"] pub type Oc4feR = crate :: BitReader ;
#[doc = "Field `OC4FE` writer - Output compare 4 fast enable"] pub type Oc4feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC4PE` reader - Output compare 4 preload enable"] pub type Oc4peR = crate :: BitReader ;
#[doc = "Field `OC4PE` writer - Output compare 4 preload enable"] pub type Oc4peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC4M` reader - Output compare 4 mode"] pub type Oc4mR = crate :: FieldReader ;
#[doc = "Field `OC4M` writer - Output compare 4 mode"] pub type Oc4mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC4CE` reader - Output compare 4 clear enable"] pub type Oc4ceR = crate :: BitReader ;
#[doc = "Field `OC4CE` writer - Output compare 4 clear enable"] pub type Oc4ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:1 - Capture/Compare 3 selection"]
#[inline (always)] pub fn cc3s (& self) -> Cc3sR { Cc3sR :: new ((self . bits & 3) as u8) }
#[doc = "Bit 2 - Output compare 3 fast enable"]
#[inline (always)] pub fn oc3fe (& self) -> Oc3feR { Oc3feR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Output compare 3 preload enable"]
#[inline (always)] pub fn oc3pe (& self) -> Oc3peR { Oc3peR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Output compare 3 mode"]
#[inline (always)] pub fn oc3m (& self) -> Oc3mR { Oc3mR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Output compare 3 clear enable"]
#[inline (always)] pub fn oc3ce (& self) -> Oc3ceR { Oc3ceR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& self) -> Cc4sR { Cc4sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc4fe (& self) -> Oc4feR { Oc4feR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Output compare 4 preload enable"]
#[inline (always)] pub fn oc4pe (& self) -> Oc4peR { Oc4peR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bits 12:14 - Output compare 4 mode"]
#[inline (always)] pub fn oc4m (& self) -> Oc4mR { Oc4mR :: new (((self . bits >> 12) & 7) as u8) }
#[doc = "Bit 15 - Output compare 4 clear enable"]
#[inline (always)] pub fn oc4ce (& self) -> Oc4ceR { Oc4ceR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:1 - Capture/Compare 3 selection"]
#[inline (always)] pub fn cc3s (& mut self) -> Cc3sW < '_ , Ccmr2OutputSpec > { Cc3sW :: new (self , 0) }
#[doc = "Bit 2 - Output compare 3 fast enable"]
#[inline (always)] pub fn oc3fe (& mut self) -> Oc3feW < '_ , Ccmr2OutputSpec > { Oc3feW :: new (self , 2) }
#[doc = "Bit 3 - Output compare 3 preload enable"]
#[inline (always)] pub fn oc3pe (& mut self) -> Oc3peW < '_ , Ccmr2OutputSpec > { Oc3peW :: new (self , 3) }
#[doc = "Bits 4:6 - Output compare 3 mode"]
#[inline (always)] pub fn oc3m (& mut self) -> Oc3mW < '_ , Ccmr2OutputSpec > { Oc3mW :: new (self , 4) }
#[doc = "Bit 7 - Output compare 3 clear enable"]
#[inline (always)] pub fn oc3ce (& mut self) -> Oc3ceW < '_ , Ccmr2OutputSpec > { Oc3ceW :: new (self , 7) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& mut self) -> Cc4sW < '_ , Ccmr2OutputSpec > { Cc4sW :: new (self , 8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc4fe (& mut self) -> Oc4feW < '_ , Ccmr2OutputSpec > { Oc4feW :: new (self , 10) }
#[doc = "Bit 11 - Output compare 4 preload enable"]
#[inline (always)] pub fn oc4pe (& mut self) -> Oc4peW < '_ , Ccmr2OutputSpec > { Oc4peW :: new (self , 11) }
#[doc = "Bits 12:14 - Output compare 4 mode"]
#[inline (always)] pub fn oc4m (& mut self) -> Oc4mW < '_ , Ccmr2OutputSpec > { Oc4mW :: new (self , 12) }
#[doc = "Bit 15 - Output compare 4 clear enable"]
#[inline (always)] pub fn oc4ce (& mut self) -> Oc4ceW < '_ , Ccmr2OutputSpec > { Oc4ceW :: new (self , 15) } }
#[doc = "capture/compare mode register 2(output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr2OutputSpec ; impl crate :: RegisterSpec for Ccmr2OutputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr2_output::R`](R) reader structure"] impl crate :: Readable for Ccmr2OutputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr2_output::W`](W) writer structure"] impl crate :: Writable for Ccmr2OutputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR2_Output to value 0"] impl crate :: Resettable for Ccmr2OutputSpec { } }
#[doc = "CCMR2_Input (rw) register accessor: capture/compare mode register 2 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr2_input`] module"]
#[doc (alias = "CCMR2_Input")] pub type Ccmr2Input = crate :: Reg < ccmr2_input :: Ccmr2InputSpec > ;
#[doc = "capture/compare mode register 2 (input mode)"] pub mod ccmr2_input {
#[doc = "Register `CCMR2_Input` reader"] pub type R = crate :: R < Ccmr2InputSpec > ;
#[doc = "Register `CCMR2_Input` writer"] pub type W = crate :: W < Ccmr2InputSpec > ;
#[doc = "Field `CC3S` reader - Capture/compare 3 selection"] pub type Cc3sR = crate :: FieldReader ;
#[doc = "Field `CC3S` writer - Capture/compare 3 selection"] pub type Cc3sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC3PSC` reader - Input capture 3 prescaler"] pub type Ic3pscR = crate :: FieldReader ;
#[doc = "Field `IC3PSC` writer - Input capture 3 prescaler"] pub type Ic3pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC3F` reader - Input capture 3 filter"] pub type Ic3fR = crate :: FieldReader ;
#[doc = "Field `IC3F` writer - Input capture 3 filter"] pub type Ic3fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CC4S` reader - Capture/Compare 4 selection"] pub type Cc4sR = crate :: FieldReader ;
#[doc = "Field `CC4S` writer - Capture/Compare 4 selection"] pub type Cc4sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC4PSC` reader - Input capture 4 prescaler"] pub type Ic4pscR = crate :: FieldReader ;
#[doc = "Field `IC4PSC` writer - Input capture 4 prescaler"] pub type Ic4pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC4F` reader - Input capture 4 filter"] pub type Ic4fR = crate :: FieldReader ;
#[doc = "Field `IC4F` writer - Input capture 4 filter"] pub type Ic4fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:1 - Capture/compare 3 selection"]
#[inline (always)] pub fn cc3s (& self) -> Cc3sR { Cc3sR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Input capture 3 prescaler"]
#[inline (always)] pub fn ic3psc (& self) -> Ic3pscR { Ic3pscR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:7 - Input capture 3 filter"]
#[inline (always)] pub fn ic3f (& self) -> Ic3fR { Ic3fR :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& self) -> Cc4sR { Cc4sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - Input capture 4 prescaler"]
#[inline (always)] pub fn ic4psc (& self) -> Ic4pscR { Ic4pscR :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:15 - Input capture 4 filter"]
#[inline (always)] pub fn ic4f (& self) -> Ic4fR { Ic4fR :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/compare 3 selection"]
#[inline (always)] pub fn cc3s (& mut self) -> Cc3sW < '_ , Ccmr2InputSpec > { Cc3sW :: new (self , 0) }
#[doc = "Bits 2:3 - Input capture 3 prescaler"]
#[inline (always)] pub fn ic3psc (& mut self) -> Ic3pscW < '_ , Ccmr2InputSpec > { Ic3pscW :: new (self , 2) }
#[doc = "Bits 4:7 - Input capture 3 filter"]
#[inline (always)] pub fn ic3f (& mut self) -> Ic3fW < '_ , Ccmr2InputSpec > { Ic3fW :: new (self , 4) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& mut self) -> Cc4sW < '_ , Ccmr2InputSpec > { Cc4sW :: new (self , 8) }
#[doc = "Bits 10:11 - Input capture 4 prescaler"]
#[inline (always)] pub fn ic4psc (& mut self) -> Ic4pscW < '_ , Ccmr2InputSpec > { Ic4pscW :: new (self , 10) }
#[doc = "Bits 12:15 - Input capture 4 filter"]
#[inline (always)] pub fn ic4f (& mut self) -> Ic4fW < '_ , Ccmr2InputSpec > { Ic4fW :: new (self , 12) } }
#[doc = "capture/compare mode register 2 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr2InputSpec ; impl crate :: RegisterSpec for Ccmr2InputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr2_input::R`](R) reader structure"] impl crate :: Readable for Ccmr2InputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr2_input::W`](W) writer structure"] impl crate :: Writable for Ccmr2InputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR2_Input to value 0"] impl crate :: Resettable for Ccmr2InputSpec { } }
#[doc = "CCER (rw) register accessor: capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccer`] module"]
#[doc (alias = "CCER")] pub type Ccer = crate :: Reg < ccer :: CcerSpec > ;
#[doc = "capture/compare enable register"] pub mod ccer {
#[doc = "Register `CCER` reader"] pub type R = crate :: R < CcerSpec > ;
#[doc = "Register `CCER` writer"] pub type W = crate :: W < CcerSpec > ;
#[doc = "Field `CC1E` reader - Capture/Compare 1 output enable"] pub type Cc1eR = crate :: BitReader ;
#[doc = "Field `CC1E` writer - Capture/Compare 1 output enable"] pub type Cc1eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1P` reader - Capture/Compare 1 output polarity"] pub type Cc1pR = crate :: BitReader ;
#[doc = "Field `CC1P` writer - Capture/Compare 1 output polarity"] pub type Cc1pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1NE` reader - Capture/Compare 1 complementary output enable"] pub type Cc1neR = crate :: BitReader ;
#[doc = "Field `CC1NE` writer - Capture/Compare 1 complementary output enable"] pub type Cc1neW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1NP` reader - Capture/Compare 1 complementary output polarity"] pub type Cc1npR = crate :: BitReader ;
#[doc = "Field `CC1NP` writer - Capture/Compare 1 complementary output polarity"] pub type Cc1npW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2E` reader - Capture/Compare 2 output enable"] pub type Cc2eR = crate :: BitReader ;
#[doc = "Field `CC2E` writer - Capture/Compare 2 output enable"] pub type Cc2eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2P` reader - Capture/Compare 2 output polarity"] pub type Cc2pR = crate :: BitReader ;
#[doc = "Field `CC2P` writer - Capture/Compare 2 output polarity"] pub type Cc2pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2NE` reader - Capture/Compare 2 complementary output enable"] pub type Cc2neR = crate :: BitReader ;
#[doc = "Field `CC2NE` writer - Capture/Compare 2 complementary output enable"] pub type Cc2neW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2NP` reader - Capture/Compare 2 complementary output polarity"] pub type Cc2npR = crate :: BitReader ;
#[doc = "Field `CC2NP` writer - Capture/Compare 2 complementary output polarity"] pub type Cc2npW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3E` reader - Capture/Compare 3 output enable"] pub type Cc3eR = crate :: BitReader ;
#[doc = "Field `CC3E` writer - Capture/Compare 3 output enable"] pub type Cc3eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3P` reader - Capture/Compare 3 output polarity"] pub type Cc3pR = crate :: BitReader ;
#[doc = "Field `CC3P` writer - Capture/Compare 3 output polarity"] pub type Cc3pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3NE` reader - Capture/Compare 3 complementary output enable"] pub type Cc3neR = crate :: BitReader ;
#[doc = "Field `CC3NE` writer - Capture/Compare 3 complementary output enable"] pub type Cc3neW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3NP` reader - Capture/Compare 3 complementary output polarity"] pub type Cc3npR = crate :: BitReader ;
#[doc = "Field `CC3NP` writer - Capture/Compare 3 complementary output polarity"] pub type Cc3npW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4E` reader - Capture/Compare 4 output enable"] pub type Cc4eR = crate :: BitReader ;
#[doc = "Field `CC4E` writer - Capture/Compare 4 output enable"] pub type Cc4eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4P` reader - Capture/Compare 4 output polarity"] pub type Cc4pR = crate :: BitReader ;
#[doc = "Field `CC4P` writer - Capture/Compare 4 output polarity"] pub type Cc4pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4NP` reader - Capture/Compare 4 complementary output polarity"] pub type Cc4npR = crate :: BitReader ;
#[doc = "Field `CC4NP` writer - Capture/Compare 4 complementary output polarity"] pub type Cc4npW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& self) -> Cc1eR { Cc1eR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& self) -> Cc1pR { Cc1pR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
#[inline (always)] pub fn cc1ne (& self) -> Cc1neR { Cc1neR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output polarity"]
#[inline (always)] pub fn cc1np (& self) -> Cc1npR { Cc1npR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc2e (& self) -> Cc2eR { Cc2eR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Capture/Compare 2 output polarity"]
#[inline (always)] pub fn cc2p (& self) -> Cc2pR { Cc2pR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Capture/Compare 2 complementary output enable"]
#[inline (always)] pub fn cc2ne (& self) -> Cc2neR { Cc2neR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Capture/Compare 2 complementary output polarity"]
#[inline (always)] pub fn cc2np (& self) -> Cc2npR { Cc2npR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Capture/Compare 3 output enable"]
#[inline (always)] pub fn cc3e (& self) -> Cc3eR { Cc3eR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 3 output polarity"]
#[inline (always)] pub fn cc3p (& self) -> Cc3pR { Cc3pR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Capture/Compare 3 complementary output enable"]
#[inline (always)] pub fn cc3ne (& self) -> Cc3neR { Cc3neR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Capture/Compare 3 complementary output polarity"]
#[inline (always)] pub fn cc3np (& self) -> Cc3npR { Cc3npR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Capture/Compare 4 output enable"]
#[inline (always)] pub fn cc4e (& self) -> Cc4eR { Cc4eR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Capture/Compare 4 output polarity"]
#[inline (always)] pub fn cc4p (& self) -> Cc4pR { Cc4pR :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 15 - Capture/Compare 4 complementary output polarity"]
#[inline (always)] pub fn cc4np (& self) -> Cc4npR { Cc4npR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& mut self) -> Cc1eW < '_ , CcerSpec > { Cc1eW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& mut self) -> Cc1pW < '_ , CcerSpec > { Cc1pW :: new (self , 1) }
#[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
#[inline (always)] pub fn cc1ne (& mut self) -> Cc1neW < '_ , CcerSpec > { Cc1neW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output polarity"]
#[inline (always)] pub fn cc1np (& mut self) -> Cc1npW < '_ , CcerSpec > { Cc1npW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc2e (& mut self) -> Cc2eW < '_ , CcerSpec > { Cc2eW :: new (self , 4) }
#[doc = "Bit 5 - Capture/Compare 2 output polarity"]
#[inline (always)] pub fn cc2p (& mut self) -> Cc2pW < '_ , CcerSpec > { Cc2pW :: new (self , 5) }
#[doc = "Bit 6 - Capture/Compare 2 complementary output enable"]
#[inline (always)] pub fn cc2ne (& mut self) -> Cc2neW < '_ , CcerSpec > { Cc2neW :: new (self , 6) }
#[doc = "Bit 7 - Capture/Compare 2 complementary output polarity"]
#[inline (always)] pub fn cc2np (& mut self) -> Cc2npW < '_ , CcerSpec > { Cc2npW :: new (self , 7) }
#[doc = "Bit 8 - Capture/Compare 3 output enable"]
#[inline (always)] pub fn cc3e (& mut self) -> Cc3eW < '_ , CcerSpec > { Cc3eW :: new (self , 8) }
#[doc = "Bit 9 - Capture/Compare 3 output polarity"]
#[inline (always)] pub fn cc3p (& mut self) -> Cc3pW < '_ , CcerSpec > { Cc3pW :: new (self , 9) }
#[doc = "Bit 10 - Capture/Compare 3 complementary output enable"]
#[inline (always)] pub fn cc3ne (& mut self) -> Cc3neW < '_ , CcerSpec > { Cc3neW :: new (self , 10) }
#[doc = "Bit 11 - Capture/Compare 3 complementary output polarity"]
#[inline (always)] pub fn cc3np (& mut self) -> Cc3npW < '_ , CcerSpec > { Cc3npW :: new (self , 11) }
#[doc = "Bit 12 - Capture/Compare 4 output enable"]
#[inline (always)] pub fn cc4e (& mut self) -> Cc4eW < '_ , CcerSpec > { Cc4eW :: new (self , 12) }
#[doc = "Bit 13 - Capture/Compare 4 output polarity"]
#[inline (always)] pub fn cc4p (& mut self) -> Cc4pW < '_ , CcerSpec > { Cc4pW :: new (self , 13) }
#[doc = "Bit 15 - Capture/Compare 4 complementary output polarity"]
#[inline (always)] pub fn cc4np (& mut self) -> Cc4npW < '_ , CcerSpec > { Cc4npW :: new (self , 15) } }
#[doc = "capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CcerSpec ; impl crate :: RegisterSpec for CcerSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccer::R`](R) reader structure"] impl crate :: Readable for CcerSpec { }
#[doc = "`write(|w| ..)` method takes [`ccer::W`](W) writer structure"] impl crate :: Writable for CcerSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCER to value 0"] impl crate :: Resettable for CcerSpec { } }
#[doc = "CNT (rw) register accessor: counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnt`] module"]
#[doc (alias = "CNT")] pub type Cnt = crate :: Reg < cnt :: CntSpec > ;
#[doc = "counter"] pub mod cnt {
#[doc = "Register `CNT` reader"] pub type R = crate :: R < CntSpec > ;
#[doc = "Register `CNT` writer"] pub type W = crate :: W < CntSpec > ;
#[doc = "Field `CNT` reader - Counter value"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - Counter value"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Counter value"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Counter value"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , CntSpec > { CntW :: new (self , 0) } }
#[doc = "counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CntSpec ; impl crate :: RegisterSpec for CntSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cnt::R`](R) reader structure"] impl crate :: Readable for CntSpec { }
#[doc = "`write(|w| ..)` method takes [`cnt::W`](W) writer structure"] impl crate :: Writable for CntSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CNT to value 0"] impl crate :: Resettable for CntSpec { } }
#[doc = "PSC (rw) register accessor: prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psc`] module"]
#[doc (alias = "PSC")] pub type Psc = crate :: Reg < psc :: PscSpec > ;
#[doc = "prescaler"] pub mod psc {
#[doc = "Register `PSC` reader"] pub type R = crate :: R < PscSpec > ;
#[doc = "Register `PSC` writer"] pub type W = crate :: W < PscSpec > ;
#[doc = "Field `PSC` reader - Prescaler value"] pub type PscR = crate :: FieldReader < u16 > ;
#[doc = "Field `PSC` writer - Prescaler value"] pub type PscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& self) -> PscR { PscR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& mut self) -> PscW < '_ , PscSpec > { PscW :: new (self , 0) } }
#[doc = "prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PscSpec ; impl crate :: RegisterSpec for PscSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`psc::R`](R) reader structure"] impl crate :: Readable for PscSpec { }
#[doc = "`write(|w| ..)` method takes [`psc::W`](W) writer structure"] impl crate :: Writable for PscSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PSC to value 0"] impl crate :: Resettable for PscSpec { } }
#[doc = "ARR (rw) register accessor: auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@arr`] module"]
#[doc (alias = "ARR")] pub type Arr = crate :: Reg < arr :: ArrSpec > ;
#[doc = "auto-reload register"] pub mod arr {
#[doc = "Register `ARR` reader"] pub type R = crate :: R < ArrSpec > ;
#[doc = "Register `ARR` writer"] pub type W = crate :: W < ArrSpec > ;
#[doc = "Field `ARR` reader - Auto reload value"] pub type ArrR = crate :: FieldReader < u16 > ;
#[doc = "Field `ARR` writer - Auto reload value"] pub type ArrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Auto reload value"]
#[inline (always)] pub fn arr (& self) -> ArrR { ArrR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Auto reload value"]
#[inline (always)] pub fn arr (& mut self) -> ArrW < '_ , ArrSpec > { ArrW :: new (self , 0) } }
#[doc = "auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ArrSpec ; impl crate :: RegisterSpec for ArrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`arr::R`](R) reader structure"] impl crate :: Readable for ArrSpec { }
#[doc = "`write(|w| ..)` method takes [`arr::W`](W) writer structure"] impl crate :: Writable for ArrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ARR to value 0"] impl crate :: Resettable for ArrSpec { } }
#[doc = "RCR (rw) register accessor: repetition counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`rcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rcr`] module"]
#[doc (alias = "RCR")] pub type Rcr = crate :: Reg < rcr :: RcrSpec > ;
#[doc = "repetition counter register"] pub mod rcr {
#[doc = "Register `RCR` reader"] pub type R = crate :: R < RcrSpec > ;
#[doc = "Register `RCR` writer"] pub type W = crate :: W < RcrSpec > ;
#[doc = "Field `REP` reader - Repetition counter value"] pub type RepR = crate :: FieldReader ;
#[doc = "Field `REP` writer - Repetition counter value"] pub type RepW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ;
#[doc = "Field `REP_CNT` reader - Repetition counter value of real-time writing"] pub type RepCntR = crate :: FieldReader ;
#[doc = "Field `REP_CNT` writer - Repetition counter value of real-time writing"] pub type RepCntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Repetition counter value"]
#[inline (always)] pub fn rep (& self) -> RepR { RepR :: new ((self . bits & 0xff) as u8) }
#[doc = "Bits 8:15 - Repetition counter value of real-time writing"]
#[inline (always)] pub fn rep_cnt (& self) -> RepCntR { RepCntR :: new (((self . bits >> 8) & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Repetition counter value"]
#[inline (always)] pub fn rep (& mut self) -> RepW < '_ , RcrSpec > { RepW :: new (self , 0) }
#[doc = "Bits 8:15 - Repetition counter value of real-time writing"]
#[inline (always)] pub fn rep_cnt (& mut self) -> RepCntW < '_ , RcrSpec > { RepCntW :: new (self , 8) } }
#[doc = "repetition counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`rcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RcrSpec ; impl crate :: RegisterSpec for RcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rcr::R`](R) reader structure"] impl crate :: Readable for RcrSpec { }
#[doc = "`write(|w| ..)` method takes [`rcr::W`](W) writer structure"] impl crate :: Writable for RcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RCR to value 0"] impl crate :: Resettable for RcrSpec { } }
#[doc = "CCR1 (rw) register accessor: capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr1`] module"]
#[doc (alias = "CCR1")] pub type Ccr1 = crate :: Reg < ccr1 :: Ccr1Spec > ;
#[doc = "capture/compare register 1"] pub mod ccr1 {
#[doc = "Register `CCR1` reader"] pub type R = crate :: R < Ccr1Spec > ;
#[doc = "Register `CCR1` writer"] pub type W = crate :: W < Ccr1Spec > ;
#[doc = "Field `CCR1` reader - Capture/Compare 1 value"] pub type Ccr1R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR1` writer - Capture/Compare 1 value"] pub type Ccr1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& self) -> Ccr1R { Ccr1R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& mut self) -> Ccr1W < '_ , Ccr1Spec > { Ccr1W :: new (self , 0) } }
#[doc = "capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr1Spec ; impl crate :: RegisterSpec for Ccr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr1::R`](R) reader structure"] impl crate :: Readable for Ccr1Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr1::W`](W) writer structure"] impl crate :: Writable for Ccr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR1 to value 0"] impl crate :: Resettable for Ccr1Spec { } }
#[doc = "CCR2 (rw) register accessor: capture/compare register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr2`] module"]
#[doc (alias = "CCR2")] pub type Ccr2 = crate :: Reg < ccr2 :: Ccr2Spec > ;
#[doc = "capture/compare register 2"] pub mod ccr2 {
#[doc = "Register `CCR2` reader"] pub type R = crate :: R < Ccr2Spec > ;
#[doc = "Register `CCR2` writer"] pub type W = crate :: W < Ccr2Spec > ;
#[doc = "Field `CCR2` reader - Capture/Compare 2 value"] pub type Ccr2R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR2` writer - Capture/Compare 2 value"] pub type Ccr2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 2 value"]
#[inline (always)] pub fn ccr2 (& self) -> Ccr2R { Ccr2R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 2 value"]
#[inline (always)] pub fn ccr2 (& mut self) -> Ccr2W < '_ , Ccr2Spec > { Ccr2W :: new (self , 0) } }
#[doc = "capture/compare register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr2Spec ; impl crate :: RegisterSpec for Ccr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr2::R`](R) reader structure"] impl crate :: Readable for Ccr2Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr2::W`](W) writer structure"] impl crate :: Writable for Ccr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR2 to value 0"] impl crate :: Resettable for Ccr2Spec { } }
#[doc = "CCR3 (rw) register accessor: capture/compare register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr3`] module"]
#[doc (alias = "CCR3")] pub type Ccr3 = crate :: Reg < ccr3 :: Ccr3Spec > ;
#[doc = "capture/compare register 3"] pub mod ccr3 {
#[doc = "Register `CCR3` reader"] pub type R = crate :: R < Ccr3Spec > ;
#[doc = "Register `CCR3` writer"] pub type W = crate :: W < Ccr3Spec > ;
#[doc = "Field `CCR3` reader - Capture/Compare 3 value"] pub type Ccr3R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR3` writer - Capture/Compare 3 value"] pub type Ccr3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 3 value"]
#[inline (always)] pub fn ccr3 (& self) -> Ccr3R { Ccr3R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 3 value"]
#[inline (always)] pub fn ccr3 (& mut self) -> Ccr3W < '_ , Ccr3Spec > { Ccr3W :: new (self , 0) } }
#[doc = "capture/compare register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr3Spec ; impl crate :: RegisterSpec for Ccr3Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr3::R`](R) reader structure"] impl crate :: Readable for Ccr3Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr3::W`](W) writer structure"] impl crate :: Writable for Ccr3Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR3 to value 0"] impl crate :: Resettable for Ccr3Spec { } }
#[doc = "CCR4 (rw) register accessor: capture/compare register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr4`] module"]
#[doc (alias = "CCR4")] pub type Ccr4 = crate :: Reg < ccr4 :: Ccr4Spec > ;
#[doc = "capture/compare register 4"] pub mod ccr4 {
#[doc = "Register `CCR4` reader"] pub type R = crate :: R < Ccr4Spec > ;
#[doc = "Register `CCR4` writer"] pub type W = crate :: W < Ccr4Spec > ;
#[doc = "Field `CCR4` reader - Capture/Compare 4 value"] pub type Ccr4R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR4` writer - Capture/Compare 4 value"] pub type Ccr4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 4 value"]
#[inline (always)] pub fn ccr4 (& self) -> Ccr4R { Ccr4R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 4 value"]
#[inline (always)] pub fn ccr4 (& mut self) -> Ccr4W < '_ , Ccr4Spec > { Ccr4W :: new (self , 0) } }
#[doc = "capture/compare register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr4::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr4::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr4Spec ; impl crate :: RegisterSpec for Ccr4Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr4::R`](R) reader structure"] impl crate :: Readable for Ccr4Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr4::W`](W) writer structure"] impl crate :: Writable for Ccr4Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR4 to value 0"] impl crate :: Resettable for Ccr4Spec { } }
#[doc = "BDTR (rw) register accessor: break and dead-time register\n\nYou can [`read`](crate::Reg::read) this register and get [`bdtr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bdtr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bdtr`] module"]
#[doc (alias = "BDTR")] pub type Bdtr = crate :: Reg < bdtr :: BdtrSpec > ;
#[doc = "break and dead-time register"] pub mod bdtr {
#[doc = "Register `BDTR` reader"] pub type R = crate :: R < BdtrSpec > ;
#[doc = "Register `BDTR` writer"] pub type W = crate :: W < BdtrSpec > ;
#[doc = "Field `DTG` reader - Dead-time generator setup"] pub type DtgR = crate :: FieldReader ;
#[doc = "Field `DTG` writer - Dead-time generator setup"] pub type DtgW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ;
#[doc = "Field `LOCK` reader - Lock configuration"] pub type LockR = crate :: FieldReader ;
#[doc = "Field `LOCK` writer - Lock configuration"] pub type LockW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OSSI` reader - Off-state selection for Idle mode"] pub type OssiR = crate :: BitReader ;
#[doc = "Field `OSSI` writer - Off-state selection for Idle mode"] pub type OssiW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OSSR` reader - Off-state selection for Run mode"] pub type OssrR = crate :: BitReader ;
#[doc = "Field `OSSR` writer - Off-state selection for Run mode"] pub type OssrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BKE` reader - Break enable"] pub type BkeR = crate :: BitReader ;
#[doc = "Field `BKE` writer - Break enable"] pub type BkeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BKP` reader - Break polarity"] pub type BkpR = crate :: BitReader ;
#[doc = "Field `BKP` writer - Break polarity"] pub type BkpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `AOE` reader - Automatic output enable"] pub type AoeR = crate :: BitReader ;
#[doc = "Field `AOE` writer - Automatic output enable"] pub type AoeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MOE` reader - Main output enable"] pub type MoeR = crate :: BitReader ;
#[doc = "Field `MOE` writer - Main output enable"] pub type MoeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DOE` reader - Direct output enable"] pub type DoeR = crate :: BitReader ;
#[doc = "Field `DOE` writer - Direct output enable"] pub type DoeW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:7 - Dead-time generator setup"]
#[inline (always)] pub fn dtg (& self) -> DtgR { DtgR :: new ((self . bits & 0xff) as u8) }
#[doc = "Bits 8:9 - Lock configuration"]
#[inline (always)] pub fn lock (& self) -> LockR { LockR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bit 10 - Off-state selection for Idle mode"]
#[inline (always)] pub fn ossi (& self) -> OssiR { OssiR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Off-state selection for Run mode"]
#[inline (always)] pub fn ossr (& self) -> OssrR { OssrR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Break enable"]
#[inline (always)] pub fn bke (& self) -> BkeR { BkeR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Break polarity"]
#[inline (always)] pub fn bkp (& self) -> BkpR { BkpR :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - Automatic output enable"]
#[inline (always)] pub fn aoe (& self) -> AoeR { AoeR :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Main output enable"]
#[inline (always)] pub fn moe (& self) -> MoeR { MoeR :: new (((self . bits >> 15) & 1) != 0) }
#[doc = "Bit 16 - Direct output enable"]
#[inline (always)] pub fn doe (& self) -> DoeR { DoeR :: new (((self . bits >> 16) & 1) != 0) } } impl W {
#[doc = "Bits 0:7 - Dead-time generator setup"]
#[inline (always)] pub fn dtg (& mut self) -> DtgW < '_ , BdtrSpec > { DtgW :: new (self , 0) }
#[doc = "Bits 8:9 - Lock configuration"]
#[inline (always)] pub fn lock (& mut self) -> LockW < '_ , BdtrSpec > { LockW :: new (self , 8) }
#[doc = "Bit 10 - Off-state selection for Idle mode"]
#[inline (always)] pub fn ossi (& mut self) -> OssiW < '_ , BdtrSpec > { OssiW :: new (self , 10) }
#[doc = "Bit 11 - Off-state selection for Run mode"]
#[inline (always)] pub fn ossr (& mut self) -> OssrW < '_ , BdtrSpec > { OssrW :: new (self , 11) }
#[doc = "Bit 12 - Break enable"]
#[inline (always)] pub fn bke (& mut self) -> BkeW < '_ , BdtrSpec > { BkeW :: new (self , 12) }
#[doc = "Bit 13 - Break polarity"]
#[inline (always)] pub fn bkp (& mut self) -> BkpW < '_ , BdtrSpec > { BkpW :: new (self , 13) }
#[doc = "Bit 14 - Automatic output enable"]
#[inline (always)] pub fn aoe (& mut self) -> AoeW < '_ , BdtrSpec > { AoeW :: new (self , 14) }
#[doc = "Bit 15 - Main output enable"]
#[inline (always)] pub fn moe (& mut self) -> MoeW < '_ , BdtrSpec > { MoeW :: new (self , 15) }
#[doc = "Bit 16 - Direct output enable"]
#[inline (always)] pub fn doe (& mut self) -> DoeW < '_ , BdtrSpec > { DoeW :: new (self , 16) } }
#[doc = "break and dead-time register\n\nYou can [`read`](crate::Reg::read) this register and get [`bdtr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bdtr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BdtrSpec ; impl crate :: RegisterSpec for BdtrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`bdtr::R`](R) reader structure"] impl crate :: Readable for BdtrSpec { }
#[doc = "`write(|w| ..)` method takes [`bdtr::W`](W) writer structure"] impl crate :: Writable for BdtrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets BDTR to value 0"] impl crate :: Resettable for BdtrSpec { } }
#[doc = "DCR (w) register accessor: DMA control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dcr`] module"]
#[doc (alias = "DCR")] pub type Dcr = crate :: Reg < dcr :: DcrSpec > ;
#[doc = "DMA control register"] pub mod dcr {
#[doc = "Register `DCR` writer"] pub type W = crate :: W < DcrSpec > ;
#[doc = "Field `DBA` writer - DMA base address"] pub type DbaW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ;
#[doc = "Field `DBL` writer - DMA burst length"] pub type DblW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ; impl W {
#[doc = "Bits 0:4 - DMA base address"]
#[inline (always)] pub fn dba (& mut self) -> DbaW < '_ , DcrSpec > { DbaW :: new (self , 0) }
#[doc = "Bits 8:12 - DMA burst length"]
#[inline (always)] pub fn dbl (& mut self) -> DblW < '_ , DcrSpec > { DblW :: new (self , 8) } }
#[doc = "DMA control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DcrSpec ; impl crate :: RegisterSpec for DcrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`dcr::W`](W) writer structure"] impl crate :: Writable for DcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DCR to value 0"] impl crate :: Resettable for DcrSpec { } }
#[doc = "DMAR (w) register accessor: DMA address for full transfer\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmar::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmar`] module"]
#[doc (alias = "DMAR")] pub type Dmar = crate :: Reg < dmar :: DmarSpec > ;
#[doc = "DMA address for full transfer"] pub mod dmar {
#[doc = "Register `DMAR` writer"] pub type W = crate :: W < DmarSpec > ;
#[doc = "Field `DMAB` writer - DMA register for burst accesses"] pub type DmabW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl W {
#[doc = "Bits 0:15 - DMA register for burst accesses"]
#[inline (always)] pub fn dmab (& mut self) -> DmabW < '_ , DmarSpec > { DmabW :: new (self , 0) } }
#[doc = "DMA address for full transfer\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmar::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmarSpec ; impl crate :: RegisterSpec for DmarSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`dmar::W`](W) writer structure"] impl crate :: Writable for DmarSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMAR to value 0"] impl crate :: Resettable for DmarSpec { } }
#[doc = "CCMR3_Output (rw) register accessor: capture/compare mode register 3 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr3_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr3_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr3_output`] module"]
#[doc (alias = "CCMR3_Output")] pub type Ccmr3Output = crate :: Reg < ccmr3_output :: Ccmr3OutputSpec > ;
#[doc = "capture/compare mode register 3 (output mode)"] pub mod ccmr3_output {
#[doc = "Register `CCMR3_Output` reader"] pub type R = crate :: R < Ccmr3OutputSpec > ;
#[doc = "Register `CCMR3_Output` writer"] pub type W = crate :: W < Ccmr3OutputSpec > ;
#[doc = "Field `OC5FE` reader - Output compare 5 fast enable"] pub type Oc5feR = crate :: BitReader ;
#[doc = "Field `OC5FE` writer - Output compare 5 fast enable"] pub type Oc5feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC5PE` reader - Output compare 5 preload enable"] pub type Oc5peR = crate :: BitReader ;
#[doc = "Field `OC5PE` writer - Output compare 5 preload enable"] pub type Oc5peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC5M` reader - Output compare 5 mode"] pub type Oc5mR = crate :: FieldReader ;
#[doc = "Field `OC5M` writer - Output compare 5 mode"] pub type Oc5mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC5CE` reader - Output compare 5 clear enable"] pub type Oc5ceR = crate :: BitReader ;
#[doc = "Field `OC5CE` writer - Output compare 5 clear enable"] pub type Oc5ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 2 - Output compare 5 fast enable"]
#[inline (always)] pub fn oc5fe (& self) -> Oc5feR { Oc5feR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Output compare 5 preload enable"]
#[inline (always)] pub fn oc5pe (& self) -> Oc5peR { Oc5peR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Output compare 5 mode"]
#[inline (always)] pub fn oc5m (& self) -> Oc5mR { Oc5mR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Output compare 5 clear enable"]
#[inline (always)] pub fn oc5ce (& self) -> Oc5ceR { Oc5ceR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 2 - Output compare 5 fast enable"]
#[inline (always)] pub fn oc5fe (& mut self) -> Oc5feW < '_ , Ccmr3OutputSpec > { Oc5feW :: new (self , 2) }
#[doc = "Bit 3 - Output compare 5 preload enable"]
#[inline (always)] pub fn oc5pe (& mut self) -> Oc5peW < '_ , Ccmr3OutputSpec > { Oc5peW :: new (self , 3) }
#[doc = "Bits 4:6 - Output compare 5 mode"]
#[inline (always)] pub fn oc5m (& mut self) -> Oc5mW < '_ , Ccmr3OutputSpec > { Oc5mW :: new (self , 4) }
#[doc = "Bit 7 - Output compare 5 clear enable"]
#[inline (always)] pub fn oc5ce (& mut self) -> Oc5ceW < '_ , Ccmr3OutputSpec > { Oc5ceW :: new (self , 7) } }
#[doc = "capture/compare mode register 3 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr3_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr3_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr3OutputSpec ; impl crate :: RegisterSpec for Ccmr3OutputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr3_output::R`](R) reader structure"] impl crate :: Readable for Ccmr3OutputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr3_output::W`](W) writer structure"] impl crate :: Writable for Ccmr3OutputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR3_Output to value 0"] impl crate :: Resettable for Ccmr3OutputSpec { } }
#[doc = "CCR5 (rw) register accessor: capture/compare register 5\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr5::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr5::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr5`] module"]
#[doc (alias = "CCR5")] pub type Ccr5 = crate :: Reg < ccr5 :: Ccr5Spec > ;
#[doc = "capture/compare register 5"] pub mod ccr5 {
#[doc = "Register `CCR5` reader"] pub type R = crate :: R < Ccr5Spec > ;
#[doc = "Register `CCR5` writer"] pub type W = crate :: W < Ccr5Spec > ;
#[doc = "Field `CCR5` reader - Capture/Compare 5 value"] pub type Ccr5R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR5` writer - Capture/Compare 5 value"] pub type Ccr5W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 5 value"]
#[inline (always)] pub fn ccr5 (& self) -> Ccr5R { Ccr5R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 5 value"]
#[inline (always)] pub fn ccr5 (& mut self) -> Ccr5W < '_ , Ccr5Spec > { Ccr5W :: new (self , 0) } }
#[doc = "capture/compare register 5\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr5::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr5::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr5Spec ; impl crate :: RegisterSpec for Ccr5Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr5::R`](R) reader structure"] impl crate :: Readable for Ccr5Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr5::W`](W) writer structure"] impl crate :: Writable for Ccr5Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR5 to value 0"] impl crate :: Resettable for Ccr5Spec { } }
#[doc = "PDER (rw) register accessor: PWM/DMA repeat enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`pder::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pder::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pder`] module"]
#[doc (alias = "PDER")] pub type Pder = crate :: Reg < pder :: PderSpec > ;
#[doc = "PWM/DMA repeat enable register"] pub mod pder {
#[doc = "Register `PDER` reader"] pub type R = crate :: R < PderSpec > ;
#[doc = "Register `PDER` writer"] pub type W = crate :: W < PderSpec > ;
#[doc = "Field `CCDREPE` reader - DMA request flow enable"] pub type CcdrepeR = crate :: BitReader ;
#[doc = "Field `CCDREPE` writer - DMA request flow enable"] pub type CcdrepeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCR1SHIFTEN` reader - CCR1 pwm shift enable"] pub type Ccr1shiftenR = crate :: BitReader ;
#[doc = "Field `CCR1SHIFTEN` writer - CCR1 pwm shift enable"] pub type Ccr1shiftenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCR2SHIFTEN` reader - CCR2 pwm shift enable"] pub type Ccr2shiftenR = crate :: BitReader ;
#[doc = "Field `CCR2SHIFTEN` writer - CCR2 pwm shift enable"] pub type Ccr2shiftenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCR3SHIFTEN` reader - CCR3 pwm shift enable"] pub type Ccr3shiftenR = crate :: BitReader ;
#[doc = "Field `CCR3SHIFTEN` writer - CCR3 pwm shift enable"] pub type Ccr3shiftenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCR4SHIFTEN` reader - CCR4 pwm shift enable"] pub type Ccr4shiftenR = crate :: BitReader ;
#[doc = "Field `CCR4SHIFTEN` writer - CCR4 pwm shift enable"] pub type Ccr4shiftenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCR5SHIFTEN` reader - CCR5 pwm shift enable"] pub type Ccr5shiftenR = crate :: BitReader ;
#[doc = "Field `CCR5SHIFTEN` writer - CCR5 pwm shift enable"] pub type Ccr5shiftenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - DMA request flow enable"]
#[inline (always)] pub fn ccdrepe (& self) -> CcdrepeR { CcdrepeR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - CCR1 pwm shift enable"]
#[inline (always)] pub fn ccr1shiften (& self) -> Ccr1shiftenR { Ccr1shiftenR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - CCR2 pwm shift enable"]
#[inline (always)] pub fn ccr2shiften (& self) -> Ccr2shiftenR { Ccr2shiftenR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - CCR3 pwm shift enable"]
#[inline (always)] pub fn ccr3shiften (& self) -> Ccr3shiftenR { Ccr3shiftenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - CCR4 pwm shift enable"]
#[inline (always)] pub fn ccr4shiften (& self) -> Ccr4shiftenR { Ccr4shiftenR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - CCR5 pwm shift enable"]
#[inline (always)] pub fn ccr5shiften (& self) -> Ccr5shiftenR { Ccr5shiftenR :: new (((self . bits >> 5) & 1) != 0) } } impl W {
#[doc = "Bit 0 - DMA request flow enable"]
#[inline (always)] pub fn ccdrepe (& mut self) -> CcdrepeW < '_ , PderSpec > { CcdrepeW :: new (self , 0) }
#[doc = "Bit 1 - CCR1 pwm shift enable"]
#[inline (always)] pub fn ccr1shiften (& mut self) -> Ccr1shiftenW < '_ , PderSpec > { Ccr1shiftenW :: new (self , 1) }
#[doc = "Bit 2 - CCR2 pwm shift enable"]
#[inline (always)] pub fn ccr2shiften (& mut self) -> Ccr2shiftenW < '_ , PderSpec > { Ccr2shiftenW :: new (self , 2) }
#[doc = "Bit 3 - CCR3 pwm shift enable"]
#[inline (always)] pub fn ccr3shiften (& mut self) -> Ccr3shiftenW < '_ , PderSpec > { Ccr3shiftenW :: new (self , 3) }
#[doc = "Bit 4 - CCR4 pwm shift enable"]
#[inline (always)] pub fn ccr4shiften (& mut self) -> Ccr4shiftenW < '_ , PderSpec > { Ccr4shiftenW :: new (self , 4) }
#[doc = "Bit 5 - CCR5 pwm shift enable"]
#[inline (always)] pub fn ccr5shiften (& mut self) -> Ccr5shiftenW < '_ , PderSpec > { Ccr5shiftenW :: new (self , 5) } }
#[doc = "PWM/DMA repeat enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`pder::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pder::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PderSpec ; impl crate :: RegisterSpec for PderSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`pder::R`](R) reader structure"] impl crate :: Readable for PderSpec { }
#[doc = "`write(|w| ..)` method takes [`pder::W`](W) writer structure"] impl crate :: Writable for PderSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PDER to value 0"] impl crate :: Resettable for PderSpec { } }
#[doc = "CCR1FALL (rw) register accessor: pwm shift count CCR1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1fall::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1fall::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr1fall`] module"]
#[doc (alias = "CCR1FALL")] pub type Ccr1fall = crate :: Reg < ccr1fall :: Ccr1fallSpec > ;
#[doc = "pwm shift count CCR1 register"] pub mod ccr1fall {
#[doc = "Register `CCR1FALL` reader"] pub type R = crate :: R < Ccr1fallSpec > ;
#[doc = "Register `CCR1FALL` writer"] pub type W = crate :: W < Ccr1fallSpec > ;
#[doc = "Field `CCR1FALL` reader - Capture/compare value for ch1 when counting down in PWM center-aligned mode"] pub type Ccr1fallR = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR1FALL` writer - Capture/compare value for ch1 when counting down in PWM center-aligned mode"] pub type Ccr1fallW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/compare value for ch1 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr1fall (& self) -> Ccr1fallR { Ccr1fallR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/compare value for ch1 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr1fall (& mut self) -> Ccr1fallW < '_ , Ccr1fallSpec > { Ccr1fallW :: new (self , 0) } }
#[doc = "pwm shift count CCR1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1fall::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1fall::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr1fallSpec ; impl crate :: RegisterSpec for Ccr1fallSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr1fall::R`](R) reader structure"] impl crate :: Readable for Ccr1fallSpec { }
#[doc = "`write(|w| ..)` method takes [`ccr1fall::W`](W) writer structure"] impl crate :: Writable for Ccr1fallSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR1FALL to value 0"] impl crate :: Resettable for Ccr1fallSpec { } }
#[doc = "CCR2FALL (rw) register accessor: pwm shift count CCR2 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr2fall::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr2fall::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr2fall`] module"]
#[doc (alias = "CCR2FALL")] pub type Ccr2fall = crate :: Reg < ccr2fall :: Ccr2fallSpec > ;
#[doc = "pwm shift count CCR2 register"] pub mod ccr2fall {
#[doc = "Register `CCR2FALL` reader"] pub type R = crate :: R < Ccr2fallSpec > ;
#[doc = "Register `CCR2FALL` writer"] pub type W = crate :: W < Ccr2fallSpec > ;
#[doc = "Field `CCR2FALL` reader - Capture/compare value for ch2 when counting down in PWM center-aligned mode"] pub type Ccr2fallR = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR2FALL` writer - Capture/compare value for ch2 when counting down in PWM center-aligned mode"] pub type Ccr2fallW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/compare value for ch2 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr2fall (& self) -> Ccr2fallR { Ccr2fallR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/compare value for ch2 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr2fall (& mut self) -> Ccr2fallW < '_ , Ccr2fallSpec > { Ccr2fallW :: new (self , 0) } }
#[doc = "pwm shift count CCR2 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr2fall::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr2fall::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr2fallSpec ; impl crate :: RegisterSpec for Ccr2fallSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr2fall::R`](R) reader structure"] impl crate :: Readable for Ccr2fallSpec { }
#[doc = "`write(|w| ..)` method takes [`ccr2fall::W`](W) writer structure"] impl crate :: Writable for Ccr2fallSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR2FALL to value 0"] impl crate :: Resettable for Ccr2fallSpec { } }
#[doc = "CCR3FALL (rw) register accessor: pwm shift count CCR3 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr3fall::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr3fall::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr3fall`] module"]
#[doc (alias = "CCR3FALL")] pub type Ccr3fall = crate :: Reg < ccr3fall :: Ccr3fallSpec > ;
#[doc = "pwm shift count CCR3 register"] pub mod ccr3fall {
#[doc = "Register `CCR3FALL` reader"] pub type R = crate :: R < Ccr3fallSpec > ;
#[doc = "Register `CCR3FALL` writer"] pub type W = crate :: W < Ccr3fallSpec > ;
#[doc = "Field `CCR3FALL` reader - Capture/compare value for ch3 when counting down in PWM center-aligned mode"] pub type Ccr3fallR = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR3FALL` writer - Capture/compare value for ch3 when counting down in PWM center-aligned mode"] pub type Ccr3fallW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/compare value for ch3 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr3fall (& self) -> Ccr3fallR { Ccr3fallR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/compare value for ch3 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr3fall (& mut self) -> Ccr3fallW < '_ , Ccr3fallSpec > { Ccr3fallW :: new (self , 0) } }
#[doc = "pwm shift count CCR3 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr3fall::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr3fall::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr3fallSpec ; impl crate :: RegisterSpec for Ccr3fallSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr3fall::R`](R) reader structure"] impl crate :: Readable for Ccr3fallSpec { }
#[doc = "`write(|w| ..)` method takes [`ccr3fall::W`](W) writer structure"] impl crate :: Writable for Ccr3fallSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR3FALL to value 0"] impl crate :: Resettable for Ccr3fallSpec { } }
#[doc = "CCR4FALL (rw) register accessor: pwm shift count CCR4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr4fall::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr4fall::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr4fall`] module"]
#[doc (alias = "CCR4FALL")] pub type Ccr4fall = crate :: Reg < ccr4fall :: Ccr4fallSpec > ;
#[doc = "pwm shift count CCR4 register"] pub mod ccr4fall {
#[doc = "Register `CCR4FALL` reader"] pub type R = crate :: R < Ccr4fallSpec > ;
#[doc = "Register `CCR4FALL` writer"] pub type W = crate :: W < Ccr4fallSpec > ;
#[doc = "Field `CCR4FALL` reader - Capture/compare value for ch4 when counting down in PWM center-aligned mode"] pub type Ccr4fallR = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR4FALL` writer - Capture/compare value for ch4 when counting down in PWM center-aligned mode"] pub type Ccr4fallW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/compare value for ch4 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr4fall (& self) -> Ccr4fallR { Ccr4fallR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/compare value for ch4 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr4fall (& mut self) -> Ccr4fallW < '_ , Ccr4fallSpec > { Ccr4fallW :: new (self , 0) } }
#[doc = "pwm shift count CCR4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr4fall::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr4fall::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr4fallSpec ; impl crate :: RegisterSpec for Ccr4fallSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr4fall::R`](R) reader structure"] impl crate :: Readable for Ccr4fallSpec { }
#[doc = "`write(|w| ..)` method takes [`ccr4fall::W`](W) writer structure"] impl crate :: Writable for Ccr4fallSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR4FALL to value 0"] impl crate :: Resettable for Ccr4fallSpec { } }
#[doc = "CCR5FALL (rw) register accessor: pwm shift count CCR5 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr5fall::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr5fall::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr5fall`] module"]
#[doc (alias = "CCR5FALL")] pub type Ccr5fall = crate :: Reg < ccr5fall :: Ccr5fallSpec > ;
#[doc = "pwm shift count CCR5 register"] pub mod ccr5fall {
#[doc = "Register `CCR5FALL` reader"] pub type R = crate :: R < Ccr5fallSpec > ;
#[doc = "Register `CCR5FALL` writer"] pub type W = crate :: W < Ccr5fallSpec > ;
#[doc = "Field `CCR5FALL` reader - Capture/compare value for ch5 when counting down in PWM center-aligned mode"] pub type Ccr5fallR = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR5FALL` writer - Capture/compare value for ch5 when counting down in PWM center-aligned mode"] pub type Ccr5fallW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/compare value for ch5 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr5fall (& self) -> Ccr5fallR { Ccr5fallR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/compare value for ch5 when counting down in PWM center-aligned mode"]
#[inline (always)] pub fn ccr5fall (& mut self) -> Ccr5fallW < '_ , Ccr5fallSpec > { Ccr5fallW :: new (self , 0) } }
#[doc = "pwm shift count CCR5 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr5fall::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr5fall::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr5fallSpec ; impl crate :: RegisterSpec for Ccr5fallSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr5fall::R`](R) reader structure"] impl crate :: Readable for Ccr5fallSpec { }
#[doc = "`write(|w| ..)` method takes [`ccr5fall::W`](W) writer structure"] impl crate :: Writable for Ccr5fallSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR5FALL to value 0"] impl crate :: Resettable for Ccr5fallSpec { } } }
#[doc = "General purpose timer"] pub type Tim2 = crate :: Periph < tim2 :: RegisterBlock , 0x4000_0000 > ; impl core :: fmt :: Debug for Tim2 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Tim2") . finish () } }
#[doc = "General purpose timer"] pub mod tim2 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cr1 : Cr1 , cr2 : Cr2 , smcr : Smcr , dier : Dier , sr : Sr , egr : Egr , _reserved_6_ccmr1 : [u8 ; 0x04] , _reserved_7_ccmr2 : [u8 ; 0x04] , ccer : Ccer , cnt : Cnt , psc : Psc , arr : Arr , _reserved12 : [u8 ; 0x04] , ccr1 : Ccr1 , ccr2 : Ccr2 , ccr3 : Ccr3 , ccr4 : Ccr4 , _reserved16 : [u8 ; 0x04] , dcr : Dcr , dmar : Dmar , } impl RegisterBlock {
#[doc = "0x00 - control register 1"]
#[inline (always)] pub const fn cr1 (& self) -> & Cr1 { & self . cr1 }
#[doc = "0x04 - control register 2"]
#[inline (always)] pub const fn cr2 (& self) -> & Cr2 { & self . cr2 }
#[doc = "0x08 - slave mode control register 1"]
#[inline (always)] pub const fn smcr (& self) -> & Smcr { & self . smcr }
#[doc = "0x0c - DMA/Interrupt enable register"]
#[inline (always)] pub const fn dier (& self) -> & Dier { & self . dier }
#[doc = "0x10 - status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x14 - event generation register"]
#[inline (always)] pub const fn egr (& self) -> & Egr { & self . egr }
#[doc = "0x18 - capture/compare mode register 1 (input mode)"]
#[inline (always)] pub const fn ccmr1_input (& self) -> & Ccmr1Input { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x18 - capture/compare mode register 1 (output mode)"]
#[inline (always)] pub const fn ccmr1_output (& self) -> & Ccmr1Output { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x1c - capture/compare mode register 2 (input mode)"]
#[inline (always)] pub const fn ccmr2_input (& self) -> & Ccmr2Input { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (28) . cast () } }
#[doc = "0x1c - capture/compare mode register 2(output mode)"]
#[inline (always)] pub const fn ccmr2_output (& self) -> & Ccmr2Output { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (28) . cast () } }
#[doc = "0x20 - capture/compare enable register"]
#[inline (always)] pub const fn ccer (& self) -> & Ccer { & self . ccer }
#[doc = "0x24 - counter"]
#[inline (always)] pub const fn cnt (& self) -> & Cnt { & self . cnt }
#[doc = "0x28 - prescaler"]
#[inline (always)] pub const fn psc (& self) -> & Psc { & self . psc }
#[doc = "0x2c - auto-reload register"]
#[inline (always)] pub const fn arr (& self) -> & Arr { & self . arr }
#[doc = "0x34 - capture/compare register 1"]
#[inline (always)] pub const fn ccr1 (& self) -> & Ccr1 { & self . ccr1 }
#[doc = "0x38 - capture/compare register 2"]
#[inline (always)] pub const fn ccr2 (& self) -> & Ccr2 { & self . ccr2 }
#[doc = "0x3c - capture/compare register 3"]
#[inline (always)] pub const fn ccr3 (& self) -> & Ccr3 { & self . ccr3 }
#[doc = "0x40 - capture/compare register 4"]
#[inline (always)] pub const fn ccr4 (& self) -> & Ccr4 { & self . ccr4 }
#[doc = "0x48 - DMA control register"]
#[inline (always)] pub const fn dcr (& self) -> & Dcr { & self . dcr }
#[doc = "0x4c - DMA address for full transfer"]
#[inline (always)] pub const fn dmar (& self) -> & Dmar { & self . dmar } }
#[doc = "CR1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr1`] module"]
#[doc (alias = "CR1")] pub type Cr1 = crate :: Reg < cr1 :: Cr1Spec > ;
#[doc = "control register 1"] pub mod cr1 {
#[doc = "Register `CR1` reader"] pub type R = crate :: R < Cr1Spec > ;
#[doc = "Register `CR1` writer"] pub type W = crate :: W < Cr1Spec > ;
#[doc = "Field `CEN` reader - Counter enable"] pub type CenR = crate :: BitReader ;
#[doc = "Field `CEN` writer - Counter enable"] pub type CenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UDIS` reader - Update disable"] pub type UdisR = crate :: BitReader ;
#[doc = "Field `UDIS` writer - Update disable"] pub type UdisW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `URS` reader - Update request source"] pub type UrsR = crate :: BitReader ;
#[doc = "Field `URS` writer - Update request source"] pub type UrsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OPM` reader - One pulse mode"] pub type OpmR = crate :: BitReader ;
#[doc = "Field `OPM` writer - One pulse mode"] pub type OpmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DIR` reader - Direction"] pub type DirR = crate :: BitReader ;
#[doc = "Field `DIR` writer - Direction"] pub type DirW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CMS` reader - Center-aligned mode selection"] pub type CmsR = crate :: FieldReader ;
#[doc = "Field `CMS` writer - Center-aligned mode selection"] pub type CmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `ARPE` reader - Auto-reload preload enable"] pub type ArpeR = crate :: BitReader ;
#[doc = "Field `ARPE` writer - Auto-reload preload enable"] pub type ArpeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CKD` reader - Clock division"] pub type CkdR = crate :: FieldReader ;
#[doc = "Field `CKD` writer - Clock division"] pub type CkdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& self) -> CenR { CenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& self) -> UdisR { UdisR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& self) -> UrsR { UrsR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - One pulse mode"]
#[inline (always)] pub fn opm (& self) -> OpmR { OpmR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Direction"]
#[inline (always)] pub fn dir (& self) -> DirR { DirR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bits 5:6 - Center-aligned mode selection"]
#[inline (always)] pub fn cms (& self) -> CmsR { CmsR :: new (((self . bits >> 5) & 3) as u8) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& self) -> ArpeR { ArpeR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& self) -> CkdR { CkdR :: new (((self . bits >> 8) & 3) as u8) } } impl W {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& mut self) -> CenW < '_ , Cr1Spec > { CenW :: new (self , 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& mut self) -> UdisW < '_ , Cr1Spec > { UdisW :: new (self , 1) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& mut self) -> UrsW < '_ , Cr1Spec > { UrsW :: new (self , 2) }
#[doc = "Bit 3 - One pulse mode"]
#[inline (always)] pub fn opm (& mut self) -> OpmW < '_ , Cr1Spec > { OpmW :: new (self , 3) }
#[doc = "Bit 4 - Direction"]
#[inline (always)] pub fn dir (& mut self) -> DirW < '_ , Cr1Spec > { DirW :: new (self , 4) }
#[doc = "Bits 5:6 - Center-aligned mode selection"]
#[inline (always)] pub fn cms (& mut self) -> CmsW < '_ , Cr1Spec > { CmsW :: new (self , 5) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& mut self) -> ArpeW < '_ , Cr1Spec > { ArpeW :: new (self , 7) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& mut self) -> CkdW < '_ , Cr1Spec > { CkdW :: new (self , 8) } }
#[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr1Spec ; impl crate :: RegisterSpec for Cr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr1::R`](R) reader structure"] impl crate :: Readable for Cr1Spec { }
#[doc = "`write(|w| ..)` method takes [`cr1::W`](W) writer structure"] impl crate :: Writable for Cr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR1 to value 0"] impl crate :: Resettable for Cr1Spec { } }
#[doc = "CR2 (rw) register accessor: control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr2`] module"]
#[doc (alias = "CR2")] pub type Cr2 = crate :: Reg < cr2 :: Cr2Spec > ;
#[doc = "control register 2"] pub mod cr2 {
#[doc = "Register `CR2` reader"] pub type R = crate :: R < Cr2Spec > ;
#[doc = "Register `CR2` writer"] pub type W = crate :: W < Cr2Spec > ;
#[doc = "Field `CCDS` reader - Capture/Compare DMA selection"] pub type CcdsR = crate :: BitReader ;
#[doc = "Field `CCDS` writer - Capture/Compare DMA selection"] pub type CcdsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MMS` reader - Master mode selection"] pub type MmsR = crate :: FieldReader ;
#[doc = "Field `MMS` writer - Master mode selection"] pub type MmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `TI1S` reader - TI1 selection"] pub type Ti1sR = crate :: BitReader ;
#[doc = "Field `TI1S` writer - TI1 selection"] pub type Ti1sW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 3 - Capture/Compare DMA selection"]
#[inline (always)] pub fn ccds (& self) -> CcdsR { CcdsR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Master mode selection"]
#[inline (always)] pub fn mms (& self) -> MmsR { MmsR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - TI1 selection"]
#[inline (always)] pub fn ti1s (& self) -> Ti1sR { Ti1sR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 3 - Capture/Compare DMA selection"]
#[inline (always)] pub fn ccds (& mut self) -> CcdsW < '_ , Cr2Spec > { CcdsW :: new (self , 3) }
#[doc = "Bits 4:6 - Master mode selection"]
#[inline (always)] pub fn mms (& mut self) -> MmsW < '_ , Cr2Spec > { MmsW :: new (self , 4) }
#[doc = "Bit 7 - TI1 selection"]
#[inline (always)] pub fn ti1s (& mut self) -> Ti1sW < '_ , Cr2Spec > { Ti1sW :: new (self , 7) } }
#[doc = "control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr2Spec ; impl crate :: RegisterSpec for Cr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr2::R`](R) reader structure"] impl crate :: Readable for Cr2Spec { }
#[doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"] impl crate :: Writable for Cr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR2 to value 0"] impl crate :: Resettable for Cr2Spec { } }
#[doc = "SMCR (rw) register accessor: slave mode control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`smcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@smcr`] module"]
#[doc (alias = "SMCR")] pub type Smcr = crate :: Reg < smcr :: SmcrSpec > ;
#[doc = "slave mode control register 1"] pub mod smcr {
#[doc = "Register `SMCR` reader"] pub type R = crate :: R < SmcrSpec > ;
#[doc = "Register `SMCR` writer"] pub type W = crate :: W < SmcrSpec > ;
#[doc = "Field `SMS` reader - Slave mode selection"] pub type SmsR = crate :: FieldReader ;
#[doc = "Field `SMS` writer - Slave mode selection"] pub type SmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OCCS` reader - Output compare clear selection"] pub type OccsR = crate :: BitReader ;
#[doc = "Field `OCCS` writer - Output compare clear selection"] pub type OccsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TS` reader - Trigger selection"] pub type TsR = crate :: FieldReader ;
#[doc = "Field `TS` writer - Trigger selection"] pub type TsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `MSM` reader - Master/slave mode"] pub type MsmR = crate :: BitReader ;
#[doc = "Field `MSM` writer - Master/slave mode"] pub type MsmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ETF` reader - External trigger filter"] pub type EtfR = crate :: FieldReader ;
#[doc = "Field `ETF` writer - External trigger filter"] pub type EtfW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `ETPS` reader - External trigger prescaler"] pub type EtpsR = crate :: FieldReader ;
#[doc = "Field `ETPS` writer - External trigger prescaler"] pub type EtpsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `ECE` reader - External clock enable"] pub type EceR = crate :: BitReader ;
#[doc = "Field `ECE` writer - External clock enable"] pub type EceW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ETP` reader - External trigger polarity"] pub type EtpR = crate :: BitReader ;
#[doc = "Field `ETP` writer - External trigger polarity"] pub type EtpW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:2 - Slave mode selection"]
#[inline (always)] pub fn sms (& self) -> SmsR { SmsR :: new ((self . bits & 7) as u8) }
#[doc = "Bit 3 - Output compare clear selection"]
#[inline (always)] pub fn occs (& self) -> OccsR { OccsR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Trigger selection"]
#[inline (always)] pub fn ts (& self) -> TsR { TsR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Master/slave mode"]
#[inline (always)] pub fn msm (& self) -> MsmR { MsmR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:11 - External trigger filter"]
#[inline (always)] pub fn etf (& self) -> EtfR { EtfR :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:13 - External trigger prescaler"]
#[inline (always)] pub fn etps (& self) -> EtpsR { EtpsR :: new (((self . bits >> 12) & 3) as u8) }
#[doc = "Bit 14 - External clock enable"]
#[inline (always)] pub fn ece (& self) -> EceR { EceR :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - External trigger polarity"]
#[inline (always)] pub fn etp (& self) -> EtpR { EtpR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:2 - Slave mode selection"]
#[inline (always)] pub fn sms (& mut self) -> SmsW < '_ , SmcrSpec > { SmsW :: new (self , 0) }
#[doc = "Bit 3 - Output compare clear selection"]
#[inline (always)] pub fn occs (& mut self) -> OccsW < '_ , SmcrSpec > { OccsW :: new (self , 3) }
#[doc = "Bits 4:6 - Trigger selection"]
#[inline (always)] pub fn ts (& mut self) -> TsW < '_ , SmcrSpec > { TsW :: new (self , 4) }
#[doc = "Bit 7 - Master/slave mode"]
#[inline (always)] pub fn msm (& mut self) -> MsmW < '_ , SmcrSpec > { MsmW :: new (self , 7) }
#[doc = "Bits 8:11 - External trigger filter"]
#[inline (always)] pub fn etf (& mut self) -> EtfW < '_ , SmcrSpec > { EtfW :: new (self , 8) }
#[doc = "Bits 12:13 - External trigger prescaler"]
#[inline (always)] pub fn etps (& mut self) -> EtpsW < '_ , SmcrSpec > { EtpsW :: new (self , 12) }
#[doc = "Bit 14 - External clock enable"]
#[inline (always)] pub fn ece (& mut self) -> EceW < '_ , SmcrSpec > { EceW :: new (self , 14) }
#[doc = "Bit 15 - External trigger polarity"]
#[inline (always)] pub fn etp (& mut self) -> EtpW < '_ , SmcrSpec > { EtpW :: new (self , 15) } }
#[doc = "slave mode control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`smcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SmcrSpec ; impl crate :: RegisterSpec for SmcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`smcr::R`](R) reader structure"] impl crate :: Readable for SmcrSpec { }
#[doc = "`write(|w| ..)` method takes [`smcr::W`](W) writer structure"] impl crate :: Writable for SmcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SMCR to value 0"] impl crate :: Resettable for SmcrSpec { } }
#[doc = "DIER (rw) register accessor: DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dier`] module"]
#[doc (alias = "DIER")] pub type Dier = crate :: Reg < dier :: DierSpec > ;
#[doc = "DMA/Interrupt enable register"] pub mod dier {
#[doc = "Register `DIER` reader"] pub type R = crate :: R < DierSpec > ;
#[doc = "Register `DIER` writer"] pub type W = crate :: W < DierSpec > ;
#[doc = "Field `UIE` reader - Update interrupt enable"] pub type UieR = crate :: BitReader ;
#[doc = "Field `UIE` writer - Update interrupt enable"] pub type UieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IE` reader - Capture/Compare 1 interrupt enable"] pub type Cc1ieR = crate :: BitReader ;
#[doc = "Field `CC1IE` writer - Capture/Compare 1 interrupt enable"] pub type Cc1ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2IE` reader - Capture/Compare 2 interrupt enable"] pub type Cc2ieR = crate :: BitReader ;
#[doc = "Field `CC2IE` writer - Capture/Compare 2 interrupt enable"] pub type Cc2ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3IE` reader - Capture/Compare 3 interrupt enable"] pub type Cc3ieR = crate :: BitReader ;
#[doc = "Field `CC3IE` writer - Capture/Compare 3 interrupt enable"] pub type Cc3ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4IE` reader - Capture/Compare 4 interrupt enable"] pub type Cc4ieR = crate :: BitReader ;
#[doc = "Field `CC4IE` writer - Capture/Compare 4 interrupt enable"] pub type Cc4ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIE` reader - Trigger interrupt enable"] pub type TieR = crate :: BitReader ;
#[doc = "Field `TIE` writer - Trigger interrupt enable"] pub type TieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UDE` reader - Update DMA request enable"] pub type UdeR = crate :: BitReader ;
#[doc = "Field `UDE` writer - Update DMA request enable"] pub type UdeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1DE` reader - Capture/Compare 1 DMA request enable"] pub type Cc1deR = crate :: BitReader ;
#[doc = "Field `CC1DE` writer - Capture/Compare 1 DMA request enable"] pub type Cc1deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2DE` reader - Capture/Compare 2 DMA request enable"] pub type Cc2deR = crate :: BitReader ;
#[doc = "Field `CC2DE` writer - Capture/Compare 2 DMA request enable"] pub type Cc2deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3DE` reader - Capture/Compare 3 DMA request enable"] pub type Cc3deR = crate :: BitReader ;
#[doc = "Field `CC3DE` writer - Capture/Compare 3 DMA request enable"] pub type Cc3deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4DE` reader - Capture/Compare 4 DMA request enable"] pub type Cc4deR = crate :: BitReader ;
#[doc = "Field `CC4DE` writer - Capture/Compare 4 DMA request enable"] pub type Cc4deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TDE` reader - Trigger DMA request enable"] pub type TdeR = crate :: BitReader ;
#[doc = "Field `TDE` writer - Trigger DMA request enable"] pub type TdeW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& self) -> UieR { UieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& self) -> Cc1ieR { Cc1ieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
#[inline (always)] pub fn cc2ie (& self) -> Cc2ieR { Cc2ieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
#[inline (always)] pub fn cc3ie (& self) -> Cc3ieR { Cc3ieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
#[inline (always)] pub fn cc4ie (& self) -> Cc4ieR { Cc4ieR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 6 - Trigger interrupt enable"]
#[inline (always)] pub fn tie (& self) -> TieR { TieR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 8 - Update DMA request enable"]
#[inline (always)] pub fn ude (& self) -> UdeR { UdeR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
#[inline (always)] pub fn cc1de (& self) -> Cc1deR { Cc1deR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
#[inline (always)] pub fn cc2de (& self) -> Cc2deR { Cc2deR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
#[inline (always)] pub fn cc3de (& self) -> Cc3deR { Cc3deR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
#[inline (always)] pub fn cc4de (& self) -> Cc4deR { Cc4deR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 14 - Trigger DMA request enable"]
#[inline (always)] pub fn tde (& self) -> TdeR { TdeR :: new (((self . bits >> 14) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& mut self) -> UieW < '_ , DierSpec > { UieW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& mut self) -> Cc1ieW < '_ , DierSpec > { Cc1ieW :: new (self , 1) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
#[inline (always)] pub fn cc2ie (& mut self) -> Cc2ieW < '_ , DierSpec > { Cc2ieW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
#[inline (always)] pub fn cc3ie (& mut self) -> Cc3ieW < '_ , DierSpec > { Cc3ieW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
#[inline (always)] pub fn cc4ie (& mut self) -> Cc4ieW < '_ , DierSpec > { Cc4ieW :: new (self , 4) }
#[doc = "Bit 6 - Trigger interrupt enable"]
#[inline (always)] pub fn tie (& mut self) -> TieW < '_ , DierSpec > { TieW :: new (self , 6) }
#[doc = "Bit 8 - Update DMA request enable"]
#[inline (always)] pub fn ude (& mut self) -> UdeW < '_ , DierSpec > { UdeW :: new (self , 8) }
#[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
#[inline (always)] pub fn cc1de (& mut self) -> Cc1deW < '_ , DierSpec > { Cc1deW :: new (self , 9) }
#[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
#[inline (always)] pub fn cc2de (& mut self) -> Cc2deW < '_ , DierSpec > { Cc2deW :: new (self , 10) }
#[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
#[inline (always)] pub fn cc3de (& mut self) -> Cc3deW < '_ , DierSpec > { Cc3deW :: new (self , 11) }
#[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
#[inline (always)] pub fn cc4de (& mut self) -> Cc4deW < '_ , DierSpec > { Cc4deW :: new (self , 12) }
#[doc = "Bit 14 - Trigger DMA request enable"]
#[inline (always)] pub fn tde (& mut self) -> TdeW < '_ , DierSpec > { TdeW :: new (self , 14) } }
#[doc = "DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DierSpec ; impl crate :: RegisterSpec for DierSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dier::R`](R) reader structure"] impl crate :: Readable for DierSpec { }
#[doc = "`write(|w| ..)` method takes [`dier::W`](W) writer structure"] impl crate :: Writable for DierSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DIER to value 0"] impl crate :: Resettable for DierSpec { } }
#[doc = "SR (rw) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ;
#[doc = "Field `UIF` reader - Update interrupt flag"] pub type UifR = crate :: BitReader ;
#[doc = "Field `UIF` writer - Update interrupt flag"] pub type UifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IF` reader - Capture/Compare 1 interrupt flag"] pub type Cc1ifR = crate :: BitReader ;
#[doc = "Field `CC1IF` writer - Capture/Compare 1 interrupt flag"] pub type Cc1ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2IF` reader - Capture/Compare 2 interrupt flag"] pub type Cc2ifR = crate :: BitReader ;
#[doc = "Field `CC2IF` writer - Capture/Compare 2 interrupt flag"] pub type Cc2ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3IF` reader - Capture/Compare 3 interrupt flag"] pub type Cc3ifR = crate :: BitReader ;
#[doc = "Field `CC3IF` writer - Capture/Compare 3 interrupt flag"] pub type Cc3ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4IF` reader - Capture/Compare 4 interrupt flag"] pub type Cc4ifR = crate :: BitReader ;
#[doc = "Field `CC4IF` writer - Capture/Compare 4 interrupt flag"] pub type Cc4ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIF` reader - Trigger interrupt flag"] pub type TifR = crate :: BitReader ;
#[doc = "Field `TIF` writer - Trigger interrupt flag"] pub type TifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1OF` reader - Capture/Compare 1 overcapture flag"] pub type Cc1ofR = crate :: BitReader ;
#[doc = "Field `CC1OF` writer - Capture/Compare 1 overcapture flag"] pub type Cc1ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2OF` reader - Capture/Compare 2 overcapture flag"] pub type Cc2ofR = crate :: BitReader ;
#[doc = "Field `CC2OF` writer - Capture/Compare 2 overcapture flag"] pub type Cc2ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3OF` reader - Capture/Compare 3 overcapture flag"] pub type Cc3ofR = crate :: BitReader ;
#[doc = "Field `CC3OF` writer - Capture/Compare 3 overcapture flag"] pub type Cc3ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4OF` reader - Capture/Compare 4 overcapture flag"] pub type Cc4ofR = crate :: BitReader ;
#[doc = "Field `CC4OF` writer - Capture/Compare 4 overcapture flag"] pub type Cc4ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& self) -> UifR { UifR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& self) -> Cc1ifR { Cc1ifR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
#[inline (always)] pub fn cc2if (& self) -> Cc2ifR { Cc2ifR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
#[inline (always)] pub fn cc3if (& self) -> Cc3ifR { Cc3ifR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
#[inline (always)] pub fn cc4if (& self) -> Cc4ifR { Cc4ifR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 6 - Trigger interrupt flag"]
#[inline (always)] pub fn tif (& self) -> TifR { TifR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& self) -> Cc1ofR { Cc1ofR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Capture/Compare 2 overcapture flag"]
#[inline (always)] pub fn cc2of (& self) -> Cc2ofR { Cc2ofR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
#[inline (always)] pub fn cc3of (& self) -> Cc3ofR { Cc3ofR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
#[inline (always)] pub fn cc4of (& self) -> Cc4ofR { Cc4ofR :: new (((self . bits >> 12) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& mut self) -> UifW < '_ , SrSpec > { UifW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& mut self) -> Cc1ifW < '_ , SrSpec > { Cc1ifW :: new (self , 1) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
#[inline (always)] pub fn cc2if (& mut self) -> Cc2ifW < '_ , SrSpec > { Cc2ifW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
#[inline (always)] pub fn cc3if (& mut self) -> Cc3ifW < '_ , SrSpec > { Cc3ifW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
#[inline (always)] pub fn cc4if (& mut self) -> Cc4ifW < '_ , SrSpec > { Cc4ifW :: new (self , 4) }
#[doc = "Bit 6 - Trigger interrupt flag"]
#[inline (always)] pub fn tif (& mut self) -> TifW < '_ , SrSpec > { TifW :: new (self , 6) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& mut self) -> Cc1ofW < '_ , SrSpec > { Cc1ofW :: new (self , 9) }
#[doc = "Bit 10 - Capture/Compare 2 overcapture flag"]
#[inline (always)] pub fn cc2of (& mut self) -> Cc2ofW < '_ , SrSpec > { Cc2ofW :: new (self , 10) }
#[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
#[inline (always)] pub fn cc3of (& mut self) -> Cc3ofW < '_ , SrSpec > { Cc3ofW :: new (self , 11) }
#[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
#[inline (always)] pub fn cc4of (& mut self) -> Cc4ofW < '_ , SrSpec > { Cc4ofW :: new (self , 12) } }
#[doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } }
#[doc = "EGR (w) register accessor: event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@egr`] module"]
#[doc (alias = "EGR")] pub type Egr = crate :: Reg < egr :: EgrSpec > ;
#[doc = "event generation register"] pub mod egr {
#[doc = "Register `EGR` writer"] pub type W = crate :: W < EgrSpec > ;
#[doc = "Field `UG` writer - Update generation"] pub type UgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1G` writer - Capture/compare 1 generation"] pub type Cc1gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2G` writer - Capture/compare 2 generation"] pub type Cc2gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3G` writer - Capture/compare 3 generation"] pub type Cc3gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4G` writer - Capture/compare 4 generation"] pub type Cc4gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMG` writer - Capture/Compare control update generation"] pub type ComgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TG` writer - Trigger generation"] pub type TgW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - Update generation"]
#[inline (always)] pub fn ug (& mut self) -> UgW < '_ , EgrSpec > { UgW :: new (self , 0) }
#[doc = "Bit 1 - Capture/compare 1 generation"]
#[inline (always)] pub fn cc1g (& mut self) -> Cc1gW < '_ , EgrSpec > { Cc1gW :: new (self , 1) }
#[doc = "Bit 2 - Capture/compare 2 generation"]
#[inline (always)] pub fn cc2g (& mut self) -> Cc2gW < '_ , EgrSpec > { Cc2gW :: new (self , 2) }
#[doc = "Bit 3 - Capture/compare 3 generation"]
#[inline (always)] pub fn cc3g (& mut self) -> Cc3gW < '_ , EgrSpec > { Cc3gW :: new (self , 3) }
#[doc = "Bit 4 - Capture/compare 4 generation"]
#[inline (always)] pub fn cc4g (& mut self) -> Cc4gW < '_ , EgrSpec > { Cc4gW :: new (self , 4) }
#[doc = "Bit 5 - Capture/Compare control update generation"]
#[inline (always)] pub fn comg (& mut self) -> ComgW < '_ , EgrSpec > { ComgW :: new (self , 5) }
#[doc = "Bit 6 - Trigger generation"]
#[inline (always)] pub fn tg (& mut self) -> TgW < '_ , EgrSpec > { TgW :: new (self , 6) } }
#[doc = "event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EgrSpec ; impl crate :: RegisterSpec for EgrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`egr::W`](W) writer structure"] impl crate :: Writable for EgrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EGR to value 0"] impl crate :: Resettable for EgrSpec { } }
#[doc = "CCMR1_Output (rw) register accessor: capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_output`] module"]
#[doc (alias = "CCMR1_Output")] pub type Ccmr1Output = crate :: Reg < ccmr1_output :: Ccmr1OutputSpec > ;
#[doc = "capture/compare mode register 1 (output mode)"] pub mod ccmr1_output {
#[doc = "Register `CCMR1_Output` reader"] pub type R = crate :: R < Ccmr1OutputSpec > ;
#[doc = "Register `CCMR1_Output` writer"] pub type W = crate :: W < Ccmr1OutputSpec > ;
#[doc = "Field `CC1S` reader - Capture/Compare 2 output enable"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/Compare 2 output enable"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC1FE` reader - Output compare 1 fast enable"] pub type Oc1feR = crate :: BitReader ;
#[doc = "Field `OC1FE` writer - Output compare 1 fast enable"] pub type Oc1feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1PE` reader - Output compare 1 preload enable"] pub type Oc1peR = crate :: BitReader ;
#[doc = "Field `OC1PE` writer - Output compare 1 preload enable"] pub type Oc1peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1M` reader - Output compare 1 mode"] pub type Oc1mR = crate :: FieldReader ;
#[doc = "Field `OC1M` writer - Output compare 1 mode"] pub type Oc1mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC1CE` reader - Output compare 1 clear enable"] pub type Oc1ceR = crate :: BitReader ;
#[doc = "Field `OC1CE` writer - Output compare 1 clear enable"] pub type Oc1ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2S` reader - Capure/Compare 2 selection"] pub type Cc2sR = crate :: FieldReader ;
#[doc = "Field `CC2S` writer - Capure/Compare 2 selection"] pub type Cc2sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC2FE` reader - Output compare 4 fast enable"] pub type Oc2feR = crate :: BitReader ;
#[doc = "Field `OC2FE` writer - Output compare 4 fast enable"] pub type Oc2feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC2PE` reader - Output compare 2 preload enable"] pub type Oc2peR = crate :: BitReader ;
#[doc = "Field `OC2PE` writer - Output compare 2 preload enable"] pub type Oc2peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC2M` reader - Output compare 2 mode"] pub type Oc2mR = crate :: FieldReader ;
#[doc = "Field `OC2M` writer - Output compare 2 mode"] pub type Oc2mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC2CE` reader - Output compare 2 clear enable"] pub type Oc2ceR = crate :: BitReader ;
#[doc = "Field `OC2CE` writer - Output compare 2 clear enable"] pub type Oc2ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& self) -> Oc1feR { Oc1feR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& self) -> Oc1peR { Oc1peR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& self) -> Oc1mR { Oc1mR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Output compare 1 clear enable"]
#[inline (always)] pub fn oc1ce (& self) -> Oc1ceR { Oc1ceR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Capure/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& self) -> Cc2sR { Cc2sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc2fe (& self) -> Oc2feR { Oc2feR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Output compare 2 preload enable"]
#[inline (always)] pub fn oc2pe (& self) -> Oc2peR { Oc2peR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bits 12:14 - Output compare 2 mode"]
#[inline (always)] pub fn oc2m (& self) -> Oc2mR { Oc2mR :: new (((self . bits >> 12) & 7) as u8) }
#[doc = "Bit 15 - Output compare 2 clear enable"]
#[inline (always)] pub fn oc2ce (& self) -> Oc2ceR { Oc2ceR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1OutputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& mut self) -> Oc1feW < '_ , Ccmr1OutputSpec > { Oc1feW :: new (self , 2) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& mut self) -> Oc1peW < '_ , Ccmr1OutputSpec > { Oc1peW :: new (self , 3) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& mut self) -> Oc1mW < '_ , Ccmr1OutputSpec > { Oc1mW :: new (self , 4) }
#[doc = "Bit 7 - Output compare 1 clear enable"]
#[inline (always)] pub fn oc1ce (& mut self) -> Oc1ceW < '_ , Ccmr1OutputSpec > { Oc1ceW :: new (self , 7) }
#[doc = "Bits 8:9 - Capure/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& mut self) -> Cc2sW < '_ , Ccmr1OutputSpec > { Cc2sW :: new (self , 8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc2fe (& mut self) -> Oc2feW < '_ , Ccmr1OutputSpec > { Oc2feW :: new (self , 10) }
#[doc = "Bit 11 - Output compare 2 preload enable"]
#[inline (always)] pub fn oc2pe (& mut self) -> Oc2peW < '_ , Ccmr1OutputSpec > { Oc2peW :: new (self , 11) }
#[doc = "Bits 12:14 - Output compare 2 mode"]
#[inline (always)] pub fn oc2m (& mut self) -> Oc2mW < '_ , Ccmr1OutputSpec > { Oc2mW :: new (self , 12) }
#[doc = "Bit 15 - Output compare 2 clear enable"]
#[inline (always)] pub fn oc2ce (& mut self) -> Oc2ceW < '_ , Ccmr1OutputSpec > { Oc2ceW :: new (self , 15) } }
#[doc = "capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1OutputSpec ; impl crate :: RegisterSpec for Ccmr1OutputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_output::R`](R) reader structure"] impl crate :: Readable for Ccmr1OutputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_output::W`](W) writer structure"] impl crate :: Writable for Ccmr1OutputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Output to value 0"] impl crate :: Resettable for Ccmr1OutputSpec { } }
#[doc = "CCMR1_Input (rw) register accessor: capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_input`] module"]
#[doc (alias = "CCMR1_Input")] pub type Ccmr1Input = crate :: Reg < ccmr1_input :: Ccmr1InputSpec > ;
#[doc = "capture/compare mode register 1 (input mode)"] pub mod ccmr1_input {
#[doc = "Register `CCMR1_Input` reader"] pub type R = crate :: R < Ccmr1InputSpec > ;
#[doc = "Register `CCMR1_Input` writer"] pub type W = crate :: W < Ccmr1InputSpec > ;
#[doc = "Field `CC1S` reader - Capture/compare 1 selection"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/compare 1 selection"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1PSC` reader - Input capture 1 prescaler"] pub type Ic1pscR = crate :: FieldReader ;
#[doc = "Field `IC1PSC` writer - Input capture 1 prescaler"] pub type Ic1pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1F` reader - Input capture 1 filter"] pub type Ic1fR = crate :: FieldReader ;
#[doc = "Field `IC1F` writer - Input capture 1 filter"] pub type Ic1fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CC2S` reader - Capture/Compare 2 selection"] pub type Cc2sR = crate :: FieldReader ;
#[doc = "Field `CC2S` writer - Capture/Compare 2 selection"] pub type Cc2sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC2PSC` reader - Input capture 2 prescaler"] pub type Ic2pscR = crate :: FieldReader ;
#[doc = "Field `IC2PSC` writer - Input capture 2 prescaler"] pub type Ic2pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC2F` reader - Input capture 2 filter"] pub type Ic2fR = crate :: FieldReader ;
#[doc = "Field `IC2F` writer - Input capture 2 filter"] pub type Ic2fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& self) -> Ic1pscR { Ic1pscR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& self) -> Ic1fR { Ic1fR :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:9 - Capture/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& self) -> Cc2sR { Cc2sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - Input capture 2 prescaler"]
#[inline (always)] pub fn ic2psc (& self) -> Ic2pscR { Ic2pscR :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:15 - Input capture 2 filter"]
#[inline (always)] pub fn ic2f (& self) -> Ic2fR { Ic2fR :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1InputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& mut self) -> Ic1pscW < '_ , Ccmr1InputSpec > { Ic1pscW :: new (self , 2) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& mut self) -> Ic1fW < '_ , Ccmr1InputSpec > { Ic1fW :: new (self , 4) }
#[doc = "Bits 8:9 - Capture/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& mut self) -> Cc2sW < '_ , Ccmr1InputSpec > { Cc2sW :: new (self , 8) }
#[doc = "Bits 10:11 - Input capture 2 prescaler"]
#[inline (always)] pub fn ic2psc (& mut self) -> Ic2pscW < '_ , Ccmr1InputSpec > { Ic2pscW :: new (self , 10) }
#[doc = "Bits 12:15 - Input capture 2 filter"]
#[inline (always)] pub fn ic2f (& mut self) -> Ic2fW < '_ , Ccmr1InputSpec > { Ic2fW :: new (self , 12) } }
#[doc = "capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1InputSpec ; impl crate :: RegisterSpec for Ccmr1InputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_input::R`](R) reader structure"] impl crate :: Readable for Ccmr1InputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_input::W`](W) writer structure"] impl crate :: Writable for Ccmr1InputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Input to value 0"] impl crate :: Resettable for Ccmr1InputSpec { } }
#[doc = "CCMR2_Output (rw) register accessor: capture/compare mode register 2(output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr2_output`] module"]
#[doc (alias = "CCMR2_Output")] pub type Ccmr2Output = crate :: Reg < ccmr2_output :: Ccmr2OutputSpec > ;
#[doc = "capture/compare mode register 2(output mode)"] pub mod ccmr2_output {
#[doc = "Register `CCMR2_Output` reader"] pub type R = crate :: R < Ccmr2OutputSpec > ;
#[doc = "Register `CCMR2_Output` writer"] pub type W = crate :: W < Ccmr2OutputSpec > ;
#[doc = "Field `CC3S` reader - Capture/Compare 3 selection"] pub type Cc3sR = crate :: FieldReader ;
#[doc = "Field `CC3S` writer - Capture/Compare 3 selection"] pub type Cc3sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC3FE` reader - Output compare 3 fast enable"] pub type Oc3feR = crate :: BitReader ;
#[doc = "Field `OC3FE` writer - Output compare 3 fast enable"] pub type Oc3feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC3PE` reader - Output compare 3 preload enable"] pub type Oc3peR = crate :: BitReader ;
#[doc = "Field `OC3PE` writer - Output compare 3 preload enable"] pub type Oc3peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC3M` reader - Output compare 3 mode"] pub type Oc3mR = crate :: FieldReader ;
#[doc = "Field `OC3M` writer - Output compare 3 mode"] pub type Oc3mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC3CE` reader - Output compare 3 clear enable"] pub type Oc3ceR = crate :: BitReader ;
#[doc = "Field `OC3CE` writer - Output compare 3 clear enable"] pub type Oc3ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4S` reader - Capture/Compare 4 selection"] pub type Cc4sR = crate :: FieldReader ;
#[doc = "Field `CC4S` writer - Capture/Compare 4 selection"] pub type Cc4sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC4FE` reader - Output compare 4 fast enable"] pub type Oc4feR = crate :: BitReader ;
#[doc = "Field `OC4FE` writer - Output compare 4 fast enable"] pub type Oc4feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC4PE` reader - Output compare 4 preload enable"] pub type Oc4peR = crate :: BitReader ;
#[doc = "Field `OC4PE` writer - Output compare 4 preload enable"] pub type Oc4peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC4M` reader - Output compare 4 mode"] pub type Oc4mR = crate :: FieldReader ;
#[doc = "Field `OC4M` writer - Output compare 4 mode"] pub type Oc4mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC4CE` reader - Output compare 4 clear enable"] pub type Oc4ceR = crate :: BitReader ;
#[doc = "Field `OC4CE` writer - Output compare 4 clear enable"] pub type Oc4ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:1 - Capture/Compare 3 selection"]
#[inline (always)] pub fn cc3s (& self) -> Cc3sR { Cc3sR :: new ((self . bits & 3) as u8) }
#[doc = "Bit 2 - Output compare 3 fast enable"]
#[inline (always)] pub fn oc3fe (& self) -> Oc3feR { Oc3feR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Output compare 3 preload enable"]
#[inline (always)] pub fn oc3pe (& self) -> Oc3peR { Oc3peR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Output compare 3 mode"]
#[inline (always)] pub fn oc3m (& self) -> Oc3mR { Oc3mR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Output compare 3 clear enable"]
#[inline (always)] pub fn oc3ce (& self) -> Oc3ceR { Oc3ceR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& self) -> Cc4sR { Cc4sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc4fe (& self) -> Oc4feR { Oc4feR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Output compare 4 preload enable"]
#[inline (always)] pub fn oc4pe (& self) -> Oc4peR { Oc4peR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bits 12:14 - Output compare 4 mode"]
#[inline (always)] pub fn oc4m (& self) -> Oc4mR { Oc4mR :: new (((self . bits >> 12) & 7) as u8) }
#[doc = "Bit 15 - Output compare 4 clear enable"]
#[inline (always)] pub fn oc4ce (& self) -> Oc4ceR { Oc4ceR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:1 - Capture/Compare 3 selection"]
#[inline (always)] pub fn cc3s (& mut self) -> Cc3sW < '_ , Ccmr2OutputSpec > { Cc3sW :: new (self , 0) }
#[doc = "Bit 2 - Output compare 3 fast enable"]
#[inline (always)] pub fn oc3fe (& mut self) -> Oc3feW < '_ , Ccmr2OutputSpec > { Oc3feW :: new (self , 2) }
#[doc = "Bit 3 - Output compare 3 preload enable"]
#[inline (always)] pub fn oc3pe (& mut self) -> Oc3peW < '_ , Ccmr2OutputSpec > { Oc3peW :: new (self , 3) }
#[doc = "Bits 4:6 - Output compare 3 mode"]
#[inline (always)] pub fn oc3m (& mut self) -> Oc3mW < '_ , Ccmr2OutputSpec > { Oc3mW :: new (self , 4) }
#[doc = "Bit 7 - Output compare 3 clear enable"]
#[inline (always)] pub fn oc3ce (& mut self) -> Oc3ceW < '_ , Ccmr2OutputSpec > { Oc3ceW :: new (self , 7) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& mut self) -> Cc4sW < '_ , Ccmr2OutputSpec > { Cc4sW :: new (self , 8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc4fe (& mut self) -> Oc4feW < '_ , Ccmr2OutputSpec > { Oc4feW :: new (self , 10) }
#[doc = "Bit 11 - Output compare 4 preload enable"]
#[inline (always)] pub fn oc4pe (& mut self) -> Oc4peW < '_ , Ccmr2OutputSpec > { Oc4peW :: new (self , 11) }
#[doc = "Bits 12:14 - Output compare 4 mode"]
#[inline (always)] pub fn oc4m (& mut self) -> Oc4mW < '_ , Ccmr2OutputSpec > { Oc4mW :: new (self , 12) }
#[doc = "Bit 15 - Output compare 4 clear enable"]
#[inline (always)] pub fn oc4ce (& mut self) -> Oc4ceW < '_ , Ccmr2OutputSpec > { Oc4ceW :: new (self , 15) } }
#[doc = "capture/compare mode register 2(output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr2OutputSpec ; impl crate :: RegisterSpec for Ccmr2OutputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr2_output::R`](R) reader structure"] impl crate :: Readable for Ccmr2OutputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr2_output::W`](W) writer structure"] impl crate :: Writable for Ccmr2OutputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR2_Output to value 0"] impl crate :: Resettable for Ccmr2OutputSpec { } }
#[doc = "CCMR2_Input (rw) register accessor: capture/compare mode register 2 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr2_input`] module"]
#[doc (alias = "CCMR2_Input")] pub type Ccmr2Input = crate :: Reg < ccmr2_input :: Ccmr2InputSpec > ;
#[doc = "capture/compare mode register 2 (input mode)"] pub mod ccmr2_input {
#[doc = "Register `CCMR2_Input` reader"] pub type R = crate :: R < Ccmr2InputSpec > ;
#[doc = "Register `CCMR2_Input` writer"] pub type W = crate :: W < Ccmr2InputSpec > ;
#[doc = "Field `CC3S` reader - Capture/compare 3 selection"] pub type Cc3sR = crate :: FieldReader ;
#[doc = "Field `CC3S` writer - Capture/compare 3 selection"] pub type Cc3sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC3PSC` reader - Input capture 3 prescaler"] pub type Ic3pscR = crate :: FieldReader ;
#[doc = "Field `IC3PSC` writer - Input capture 3 prescaler"] pub type Ic3pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC3F` reader - Input capture 3 filter"] pub type Ic3fR = crate :: FieldReader ;
#[doc = "Field `IC3F` writer - Input capture 3 filter"] pub type Ic3fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CC4S` reader - Capture/Compare 4 selection"] pub type Cc4sR = crate :: FieldReader ;
#[doc = "Field `CC4S` writer - Capture/Compare 4 selection"] pub type Cc4sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC4PSC` reader - Input capture 4 prescaler"] pub type Ic4pscR = crate :: FieldReader ;
#[doc = "Field `IC4PSC` writer - Input capture 4 prescaler"] pub type Ic4pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC4F` reader - Input capture 4 filter"] pub type Ic4fR = crate :: FieldReader ;
#[doc = "Field `IC4F` writer - Input capture 4 filter"] pub type Ic4fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:1 - Capture/compare 3 selection"]
#[inline (always)] pub fn cc3s (& self) -> Cc3sR { Cc3sR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Input capture 3 prescaler"]
#[inline (always)] pub fn ic3psc (& self) -> Ic3pscR { Ic3pscR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:7 - Input capture 3 filter"]
#[inline (always)] pub fn ic3f (& self) -> Ic3fR { Ic3fR :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& self) -> Cc4sR { Cc4sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - Input capture 4 prescaler"]
#[inline (always)] pub fn ic4psc (& self) -> Ic4pscR { Ic4pscR :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:15 - Input capture 4 filter"]
#[inline (always)] pub fn ic4f (& self) -> Ic4fR { Ic4fR :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/compare 3 selection"]
#[inline (always)] pub fn cc3s (& mut self) -> Cc3sW < '_ , Ccmr2InputSpec > { Cc3sW :: new (self , 0) }
#[doc = "Bits 2:3 - Input capture 3 prescaler"]
#[inline (always)] pub fn ic3psc (& mut self) -> Ic3pscW < '_ , Ccmr2InputSpec > { Ic3pscW :: new (self , 2) }
#[doc = "Bits 4:7 - Input capture 3 filter"]
#[inline (always)] pub fn ic3f (& mut self) -> Ic3fW < '_ , Ccmr2InputSpec > { Ic3fW :: new (self , 4) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& mut self) -> Cc4sW < '_ , Ccmr2InputSpec > { Cc4sW :: new (self , 8) }
#[doc = "Bits 10:11 - Input capture 4 prescaler"]
#[inline (always)] pub fn ic4psc (& mut self) -> Ic4pscW < '_ , Ccmr2InputSpec > { Ic4pscW :: new (self , 10) }
#[doc = "Bits 12:15 - Input capture 4 filter"]
#[inline (always)] pub fn ic4f (& mut self) -> Ic4fW < '_ , Ccmr2InputSpec > { Ic4fW :: new (self , 12) } }
#[doc = "capture/compare mode register 2 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr2InputSpec ; impl crate :: RegisterSpec for Ccmr2InputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr2_input::R`](R) reader structure"] impl crate :: Readable for Ccmr2InputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr2_input::W`](W) writer structure"] impl crate :: Writable for Ccmr2InputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR2_Input to value 0"] impl crate :: Resettable for Ccmr2InputSpec { } }
#[doc = "CCER (rw) register accessor: capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccer`] module"]
#[doc (alias = "CCER")] pub type Ccer = crate :: Reg < ccer :: CcerSpec > ;
#[doc = "capture/compare enable register"] pub mod ccer {
#[doc = "Register `CCER` reader"] pub type R = crate :: R < CcerSpec > ;
#[doc = "Register `CCER` writer"] pub type W = crate :: W < CcerSpec > ;
#[doc = "Field `CC1E` reader - Capture/Compare 1 output enable"] pub type Cc1eR = crate :: BitReader ;
#[doc = "Field `CC1E` writer - Capture/Compare 1 output enable"] pub type Cc1eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1P` reader - Capture/Compare 1 output polarity"] pub type Cc1pR = crate :: BitReader ;
#[doc = "Field `CC1P` writer - Capture/Compare 1 output polarity"] pub type Cc1pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1NP` reader - Capture/Compare 1 complementary output polarity"] pub type Cc1npR = crate :: BitReader ;
#[doc = "Field `CC1NP` writer - Capture/Compare 1 complementary output polarity"] pub type Cc1npW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2E` reader - Capture/Compare 2 output enable"] pub type Cc2eR = crate :: BitReader ;
#[doc = "Field `CC2E` writer - Capture/Compare 2 output enable"] pub type Cc2eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2P` reader - Capture/Compare 2 output polarity"] pub type Cc2pR = crate :: BitReader ;
#[doc = "Field `CC2P` writer - Capture/Compare 2 output polarity"] pub type Cc2pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2NP` reader - Capture/Compare 2 complementary output polarity"] pub type Cc2npR = crate :: BitReader ;
#[doc = "Field `CC2NP` writer - Capture/Compare 2 complementary output polarity"] pub type Cc2npW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3E` reader - Capture/Compare 3 output enable"] pub type Cc3eR = crate :: BitReader ;
#[doc = "Field `CC3E` writer - Capture/Compare 3 output enable"] pub type Cc3eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3P` reader - Capture/Compare 3 output polarity"] pub type Cc3pR = crate :: BitReader ;
#[doc = "Field `CC3P` writer - Capture/Compare 3 output polarity"] pub type Cc3pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3NP` reader - Capture/Compare 3 complementary output polarity"] pub type Cc3npR = crate :: BitReader ;
#[doc = "Field `CC3NP` writer - Capture/Compare 3 complementary output polarity"] pub type Cc3npW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4E` reader - Capture/Compare 4 output enable"] pub type Cc4eR = crate :: BitReader ;
#[doc = "Field `CC4E` writer - Capture/Compare 4 output enable"] pub type Cc4eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4P` reader - Capture/Compare 4 output polarity"] pub type Cc4pR = crate :: BitReader ;
#[doc = "Field `CC4P` writer - Capture/Compare 4 output polarity"] pub type Cc4pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4NP` reader - Capture/Compare 4 complementary output polarity"] pub type Cc4npR = crate :: BitReader ;
#[doc = "Field `CC4NP` writer - Capture/Compare 4 complementary output polarity"] pub type Cc4npW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& self) -> Cc1eR { Cc1eR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& self) -> Cc1pR { Cc1pR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output polarity"]
#[inline (always)] pub fn cc1np (& self) -> Cc1npR { Cc1npR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc2e (& self) -> Cc2eR { Cc2eR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Capture/Compare 2 output polarity"]
#[inline (always)] pub fn cc2p (& self) -> Cc2pR { Cc2pR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 7 - Capture/Compare 2 complementary output polarity"]
#[inline (always)] pub fn cc2np (& self) -> Cc2npR { Cc2npR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Capture/Compare 3 output enable"]
#[inline (always)] pub fn cc3e (& self) -> Cc3eR { Cc3eR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 3 output polarity"]
#[inline (always)] pub fn cc3p (& self) -> Cc3pR { Cc3pR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 11 - Capture/Compare 3 complementary output polarity"]
#[inline (always)] pub fn cc3np (& self) -> Cc3npR { Cc3npR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Capture/Compare 4 output enable"]
#[inline (always)] pub fn cc4e (& self) -> Cc4eR { Cc4eR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Capture/Compare 4 output polarity"]
#[inline (always)] pub fn cc4p (& self) -> Cc4pR { Cc4pR :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 15 - Capture/Compare 4 complementary output polarity"]
#[inline (always)] pub fn cc4np (& self) -> Cc4npR { Cc4npR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& mut self) -> Cc1eW < '_ , CcerSpec > { Cc1eW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& mut self) -> Cc1pW < '_ , CcerSpec > { Cc1pW :: new (self , 1) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output polarity"]
#[inline (always)] pub fn cc1np (& mut self) -> Cc1npW < '_ , CcerSpec > { Cc1npW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc2e (& mut self) -> Cc2eW < '_ , CcerSpec > { Cc2eW :: new (self , 4) }
#[doc = "Bit 5 - Capture/Compare 2 output polarity"]
#[inline (always)] pub fn cc2p (& mut self) -> Cc2pW < '_ , CcerSpec > { Cc2pW :: new (self , 5) }
#[doc = "Bit 7 - Capture/Compare 2 complementary output polarity"]
#[inline (always)] pub fn cc2np (& mut self) -> Cc2npW < '_ , CcerSpec > { Cc2npW :: new (self , 7) }
#[doc = "Bit 8 - Capture/Compare 3 output enable"]
#[inline (always)] pub fn cc3e (& mut self) -> Cc3eW < '_ , CcerSpec > { Cc3eW :: new (self , 8) }
#[doc = "Bit 9 - Capture/Compare 3 output polarity"]
#[inline (always)] pub fn cc3p (& mut self) -> Cc3pW < '_ , CcerSpec > { Cc3pW :: new (self , 9) }
#[doc = "Bit 11 - Capture/Compare 3 complementary output polarity"]
#[inline (always)] pub fn cc3np (& mut self) -> Cc3npW < '_ , CcerSpec > { Cc3npW :: new (self , 11) }
#[doc = "Bit 12 - Capture/Compare 4 output enable"]
#[inline (always)] pub fn cc4e (& mut self) -> Cc4eW < '_ , CcerSpec > { Cc4eW :: new (self , 12) }
#[doc = "Bit 13 - Capture/Compare 4 output polarity"]
#[inline (always)] pub fn cc4p (& mut self) -> Cc4pW < '_ , CcerSpec > { Cc4pW :: new (self , 13) }
#[doc = "Bit 15 - Capture/Compare 4 complementary output polarity"]
#[inline (always)] pub fn cc4np (& mut self) -> Cc4npW < '_ , CcerSpec > { Cc4npW :: new (self , 15) } }
#[doc = "capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CcerSpec ; impl crate :: RegisterSpec for CcerSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccer::R`](R) reader structure"] impl crate :: Readable for CcerSpec { }
#[doc = "`write(|w| ..)` method takes [`ccer::W`](W) writer structure"] impl crate :: Writable for CcerSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCER to value 0"] impl crate :: Resettable for CcerSpec { } }
#[doc = "CNT (rw) register accessor: counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnt`] module"]
#[doc (alias = "CNT")] pub type Cnt = crate :: Reg < cnt :: CntSpec > ;
#[doc = "counter"] pub mod cnt {
#[doc = "Register `CNT` reader"] pub type R = crate :: R < CntSpec > ;
#[doc = "Register `CNT` writer"] pub type W = crate :: W < CntSpec > ;
#[doc = "Field `CNT` reader - Counter value"] pub type CntR = crate :: FieldReader < u32 > ;
#[doc = "Field `CNT` writer - Counter value"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Counter value"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Counter value"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , CntSpec > { CntW :: new (self , 0) } }
#[doc = "counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CntSpec ; impl crate :: RegisterSpec for CntSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cnt::R`](R) reader structure"] impl crate :: Readable for CntSpec { }
#[doc = "`write(|w| ..)` method takes [`cnt::W`](W) writer structure"] impl crate :: Writable for CntSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CNT to value 0"] impl crate :: Resettable for CntSpec { } }
#[doc = "PSC (rw) register accessor: prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psc`] module"]
#[doc (alias = "PSC")] pub type Psc = crate :: Reg < psc :: PscSpec > ;
#[doc = "prescaler"] pub mod psc {
#[doc = "Register `PSC` reader"] pub type R = crate :: R < PscSpec > ;
#[doc = "Register `PSC` writer"] pub type W = crate :: W < PscSpec > ;
#[doc = "Field `PSC` reader - Prescaler value"] pub type PscR = crate :: FieldReader < u16 > ;
#[doc = "Field `PSC` writer - Prescaler value"] pub type PscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& self) -> PscR { PscR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& mut self) -> PscW < '_ , PscSpec > { PscW :: new (self , 0) } }
#[doc = "prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PscSpec ; impl crate :: RegisterSpec for PscSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`psc::R`](R) reader structure"] impl crate :: Readable for PscSpec { }
#[doc = "`write(|w| ..)` method takes [`psc::W`](W) writer structure"] impl crate :: Writable for PscSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PSC to value 0"] impl crate :: Resettable for PscSpec { } }
#[doc = "ARR (rw) register accessor: auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@arr`] module"]
#[doc (alias = "ARR")] pub type Arr = crate :: Reg < arr :: ArrSpec > ;
#[doc = "auto-reload register"] pub mod arr {
#[doc = "Register `ARR` reader"] pub type R = crate :: R < ArrSpec > ;
#[doc = "Register `ARR` writer"] pub type W = crate :: W < ArrSpec > ;
#[doc = "Field `ARR` reader - Auto reload value"] pub type ArrR = crate :: FieldReader < u32 > ;
#[doc = "Field `ARR` writer - Auto reload value"] pub type ArrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Auto reload value"]
#[inline (always)] pub fn arr (& self) -> ArrR { ArrR :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Auto reload value"]
#[inline (always)] pub fn arr (& mut self) -> ArrW < '_ , ArrSpec > { ArrW :: new (self , 0) } }
#[doc = "auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ArrSpec ; impl crate :: RegisterSpec for ArrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`arr::R`](R) reader structure"] impl crate :: Readable for ArrSpec { }
#[doc = "`write(|w| ..)` method takes [`arr::W`](W) writer structure"] impl crate :: Writable for ArrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ARR to value 0"] impl crate :: Resettable for ArrSpec { } }
#[doc = "CCR1 (rw) register accessor: capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr1`] module"]
#[doc (alias = "CCR1")] pub type Ccr1 = crate :: Reg < ccr1 :: Ccr1Spec > ;
#[doc = "capture/compare register 1"] pub mod ccr1 {
#[doc = "Register `CCR1` reader"] pub type R = crate :: R < Ccr1Spec > ;
#[doc = "Register `CCR1` writer"] pub type W = crate :: W < Ccr1Spec > ;
#[doc = "Field `CCR1` reader - Capture/Compare 1 value"] pub type Ccr1R = crate :: FieldReader < u32 > ;
#[doc = "Field `CCR1` writer - Capture/Compare 1 value"] pub type Ccr1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& self) -> Ccr1R { Ccr1R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& mut self) -> Ccr1W < '_ , Ccr1Spec > { Ccr1W :: new (self , 0) } }
#[doc = "capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr1Spec ; impl crate :: RegisterSpec for Ccr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr1::R`](R) reader structure"] impl crate :: Readable for Ccr1Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr1::W`](W) writer structure"] impl crate :: Writable for Ccr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR1 to value 0"] impl crate :: Resettable for Ccr1Spec { } }
#[doc = "CCR2 (rw) register accessor: capture/compare register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr2`] module"]
#[doc (alias = "CCR2")] pub type Ccr2 = crate :: Reg < ccr2 :: Ccr2Spec > ;
#[doc = "capture/compare register 2"] pub mod ccr2 {
#[doc = "Register `CCR2` reader"] pub type R = crate :: R < Ccr2Spec > ;
#[doc = "Register `CCR2` writer"] pub type W = crate :: W < Ccr2Spec > ;
#[doc = "Field `CCR2` reader - Capture/Compare 2 value"] pub type Ccr2R = crate :: FieldReader < u32 > ;
#[doc = "Field `CCR2` writer - Capture/Compare 2 value"] pub type Ccr2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Capture/Compare 2 value"]
#[inline (always)] pub fn ccr2 (& self) -> Ccr2R { Ccr2R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Capture/Compare 2 value"]
#[inline (always)] pub fn ccr2 (& mut self) -> Ccr2W < '_ , Ccr2Spec > { Ccr2W :: new (self , 0) } }
#[doc = "capture/compare register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr2Spec ; impl crate :: RegisterSpec for Ccr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr2::R`](R) reader structure"] impl crate :: Readable for Ccr2Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr2::W`](W) writer structure"] impl crate :: Writable for Ccr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR2 to value 0"] impl crate :: Resettable for Ccr2Spec { } }
#[doc = "CCR3 (rw) register accessor: capture/compare register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr3`] module"]
#[doc (alias = "CCR3")] pub type Ccr3 = crate :: Reg < ccr3 :: Ccr3Spec > ;
#[doc = "capture/compare register 3"] pub mod ccr3 {
#[doc = "Register `CCR3` reader"] pub type R = crate :: R < Ccr3Spec > ;
#[doc = "Register `CCR3` writer"] pub type W = crate :: W < Ccr3Spec > ;
#[doc = "Field `CCR3` reader - Capture/Compare 3 value"] pub type Ccr3R = crate :: FieldReader < u32 > ;
#[doc = "Field `CCR3` writer - Capture/Compare 3 value"] pub type Ccr3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Capture/Compare 3 value"]
#[inline (always)] pub fn ccr3 (& self) -> Ccr3R { Ccr3R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Capture/Compare 3 value"]
#[inline (always)] pub fn ccr3 (& mut self) -> Ccr3W < '_ , Ccr3Spec > { Ccr3W :: new (self , 0) } }
#[doc = "capture/compare register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr3Spec ; impl crate :: RegisterSpec for Ccr3Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr3::R`](R) reader structure"] impl crate :: Readable for Ccr3Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr3::W`](W) writer structure"] impl crate :: Writable for Ccr3Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR3 to value 0"] impl crate :: Resettable for Ccr3Spec { } }
#[doc = "CCR4 (rw) register accessor: capture/compare register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr4`] module"]
#[doc (alias = "CCR4")] pub type Ccr4 = crate :: Reg < ccr4 :: Ccr4Spec > ;
#[doc = "capture/compare register 4"] pub mod ccr4 {
#[doc = "Register `CCR4` reader"] pub type R = crate :: R < Ccr4Spec > ;
#[doc = "Register `CCR4` writer"] pub type W = crate :: W < Ccr4Spec > ;
#[doc = "Field `CCR4` reader - Capture/Compare 4 value"] pub type Ccr4R = crate :: FieldReader < u32 > ;
#[doc = "Field `CCR4` writer - Capture/Compare 4 value"] pub type Ccr4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R {
#[doc = "Bits 0:31 - Capture/Compare 4 value"]
#[inline (always)] pub fn ccr4 (& self) -> Ccr4R { Ccr4R :: new (self . bits) } } impl W {
#[doc = "Bits 0:31 - Capture/Compare 4 value"]
#[inline (always)] pub fn ccr4 (& mut self) -> Ccr4W < '_ , Ccr4Spec > { Ccr4W :: new (self , 0) } }
#[doc = "capture/compare register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr4::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr4::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr4Spec ; impl crate :: RegisterSpec for Ccr4Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr4::R`](R) reader structure"] impl crate :: Readable for Ccr4Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr4::W`](W) writer structure"] impl crate :: Writable for Ccr4Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR4 to value 0"] impl crate :: Resettable for Ccr4Spec { } }
#[doc = "DCR (w) register accessor: DMA control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dcr`] module"]
#[doc (alias = "DCR")] pub type Dcr = crate :: Reg < dcr :: DcrSpec > ;
#[doc = "DMA control register"] pub mod dcr {
#[doc = "Register `DCR` writer"] pub type W = crate :: W < DcrSpec > ;
#[doc = "Field `DBA` writer - DMA base address"] pub type DbaW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ;
#[doc = "Field `DBL` writer - DMA burst length"] pub type DblW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ; impl W {
#[doc = "Bits 0:4 - DMA base address"]
#[inline (always)] pub fn dba (& mut self) -> DbaW < '_ , DcrSpec > { DbaW :: new (self , 0) }
#[doc = "Bits 8:12 - DMA burst length"]
#[inline (always)] pub fn dbl (& mut self) -> DblW < '_ , DcrSpec > { DblW :: new (self , 8) } }
#[doc = "DMA control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DcrSpec ; impl crate :: RegisterSpec for DcrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`dcr::W`](W) writer structure"] impl crate :: Writable for DcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DCR to value 0"] impl crate :: Resettable for DcrSpec { } }
#[doc = "DMAR (w) register accessor: DMA address for full transfer\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmar::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmar`] module"]
#[doc (alias = "DMAR")] pub type Dmar = crate :: Reg < dmar :: DmarSpec > ;
#[doc = "DMA address for full transfer"] pub mod dmar {
#[doc = "Register `DMAR` writer"] pub type W = crate :: W < DmarSpec > ;
#[doc = "Field `DMAB` writer - DMA register for burst accesses"] pub type DmabW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl W {
#[doc = "Bits 0:15 - DMA register for burst accesses"]
#[inline (always)] pub fn dmab (& mut self) -> DmabW < '_ , DmarSpec > { DmabW :: new (self , 0) } }
#[doc = "DMA address for full transfer\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmar::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmarSpec ; impl crate :: RegisterSpec for DmarSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`dmar::W`](W) writer structure"] impl crate :: Writable for DmarSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMAR to value 0"] impl crate :: Resettable for DmarSpec { } } }
#[doc = "General purpose timer"] pub type Tim3 = crate :: Periph < tim3 :: RegisterBlock , 0x4000_0400 > ; impl core :: fmt :: Debug for Tim3 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Tim3") . finish () } }
#[doc = "General purpose timer"] pub mod tim3 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cr1 : Cr1 , cr2 : Cr2 , smcr : Smcr , dier : Dier , sr : Sr , egr : Egr , _reserved_6_ccmr1 : [u8 ; 0x04] , _reserved_7_ccmr2 : [u8 ; 0x04] , ccer : Ccer , cnt : Cnt , psc : Psc , arr : Arr , _reserved12 : [u8 ; 0x04] , ccr1 : Ccr1 , ccr2 : Ccr2 , ccr3 : Ccr3 , ccr4 : Ccr4 , _reserved16 : [u8 ; 0x04] , dcr : Dcr , dmar : Dmar , } impl RegisterBlock {
#[doc = "0x00 - control register 1"]
#[inline (always)] pub const fn cr1 (& self) -> & Cr1 { & self . cr1 }
#[doc = "0x04 - control register 2"]
#[inline (always)] pub const fn cr2 (& self) -> & Cr2 { & self . cr2 }
#[doc = "0x08 - slave mode control register 1"]
#[inline (always)] pub const fn smcr (& self) -> & Smcr { & self . smcr }
#[doc = "0x0c - DMA/Interrupt enable register"]
#[inline (always)] pub const fn dier (& self) -> & Dier { & self . dier }
#[doc = "0x10 - status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x14 - event generation register"]
#[inline (always)] pub const fn egr (& self) -> & Egr { & self . egr }
#[doc = "0x18 - capture/compare mode register 1 (input mode)"]
#[inline (always)] pub const fn ccmr1_input (& self) -> & Ccmr1Input { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x18 - capture/compare mode register 1 (output mode)"]
#[inline (always)] pub const fn ccmr1_output (& self) -> & Ccmr1Output { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x1c - capture/compare mode register 2 (input mode)"]
#[inline (always)] pub const fn ccmr2_input (& self) -> & Ccmr2Input { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (28) . cast () } }
#[doc = "0x1c - capture/compare mode register 2(output mode)"]
#[inline (always)] pub const fn ccmr2_output (& self) -> & Ccmr2Output { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (28) . cast () } }
#[doc = "0x20 - capture/compare enable register"]
#[inline (always)] pub const fn ccer (& self) -> & Ccer { & self . ccer }
#[doc = "0x24 - counter"]
#[inline (always)] pub const fn cnt (& self) -> & Cnt { & self . cnt }
#[doc = "0x28 - prescaler"]
#[inline (always)] pub const fn psc (& self) -> & Psc { & self . psc }
#[doc = "0x2c - auto-reload register"]
#[inline (always)] pub const fn arr (& self) -> & Arr { & self . arr }
#[doc = "0x34 - capture/compare register 1"]
#[inline (always)] pub const fn ccr1 (& self) -> & Ccr1 { & self . ccr1 }
#[doc = "0x38 - capture/compare register 2"]
#[inline (always)] pub const fn ccr2 (& self) -> & Ccr2 { & self . ccr2 }
#[doc = "0x3c - capture/compare register 3"]
#[inline (always)] pub const fn ccr3 (& self) -> & Ccr3 { & self . ccr3 }
#[doc = "0x40 - capture/compare register 4"]
#[inline (always)] pub const fn ccr4 (& self) -> & Ccr4 { & self . ccr4 }
#[doc = "0x48 - DMA control register"]
#[inline (always)] pub const fn dcr (& self) -> & Dcr { & self . dcr }
#[doc = "0x4c - DMA address for full transfer"]
#[inline (always)] pub const fn dmar (& self) -> & Dmar { & self . dmar } }
#[doc = "CR1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr1`] module"]
#[doc (alias = "CR1")] pub type Cr1 = crate :: Reg < cr1 :: Cr1Spec > ;
#[doc = "control register 1"] pub mod cr1 {
#[doc = "Register `CR1` reader"] pub type R = crate :: R < Cr1Spec > ;
#[doc = "Register `CR1` writer"] pub type W = crate :: W < Cr1Spec > ;
#[doc = "Field `CEN` reader - Counter enable"] pub type CenR = crate :: BitReader ;
#[doc = "Field `CEN` writer - Counter enable"] pub type CenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UDIS` reader - Update disable"] pub type UdisR = crate :: BitReader ;
#[doc = "Field `UDIS` writer - Update disable"] pub type UdisW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `URS` reader - Update request source"] pub type UrsR = crate :: BitReader ;
#[doc = "Field `URS` writer - Update request source"] pub type UrsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OPM` reader - One pulse mode"] pub type OpmR = crate :: BitReader ;
#[doc = "Field `OPM` writer - One pulse mode"] pub type OpmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DIR` reader - Direction"] pub type DirR = crate :: BitReader ;
#[doc = "Field `DIR` writer - Direction"] pub type DirW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CMS` reader - Center-aligned mode selection"] pub type CmsR = crate :: FieldReader ;
#[doc = "Field `CMS` writer - Center-aligned mode selection"] pub type CmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `ARPE` reader - Auto-reload preload enable"] pub type ArpeR = crate :: BitReader ;
#[doc = "Field `ARPE` writer - Auto-reload preload enable"] pub type ArpeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CKD` reader - Clock division"] pub type CkdR = crate :: FieldReader ;
#[doc = "Field `CKD` writer - Clock division"] pub type CkdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& self) -> CenR { CenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& self) -> UdisR { UdisR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& self) -> UrsR { UrsR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - One pulse mode"]
#[inline (always)] pub fn opm (& self) -> OpmR { OpmR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Direction"]
#[inline (always)] pub fn dir (& self) -> DirR { DirR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bits 5:6 - Center-aligned mode selection"]
#[inline (always)] pub fn cms (& self) -> CmsR { CmsR :: new (((self . bits >> 5) & 3) as u8) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& self) -> ArpeR { ArpeR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& self) -> CkdR { CkdR :: new (((self . bits >> 8) & 3) as u8) } } impl W {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& mut self) -> CenW < '_ , Cr1Spec > { CenW :: new (self , 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& mut self) -> UdisW < '_ , Cr1Spec > { UdisW :: new (self , 1) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& mut self) -> UrsW < '_ , Cr1Spec > { UrsW :: new (self , 2) }
#[doc = "Bit 3 - One pulse mode"]
#[inline (always)] pub fn opm (& mut self) -> OpmW < '_ , Cr1Spec > { OpmW :: new (self , 3) }
#[doc = "Bit 4 - Direction"]
#[inline (always)] pub fn dir (& mut self) -> DirW < '_ , Cr1Spec > { DirW :: new (self , 4) }
#[doc = "Bits 5:6 - Center-aligned mode selection"]
#[inline (always)] pub fn cms (& mut self) -> CmsW < '_ , Cr1Spec > { CmsW :: new (self , 5) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& mut self) -> ArpeW < '_ , Cr1Spec > { ArpeW :: new (self , 7) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& mut self) -> CkdW < '_ , Cr1Spec > { CkdW :: new (self , 8) } }
#[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr1Spec ; impl crate :: RegisterSpec for Cr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr1::R`](R) reader structure"] impl crate :: Readable for Cr1Spec { }
#[doc = "`write(|w| ..)` method takes [`cr1::W`](W) writer structure"] impl crate :: Writable for Cr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR1 to value 0"] impl crate :: Resettable for Cr1Spec { } }
#[doc = "CR2 (rw) register accessor: control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr2`] module"]
#[doc (alias = "CR2")] pub type Cr2 = crate :: Reg < cr2 :: Cr2Spec > ;
#[doc = "control register 2"] pub mod cr2 {
#[doc = "Register `CR2` reader"] pub type R = crate :: R < Cr2Spec > ;
#[doc = "Register `CR2` writer"] pub type W = crate :: W < Cr2Spec > ;
#[doc = "Field `CCDS` reader - Capture/Compare DMA selection"] pub type CcdsR = crate :: BitReader ;
#[doc = "Field `CCDS` writer - Capture/Compare DMA selection"] pub type CcdsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MMS` reader - Master mode selection"] pub type MmsR = crate :: FieldReader ;
#[doc = "Field `MMS` writer - Master mode selection"] pub type MmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `TI1S` reader - TI1 selection"] pub type Ti1sR = crate :: BitReader ;
#[doc = "Field `TI1S` writer - TI1 selection"] pub type Ti1sW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 3 - Capture/Compare DMA selection"]
#[inline (always)] pub fn ccds (& self) -> CcdsR { CcdsR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Master mode selection"]
#[inline (always)] pub fn mms (& self) -> MmsR { MmsR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - TI1 selection"]
#[inline (always)] pub fn ti1s (& self) -> Ti1sR { Ti1sR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 3 - Capture/Compare DMA selection"]
#[inline (always)] pub fn ccds (& mut self) -> CcdsW < '_ , Cr2Spec > { CcdsW :: new (self , 3) }
#[doc = "Bits 4:6 - Master mode selection"]
#[inline (always)] pub fn mms (& mut self) -> MmsW < '_ , Cr2Spec > { MmsW :: new (self , 4) }
#[doc = "Bit 7 - TI1 selection"]
#[inline (always)] pub fn ti1s (& mut self) -> Ti1sW < '_ , Cr2Spec > { Ti1sW :: new (self , 7) } }
#[doc = "control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr2Spec ; impl crate :: RegisterSpec for Cr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr2::R`](R) reader structure"] impl crate :: Readable for Cr2Spec { }
#[doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"] impl crate :: Writable for Cr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR2 to value 0"] impl crate :: Resettable for Cr2Spec { } }
#[doc = "SMCR (rw) register accessor: slave mode control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`smcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@smcr`] module"]
#[doc (alias = "SMCR")] pub type Smcr = crate :: Reg < smcr :: SmcrSpec > ;
#[doc = "slave mode control register 1"] pub mod smcr {
#[doc = "Register `SMCR` reader"] pub type R = crate :: R < SmcrSpec > ;
#[doc = "Register `SMCR` writer"] pub type W = crate :: W < SmcrSpec > ;
#[doc = "Field `SMS` reader - Slave mode selection"] pub type SmsR = crate :: FieldReader ;
#[doc = "Field `SMS` writer - Slave mode selection"] pub type SmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OCCS` reader - Output compare clear selection"] pub type OccsR = crate :: BitReader ;
#[doc = "Field `OCCS` writer - Output compare clear selection"] pub type OccsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TS` reader - Trigger selection"] pub type TsR = crate :: FieldReader ;
#[doc = "Field `TS` writer - Trigger selection"] pub type TsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `MSM` reader - Master/slave mode"] pub type MsmR = crate :: BitReader ;
#[doc = "Field `MSM` writer - Master/slave mode"] pub type MsmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ETF` reader - External trigger filter"] pub type EtfR = crate :: FieldReader ;
#[doc = "Field `ETF` writer - External trigger filter"] pub type EtfW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `ETPS` reader - External trigger prescaler"] pub type EtpsR = crate :: FieldReader ;
#[doc = "Field `ETPS` writer - External trigger prescaler"] pub type EtpsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `ECE` reader - External clock enable"] pub type EceR = crate :: BitReader ;
#[doc = "Field `ECE` writer - External clock enable"] pub type EceW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ETP` reader - External trigger polarity"] pub type EtpR = crate :: BitReader ;
#[doc = "Field `ETP` writer - External trigger polarity"] pub type EtpW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:2 - Slave mode selection"]
#[inline (always)] pub fn sms (& self) -> SmsR { SmsR :: new ((self . bits & 7) as u8) }
#[doc = "Bit 3 - Output compare clear selection"]
#[inline (always)] pub fn occs (& self) -> OccsR { OccsR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Trigger selection"]
#[inline (always)] pub fn ts (& self) -> TsR { TsR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Master/slave mode"]
#[inline (always)] pub fn msm (& self) -> MsmR { MsmR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:11 - External trigger filter"]
#[inline (always)] pub fn etf (& self) -> EtfR { EtfR :: new (((self . bits >> 8) & 0x0f) as u8) }
#[doc = "Bits 12:13 - External trigger prescaler"]
#[inline (always)] pub fn etps (& self) -> EtpsR { EtpsR :: new (((self . bits >> 12) & 3) as u8) }
#[doc = "Bit 14 - External clock enable"]
#[inline (always)] pub fn ece (& self) -> EceR { EceR :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - External trigger polarity"]
#[inline (always)] pub fn etp (& self) -> EtpR { EtpR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:2 - Slave mode selection"]
#[inline (always)] pub fn sms (& mut self) -> SmsW < '_ , SmcrSpec > { SmsW :: new (self , 0) }
#[doc = "Bit 3 - Output compare clear selection"]
#[inline (always)] pub fn occs (& mut self) -> OccsW < '_ , SmcrSpec > { OccsW :: new (self , 3) }
#[doc = "Bits 4:6 - Trigger selection"]
#[inline (always)] pub fn ts (& mut self) -> TsW < '_ , SmcrSpec > { TsW :: new (self , 4) }
#[doc = "Bit 7 - Master/slave mode"]
#[inline (always)] pub fn msm (& mut self) -> MsmW < '_ , SmcrSpec > { MsmW :: new (self , 7) }
#[doc = "Bits 8:11 - External trigger filter"]
#[inline (always)] pub fn etf (& mut self) -> EtfW < '_ , SmcrSpec > { EtfW :: new (self , 8) }
#[doc = "Bits 12:13 - External trigger prescaler"]
#[inline (always)] pub fn etps (& mut self) -> EtpsW < '_ , SmcrSpec > { EtpsW :: new (self , 12) }
#[doc = "Bit 14 - External clock enable"]
#[inline (always)] pub fn ece (& mut self) -> EceW < '_ , SmcrSpec > { EceW :: new (self , 14) }
#[doc = "Bit 15 - External trigger polarity"]
#[inline (always)] pub fn etp (& mut self) -> EtpW < '_ , SmcrSpec > { EtpW :: new (self , 15) } }
#[doc = "slave mode control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`smcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SmcrSpec ; impl crate :: RegisterSpec for SmcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`smcr::R`](R) reader structure"] impl crate :: Readable for SmcrSpec { }
#[doc = "`write(|w| ..)` method takes [`smcr::W`](W) writer structure"] impl crate :: Writable for SmcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SMCR to value 0"] impl crate :: Resettable for SmcrSpec { } }
#[doc = "DIER (rw) register accessor: DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dier`] module"]
#[doc (alias = "DIER")] pub type Dier = crate :: Reg < dier :: DierSpec > ;
#[doc = "DMA/Interrupt enable register"] pub mod dier {
#[doc = "Register `DIER` reader"] pub type R = crate :: R < DierSpec > ;
#[doc = "Register `DIER` writer"] pub type W = crate :: W < DierSpec > ;
#[doc = "Field `UIE` reader - Update interrupt enable"] pub type UieR = crate :: BitReader ;
#[doc = "Field `UIE` writer - Update interrupt enable"] pub type UieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IE` reader - Capture/Compare 1 interrupt enable"] pub type Cc1ieR = crate :: BitReader ;
#[doc = "Field `CC1IE` writer - Capture/Compare 1 interrupt enable"] pub type Cc1ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2IE` reader - Capture/Compare 2 interrupt enable"] pub type Cc2ieR = crate :: BitReader ;
#[doc = "Field `CC2IE` writer - Capture/Compare 2 interrupt enable"] pub type Cc2ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3IE` reader - Capture/Compare 3 interrupt enable"] pub type Cc3ieR = crate :: BitReader ;
#[doc = "Field `CC3IE` writer - Capture/Compare 3 interrupt enable"] pub type Cc3ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4IE` reader - Capture/Compare 4 interrupt enable"] pub type Cc4ieR = crate :: BitReader ;
#[doc = "Field `CC4IE` writer - Capture/Compare 4 interrupt enable"] pub type Cc4ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIE` reader - Trigger interrupt enable"] pub type TieR = crate :: BitReader ;
#[doc = "Field `TIE` writer - Trigger interrupt enable"] pub type TieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UDE` reader - Update DMA request enable"] pub type UdeR = crate :: BitReader ;
#[doc = "Field `UDE` writer - Update DMA request enable"] pub type UdeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1DE` reader - Capture/Compare 1 DMA request enable"] pub type Cc1deR = crate :: BitReader ;
#[doc = "Field `CC1DE` writer - Capture/Compare 1 DMA request enable"] pub type Cc1deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2DE` reader - Capture/Compare 2 DMA request enable"] pub type Cc2deR = crate :: BitReader ;
#[doc = "Field `CC2DE` writer - Capture/Compare 2 DMA request enable"] pub type Cc2deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3DE` reader - Capture/Compare 3 DMA request enable"] pub type Cc3deR = crate :: BitReader ;
#[doc = "Field `CC3DE` writer - Capture/Compare 3 DMA request enable"] pub type Cc3deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4DE` reader - Capture/Compare 4 DMA request enable"] pub type Cc4deR = crate :: BitReader ;
#[doc = "Field `CC4DE` writer - Capture/Compare 4 DMA request enable"] pub type Cc4deW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TDE` reader - Trigger DMA request enable"] pub type TdeR = crate :: BitReader ;
#[doc = "Field `TDE` writer - Trigger DMA request enable"] pub type TdeW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& self) -> UieR { UieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& self) -> Cc1ieR { Cc1ieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
#[inline (always)] pub fn cc2ie (& self) -> Cc2ieR { Cc2ieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
#[inline (always)] pub fn cc3ie (& self) -> Cc3ieR { Cc3ieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
#[inline (always)] pub fn cc4ie (& self) -> Cc4ieR { Cc4ieR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 6 - Trigger interrupt enable"]
#[inline (always)] pub fn tie (& self) -> TieR { TieR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 8 - Update DMA request enable"]
#[inline (always)] pub fn ude (& self) -> UdeR { UdeR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
#[inline (always)] pub fn cc1de (& self) -> Cc1deR { Cc1deR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
#[inline (always)] pub fn cc2de (& self) -> Cc2deR { Cc2deR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
#[inline (always)] pub fn cc3de (& self) -> Cc3deR { Cc3deR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
#[inline (always)] pub fn cc4de (& self) -> Cc4deR { Cc4deR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 14 - Trigger DMA request enable"]
#[inline (always)] pub fn tde (& self) -> TdeR { TdeR :: new (((self . bits >> 14) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& mut self) -> UieW < '_ , DierSpec > { UieW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& mut self) -> Cc1ieW < '_ , DierSpec > { Cc1ieW :: new (self , 1) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
#[inline (always)] pub fn cc2ie (& mut self) -> Cc2ieW < '_ , DierSpec > { Cc2ieW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
#[inline (always)] pub fn cc3ie (& mut self) -> Cc3ieW < '_ , DierSpec > { Cc3ieW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
#[inline (always)] pub fn cc4ie (& mut self) -> Cc4ieW < '_ , DierSpec > { Cc4ieW :: new (self , 4) }
#[doc = "Bit 6 - Trigger interrupt enable"]
#[inline (always)] pub fn tie (& mut self) -> TieW < '_ , DierSpec > { TieW :: new (self , 6) }
#[doc = "Bit 8 - Update DMA request enable"]
#[inline (always)] pub fn ude (& mut self) -> UdeW < '_ , DierSpec > { UdeW :: new (self , 8) }
#[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
#[inline (always)] pub fn cc1de (& mut self) -> Cc1deW < '_ , DierSpec > { Cc1deW :: new (self , 9) }
#[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
#[inline (always)] pub fn cc2de (& mut self) -> Cc2deW < '_ , DierSpec > { Cc2deW :: new (self , 10) }
#[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
#[inline (always)] pub fn cc3de (& mut self) -> Cc3deW < '_ , DierSpec > { Cc3deW :: new (self , 11) }
#[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
#[inline (always)] pub fn cc4de (& mut self) -> Cc4deW < '_ , DierSpec > { Cc4deW :: new (self , 12) }
#[doc = "Bit 14 - Trigger DMA request enable"]
#[inline (always)] pub fn tde (& mut self) -> TdeW < '_ , DierSpec > { TdeW :: new (self , 14) } }
#[doc = "DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DierSpec ; impl crate :: RegisterSpec for DierSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dier::R`](R) reader structure"] impl crate :: Readable for DierSpec { }
#[doc = "`write(|w| ..)` method takes [`dier::W`](W) writer structure"] impl crate :: Writable for DierSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DIER to value 0"] impl crate :: Resettable for DierSpec { } }
#[doc = "SR (rw) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ;
#[doc = "Field `UIF` reader - Update interrupt flag"] pub type UifR = crate :: BitReader ;
#[doc = "Field `UIF` writer - Update interrupt flag"] pub type UifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IF` reader - Capture/Compare 1 interrupt flag"] pub type Cc1ifR = crate :: BitReader ;
#[doc = "Field `CC1IF` writer - Capture/Compare 1 interrupt flag"] pub type Cc1ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2IF` reader - Capture/Compare 2 interrupt flag"] pub type Cc2ifR = crate :: BitReader ;
#[doc = "Field `CC2IF` writer - Capture/Compare 2 interrupt flag"] pub type Cc2ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3IF` reader - Capture/Compare 3 interrupt flag"] pub type Cc3ifR = crate :: BitReader ;
#[doc = "Field `CC3IF` writer - Capture/Compare 3 interrupt flag"] pub type Cc3ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4IF` reader - Capture/Compare 4 interrupt flag"] pub type Cc4ifR = crate :: BitReader ;
#[doc = "Field `CC4IF` writer - Capture/Compare 4 interrupt flag"] pub type Cc4ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TIF` reader - Trigger interrupt flag"] pub type TifR = crate :: BitReader ;
#[doc = "Field `TIF` writer - Trigger interrupt flag"] pub type TifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1OF` reader - Capture/Compare 1 overcapture flag"] pub type Cc1ofR = crate :: BitReader ;
#[doc = "Field `CC1OF` writer - Capture/Compare 1 overcapture flag"] pub type Cc1ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2OF` reader - Capture/Compare 2 overcapture flag"] pub type Cc2ofR = crate :: BitReader ;
#[doc = "Field `CC2OF` writer - Capture/Compare 2 overcapture flag"] pub type Cc2ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3OF` reader - Capture/Compare 3 overcapture flag"] pub type Cc3ofR = crate :: BitReader ;
#[doc = "Field `CC3OF` writer - Capture/Compare 3 overcapture flag"] pub type Cc3ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4OF` reader - Capture/Compare 4 overcapture flag"] pub type Cc4ofR = crate :: BitReader ;
#[doc = "Field `CC4OF` writer - Capture/Compare 4 overcapture flag"] pub type Cc4ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& self) -> UifR { UifR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& self) -> Cc1ifR { Cc1ifR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
#[inline (always)] pub fn cc2if (& self) -> Cc2ifR { Cc2ifR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
#[inline (always)] pub fn cc3if (& self) -> Cc3ifR { Cc3ifR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
#[inline (always)] pub fn cc4if (& self) -> Cc4ifR { Cc4ifR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 6 - Trigger interrupt flag"]
#[inline (always)] pub fn tif (& self) -> TifR { TifR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& self) -> Cc1ofR { Cc1ofR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Capture/Compare 2 overcapture flag"]
#[inline (always)] pub fn cc2of (& self) -> Cc2ofR { Cc2ofR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
#[inline (always)] pub fn cc3of (& self) -> Cc3ofR { Cc3ofR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
#[inline (always)] pub fn cc4of (& self) -> Cc4ofR { Cc4ofR :: new (((self . bits >> 12) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& mut self) -> UifW < '_ , SrSpec > { UifW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& mut self) -> Cc1ifW < '_ , SrSpec > { Cc1ifW :: new (self , 1) }
#[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
#[inline (always)] pub fn cc2if (& mut self) -> Cc2ifW < '_ , SrSpec > { Cc2ifW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
#[inline (always)] pub fn cc3if (& mut self) -> Cc3ifW < '_ , SrSpec > { Cc3ifW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
#[inline (always)] pub fn cc4if (& mut self) -> Cc4ifW < '_ , SrSpec > { Cc4ifW :: new (self , 4) }
#[doc = "Bit 6 - Trigger interrupt flag"]
#[inline (always)] pub fn tif (& mut self) -> TifW < '_ , SrSpec > { TifW :: new (self , 6) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& mut self) -> Cc1ofW < '_ , SrSpec > { Cc1ofW :: new (self , 9) }
#[doc = "Bit 10 - Capture/Compare 2 overcapture flag"]
#[inline (always)] pub fn cc2of (& mut self) -> Cc2ofW < '_ , SrSpec > { Cc2ofW :: new (self , 10) }
#[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
#[inline (always)] pub fn cc3of (& mut self) -> Cc3ofW < '_ , SrSpec > { Cc3ofW :: new (self , 11) }
#[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
#[inline (always)] pub fn cc4of (& mut self) -> Cc4ofW < '_ , SrSpec > { Cc4ofW :: new (self , 12) } }
#[doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } }
#[doc = "EGR (w) register accessor: event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@egr`] module"]
#[doc (alias = "EGR")] pub type Egr = crate :: Reg < egr :: EgrSpec > ;
#[doc = "event generation register"] pub mod egr {
#[doc = "Register `EGR` writer"] pub type W = crate :: W < EgrSpec > ;
#[doc = "Field `UG` writer - Update generation"] pub type UgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1G` writer - Capture/compare 1 generation"] pub type Cc1gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2G` writer - Capture/compare 2 generation"] pub type Cc2gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3G` writer - Capture/compare 3 generation"] pub type Cc3gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4G` writer - Capture/compare 4 generation"] pub type Cc4gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMG` writer - Capture/Compare control update generation"] pub type ComgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TG` writer - Trigger generation"] pub type TgW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - Update generation"]
#[inline (always)] pub fn ug (& mut self) -> UgW < '_ , EgrSpec > { UgW :: new (self , 0) }
#[doc = "Bit 1 - Capture/compare 1 generation"]
#[inline (always)] pub fn cc1g (& mut self) -> Cc1gW < '_ , EgrSpec > { Cc1gW :: new (self , 1) }
#[doc = "Bit 2 - Capture/compare 2 generation"]
#[inline (always)] pub fn cc2g (& mut self) -> Cc2gW < '_ , EgrSpec > { Cc2gW :: new (self , 2) }
#[doc = "Bit 3 - Capture/compare 3 generation"]
#[inline (always)] pub fn cc3g (& mut self) -> Cc3gW < '_ , EgrSpec > { Cc3gW :: new (self , 3) }
#[doc = "Bit 4 - Capture/compare 4 generation"]
#[inline (always)] pub fn cc4g (& mut self) -> Cc4gW < '_ , EgrSpec > { Cc4gW :: new (self , 4) }
#[doc = "Bit 5 - Capture/Compare control update generation"]
#[inline (always)] pub fn comg (& mut self) -> ComgW < '_ , EgrSpec > { ComgW :: new (self , 5) }
#[doc = "Bit 6 - Trigger generation"]
#[inline (always)] pub fn tg (& mut self) -> TgW < '_ , EgrSpec > { TgW :: new (self , 6) } }
#[doc = "event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EgrSpec ; impl crate :: RegisterSpec for EgrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`egr::W`](W) writer structure"] impl crate :: Writable for EgrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EGR to value 0"] impl crate :: Resettable for EgrSpec { } }
#[doc = "CCMR1_Output (rw) register accessor: capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_output`] module"]
#[doc (alias = "CCMR1_Output")] pub type Ccmr1Output = crate :: Reg < ccmr1_output :: Ccmr1OutputSpec > ;
#[doc = "capture/compare mode register 1 (output mode)"] pub mod ccmr1_output {
#[doc = "Register `CCMR1_Output` reader"] pub type R = crate :: R < Ccmr1OutputSpec > ;
#[doc = "Register `CCMR1_Output` writer"] pub type W = crate :: W < Ccmr1OutputSpec > ;
#[doc = "Field `CC1S` reader - Capture/Compare 2 output enable"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/Compare 2 output enable"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC1FE` reader - Output compare 1 fast enable"] pub type Oc1feR = crate :: BitReader ;
#[doc = "Field `OC1FE` writer - Output compare 1 fast enable"] pub type Oc1feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1PE` reader - Output compare 1 preload enable"] pub type Oc1peR = crate :: BitReader ;
#[doc = "Field `OC1PE` writer - Output compare 1 preload enable"] pub type Oc1peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1M` reader - Output compare 1 mode"] pub type Oc1mR = crate :: FieldReader ;
#[doc = "Field `OC1M` writer - Output compare 1 mode"] pub type Oc1mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC1CE` reader - Output compare 1 clear enable"] pub type Oc1ceR = crate :: BitReader ;
#[doc = "Field `OC1CE` writer - Output compare 1 clear enable"] pub type Oc1ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2S` reader - Capure/Compare 2 selection"] pub type Cc2sR = crate :: FieldReader ;
#[doc = "Field `CC2S` writer - Capure/Compare 2 selection"] pub type Cc2sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC2FE` reader - Output compare 4 fast enable"] pub type Oc2feR = crate :: BitReader ;
#[doc = "Field `OC2FE` writer - Output compare 4 fast enable"] pub type Oc2feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC2PE` reader - Output compare 2 preload enable"] pub type Oc2peR = crate :: BitReader ;
#[doc = "Field `OC2PE` writer - Output compare 2 preload enable"] pub type Oc2peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC2M` reader - Output compare 2 mode"] pub type Oc2mR = crate :: FieldReader ;
#[doc = "Field `OC2M` writer - Output compare 2 mode"] pub type Oc2mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC2CE` reader - Output compare 2 clear enable"] pub type Oc2ceR = crate :: BitReader ;
#[doc = "Field `OC2CE` writer - Output compare 2 clear enable"] pub type Oc2ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& self) -> Oc1feR { Oc1feR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& self) -> Oc1peR { Oc1peR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& self) -> Oc1mR { Oc1mR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Output compare 1 clear enable"]
#[inline (always)] pub fn oc1ce (& self) -> Oc1ceR { Oc1ceR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Capure/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& self) -> Cc2sR { Cc2sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc2fe (& self) -> Oc2feR { Oc2feR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Output compare 2 preload enable"]
#[inline (always)] pub fn oc2pe (& self) -> Oc2peR { Oc2peR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bits 12:14 - Output compare 2 mode"]
#[inline (always)] pub fn oc2m (& self) -> Oc2mR { Oc2mR :: new (((self . bits >> 12) & 7) as u8) }
#[doc = "Bit 15 - Output compare 2 clear enable"]
#[inline (always)] pub fn oc2ce (& self) -> Oc2ceR { Oc2ceR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1OutputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& mut self) -> Oc1feW < '_ , Ccmr1OutputSpec > { Oc1feW :: new (self , 2) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& mut self) -> Oc1peW < '_ , Ccmr1OutputSpec > { Oc1peW :: new (self , 3) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& mut self) -> Oc1mW < '_ , Ccmr1OutputSpec > { Oc1mW :: new (self , 4) }
#[doc = "Bit 7 - Output compare 1 clear enable"]
#[inline (always)] pub fn oc1ce (& mut self) -> Oc1ceW < '_ , Ccmr1OutputSpec > { Oc1ceW :: new (self , 7) }
#[doc = "Bits 8:9 - Capure/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& mut self) -> Cc2sW < '_ , Ccmr1OutputSpec > { Cc2sW :: new (self , 8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc2fe (& mut self) -> Oc2feW < '_ , Ccmr1OutputSpec > { Oc2feW :: new (self , 10) }
#[doc = "Bit 11 - Output compare 2 preload enable"]
#[inline (always)] pub fn oc2pe (& mut self) -> Oc2peW < '_ , Ccmr1OutputSpec > { Oc2peW :: new (self , 11) }
#[doc = "Bits 12:14 - Output compare 2 mode"]
#[inline (always)] pub fn oc2m (& mut self) -> Oc2mW < '_ , Ccmr1OutputSpec > { Oc2mW :: new (self , 12) }
#[doc = "Bit 15 - Output compare 2 clear enable"]
#[inline (always)] pub fn oc2ce (& mut self) -> Oc2ceW < '_ , Ccmr1OutputSpec > { Oc2ceW :: new (self , 15) } }
#[doc = "capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1OutputSpec ; impl crate :: RegisterSpec for Ccmr1OutputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_output::R`](R) reader structure"] impl crate :: Readable for Ccmr1OutputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_output::W`](W) writer structure"] impl crate :: Writable for Ccmr1OutputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Output to value 0"] impl crate :: Resettable for Ccmr1OutputSpec { } }
#[doc = "CCMR1_Input (rw) register accessor: capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_input`] module"]
#[doc (alias = "CCMR1_Input")] pub type Ccmr1Input = crate :: Reg < ccmr1_input :: Ccmr1InputSpec > ;
#[doc = "capture/compare mode register 1 (input mode)"] pub mod ccmr1_input {
#[doc = "Register `CCMR1_Input` reader"] pub type R = crate :: R < Ccmr1InputSpec > ;
#[doc = "Register `CCMR1_Input` writer"] pub type W = crate :: W < Ccmr1InputSpec > ;
#[doc = "Field `CC1S` reader - Capture/compare 1 selection"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/compare 1 selection"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1PSC` reader - Input capture 1 prescaler"] pub type Ic1pscR = crate :: FieldReader ;
#[doc = "Field `IC1PSC` writer - Input capture 1 prescaler"] pub type Ic1pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1F` reader - Input capture 1 filter"] pub type Ic1fR = crate :: FieldReader ;
#[doc = "Field `IC1F` writer - Input capture 1 filter"] pub type Ic1fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CC2S` reader - Capture/Compare 2 selection"] pub type Cc2sR = crate :: FieldReader ;
#[doc = "Field `CC2S` writer - Capture/Compare 2 selection"] pub type Cc2sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC2PSC` reader - Input capture 2 prescaler"] pub type Ic2pscR = crate :: FieldReader ;
#[doc = "Field `IC2PSC` writer - Input capture 2 prescaler"] pub type Ic2pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC2F` reader - Input capture 2 filter"] pub type Ic2fR = crate :: FieldReader ;
#[doc = "Field `IC2F` writer - Input capture 2 filter"] pub type Ic2fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& self) -> Ic1pscR { Ic1pscR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& self) -> Ic1fR { Ic1fR :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:9 - Capture/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& self) -> Cc2sR { Cc2sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - Input capture 2 prescaler"]
#[inline (always)] pub fn ic2psc (& self) -> Ic2pscR { Ic2pscR :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:15 - Input capture 2 filter"]
#[inline (always)] pub fn ic2f (& self) -> Ic2fR { Ic2fR :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1InputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& mut self) -> Ic1pscW < '_ , Ccmr1InputSpec > { Ic1pscW :: new (self , 2) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& mut self) -> Ic1fW < '_ , Ccmr1InputSpec > { Ic1fW :: new (self , 4) }
#[doc = "Bits 8:9 - Capture/Compare 2 selection"]
#[inline (always)] pub fn cc2s (& mut self) -> Cc2sW < '_ , Ccmr1InputSpec > { Cc2sW :: new (self , 8) }
#[doc = "Bits 10:11 - Input capture 2 prescaler"]
#[inline (always)] pub fn ic2psc (& mut self) -> Ic2pscW < '_ , Ccmr1InputSpec > { Ic2pscW :: new (self , 10) }
#[doc = "Bits 12:15 - Input capture 2 filter"]
#[inline (always)] pub fn ic2f (& mut self) -> Ic2fW < '_ , Ccmr1InputSpec > { Ic2fW :: new (self , 12) } }
#[doc = "capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1InputSpec ; impl crate :: RegisterSpec for Ccmr1InputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_input::R`](R) reader structure"] impl crate :: Readable for Ccmr1InputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_input::W`](W) writer structure"] impl crate :: Writable for Ccmr1InputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Input to value 0"] impl crate :: Resettable for Ccmr1InputSpec { } }
#[doc = "CCMR2_Output (rw) register accessor: capture/compare mode register 2(output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr2_output`] module"]
#[doc (alias = "CCMR2_Output")] pub type Ccmr2Output = crate :: Reg < ccmr2_output :: Ccmr2OutputSpec > ;
#[doc = "capture/compare mode register 2(output mode)"] pub mod ccmr2_output {
#[doc = "Register `CCMR2_Output` reader"] pub type R = crate :: R < Ccmr2OutputSpec > ;
#[doc = "Register `CCMR2_Output` writer"] pub type W = crate :: W < Ccmr2OutputSpec > ;
#[doc = "Field `CC3S` reader - Capture/Compare 3 selection"] pub type Cc3sR = crate :: FieldReader ;
#[doc = "Field `CC3S` writer - Capture/Compare 3 selection"] pub type Cc3sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC3FE` reader - Output compare 3 fast enable"] pub type Oc3feR = crate :: BitReader ;
#[doc = "Field `OC3FE` writer - Output compare 3 fast enable"] pub type Oc3feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC3PE` reader - Output compare 3 preload enable"] pub type Oc3peR = crate :: BitReader ;
#[doc = "Field `OC3PE` writer - Output compare 3 preload enable"] pub type Oc3peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC3M` reader - Output compare 3 mode"] pub type Oc3mR = crate :: FieldReader ;
#[doc = "Field `OC3M` writer - Output compare 3 mode"] pub type Oc3mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC3CE` reader - Output compare 3 clear enable"] pub type Oc3ceR = crate :: BitReader ;
#[doc = "Field `OC3CE` writer - Output compare 3 clear enable"] pub type Oc3ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4S` reader - Capture/Compare 4 selection"] pub type Cc4sR = crate :: FieldReader ;
#[doc = "Field `CC4S` writer - Capture/Compare 4 selection"] pub type Cc4sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC4FE` reader - Output compare 4 fast enable"] pub type Oc4feR = crate :: BitReader ;
#[doc = "Field `OC4FE` writer - Output compare 4 fast enable"] pub type Oc4feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC4PE` reader - Output compare 4 preload enable"] pub type Oc4peR = crate :: BitReader ;
#[doc = "Field `OC4PE` writer - Output compare 4 preload enable"] pub type Oc4peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC4M` reader - Output compare 4 mode"] pub type Oc4mR = crate :: FieldReader ;
#[doc = "Field `OC4M` writer - Output compare 4 mode"] pub type Oc4mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ;
#[doc = "Field `OC4CE` reader - Output compare 4 clear enable"] pub type Oc4ceR = crate :: BitReader ;
#[doc = "Field `OC4CE` writer - Output compare 4 clear enable"] pub type Oc4ceW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:1 - Capture/Compare 3 selection"]
#[inline (always)] pub fn cc3s (& self) -> Cc3sR { Cc3sR :: new ((self . bits & 3) as u8) }
#[doc = "Bit 2 - Output compare 3 fast enable"]
#[inline (always)] pub fn oc3fe (& self) -> Oc3feR { Oc3feR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Output compare 3 preload enable"]
#[inline (always)] pub fn oc3pe (& self) -> Oc3peR { Oc3peR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Output compare 3 mode"]
#[inline (always)] pub fn oc3m (& self) -> Oc3mR { Oc3mR :: new (((self . bits >> 4) & 7) as u8) }
#[doc = "Bit 7 - Output compare 3 clear enable"]
#[inline (always)] pub fn oc3ce (& self) -> Oc3ceR { Oc3ceR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& self) -> Cc4sR { Cc4sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc4fe (& self) -> Oc4feR { Oc4feR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Output compare 4 preload enable"]
#[inline (always)] pub fn oc4pe (& self) -> Oc4peR { Oc4peR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bits 12:14 - Output compare 4 mode"]
#[inline (always)] pub fn oc4m (& self) -> Oc4mR { Oc4mR :: new (((self . bits >> 12) & 7) as u8) }
#[doc = "Bit 15 - Output compare 4 clear enable"]
#[inline (always)] pub fn oc4ce (& self) -> Oc4ceR { Oc4ceR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:1 - Capture/Compare 3 selection"]
#[inline (always)] pub fn cc3s (& mut self) -> Cc3sW < '_ , Ccmr2OutputSpec > { Cc3sW :: new (self , 0) }
#[doc = "Bit 2 - Output compare 3 fast enable"]
#[inline (always)] pub fn oc3fe (& mut self) -> Oc3feW < '_ , Ccmr2OutputSpec > { Oc3feW :: new (self , 2) }
#[doc = "Bit 3 - Output compare 3 preload enable"]
#[inline (always)] pub fn oc3pe (& mut self) -> Oc3peW < '_ , Ccmr2OutputSpec > { Oc3peW :: new (self , 3) }
#[doc = "Bits 4:6 - Output compare 3 mode"]
#[inline (always)] pub fn oc3m (& mut self) -> Oc3mW < '_ , Ccmr2OutputSpec > { Oc3mW :: new (self , 4) }
#[doc = "Bit 7 - Output compare 3 clear enable"]
#[inline (always)] pub fn oc3ce (& mut self) -> Oc3ceW < '_ , Ccmr2OutputSpec > { Oc3ceW :: new (self , 7) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& mut self) -> Cc4sW < '_ , Ccmr2OutputSpec > { Cc4sW :: new (self , 8) }
#[doc = "Bit 10 - Output compare 4 fast enable"]
#[inline (always)] pub fn oc4fe (& mut self) -> Oc4feW < '_ , Ccmr2OutputSpec > { Oc4feW :: new (self , 10) }
#[doc = "Bit 11 - Output compare 4 preload enable"]
#[inline (always)] pub fn oc4pe (& mut self) -> Oc4peW < '_ , Ccmr2OutputSpec > { Oc4peW :: new (self , 11) }
#[doc = "Bits 12:14 - Output compare 4 mode"]
#[inline (always)] pub fn oc4m (& mut self) -> Oc4mW < '_ , Ccmr2OutputSpec > { Oc4mW :: new (self , 12) }
#[doc = "Bit 15 - Output compare 4 clear enable"]
#[inline (always)] pub fn oc4ce (& mut self) -> Oc4ceW < '_ , Ccmr2OutputSpec > { Oc4ceW :: new (self , 15) } }
#[doc = "capture/compare mode register 2(output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr2OutputSpec ; impl crate :: RegisterSpec for Ccmr2OutputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr2_output::R`](R) reader structure"] impl crate :: Readable for Ccmr2OutputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr2_output::W`](W) writer structure"] impl crate :: Writable for Ccmr2OutputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR2_Output to value 0"] impl crate :: Resettable for Ccmr2OutputSpec { } }
#[doc = "CCMR2_Input (rw) register accessor: capture/compare mode register 2 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr2_input`] module"]
#[doc (alias = "CCMR2_Input")] pub type Ccmr2Input = crate :: Reg < ccmr2_input :: Ccmr2InputSpec > ;
#[doc = "capture/compare mode register 2 (input mode)"] pub mod ccmr2_input {
#[doc = "Register `CCMR2_Input` reader"] pub type R = crate :: R < Ccmr2InputSpec > ;
#[doc = "Register `CCMR2_Input` writer"] pub type W = crate :: W < Ccmr2InputSpec > ;
#[doc = "Field `CC3S` reader - Capture/compare 3 selection"] pub type Cc3sR = crate :: FieldReader ;
#[doc = "Field `CC3S` writer - Capture/compare 3 selection"] pub type Cc3sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC3PSC` reader - Input capture 3 prescaler"] pub type Ic3pscR = crate :: FieldReader ;
#[doc = "Field `IC3PSC` writer - Input capture 3 prescaler"] pub type Ic3pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC3F` reader - Input capture 3 filter"] pub type Ic3fR = crate :: FieldReader ;
#[doc = "Field `IC3F` writer - Input capture 3 filter"] pub type Ic3fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `CC4S` reader - Capture/Compare 4 selection"] pub type Cc4sR = crate :: FieldReader ;
#[doc = "Field `CC4S` writer - Capture/Compare 4 selection"] pub type Cc4sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC4PSC` reader - Input capture 4 prescaler"] pub type Ic4pscR = crate :: FieldReader ;
#[doc = "Field `IC4PSC` writer - Input capture 4 prescaler"] pub type Ic4pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC4F` reader - Input capture 4 filter"] pub type Ic4fR = crate :: FieldReader ;
#[doc = "Field `IC4F` writer - Input capture 4 filter"] pub type Ic4fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:1 - Capture/compare 3 selection"]
#[inline (always)] pub fn cc3s (& self) -> Cc3sR { Cc3sR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Input capture 3 prescaler"]
#[inline (always)] pub fn ic3psc (& self) -> Ic3pscR { Ic3pscR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:7 - Input capture 3 filter"]
#[inline (always)] pub fn ic3f (& self) -> Ic3fR { Ic3fR :: new (((self . bits >> 4) & 0x0f) as u8) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& self) -> Cc4sR { Cc4sR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bits 10:11 - Input capture 4 prescaler"]
#[inline (always)] pub fn ic4psc (& self) -> Ic4pscR { Ic4pscR :: new (((self . bits >> 10) & 3) as u8) }
#[doc = "Bits 12:15 - Input capture 4 filter"]
#[inline (always)] pub fn ic4f (& self) -> Ic4fR { Ic4fR :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/compare 3 selection"]
#[inline (always)] pub fn cc3s (& mut self) -> Cc3sW < '_ , Ccmr2InputSpec > { Cc3sW :: new (self , 0) }
#[doc = "Bits 2:3 - Input capture 3 prescaler"]
#[inline (always)] pub fn ic3psc (& mut self) -> Ic3pscW < '_ , Ccmr2InputSpec > { Ic3pscW :: new (self , 2) }
#[doc = "Bits 4:7 - Input capture 3 filter"]
#[inline (always)] pub fn ic3f (& mut self) -> Ic3fW < '_ , Ccmr2InputSpec > { Ic3fW :: new (self , 4) }
#[doc = "Bits 8:9 - Capture/Compare 4 selection"]
#[inline (always)] pub fn cc4s (& mut self) -> Cc4sW < '_ , Ccmr2InputSpec > { Cc4sW :: new (self , 8) }
#[doc = "Bits 10:11 - Input capture 4 prescaler"]
#[inline (always)] pub fn ic4psc (& mut self) -> Ic4pscW < '_ , Ccmr2InputSpec > { Ic4pscW :: new (self , 10) }
#[doc = "Bits 12:15 - Input capture 4 filter"]
#[inline (always)] pub fn ic4f (& mut self) -> Ic4fW < '_ , Ccmr2InputSpec > { Ic4fW :: new (self , 12) } }
#[doc = "capture/compare mode register 2 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr2InputSpec ; impl crate :: RegisterSpec for Ccmr2InputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr2_input::R`](R) reader structure"] impl crate :: Readable for Ccmr2InputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr2_input::W`](W) writer structure"] impl crate :: Writable for Ccmr2InputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR2_Input to value 0"] impl crate :: Resettable for Ccmr2InputSpec { } }
#[doc = "CCER (rw) register accessor: capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccer`] module"]
#[doc (alias = "CCER")] pub type Ccer = crate :: Reg < ccer :: CcerSpec > ;
#[doc = "capture/compare enable register"] pub mod ccer {
#[doc = "Register `CCER` reader"] pub type R = crate :: R < CcerSpec > ;
#[doc = "Register `CCER` writer"] pub type W = crate :: W < CcerSpec > ;
#[doc = "Field `CC1E` reader - Capture/Compare 1 output enable"] pub type Cc1eR = crate :: BitReader ;
#[doc = "Field `CC1E` writer - Capture/Compare 1 output enable"] pub type Cc1eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1P` reader - Capture/Compare 1 output polarity"] pub type Cc1pR = crate :: BitReader ;
#[doc = "Field `CC1P` writer - Capture/Compare 1 output polarity"] pub type Cc1pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1NP` reader - Capture/Compare 1 complementary output polarity"] pub type Cc1npR = crate :: BitReader ;
#[doc = "Field `CC1NP` writer - Capture/Compare 1 complementary output polarity"] pub type Cc1npW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2E` reader - Capture/Compare 2 output enable"] pub type Cc2eR = crate :: BitReader ;
#[doc = "Field `CC2E` writer - Capture/Compare 2 output enable"] pub type Cc2eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2P` reader - Capture/Compare 2 output polarity"] pub type Cc2pR = crate :: BitReader ;
#[doc = "Field `CC2P` writer - Capture/Compare 2 output polarity"] pub type Cc2pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC2NP` reader - Capture/Compare 2 complementary output polarity"] pub type Cc2npR = crate :: BitReader ;
#[doc = "Field `CC2NP` writer - Capture/Compare 2 complementary output polarity"] pub type Cc2npW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3E` reader - Capture/Compare 3 output enable"] pub type Cc3eR = crate :: BitReader ;
#[doc = "Field `CC3E` writer - Capture/Compare 3 output enable"] pub type Cc3eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3P` reader - Capture/Compare 3 output polarity"] pub type Cc3pR = crate :: BitReader ;
#[doc = "Field `CC3P` writer - Capture/Compare 3 output polarity"] pub type Cc3pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC3NP` reader - Capture/Compare 3 complementary output polarity"] pub type Cc3npR = crate :: BitReader ;
#[doc = "Field `CC3NP` writer - Capture/Compare 3 complementary output polarity"] pub type Cc3npW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4E` reader - Capture/Compare 4 output enable"] pub type Cc4eR = crate :: BitReader ;
#[doc = "Field `CC4E` writer - Capture/Compare 4 output enable"] pub type Cc4eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4P` reader - Capture/Compare 4 output polarity"] pub type Cc4pR = crate :: BitReader ;
#[doc = "Field `CC4P` writer - Capture/Compare 4 output polarity"] pub type Cc4pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC4NP` reader - Capture/Compare 4 complementary output polarity"] pub type Cc4npR = crate :: BitReader ;
#[doc = "Field `CC4NP` writer - Capture/Compare 4 complementary output polarity"] pub type Cc4npW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& self) -> Cc1eR { Cc1eR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& self) -> Cc1pR { Cc1pR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output polarity"]
#[inline (always)] pub fn cc1np (& self) -> Cc1npR { Cc1npR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc2e (& self) -> Cc2eR { Cc2eR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Capture/Compare 2 output polarity"]
#[inline (always)] pub fn cc2p (& self) -> Cc2pR { Cc2pR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 7 - Capture/Compare 2 complementary output polarity"]
#[inline (always)] pub fn cc2np (& self) -> Cc2npR { Cc2npR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Capture/Compare 3 output enable"]
#[inline (always)] pub fn cc3e (& self) -> Cc3eR { Cc3eR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 3 output polarity"]
#[inline (always)] pub fn cc3p (& self) -> Cc3pR { Cc3pR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 11 - Capture/Compare 3 complementary output polarity"]
#[inline (always)] pub fn cc3np (& self) -> Cc3npR { Cc3npR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Capture/Compare 4 output enable"]
#[inline (always)] pub fn cc4e (& self) -> Cc4eR { Cc4eR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Capture/Compare 4 output polarity"]
#[inline (always)] pub fn cc4p (& self) -> Cc4pR { Cc4pR :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 15 - Capture/Compare 4 complementary output polarity"]
#[inline (always)] pub fn cc4np (& self) -> Cc4npR { Cc4npR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& mut self) -> Cc1eW < '_ , CcerSpec > { Cc1eW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& mut self) -> Cc1pW < '_ , CcerSpec > { Cc1pW :: new (self , 1) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output polarity"]
#[inline (always)] pub fn cc1np (& mut self) -> Cc1npW < '_ , CcerSpec > { Cc1npW :: new (self , 3) }
#[doc = "Bit 4 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc2e (& mut self) -> Cc2eW < '_ , CcerSpec > { Cc2eW :: new (self , 4) }
#[doc = "Bit 5 - Capture/Compare 2 output polarity"]
#[inline (always)] pub fn cc2p (& mut self) -> Cc2pW < '_ , CcerSpec > { Cc2pW :: new (self , 5) }
#[doc = "Bit 7 - Capture/Compare 2 complementary output polarity"]
#[inline (always)] pub fn cc2np (& mut self) -> Cc2npW < '_ , CcerSpec > { Cc2npW :: new (self , 7) }
#[doc = "Bit 8 - Capture/Compare 3 output enable"]
#[inline (always)] pub fn cc3e (& mut self) -> Cc3eW < '_ , CcerSpec > { Cc3eW :: new (self , 8) }
#[doc = "Bit 9 - Capture/Compare 3 output polarity"]
#[inline (always)] pub fn cc3p (& mut self) -> Cc3pW < '_ , CcerSpec > { Cc3pW :: new (self , 9) }
#[doc = "Bit 11 - Capture/Compare 3 complementary output polarity"]
#[inline (always)] pub fn cc3np (& mut self) -> Cc3npW < '_ , CcerSpec > { Cc3npW :: new (self , 11) }
#[doc = "Bit 12 - Capture/Compare 4 output enable"]
#[inline (always)] pub fn cc4e (& mut self) -> Cc4eW < '_ , CcerSpec > { Cc4eW :: new (self , 12) }
#[doc = "Bit 13 - Capture/Compare 4 output polarity"]
#[inline (always)] pub fn cc4p (& mut self) -> Cc4pW < '_ , CcerSpec > { Cc4pW :: new (self , 13) }
#[doc = "Bit 15 - Capture/Compare 4 complementary output polarity"]
#[inline (always)] pub fn cc4np (& mut self) -> Cc4npW < '_ , CcerSpec > { Cc4npW :: new (self , 15) } }
#[doc = "capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CcerSpec ; impl crate :: RegisterSpec for CcerSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccer::R`](R) reader structure"] impl crate :: Readable for CcerSpec { }
#[doc = "`write(|w| ..)` method takes [`ccer::W`](W) writer structure"] impl crate :: Writable for CcerSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCER to value 0"] impl crate :: Resettable for CcerSpec { } }
#[doc = "CNT (rw) register accessor: counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnt`] module"]
#[doc (alias = "CNT")] pub type Cnt = crate :: Reg < cnt :: CntSpec > ;
#[doc = "counter"] pub mod cnt {
#[doc = "Register `CNT` reader"] pub type R = crate :: R < CntSpec > ;
#[doc = "Register `CNT` writer"] pub type W = crate :: W < CntSpec > ;
#[doc = "Field `CNT` reader - Counter value"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - Counter value"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Counter value"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Counter value"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , CntSpec > { CntW :: new (self , 0) } }
#[doc = "counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CntSpec ; impl crate :: RegisterSpec for CntSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cnt::R`](R) reader structure"] impl crate :: Readable for CntSpec { }
#[doc = "`write(|w| ..)` method takes [`cnt::W`](W) writer structure"] impl crate :: Writable for CntSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CNT to value 0"] impl crate :: Resettable for CntSpec { } }
#[doc = "PSC (rw) register accessor: prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psc`] module"]
#[doc (alias = "PSC")] pub type Psc = crate :: Reg < psc :: PscSpec > ;
#[doc = "prescaler"] pub mod psc {
#[doc = "Register `PSC` reader"] pub type R = crate :: R < PscSpec > ;
#[doc = "Register `PSC` writer"] pub type W = crate :: W < PscSpec > ;
#[doc = "Field `PSC` reader - Prescaler value"] pub type PscR = crate :: FieldReader < u16 > ;
#[doc = "Field `PSC` writer - Prescaler value"] pub type PscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& self) -> PscR { PscR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& mut self) -> PscW < '_ , PscSpec > { PscW :: new (self , 0) } }
#[doc = "prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PscSpec ; impl crate :: RegisterSpec for PscSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`psc::R`](R) reader structure"] impl crate :: Readable for PscSpec { }
#[doc = "`write(|w| ..)` method takes [`psc::W`](W) writer structure"] impl crate :: Writable for PscSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PSC to value 0"] impl crate :: Resettable for PscSpec { } }
#[doc = "ARR (rw) register accessor: auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@arr`] module"]
#[doc (alias = "ARR")] pub type Arr = crate :: Reg < arr :: ArrSpec > ;
#[doc = "auto-reload register"] pub mod arr {
#[doc = "Register `ARR` reader"] pub type R = crate :: R < ArrSpec > ;
#[doc = "Register `ARR` writer"] pub type W = crate :: W < ArrSpec > ;
#[doc = "Field `ARR` reader - Auto reload value"] pub type ArrR = crate :: FieldReader < u16 > ;
#[doc = "Field `ARR` writer - Auto reload value"] pub type ArrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Auto reload value"]
#[inline (always)] pub fn arr (& self) -> ArrR { ArrR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Auto reload value"]
#[inline (always)] pub fn arr (& mut self) -> ArrW < '_ , ArrSpec > { ArrW :: new (self , 0) } }
#[doc = "auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ArrSpec ; impl crate :: RegisterSpec for ArrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`arr::R`](R) reader structure"] impl crate :: Readable for ArrSpec { }
#[doc = "`write(|w| ..)` method takes [`arr::W`](W) writer structure"] impl crate :: Writable for ArrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ARR to value 0"] impl crate :: Resettable for ArrSpec { } }
#[doc = "CCR1 (rw) register accessor: capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr1`] module"]
#[doc (alias = "CCR1")] pub type Ccr1 = crate :: Reg < ccr1 :: Ccr1Spec > ;
#[doc = "capture/compare register 1"] pub mod ccr1 {
#[doc = "Register `CCR1` reader"] pub type R = crate :: R < Ccr1Spec > ;
#[doc = "Register `CCR1` writer"] pub type W = crate :: W < Ccr1Spec > ;
#[doc = "Field `CCR1` reader - Capture/Compare 1 value"] pub type Ccr1R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR1` writer - Capture/Compare 1 value"] pub type Ccr1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& self) -> Ccr1R { Ccr1R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& mut self) -> Ccr1W < '_ , Ccr1Spec > { Ccr1W :: new (self , 0) } }
#[doc = "capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr1Spec ; impl crate :: RegisterSpec for Ccr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr1::R`](R) reader structure"] impl crate :: Readable for Ccr1Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr1::W`](W) writer structure"] impl crate :: Writable for Ccr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR1 to value 0"] impl crate :: Resettable for Ccr1Spec { } }
#[doc = "CCR2 (rw) register accessor: capture/compare register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr2`] module"]
#[doc (alias = "CCR2")] pub type Ccr2 = crate :: Reg < ccr2 :: Ccr2Spec > ;
#[doc = "capture/compare register 2"] pub mod ccr2 {
#[doc = "Register `CCR2` reader"] pub type R = crate :: R < Ccr2Spec > ;
#[doc = "Register `CCR2` writer"] pub type W = crate :: W < Ccr2Spec > ;
#[doc = "Field `CCR2` reader - Capture/Compare 2 value"] pub type Ccr2R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR2` writer - Capture/Compare 2 value"] pub type Ccr2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 2 value"]
#[inline (always)] pub fn ccr2 (& self) -> Ccr2R { Ccr2R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 2 value"]
#[inline (always)] pub fn ccr2 (& mut self) -> Ccr2W < '_ , Ccr2Spec > { Ccr2W :: new (self , 0) } }
#[doc = "capture/compare register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr2Spec ; impl crate :: RegisterSpec for Ccr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr2::R`](R) reader structure"] impl crate :: Readable for Ccr2Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr2::W`](W) writer structure"] impl crate :: Writable for Ccr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR2 to value 0"] impl crate :: Resettable for Ccr2Spec { } }
#[doc = "CCR3 (rw) register accessor: capture/compare register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr3`] module"]
#[doc (alias = "CCR3")] pub type Ccr3 = crate :: Reg < ccr3 :: Ccr3Spec > ;
#[doc = "capture/compare register 3"] pub mod ccr3 {
#[doc = "Register `CCR3` reader"] pub type R = crate :: R < Ccr3Spec > ;
#[doc = "Register `CCR3` writer"] pub type W = crate :: W < Ccr3Spec > ;
#[doc = "Field `CCR3` reader - Capture/Compare 3 value"] pub type Ccr3R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR3` writer - Capture/Compare 3 value"] pub type Ccr3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 3 value"]
#[inline (always)] pub fn ccr3 (& self) -> Ccr3R { Ccr3R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 3 value"]
#[inline (always)] pub fn ccr3 (& mut self) -> Ccr3W < '_ , Ccr3Spec > { Ccr3W :: new (self , 0) } }
#[doc = "capture/compare register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr3Spec ; impl crate :: RegisterSpec for Ccr3Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr3::R`](R) reader structure"] impl crate :: Readable for Ccr3Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr3::W`](W) writer structure"] impl crate :: Writable for Ccr3Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR3 to value 0"] impl crate :: Resettable for Ccr3Spec { } }
#[doc = "CCR4 (rw) register accessor: capture/compare register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr4`] module"]
#[doc (alias = "CCR4")] pub type Ccr4 = crate :: Reg < ccr4 :: Ccr4Spec > ;
#[doc = "capture/compare register 4"] pub mod ccr4 {
#[doc = "Register `CCR4` reader"] pub type R = crate :: R < Ccr4Spec > ;
#[doc = "Register `CCR4` writer"] pub type W = crate :: W < Ccr4Spec > ;
#[doc = "Field `CCR4` reader - Capture/Compare 4 value"] pub type Ccr4R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR4` writer - Capture/Compare 4 value"] pub type Ccr4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 4 value"]
#[inline (always)] pub fn ccr4 (& self) -> Ccr4R { Ccr4R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 4 value"]
#[inline (always)] pub fn ccr4 (& mut self) -> Ccr4W < '_ , Ccr4Spec > { Ccr4W :: new (self , 0) } }
#[doc = "capture/compare register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr4::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr4::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr4Spec ; impl crate :: RegisterSpec for Ccr4Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr4::R`](R) reader structure"] impl crate :: Readable for Ccr4Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr4::W`](W) writer structure"] impl crate :: Writable for Ccr4Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR4 to value 0"] impl crate :: Resettable for Ccr4Spec { } }
#[doc = "DCR (w) register accessor: DMA control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dcr`] module"]
#[doc (alias = "DCR")] pub type Dcr = crate :: Reg < dcr :: DcrSpec > ;
#[doc = "DMA control register"] pub mod dcr {
#[doc = "Register `DCR` writer"] pub type W = crate :: W < DcrSpec > ;
#[doc = "Field `DBA` writer - DMA base address"] pub type DbaW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ;
#[doc = "Field `DBL` writer - DMA burst length"] pub type DblW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ; impl W {
#[doc = "Bits 0:4 - DMA base address"]
#[inline (always)] pub fn dba (& mut self) -> DbaW < '_ , DcrSpec > { DbaW :: new (self , 0) }
#[doc = "Bits 8:12 - DMA burst length"]
#[inline (always)] pub fn dbl (& mut self) -> DblW < '_ , DcrSpec > { DblW :: new (self , 8) } }
#[doc = "DMA control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DcrSpec ; impl crate :: RegisterSpec for DcrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`dcr::W`](W) writer structure"] impl crate :: Writable for DcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DCR to value 0"] impl crate :: Resettable for DcrSpec { } }
#[doc = "DMAR (w) register accessor: DMA address for full transfer\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmar::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmar`] module"]
#[doc (alias = "DMAR")] pub type Dmar = crate :: Reg < dmar :: DmarSpec > ;
#[doc = "DMA address for full transfer"] pub mod dmar {
#[doc = "Register `DMAR` writer"] pub type W = crate :: W < DmarSpec > ;
#[doc = "Field `DMAB` writer - DMA register for burst accesses"] pub type DmabW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl W {
#[doc = "Bits 0:15 - DMA register for burst accesses"]
#[inline (always)] pub fn dmab (& mut self) -> DmabW < '_ , DmarSpec > { DmabW :: new (self , 0) } }
#[doc = "DMA address for full transfer\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmar::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmarSpec ; impl crate :: RegisterSpec for DmarSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`dmar::W`](W) writer structure"] impl crate :: Writable for DmarSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMAR to value 0"] impl crate :: Resettable for DmarSpec { } } }
#[doc = "Basic purpose timer"] pub type Tim14 = crate :: Periph < tim14 :: RegisterBlock , 0x4001_4000 > ; impl core :: fmt :: Debug for Tim14 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Tim14") . finish () } }
#[doc = "Basic purpose timer"] pub mod tim14 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cr1 : Cr1 , _reserved1 : [u8 ; 0x08] , dier : Dier , sr : Sr , egr : Egr , _reserved_4_ccmr1 : [u8 ; 0x04] , _reserved5 : [u8 ; 0x04] , ccer : Ccer , cnt : Cnt , psc : Psc , arr : Arr , _reserved9 : [u8 ; 0x04] , ccr1 : Ccr1 , } impl RegisterBlock {
#[doc = "0x00 - control register 1"]
#[inline (always)] pub const fn cr1 (& self) -> & Cr1 { & self . cr1 }
#[doc = "0x0c - DMA/Interrupt enable register"]
#[inline (always)] pub const fn dier (& self) -> & Dier { & self . dier }
#[doc = "0x10 - status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x14 - event generation register"]
#[inline (always)] pub const fn egr (& self) -> & Egr { & self . egr }
#[doc = "0x18 - capture/compare mode register 1 (input mode)"]
#[inline (always)] pub const fn ccmr1_input (& self) -> & Ccmr1Input { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x18 - capture/compare mode register 1 (output mode)"]
#[inline (always)] pub const fn ccmr1_output (& self) -> & Ccmr1Output { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x20 - capture/compare enable register"]
#[inline (always)] pub const fn ccer (& self) -> & Ccer { & self . ccer }
#[doc = "0x24 - counter"]
#[inline (always)] pub const fn cnt (& self) -> & Cnt { & self . cnt }
#[doc = "0x28 - prescaler"]
#[inline (always)] pub const fn psc (& self) -> & Psc { & self . psc }
#[doc = "0x2c - auto-reload register"]
#[inline (always)] pub const fn arr (& self) -> & Arr { & self . arr }
#[doc = "0x34 - capture/compare register 1"]
#[inline (always)] pub const fn ccr1 (& self) -> & Ccr1 { & self . ccr1 } }
#[doc = "CR1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr1`] module"]
#[doc (alias = "CR1")] pub type Cr1 = crate :: Reg < cr1 :: Cr1Spec > ;
#[doc = "control register 1"] pub mod cr1 {
#[doc = "Register `CR1` reader"] pub type R = crate :: R < Cr1Spec > ;
#[doc = "Register `CR1` writer"] pub type W = crate :: W < Cr1Spec > ;
#[doc = "Field `CEN` reader - Counter enable"] pub type CenR = crate :: BitReader ;
#[doc = "Field `CEN` writer - Counter enable"] pub type CenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UDIS` reader - Update disable"] pub type UdisR = crate :: BitReader ;
#[doc = "Field `UDIS` writer - Update disable"] pub type UdisW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `URS` reader - Update request source"] pub type UrsR = crate :: BitReader ;
#[doc = "Field `URS` writer - Update request source"] pub type UrsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ARPE` reader - Auto-reload preload enable"] pub type ArpeR = crate :: BitReader ;
#[doc = "Field `ARPE` writer - Auto-reload preload enable"] pub type ArpeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CKD` reader - Clock division"] pub type CkdR = crate :: FieldReader ;
#[doc = "Field `CKD` writer - Clock division"] pub type CkdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& self) -> CenR { CenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& self) -> UdisR { UdisR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& self) -> UrsR { UrsR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& self) -> ArpeR { ArpeR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& self) -> CkdR { CkdR :: new (((self . bits >> 8) & 3) as u8) } } impl W {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& mut self) -> CenW < '_ , Cr1Spec > { CenW :: new (self , 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& mut self) -> UdisW < '_ , Cr1Spec > { UdisW :: new (self , 1) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& mut self) -> UrsW < '_ , Cr1Spec > { UrsW :: new (self , 2) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& mut self) -> ArpeW < '_ , Cr1Spec > { ArpeW :: new (self , 7) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& mut self) -> CkdW < '_ , Cr1Spec > { CkdW :: new (self , 8) } }
#[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr1Spec ; impl crate :: RegisterSpec for Cr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr1::R`](R) reader structure"] impl crate :: Readable for Cr1Spec { }
#[doc = "`write(|w| ..)` method takes [`cr1::W`](W) writer structure"] impl crate :: Writable for Cr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR1 to value 0"] impl crate :: Resettable for Cr1Spec { } }
#[doc = "DIER (rw) register accessor: DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dier`] module"]
#[doc (alias = "DIER")] pub type Dier = crate :: Reg < dier :: DierSpec > ;
#[doc = "DMA/Interrupt enable register"] pub mod dier {
#[doc = "Register `DIER` reader"] pub type R = crate :: R < DierSpec > ;
#[doc = "Register `DIER` writer"] pub type W = crate :: W < DierSpec > ;
#[doc = "Field `UIE` reader - Update interrupt enable"] pub type UieR = crate :: BitReader ;
#[doc = "Field `UIE` writer - Update interrupt enable"] pub type UieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IE` reader - Capture/Compare 1 interrupt enable"] pub type Cc1ieR = crate :: BitReader ;
#[doc = "Field `CC1IE` writer - Capture/Compare 1 interrupt enable"] pub type Cc1ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& self) -> UieR { UieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& self) -> Cc1ieR { Cc1ieR :: new (((self . bits >> 1) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& mut self) -> UieW < '_ , DierSpec > { UieW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& mut self) -> Cc1ieW < '_ , DierSpec > { Cc1ieW :: new (self , 1) } }
#[doc = "DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DierSpec ; impl crate :: RegisterSpec for DierSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dier::R`](R) reader structure"] impl crate :: Readable for DierSpec { }
#[doc = "`write(|w| ..)` method takes [`dier::W`](W) writer structure"] impl crate :: Writable for DierSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DIER to value 0"] impl crate :: Resettable for DierSpec { } }
#[doc = "SR (rw) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ;
#[doc = "Field `UIF` reader - Update interrupt flag"] pub type UifR = crate :: BitReader ;
#[doc = "Field `UIF` writer - Update interrupt flag"] pub type UifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IF` reader - Capture/Compare 1 interrupt flag"] pub type Cc1ifR = crate :: BitReader ;
#[doc = "Field `CC1IF` writer - Capture/Compare 1 interrupt flag"] pub type Cc1ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1OF` reader - Capture/Compare 1 overcapture flag"] pub type Cc1ofR = crate :: BitReader ;
#[doc = "Field `CC1OF` writer - Capture/Compare 1 overcapture flag"] pub type Cc1ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& self) -> UifR { UifR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& self) -> Cc1ifR { Cc1ifR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& self) -> Cc1ofR { Cc1ofR :: new (((self . bits >> 9) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& mut self) -> UifW < '_ , SrSpec > { UifW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& mut self) -> Cc1ifW < '_ , SrSpec > { Cc1ifW :: new (self , 1) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& mut self) -> Cc1ofW < '_ , SrSpec > { Cc1ofW :: new (self , 9) } }
#[doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } }
#[doc = "EGR (w) register accessor: event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@egr`] module"]
#[doc (alias = "EGR")] pub type Egr = crate :: Reg < egr :: EgrSpec > ;
#[doc = "event generation register"] pub mod egr {
#[doc = "Register `EGR` writer"] pub type W = crate :: W < EgrSpec > ;
#[doc = "Field `UG` writer - Update generation"] pub type UgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1G` writer - Capture/Compare 1 generation"] pub type Cc1gW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - Update generation"]
#[inline (always)] pub fn ug (& mut self) -> UgW < '_ , EgrSpec > { UgW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 generation"]
#[inline (always)] pub fn cc1g (& mut self) -> Cc1gW < '_ , EgrSpec > { Cc1gW :: new (self , 1) } }
#[doc = "event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EgrSpec ; impl crate :: RegisterSpec for EgrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`egr::W`](W) writer structure"] impl crate :: Writable for EgrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EGR to value 0"] impl crate :: Resettable for EgrSpec { } }
#[doc = "CCMR1_Output (rw) register accessor: capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_output`] module"]
#[doc (alias = "CCMR1_Output")] pub type Ccmr1Output = crate :: Reg < ccmr1_output :: Ccmr1OutputSpec > ;
#[doc = "capture/compare mode register 1 (output mode)"] pub mod ccmr1_output {
#[doc = "Register `CCMR1_Output` reader"] pub type R = crate :: R < Ccmr1OutputSpec > ;
#[doc = "Register `CCMR1_Output` writer"] pub type W = crate :: W < Ccmr1OutputSpec > ;
#[doc = "Field `CC1S` reader - Capture/Compare 2 output enable"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/Compare 2 output enable"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC1FE` reader - Output compare 1 fast enable"] pub type Oc1feR = crate :: BitReader ;
#[doc = "Field `OC1FE` writer - Output compare 1 fast enable"] pub type Oc1feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1PE` reader - Output compare 1 preload enable"] pub type Oc1peR = crate :: BitReader ;
#[doc = "Field `OC1PE` writer - Output compare 1 preload enable"] pub type Oc1peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1M` reader - Output compare 1 mode"] pub type Oc1mR = crate :: FieldReader ;
#[doc = "Field `OC1M` writer - Output compare 1 mode"] pub type Oc1mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ; impl R {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& self) -> Oc1feR { Oc1feR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& self) -> Oc1peR { Oc1peR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& self) -> Oc1mR { Oc1mR :: new (((self . bits >> 4) & 7) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1OutputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& mut self) -> Oc1feW < '_ , Ccmr1OutputSpec > { Oc1feW :: new (self , 2) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& mut self) -> Oc1peW < '_ , Ccmr1OutputSpec > { Oc1peW :: new (self , 3) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& mut self) -> Oc1mW < '_ , Ccmr1OutputSpec > { Oc1mW :: new (self , 4) } }
#[doc = "capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1OutputSpec ; impl crate :: RegisterSpec for Ccmr1OutputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_output::R`](R) reader structure"] impl crate :: Readable for Ccmr1OutputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_output::W`](W) writer structure"] impl crate :: Writable for Ccmr1OutputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Output to value 0"] impl crate :: Resettable for Ccmr1OutputSpec { } }
#[doc = "CCMR1_Input (rw) register accessor: capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_input`] module"]
#[doc (alias = "CCMR1_Input")] pub type Ccmr1Input = crate :: Reg < ccmr1_input :: Ccmr1InputSpec > ;
#[doc = "capture/compare mode register 1 (input mode)"] pub mod ccmr1_input {
#[doc = "Register `CCMR1_Input` reader"] pub type R = crate :: R < Ccmr1InputSpec > ;
#[doc = "Register `CCMR1_Input` writer"] pub type W = crate :: W < Ccmr1InputSpec > ;
#[doc = "Field `CC1S` reader - Capture/compare 1 selection"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/compare 1 selection"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1PSC` reader - Input capture 1 prescaler"] pub type Ic1pscR = crate :: FieldReader ;
#[doc = "Field `IC1PSC` writer - Input capture 1 prescaler"] pub type Ic1pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1F` reader - Input capture 1 filter"] pub type Ic1fR = crate :: FieldReader ;
#[doc = "Field `IC1F` writer - Input capture 1 filter"] pub type Ic1fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& self) -> Ic1pscR { Ic1pscR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& self) -> Ic1fR { Ic1fR :: new (((self . bits >> 4) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1InputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& mut self) -> Ic1pscW < '_ , Ccmr1InputSpec > { Ic1pscW :: new (self , 2) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& mut self) -> Ic1fW < '_ , Ccmr1InputSpec > { Ic1fW :: new (self , 4) } }
#[doc = "capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1InputSpec ; impl crate :: RegisterSpec for Ccmr1InputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_input::R`](R) reader structure"] impl crate :: Readable for Ccmr1InputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_input::W`](W) writer structure"] impl crate :: Writable for Ccmr1InputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Input to value 0"] impl crate :: Resettable for Ccmr1InputSpec { } }
#[doc = "CCER (rw) register accessor: capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccer`] module"]
#[doc (alias = "CCER")] pub type Ccer = crate :: Reg < ccer :: CcerSpec > ;
#[doc = "capture/compare enable register"] pub mod ccer {
#[doc = "Register `CCER` reader"] pub type R = crate :: R < CcerSpec > ;
#[doc = "Register `CCER` writer"] pub type W = crate :: W < CcerSpec > ;
#[doc = "Field `CC1E` reader - Capture/Compare 1 output enable"] pub type Cc1eR = crate :: BitReader ;
#[doc = "Field `CC1E` writer - Capture/Compare 1 output enable"] pub type Cc1eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1P` reader - Capture/Compare 1 output polarity"] pub type Cc1pR = crate :: BitReader ;
#[doc = "Field `CC1P` writer - Capture/Compare 1 output polarity"] pub type Cc1pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1NP` reader - Capture/Compare 1 complementary output polarity"] pub type Cc1npR = crate :: BitReader ;
#[doc = "Field `CC1NP` writer - Capture/Compare 1 complementary output polarity"] pub type Cc1npW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& self) -> Cc1eR { Cc1eR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& self) -> Cc1pR { Cc1pR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output polarity"]
#[inline (always)] pub fn cc1np (& self) -> Cc1npR { Cc1npR :: new (((self . bits >> 3) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& mut self) -> Cc1eW < '_ , CcerSpec > { Cc1eW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& mut self) -> Cc1pW < '_ , CcerSpec > { Cc1pW :: new (self , 1) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output polarity"]
#[inline (always)] pub fn cc1np (& mut self) -> Cc1npW < '_ , CcerSpec > { Cc1npW :: new (self , 3) } }
#[doc = "capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CcerSpec ; impl crate :: RegisterSpec for CcerSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccer::R`](R) reader structure"] impl crate :: Readable for CcerSpec { }
#[doc = "`write(|w| ..)` method takes [`ccer::W`](W) writer structure"] impl crate :: Writable for CcerSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCER to value 0"] impl crate :: Resettable for CcerSpec { } }
#[doc = "CNT (rw) register accessor: counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnt`] module"]
#[doc (alias = "CNT")] pub type Cnt = crate :: Reg < cnt :: CntSpec > ;
#[doc = "counter"] pub mod cnt {
#[doc = "Register `CNT` reader"] pub type R = crate :: R < CntSpec > ;
#[doc = "Register `CNT` writer"] pub type W = crate :: W < CntSpec > ;
#[doc = "Field `CNT` reader - Counter value"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - Counter value"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Counter value"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Counter value"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , CntSpec > { CntW :: new (self , 0) } }
#[doc = "counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CntSpec ; impl crate :: RegisterSpec for CntSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cnt::R`](R) reader structure"] impl crate :: Readable for CntSpec { }
#[doc = "`write(|w| ..)` method takes [`cnt::W`](W) writer structure"] impl crate :: Writable for CntSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CNT to value 0"] impl crate :: Resettable for CntSpec { } }
#[doc = "PSC (rw) register accessor: prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psc`] module"]
#[doc (alias = "PSC")] pub type Psc = crate :: Reg < psc :: PscSpec > ;
#[doc = "prescaler"] pub mod psc {
#[doc = "Register `PSC` reader"] pub type R = crate :: R < PscSpec > ;
#[doc = "Register `PSC` writer"] pub type W = crate :: W < PscSpec > ;
#[doc = "Field `PSC` reader - Prescaler value"] pub type PscR = crate :: FieldReader < u16 > ;
#[doc = "Field `PSC` writer - Prescaler value"] pub type PscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& self) -> PscR { PscR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& mut self) -> PscW < '_ , PscSpec > { PscW :: new (self , 0) } }
#[doc = "prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PscSpec ; impl crate :: RegisterSpec for PscSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`psc::R`](R) reader structure"] impl crate :: Readable for PscSpec { }
#[doc = "`write(|w| ..)` method takes [`psc::W`](W) writer structure"] impl crate :: Writable for PscSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PSC to value 0"] impl crate :: Resettable for PscSpec { } }
#[doc = "ARR (rw) register accessor: auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@arr`] module"]
#[doc (alias = "ARR")] pub type Arr = crate :: Reg < arr :: ArrSpec > ;
#[doc = "auto-reload register"] pub mod arr {
#[doc = "Register `ARR` reader"] pub type R = crate :: R < ArrSpec > ;
#[doc = "Register `ARR` writer"] pub type W = crate :: W < ArrSpec > ;
#[doc = "Field `ARR` reader - auto-reload value"] pub type ArrR = crate :: FieldReader < u16 > ;
#[doc = "Field `ARR` writer - auto-reload value"] pub type ArrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - auto-reload value"]
#[inline (always)] pub fn arr (& self) -> ArrR { ArrR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - auto-reload value"]
#[inline (always)] pub fn arr (& mut self) -> ArrW < '_ , ArrSpec > { ArrW :: new (self , 0) } }
#[doc = "auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ArrSpec ; impl crate :: RegisterSpec for ArrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`arr::R`](R) reader structure"] impl crate :: Readable for ArrSpec { }
#[doc = "`write(|w| ..)` method takes [`arr::W`](W) writer structure"] impl crate :: Writable for ArrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ARR to value 0"] impl crate :: Resettable for ArrSpec { } }
#[doc = "CCR1 (rw) register accessor: capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr1`] module"]
#[doc (alias = "CCR1")] pub type Ccr1 = crate :: Reg < ccr1 :: Ccr1Spec > ;
#[doc = "capture/compare register 1"] pub mod ccr1 {
#[doc = "Register `CCR1` reader"] pub type R = crate :: R < Ccr1Spec > ;
#[doc = "Register `CCR1` writer"] pub type W = crate :: W < Ccr1Spec > ;
#[doc = "Field `CCR1` reader - Capture/Compare 1 value"] pub type Ccr1R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR1` writer - Capture/Compare 1 value"] pub type Ccr1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& self) -> Ccr1R { Ccr1R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& mut self) -> Ccr1W < '_ , Ccr1Spec > { Ccr1W :: new (self , 0) } }
#[doc = "capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr1Spec ; impl crate :: RegisterSpec for Ccr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr1::R`](R) reader structure"] impl crate :: Readable for Ccr1Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr1::W`](W) writer structure"] impl crate :: Writable for Ccr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR1 to value 0"] impl crate :: Resettable for Ccr1Spec { } } }
#[doc = "Basic purpose timer"] pub type Tim16 = crate :: Periph < tim16 :: RegisterBlock , 0x4001_4400 > ; impl core :: fmt :: Debug for Tim16 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Tim16") . finish () } }
#[doc = "Basic purpose timer"] pub mod tim16 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cr1 : Cr1 , cr2 : Cr2 , _reserved2 : [u8 ; 0x04] , dier : Dier , sr : Sr , egr : Egr , _reserved_5_ccmr1 : [u8 ; 0x04] , _reserved6 : [u8 ; 0x04] , ccer : Ccer , cnt : Cnt , psc : Psc , arr : Arr , rcr : Rcr , ccr1 : Ccr1 , _reserved12 : [u8 ; 0x0c] , bdtr : Bdtr , dcr : Dcr , dmar : Dmar , } impl RegisterBlock {
#[doc = "0x00 - control register 1"]
#[inline (always)] pub const fn cr1 (& self) -> & Cr1 { & self . cr1 }
#[doc = "0x04 - control register 2"]
#[inline (always)] pub const fn cr2 (& self) -> & Cr2 { & self . cr2 }
#[doc = "0x0c - DMA/Interrupt enable register"]
#[inline (always)] pub const fn dier (& self) -> & Dier { & self . dier }
#[doc = "0x10 - status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr }
#[doc = "0x14 - event generation register"]
#[inline (always)] pub const fn egr (& self) -> & Egr { & self . egr }
#[doc = "0x18 - capture/compare mode register 1 (input mode)"]
#[inline (always)] pub const fn ccmr1_input (& self) -> & Ccmr1Input { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x18 - capture/compare mode register 1 (output mode)"]
#[inline (always)] pub const fn ccmr1_output (& self) -> & Ccmr1Output { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } }
#[doc = "0x20 - capture/compare enable register"]
#[inline (always)] pub const fn ccer (& self) -> & Ccer { & self . ccer }
#[doc = "0x24 - counter"]
#[inline (always)] pub const fn cnt (& self) -> & Cnt { & self . cnt }
#[doc = "0x28 - prescaler"]
#[inline (always)] pub const fn psc (& self) -> & Psc { & self . psc }
#[doc = "0x2c - auto-reload register"]
#[inline (always)] pub const fn arr (& self) -> & Arr { & self . arr }
#[doc = "0x30 - repetition counter register"]
#[inline (always)] pub const fn rcr (& self) -> & Rcr { & self . rcr }
#[doc = "0x34 - capture/compare register 1"]
#[inline (always)] pub const fn ccr1 (& self) -> & Ccr1 { & self . ccr1 }
#[doc = "0x44 - break and dead-time register"]
#[inline (always)] pub const fn bdtr (& self) -> & Bdtr { & self . bdtr }
#[doc = "0x48 - DMA control register"]
#[inline (always)] pub const fn dcr (& self) -> & Dcr { & self . dcr }
#[doc = "0x4c - DMA address for full transfer"]
#[inline (always)] pub const fn dmar (& self) -> & Dmar { & self . dmar } }
#[doc = "CR1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr1`] module"]
#[doc (alias = "CR1")] pub type Cr1 = crate :: Reg < cr1 :: Cr1Spec > ;
#[doc = "control register 1"] pub mod cr1 {
#[doc = "Register `CR1` reader"] pub type R = crate :: R < Cr1Spec > ;
#[doc = "Register `CR1` writer"] pub type W = crate :: W < Cr1Spec > ;
#[doc = "Field `CEN` reader - Counter enable"] pub type CenR = crate :: BitReader ;
#[doc = "Field `CEN` writer - Counter enable"] pub type CenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UDIS` reader - Update disable"] pub type UdisR = crate :: BitReader ;
#[doc = "Field `UDIS` writer - Update disable"] pub type UdisW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `URS` reader - Update request source"] pub type UrsR = crate :: BitReader ;
#[doc = "Field `URS` writer - Update request source"] pub type UrsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OPM` reader - One pulse mode"] pub type OpmR = crate :: BitReader ;
#[doc = "Field `OPM` writer - One pulse mode"] pub type OpmW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ARPE` reader - Auto-reload preload enable"] pub type ArpeR = crate :: BitReader ;
#[doc = "Field `ARPE` writer - Auto-reload preload enable"] pub type ArpeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CKD` reader - Clock division"] pub type CkdR = crate :: FieldReader ;
#[doc = "Field `CKD` writer - Clock division"] pub type CkdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& self) -> CenR { CenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& self) -> UdisR { UdisR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& self) -> UrsR { UrsR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - One pulse mode"]
#[inline (always)] pub fn opm (& self) -> OpmR { OpmR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& self) -> ArpeR { ArpeR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& self) -> CkdR { CkdR :: new (((self . bits >> 8) & 3) as u8) } } impl W {
#[doc = "Bit 0 - Counter enable"]
#[inline (always)] pub fn cen (& mut self) -> CenW < '_ , Cr1Spec > { CenW :: new (self , 0) }
#[doc = "Bit 1 - Update disable"]
#[inline (always)] pub fn udis (& mut self) -> UdisW < '_ , Cr1Spec > { UdisW :: new (self , 1) }
#[doc = "Bit 2 - Update request source"]
#[inline (always)] pub fn urs (& mut self) -> UrsW < '_ , Cr1Spec > { UrsW :: new (self , 2) }
#[doc = "Bit 3 - One pulse mode"]
#[inline (always)] pub fn opm (& mut self) -> OpmW < '_ , Cr1Spec > { OpmW :: new (self , 3) }
#[doc = "Bit 7 - Auto-reload preload enable"]
#[inline (always)] pub fn arpe (& mut self) -> ArpeW < '_ , Cr1Spec > { ArpeW :: new (self , 7) }
#[doc = "Bits 8:9 - Clock division"]
#[inline (always)] pub fn ckd (& mut self) -> CkdW < '_ , Cr1Spec > { CkdW :: new (self , 8) } }
#[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`cr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr1Spec ; impl crate :: RegisterSpec for Cr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr1::R`](R) reader structure"] impl crate :: Readable for Cr1Spec { }
#[doc = "`write(|w| ..)` method takes [`cr1::W`](W) writer structure"] impl crate :: Writable for Cr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR1 to value 0"] impl crate :: Resettable for Cr1Spec { } }
#[doc = "CR2 (rw) register accessor: control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr2`] module"]
#[doc (alias = "CR2")] pub type Cr2 = crate :: Reg < cr2 :: Cr2Spec > ;
#[doc = "control register 2"] pub mod cr2 {
#[doc = "Register `CR2` reader"] pub type R = crate :: R < Cr2Spec > ;
#[doc = "Register `CR2` writer"] pub type W = crate :: W < Cr2Spec > ;
#[doc = "Field `CCPC` reader - Capture/compare preloaded control"] pub type CcpcR = crate :: BitReader ;
#[doc = "Field `CCPC` writer - Capture/compare preloaded control"] pub type CcpcW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCUS` reader - Capture/compare control update selection"] pub type CcusR = crate :: BitReader ;
#[doc = "Field `CCUS` writer - Capture/compare control update selection"] pub type CcusW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CCDS` reader - Capture/Compare DMA selection"] pub type CcdsR = crate :: BitReader ;
#[doc = "Field `CCDS` writer - Capture/Compare DMA selection"] pub type CcdsW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS1` reader - Output idle state 1"] pub type Ois1R = crate :: BitReader ;
#[doc = "Field `OIS1` writer - Output idle state 1"] pub type Ois1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OIS1N` reader - Output idle state 1"] pub type Ois1nR = crate :: BitReader ;
#[doc = "Field `OIS1N` writer - Output idle state 1"] pub type Ois1nW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Capture/compare preloaded control"]
#[inline (always)] pub fn ccpc (& self) -> CcpcR { CcpcR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 2 - Capture/compare control update selection"]
#[inline (always)] pub fn ccus (& self) -> CcusR { CcusR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare DMA selection"]
#[inline (always)] pub fn ccds (& self) -> CcdsR { CcdsR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 8 - Output idle state 1"]
#[inline (always)] pub fn ois1 (& self) -> Ois1R { Ois1R :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Output idle state 1"]
#[inline (always)] pub fn ois1n (& self) -> Ois1nR { Ois1nR :: new (((self . bits >> 9) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Capture/compare preloaded control"]
#[inline (always)] pub fn ccpc (& mut self) -> CcpcW < '_ , Cr2Spec > { CcpcW :: new (self , 0) }
#[doc = "Bit 2 - Capture/compare control update selection"]
#[inline (always)] pub fn ccus (& mut self) -> CcusW < '_ , Cr2Spec > { CcusW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare DMA selection"]
#[inline (always)] pub fn ccds (& mut self) -> CcdsW < '_ , Cr2Spec > { CcdsW :: new (self , 3) }
#[doc = "Bit 8 - Output idle state 1"]
#[inline (always)] pub fn ois1 (& mut self) -> Ois1W < '_ , Cr2Spec > { Ois1W :: new (self , 8) }
#[doc = "Bit 9 - Output idle state 1"]
#[inline (always)] pub fn ois1n (& mut self) -> Ois1nW < '_ , Cr2Spec > { Ois1nW :: new (self , 9) } }
#[doc = "control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr2Spec ; impl crate :: RegisterSpec for Cr2Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr2::R`](R) reader structure"] impl crate :: Readable for Cr2Spec { }
#[doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"] impl crate :: Writable for Cr2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR2 to value 0"] impl crate :: Resettable for Cr2Spec { } }
#[doc = "DIER (rw) register accessor: DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dier`] module"]
#[doc (alias = "DIER")] pub type Dier = crate :: Reg < dier :: DierSpec > ;
#[doc = "DMA/Interrupt enable register"] pub mod dier {
#[doc = "Register `DIER` reader"] pub type R = crate :: R < DierSpec > ;
#[doc = "Register `DIER` writer"] pub type W = crate :: W < DierSpec > ;
#[doc = "Field `UIE` reader - Update interrupt enable"] pub type UieR = crate :: BitReader ;
#[doc = "Field `UIE` writer - Update interrupt enable"] pub type UieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IE` reader - Capture/Compare 1 interrupt enable"] pub type Cc1ieR = crate :: BitReader ;
#[doc = "Field `CC1IE` writer - Capture/Compare 1 interrupt enable"] pub type Cc1ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMIE` reader - Compare interrupt enable"] pub type ComieR = crate :: BitReader ;
#[doc = "Field `COMIE` writer - Compare interrupt enable"] pub type ComieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BIE` reader - break interrupt enable"] pub type BieR = crate :: BitReader ;
#[doc = "Field `BIE` writer - break interrupt enable"] pub type BieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `UDE` reader - Update DMA request enable"] pub type UdeR = crate :: BitReader ;
#[doc = "Field `UDE` writer - Update DMA request enable"] pub type UdeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1DE` reader - Capture/Compare 1 DMA request enable"] pub type Cc1deR = crate :: BitReader ;
#[doc = "Field `CC1DE` writer - Capture/Compare 1 DMA request enable"] pub type Cc1deW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& self) -> UieR { UieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& self) -> Cc1ieR { Cc1ieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 5 - Compare interrupt enable"]
#[inline (always)] pub fn comie (& self) -> ComieR { ComieR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 7 - break interrupt enable"]
#[inline (always)] pub fn bie (& self) -> BieR { BieR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Update DMA request enable"]
#[inline (always)] pub fn ude (& self) -> UdeR { UdeR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
#[inline (always)] pub fn cc1de (& self) -> Cc1deR { Cc1deR :: new (((self . bits >> 9) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt enable"]
#[inline (always)] pub fn uie (& mut self) -> UieW < '_ , DierSpec > { UieW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
#[inline (always)] pub fn cc1ie (& mut self) -> Cc1ieW < '_ , DierSpec > { Cc1ieW :: new (self , 1) }
#[doc = "Bit 5 - Compare interrupt enable"]
#[inline (always)] pub fn comie (& mut self) -> ComieW < '_ , DierSpec > { ComieW :: new (self , 5) }
#[doc = "Bit 7 - break interrupt enable"]
#[inline (always)] pub fn bie (& mut self) -> BieW < '_ , DierSpec > { BieW :: new (self , 7) }
#[doc = "Bit 8 - Update DMA request enable"]
#[inline (always)] pub fn ude (& mut self) -> UdeW < '_ , DierSpec > { UdeW :: new (self , 8) }
#[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
#[inline (always)] pub fn cc1de (& mut self) -> Cc1deW < '_ , DierSpec > { Cc1deW :: new (self , 9) } }
#[doc = "DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DierSpec ; impl crate :: RegisterSpec for DierSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`dier::R`](R) reader structure"] impl crate :: Readable for DierSpec { }
#[doc = "`write(|w| ..)` method takes [`dier::W`](W) writer structure"] impl crate :: Writable for DierSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DIER to value 0"] impl crate :: Resettable for DierSpec { } }
#[doc = "SR (rw) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ;
#[doc = "Field `UIF` reader - Update interrupt flag"] pub type UifR = crate :: BitReader ;
#[doc = "Field `UIF` writer - Update interrupt flag"] pub type UifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1IF` reader - Capture/Compare 1 interrupt flag"] pub type Cc1ifR = crate :: BitReader ;
#[doc = "Field `CC1IF` writer - Capture/Compare 1 interrupt flag"] pub type Cc1ifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMIF` reader - COM interrupt flag"] pub type ComifR = crate :: BitReader ;
#[doc = "Field `COMIF` writer - COM interrupt flag"] pub type ComifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BIF` reader - Break interrupt flag"] pub type BifR = crate :: BitReader ;
#[doc = "Field `BIF` writer - Break interrupt flag"] pub type BifW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1OF` reader - Capture/Compare 1 overcapture flag"] pub type Cc1ofR = crate :: BitReader ;
#[doc = "Field `CC1OF` writer - Capture/Compare 1 overcapture flag"] pub type Cc1ofW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& self) -> UifR { UifR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& self) -> Cc1ifR { Cc1ifR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 5 - COM interrupt flag"]
#[inline (always)] pub fn comif (& self) -> ComifR { ComifR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 7 - Break interrupt flag"]
#[inline (always)] pub fn bif (& self) -> BifR { BifR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& self) -> Cc1ofR { Cc1ofR :: new (((self . bits >> 9) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update interrupt flag"]
#[inline (always)] pub fn uif (& mut self) -> UifW < '_ , SrSpec > { UifW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 interrupt flag"]
#[inline (always)] pub fn cc1if (& mut self) -> Cc1ifW < '_ , SrSpec > { Cc1ifW :: new (self , 1) }
#[doc = "Bit 5 - COM interrupt flag"]
#[inline (always)] pub fn comif (& mut self) -> ComifW < '_ , SrSpec > { ComifW :: new (self , 5) }
#[doc = "Bit 7 - Break interrupt flag"]
#[inline (always)] pub fn bif (& mut self) -> BifW < '_ , SrSpec > { BifW :: new (self , 7) }
#[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
#[inline (always)] pub fn cc1of (& mut self) -> Cc1ofW < '_ , SrSpec > { Cc1ofW :: new (self , 9) } }
#[doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } }
#[doc = "EGR (rw) register accessor: event generation register\n\nYou can [`read`](crate::Reg::read) this register and get [`egr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@egr`] module"]
#[doc (alias = "EGR")] pub type Egr = crate :: Reg < egr :: EgrSpec > ;
#[doc = "event generation register"] pub mod egr {
#[doc = "Register `EGR` reader"] pub type R = crate :: R < EgrSpec > ;
#[doc = "Register `EGR` writer"] pub type W = crate :: W < EgrSpec > ;
#[doc = "Field `UG` reader - Update generation"] pub type UgR = crate :: BitReader ;
#[doc = "Field `UG` writer - Update generation"] pub type UgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1G` reader - Capture/compare 1 generation"] pub type Cc1gR = crate :: BitReader ;
#[doc = "Field `CC1G` writer - Capture/compare 1 generation"] pub type Cc1gW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `COMG` reader - Capture/Compare control update generation"] pub type ComgR = crate :: BitReader ;
#[doc = "Field `COMG` writer - Capture/Compare control update generation"] pub type ComgW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BG` reader - Break generation"] pub type BgR = crate :: BitReader ;
#[doc = "Field `BG` writer - Break generation"] pub type BgW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Update generation"]
#[inline (always)] pub fn ug (& self) -> UgR { UgR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/compare 1 generation"]
#[inline (always)] pub fn cc1g (& self) -> Cc1gR { Cc1gR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 5 - Capture/Compare control update generation"]
#[inline (always)] pub fn comg (& self) -> ComgR { ComgR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 7 - Break generation"]
#[inline (always)] pub fn bg (& self) -> BgR { BgR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Update generation"]
#[inline (always)] pub fn ug (& mut self) -> UgW < '_ , EgrSpec > { UgW :: new (self , 0) }
#[doc = "Bit 1 - Capture/compare 1 generation"]
#[inline (always)] pub fn cc1g (& mut self) -> Cc1gW < '_ , EgrSpec > { Cc1gW :: new (self , 1) }
#[doc = "Bit 5 - Capture/Compare control update generation"]
#[inline (always)] pub fn comg (& mut self) -> ComgW < '_ , EgrSpec > { ComgW :: new (self , 5) }
#[doc = "Bit 7 - Break generation"]
#[inline (always)] pub fn bg (& mut self) -> BgW < '_ , EgrSpec > { BgW :: new (self , 7) } }
#[doc = "event generation register\n\nYou can [`read`](crate::Reg::read) this register and get [`egr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EgrSpec ; impl crate :: RegisterSpec for EgrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`egr::R`](R) reader structure"] impl crate :: Readable for EgrSpec { }
#[doc = "`write(|w| ..)` method takes [`egr::W`](W) writer structure"] impl crate :: Writable for EgrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EGR to value 0"] impl crate :: Resettable for EgrSpec { } }
#[doc = "CCMR1_Output (rw) register accessor: capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_output`] module"]
#[doc (alias = "CCMR1_Output")] pub type Ccmr1Output = crate :: Reg < ccmr1_output :: Ccmr1OutputSpec > ;
#[doc = "capture/compare mode register 1 (output mode)"] pub mod ccmr1_output {
#[doc = "Register `CCMR1_Output` reader"] pub type R = crate :: R < Ccmr1OutputSpec > ;
#[doc = "Register `CCMR1_Output` writer"] pub type W = crate :: W < Ccmr1OutputSpec > ;
#[doc = "Field `CC1S` reader - Capture/Compare 2 output enable"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/Compare 2 output enable"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OC1FE` reader - Output compare 1 fast enable"] pub type Oc1feR = crate :: BitReader ;
#[doc = "Field `OC1FE` writer - Output compare 1 fast enable"] pub type Oc1feW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1PE` reader - Output compare 1 preload enable"] pub type Oc1peR = crate :: BitReader ;
#[doc = "Field `OC1PE` writer - Output compare 1 preload enable"] pub type Oc1peW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OC1M` reader - Output compare 1 mode"] pub type Oc1mR = crate :: FieldReader ;
#[doc = "Field `OC1M` writer - Output compare 1 mode"] pub type Oc1mW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ; impl R {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& self) -> Oc1feR { Oc1feR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& self) -> Oc1peR { Oc1peR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& self) -> Oc1mR { Oc1mR :: new (((self . bits >> 4) & 7) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/Compare 2 output enable"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1OutputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bit 2 - Output compare 1 fast enable"]
#[inline (always)] pub fn oc1fe (& mut self) -> Oc1feW < '_ , Ccmr1OutputSpec > { Oc1feW :: new (self , 2) }
#[doc = "Bit 3 - Output compare 1 preload enable"]
#[inline (always)] pub fn oc1pe (& mut self) -> Oc1peW < '_ , Ccmr1OutputSpec > { Oc1peW :: new (self , 3) }
#[doc = "Bits 4:6 - Output compare 1 mode"]
#[inline (always)] pub fn oc1m (& mut self) -> Oc1mW < '_ , Ccmr1OutputSpec > { Oc1mW :: new (self , 4) } }
#[doc = "capture/compare mode register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1OutputSpec ; impl crate :: RegisterSpec for Ccmr1OutputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_output::R`](R) reader structure"] impl crate :: Readable for Ccmr1OutputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_output::W`](W) writer structure"] impl crate :: Writable for Ccmr1OutputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Output to value 0"] impl crate :: Resettable for Ccmr1OutputSpec { } }
#[doc = "CCMR1_Input (rw) register accessor: capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccmr1_input`] module"]
#[doc (alias = "CCMR1_Input")] pub type Ccmr1Input = crate :: Reg < ccmr1_input :: Ccmr1InputSpec > ;
#[doc = "capture/compare mode register 1 (input mode)"] pub mod ccmr1_input {
#[doc = "Register `CCMR1_Input` reader"] pub type R = crate :: R < Ccmr1InputSpec > ;
#[doc = "Register `CCMR1_Input` writer"] pub type W = crate :: W < Ccmr1InputSpec > ;
#[doc = "Field `CC1S` reader - Capture/compare 1 selection"] pub type Cc1sR = crate :: FieldReader ;
#[doc = "Field `CC1S` writer - Capture/compare 1 selection"] pub type Cc1sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1PSC` reader - Input capture 1 prescaler"] pub type Ic1pscR = crate :: FieldReader ;
#[doc = "Field `IC1PSC` writer - Input capture 1 prescaler"] pub type Ic1pscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `IC1F` reader - Input capture 1 filter"] pub type Ic1fR = crate :: FieldReader ;
#[doc = "Field `IC1F` writer - Input capture 1 filter"] pub type Ic1fW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& self) -> Cc1sR { Cc1sR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& self) -> Ic1pscR { Ic1pscR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& self) -> Ic1fR { Ic1fR :: new (((self . bits >> 4) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:1 - Capture/compare 1 selection"]
#[inline (always)] pub fn cc1s (& mut self) -> Cc1sW < '_ , Ccmr1InputSpec > { Cc1sW :: new (self , 0) }
#[doc = "Bits 2:3 - Input capture 1 prescaler"]
#[inline (always)] pub fn ic1psc (& mut self) -> Ic1pscW < '_ , Ccmr1InputSpec > { Ic1pscW :: new (self , 2) }
#[doc = "Bits 4:7 - Input capture 1 filter"]
#[inline (always)] pub fn ic1f (& mut self) -> Ic1fW < '_ , Ccmr1InputSpec > { Ic1fW :: new (self , 4) } }
#[doc = "capture/compare mode register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr1_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr1_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr1InputSpec ; impl crate :: RegisterSpec for Ccmr1InputSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccmr1_input::R`](R) reader structure"] impl crate :: Readable for Ccmr1InputSpec { }
#[doc = "`write(|w| ..)` method takes [`ccmr1_input::W`](W) writer structure"] impl crate :: Writable for Ccmr1InputSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCMR1_Input to value 0"] impl crate :: Resettable for Ccmr1InputSpec { } }
#[doc = "CCER (rw) register accessor: capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccer`] module"]
#[doc (alias = "CCER")] pub type Ccer = crate :: Reg < ccer :: CcerSpec > ;
#[doc = "capture/compare enable register"] pub mod ccer {
#[doc = "Register `CCER` reader"] pub type R = crate :: R < CcerSpec > ;
#[doc = "Register `CCER` writer"] pub type W = crate :: W < CcerSpec > ;
#[doc = "Field `CC1E` reader - Capture/Compare 1 output enable"] pub type Cc1eR = crate :: BitReader ;
#[doc = "Field `CC1E` writer - Capture/Compare 1 output enable"] pub type Cc1eW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1P` reader - Capture/Compare 1 output polarity"] pub type Cc1pR = crate :: BitReader ;
#[doc = "Field `CC1P` writer - Capture/Compare 1 output polarity"] pub type Cc1pW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1NE` reader - Capture/Compare 1 complementary output enable"] pub type Cc1neR = crate :: BitReader ;
#[doc = "Field `CC1NE` writer - Capture/Compare 1 complementary output enable"] pub type Cc1neW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CC1NP` reader - Capture/Compare 1 complementary output Polarity"] pub type Cc1npR = crate :: BitReader ;
#[doc = "Field `CC1NP` writer - Capture/Compare 1 complementary output Polarity"] pub type Cc1npW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& self) -> Cc1eR { Cc1eR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& self) -> Cc1pR { Cc1pR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
#[inline (always)] pub fn cc1ne (& self) -> Cc1neR { Cc1neR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output Polarity"]
#[inline (always)] pub fn cc1np (& self) -> Cc1npR { Cc1npR :: new (((self . bits >> 3) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Capture/Compare 1 output enable"]
#[inline (always)] pub fn cc1e (& mut self) -> Cc1eW < '_ , CcerSpec > { Cc1eW :: new (self , 0) }
#[doc = "Bit 1 - Capture/Compare 1 output polarity"]
#[inline (always)] pub fn cc1p (& mut self) -> Cc1pW < '_ , CcerSpec > { Cc1pW :: new (self , 1) }
#[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
#[inline (always)] pub fn cc1ne (& mut self) -> Cc1neW < '_ , CcerSpec > { Cc1neW :: new (self , 2) }
#[doc = "Bit 3 - Capture/Compare 1 complementary output Polarity"]
#[inline (always)] pub fn cc1np (& mut self) -> Cc1npW < '_ , CcerSpec > { Cc1npW :: new (self , 3) } }
#[doc = "capture/compare enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccer::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccer::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CcerSpec ; impl crate :: RegisterSpec for CcerSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccer::R`](R) reader structure"] impl crate :: Readable for CcerSpec { }
#[doc = "`write(|w| ..)` method takes [`ccer::W`](W) writer structure"] impl crate :: Writable for CcerSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCER to value 0"] impl crate :: Resettable for CcerSpec { } }
#[doc = "CNT (rw) register accessor: counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnt`] module"]
#[doc (alias = "CNT")] pub type Cnt = crate :: Reg < cnt :: CntSpec > ;
#[doc = "counter"] pub mod cnt {
#[doc = "Register `CNT` reader"] pub type R = crate :: R < CntSpec > ;
#[doc = "Register `CNT` writer"] pub type W = crate :: W < CntSpec > ;
#[doc = "Field `CNT` reader - Counter value"] pub type CntR = crate :: FieldReader < u16 > ;
#[doc = "Field `CNT` writer - Counter value"] pub type CntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Counter value"]
#[inline (always)] pub fn cnt (& self) -> CntR { CntR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Counter value"]
#[inline (always)] pub fn cnt (& mut self) -> CntW < '_ , CntSpec > { CntW :: new (self , 0) } }
#[doc = "counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CntSpec ; impl crate :: RegisterSpec for CntSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cnt::R`](R) reader structure"] impl crate :: Readable for CntSpec { }
#[doc = "`write(|w| ..)` method takes [`cnt::W`](W) writer structure"] impl crate :: Writable for CntSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CNT to value 0"] impl crate :: Resettable for CntSpec { } }
#[doc = "PSC (rw) register accessor: prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psc`] module"]
#[doc (alias = "PSC")] pub type Psc = crate :: Reg < psc :: PscSpec > ;
#[doc = "prescaler"] pub mod psc {
#[doc = "Register `PSC` reader"] pub type R = crate :: R < PscSpec > ;
#[doc = "Register `PSC` writer"] pub type W = crate :: W < PscSpec > ;
#[doc = "Field `PSC` reader - Prescaler value"] pub type PscR = crate :: FieldReader < u16 > ;
#[doc = "Field `PSC` writer - Prescaler value"] pub type PscW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& self) -> PscR { PscR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Prescaler value"]
#[inline (always)] pub fn psc (& mut self) -> PscW < '_ , PscSpec > { PscW :: new (self , 0) } }
#[doc = "prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PscSpec ; impl crate :: RegisterSpec for PscSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`psc::R`](R) reader structure"] impl crate :: Readable for PscSpec { }
#[doc = "`write(|w| ..)` method takes [`psc::W`](W) writer structure"] impl crate :: Writable for PscSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PSC to value 0"] impl crate :: Resettable for PscSpec { } }
#[doc = "ARR (rw) register accessor: auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@arr`] module"]
#[doc (alias = "ARR")] pub type Arr = crate :: Reg < arr :: ArrSpec > ;
#[doc = "auto-reload register"] pub mod arr {
#[doc = "Register `ARR` reader"] pub type R = crate :: R < ArrSpec > ;
#[doc = "Register `ARR` writer"] pub type W = crate :: W < ArrSpec > ;
#[doc = "Field `ARR` reader - Auto reload value"] pub type ArrR = crate :: FieldReader < u16 > ;
#[doc = "Field `ARR` writer - Auto reload value"] pub type ArrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Auto reload value"]
#[inline (always)] pub fn arr (& self) -> ArrR { ArrR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Auto reload value"]
#[inline (always)] pub fn arr (& mut self) -> ArrW < '_ , ArrSpec > { ArrW :: new (self , 0) } }
#[doc = "auto-reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`arr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ArrSpec ; impl crate :: RegisterSpec for ArrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`arr::R`](R) reader structure"] impl crate :: Readable for ArrSpec { }
#[doc = "`write(|w| ..)` method takes [`arr::W`](W) writer structure"] impl crate :: Writable for ArrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ARR to value 0"] impl crate :: Resettable for ArrSpec { } }
#[doc = "RCR (rw) register accessor: repetition counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`rcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rcr`] module"]
#[doc (alias = "RCR")] pub type Rcr = crate :: Reg < rcr :: RcrSpec > ;
#[doc = "repetition counter register"] pub mod rcr {
#[doc = "Register `RCR` reader"] pub type R = crate :: R < RcrSpec > ;
#[doc = "Register `RCR` writer"] pub type W = crate :: W < RcrSpec > ;
#[doc = "Field `REP` reader - Repetition counter value"] pub type RepR = crate :: FieldReader ;
#[doc = "Field `REP` writer - Repetition counter value"] pub type RepW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Repetition counter value"]
#[inline (always)] pub fn rep (& self) -> RepR { RepR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Repetition counter value"]
#[inline (always)] pub fn rep (& mut self) -> RepW < '_ , RcrSpec > { RepW :: new (self , 0) } }
#[doc = "repetition counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`rcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RcrSpec ; impl crate :: RegisterSpec for RcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rcr::R`](R) reader structure"] impl crate :: Readable for RcrSpec { }
#[doc = "`write(|w| ..)` method takes [`rcr::W`](W) writer structure"] impl crate :: Writable for RcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RCR to value 0"] impl crate :: Resettable for RcrSpec { } }
#[doc = "CCR1 (rw) register accessor: capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr1`] module"]
#[doc (alias = "CCR1")] pub type Ccr1 = crate :: Reg < ccr1 :: Ccr1Spec > ;
#[doc = "capture/compare register 1"] pub mod ccr1 {
#[doc = "Register `CCR1` reader"] pub type R = crate :: R < Ccr1Spec > ;
#[doc = "Register `CCR1` writer"] pub type W = crate :: W < Ccr1Spec > ;
#[doc = "Field `CCR1` reader - Capture/Compare 1 value"] pub type Ccr1R = crate :: FieldReader < u16 > ;
#[doc = "Field `CCR1` writer - Capture/Compare 1 value"] pub type Ccr1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& self) -> Ccr1R { Ccr1R :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Capture/Compare 1 value"]
#[inline (always)] pub fn ccr1 (& mut self) -> Ccr1W < '_ , Ccr1Spec > { Ccr1W :: new (self , 0) } }
#[doc = "capture/compare register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccr1Spec ; impl crate :: RegisterSpec for Ccr1Spec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr1::R`](R) reader structure"] impl crate :: Readable for Ccr1Spec { }
#[doc = "`write(|w| ..)` method takes [`ccr1::W`](W) writer structure"] impl crate :: Writable for Ccr1Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR1 to value 0"] impl crate :: Resettable for Ccr1Spec { } }
#[doc = "BDTR (rw) register accessor: break and dead-time register\n\nYou can [`read`](crate::Reg::read) this register and get [`bdtr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bdtr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bdtr`] module"]
#[doc (alias = "BDTR")] pub type Bdtr = crate :: Reg < bdtr :: BdtrSpec > ;
#[doc = "break and dead-time register"] pub mod bdtr {
#[doc = "Register `BDTR` reader"] pub type R = crate :: R < BdtrSpec > ;
#[doc = "Register `BDTR` writer"] pub type W = crate :: W < BdtrSpec > ;
#[doc = "Field `DTG` reader - Dead-time generation setup"] pub type DtgR = crate :: FieldReader ;
#[doc = "Field `DTG` writer - Dead-time generation setup"] pub type DtgW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ;
#[doc = "Field `LOCK` reader - Lock configuration"] pub type LockR = crate :: FieldReader ;
#[doc = "Field `LOCK` writer - Lock configuration"] pub type LockW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `OSSI` reader - Off-state selection for idle mode"] pub type OssiR = crate :: BitReader ;
#[doc = "Field `OSSI` writer - Off-state selection for idle mode"] pub type OssiW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OSSR` reader - Off-state selection for run mode"] pub type OssrR = crate :: BitReader ;
#[doc = "Field `OSSR` writer - Off-state selection for run mode"] pub type OssrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BKE` reader - Break enable"] pub type BkeR = crate :: BitReader ;
#[doc = "Field `BKE` writer - Break enable"] pub type BkeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BKP` reader - Break polarity"] pub type BkpR = crate :: BitReader ;
#[doc = "Field `BKP` writer - Break polarity"] pub type BkpW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `AOE` reader - Automatic output enable"] pub type AoeR = crate :: BitReader ;
#[doc = "Field `AOE` writer - Automatic output enable"] pub type AoeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `MOE` reader - Main output enable"] pub type MoeR = crate :: BitReader ;
#[doc = "Field `MOE` writer - Main output enable"] pub type MoeW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:7 - Dead-time generation setup"]
#[inline (always)] pub fn dtg (& self) -> DtgR { DtgR :: new ((self . bits & 0xff) as u8) }
#[doc = "Bits 8:9 - Lock configuration"]
#[inline (always)] pub fn lock (& self) -> LockR { LockR :: new (((self . bits >> 8) & 3) as u8) }
#[doc = "Bit 10 - Off-state selection for idle mode"]
#[inline (always)] pub fn ossi (& self) -> OssiR { OssiR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Off-state selection for run mode"]
#[inline (always)] pub fn ossr (& self) -> OssrR { OssrR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Break enable"]
#[inline (always)] pub fn bke (& self) -> BkeR { BkeR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Break polarity"]
#[inline (always)] pub fn bkp (& self) -> BkpR { BkpR :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - Automatic output enable"]
#[inline (always)] pub fn aoe (& self) -> AoeR { AoeR :: new (((self . bits >> 14) & 1) != 0) }
#[doc = "Bit 15 - Main output enable"]
#[inline (always)] pub fn moe (& self) -> MoeR { MoeR :: new (((self . bits >> 15) & 1) != 0) } } impl W {
#[doc = "Bits 0:7 - Dead-time generation setup"]
#[inline (always)] pub fn dtg (& mut self) -> DtgW < '_ , BdtrSpec > { DtgW :: new (self , 0) }
#[doc = "Bits 8:9 - Lock configuration"]
#[inline (always)] pub fn lock (& mut self) -> LockW < '_ , BdtrSpec > { LockW :: new (self , 8) }
#[doc = "Bit 10 - Off-state selection for idle mode"]
#[inline (always)] pub fn ossi (& mut self) -> OssiW < '_ , BdtrSpec > { OssiW :: new (self , 10) }
#[doc = "Bit 11 - Off-state selection for run mode"]
#[inline (always)] pub fn ossr (& mut self) -> OssrW < '_ , BdtrSpec > { OssrW :: new (self , 11) }
#[doc = "Bit 12 - Break enable"]
#[inline (always)] pub fn bke (& mut self) -> BkeW < '_ , BdtrSpec > { BkeW :: new (self , 12) }
#[doc = "Bit 13 - Break polarity"]
#[inline (always)] pub fn bkp (& mut self) -> BkpW < '_ , BdtrSpec > { BkpW :: new (self , 13) }
#[doc = "Bit 14 - Automatic output enable"]
#[inline (always)] pub fn aoe (& mut self) -> AoeW < '_ , BdtrSpec > { AoeW :: new (self , 14) }
#[doc = "Bit 15 - Main output enable"]
#[inline (always)] pub fn moe (& mut self) -> MoeW < '_ , BdtrSpec > { MoeW :: new (self , 15) } }
#[doc = "break and dead-time register\n\nYou can [`read`](crate::Reg::read) this register and get [`bdtr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bdtr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BdtrSpec ; impl crate :: RegisterSpec for BdtrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`bdtr::R`](R) reader structure"] impl crate :: Readable for BdtrSpec { }
#[doc = "`write(|w| ..)` method takes [`bdtr::W`](W) writer structure"] impl crate :: Writable for BdtrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets BDTR to value 0"] impl crate :: Resettable for BdtrSpec { } }
#[doc = "DCR (w) register accessor: DMA control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dcr`] module"]
#[doc (alias = "DCR")] pub type Dcr = crate :: Reg < dcr :: DcrSpec > ;
#[doc = "DMA control register"] pub mod dcr {
#[doc = "Register `DCR` writer"] pub type W = crate :: W < DcrSpec > ;
#[doc = "Field `DBA` writer - DMA base address"] pub type DbaW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ;
#[doc = "Field `DBL` writer - DMA burst length"] pub type DblW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ; impl W {
#[doc = "Bits 0:4 - DMA base address"]
#[inline (always)] pub fn dba (& mut self) -> DbaW < '_ , DcrSpec > { DbaW :: new (self , 0) }
#[doc = "Bits 8:12 - DMA burst length"]
#[inline (always)] pub fn dbl (& mut self) -> DblW < '_ , DcrSpec > { DblW :: new (self , 8) } }
#[doc = "DMA control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dcr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DcrSpec ; impl crate :: RegisterSpec for DcrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`dcr::W`](W) writer structure"] impl crate :: Writable for DcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DCR to value 0"] impl crate :: Resettable for DcrSpec { } }
#[doc = "DMAR (w) register accessor: DMA address for full transfer\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmar::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmar`] module"]
#[doc (alias = "DMAR")] pub type Dmar = crate :: Reg < dmar :: DmarSpec > ;
#[doc = "DMA address for full transfer"] pub mod dmar {
#[doc = "Register `DMAR` writer"] pub type W = crate :: W < DmarSpec > ;
#[doc = "Field `DMAB` writer - DMA register for burst accesses"] pub type DmabW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl W {
#[doc = "Bits 0:15 - DMA register for burst accesses"]
#[inline (always)] pub fn dmab (& mut self) -> DmabW < '_ , DmarSpec > { DmabW :: new (self , 0) } }
#[doc = "DMA address for full transfer\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmar::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmarSpec ; impl crate :: RegisterSpec for DmarSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`dmar::W`](W) writer structure"] impl crate :: Writable for DmarSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMAR to value 0"] impl crate :: Resettable for DmarSpec { } } }
#[doc = "Basic purpose timer"] pub type Tim17 = crate :: Periph < tim16 :: RegisterBlock , 0x4001_4800 > ; impl core :: fmt :: Debug for Tim17 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Tim17") . finish () } }
#[doc = "Basic purpose timer"] pub use self :: tim16 as tim17 ;
#[doc = "Universal asynchronous receiver transmitter"] pub type Uart1 = crate :: Periph < uart1 :: RegisterBlock , 0x4001_3800 > ; impl core :: fmt :: Debug for Uart1 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Uart1") . finish () } }
#[doc = "Universal asynchronous receiver transmitter"] pub mod uart1 {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { tdr : Tdr , rdr : Rdr , csr : Csr , isr : Isr , ier : Ier , icr : Icr , gcr : Gcr , ccr : Ccr , brr : Brr , fra : Fra , rxaddr : Rxaddr , rxmask : Rxmask , scr : Scr , idlr : Idlr , abrcr : Abrcr , } impl RegisterBlock {
#[doc = "0x00 - Transmit data register"]
#[inline (always)] pub const fn tdr (& self) -> & Tdr { & self . tdr }
#[doc = "0x04 - Receive data register"]
#[inline (always)] pub const fn rdr (& self) -> & Rdr { & self . rdr }
#[doc = "0x08 - Current status register"]
#[inline (always)] pub const fn csr (& self) -> & Csr { & self . csr }
#[doc = "0x0c - Interrupt status register"]
#[inline (always)] pub const fn isr (& self) -> & Isr { & self . isr }
#[doc = "0x10 - Interrupt enable register"]
#[inline (always)] pub const fn ier (& self) -> & Ier { & self . ier }
#[doc = "0x14 - Interrupt Clear Register"]
#[inline (always)] pub const fn icr (& self) -> & Icr { & self . icr }
#[doc = "0x18 - Global control register"]
#[inline (always)] pub const fn gcr (& self) -> & Gcr { & self . gcr }
#[doc = "0x1c - common control register"]
#[inline (always)] pub const fn ccr (& self) -> & Ccr { & self . ccr }
#[doc = "0x20 - Baud rate register"]
#[inline (always)] pub const fn brr (& self) -> & Brr { & self . brr }
#[doc = "0x24 - Fractional baud rate register"]
#[inline (always)] pub const fn fra (& self) -> & Fra { & self . fra }
#[doc = "0x28 - Receive Address Register"]
#[inline (always)] pub const fn rxaddr (& self) -> & Rxaddr { & self . rxaddr }
#[doc = "0x2c - Receive Mask Registe"]
#[inline (always)] pub const fn rxmask (& self) -> & Rxmask { & self . rxmask }
#[doc = "0x30 - Slave Control Register"]
#[inline (always)] pub const fn scr (& self) -> & Scr { & self . scr }
#[doc = "0x34 - Data length register"]
#[inline (always)] pub const fn idlr (& self) -> & Idlr { & self . idlr }
#[doc = "0x38 - Automatic Baud Rate Register"]
#[inline (always)] pub const fn abrcr (& self) -> & Abrcr { & self . abrcr } }
#[doc = "TDR (rw) register accessor: Transmit data register\n\nYou can [`read`](crate::Reg::read) this register and get [`tdr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tdr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tdr`] module"]
#[doc (alias = "TDR")] pub type Tdr = crate :: Reg < tdr :: TdrSpec > ;
#[doc = "Transmit data register"] pub mod tdr {
#[doc = "Register `TDR` reader"] pub type R = crate :: R < TdrSpec > ;
#[doc = "Register `TDR` writer"] pub type W = crate :: W < TdrSpec > ;
#[doc = "Field `TXREG` reader - Transmit data register"] pub type TxregR = crate :: FieldReader ;
#[doc = "Field `TXREG` writer - Transmit data register"] pub type TxregW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Transmit data register"]
#[inline (always)] pub fn txreg (& self) -> TxregR { TxregR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Transmit data register"]
#[inline (always)] pub fn txreg (& mut self) -> TxregW < '_ , TdrSpec > { TxregW :: new (self , 0) } }
#[doc = "Transmit data register\n\nYou can [`read`](crate::Reg::read) this register and get [`tdr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tdr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TdrSpec ; impl crate :: RegisterSpec for TdrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`tdr::R`](R) reader structure"] impl crate :: Readable for TdrSpec { }
#[doc = "`write(|w| ..)` method takes [`tdr::W`](W) writer structure"] impl crate :: Writable for TdrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TDR to value 0"] impl crate :: Resettable for TdrSpec { } }
#[doc = "RDR (r) register accessor: Receive data register\n\nYou can [`read`](crate::Reg::read) this register and get [`rdr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rdr`] module"]
#[doc (alias = "RDR")] pub type Rdr = crate :: Reg < rdr :: RdrSpec > ;
#[doc = "Receive data register"] pub mod rdr {
#[doc = "Register `RDR` reader"] pub type R = crate :: R < RdrSpec > ;
#[doc = "Field `RXREG` reader - Receive data register"] pub type RxregR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - Receive data register"]
#[inline (always)] pub fn rxreg (& self) -> RxregR { RxregR :: new ((self . bits & 0xff) as u8) } }
#[doc = "Receive data register\n\nYou can [`read`](crate::Reg::read) this register and get [`rdr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RdrSpec ; impl crate :: RegisterSpec for RdrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rdr::R`](R) reader structure"] impl crate :: Readable for RdrSpec { }
#[doc = "`reset()` method sets RDR to value 0"] impl crate :: Resettable for RdrSpec { } }
#[doc = "CSR (r) register accessor: Current status register\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@csr`] module"]
#[doc (alias = "CSR")] pub type Csr = crate :: Reg < csr :: CsrSpec > ;
#[doc = "Current status register"] pub mod csr {
#[doc = "Register `CSR` reader"] pub type R = crate :: R < CsrSpec > ;
#[doc = "Field `TXC` reader - Transmit complete flag bit"] pub type TxcR = crate :: BitReader ;
#[doc = "Field `RXAVL` reader - Receive valid data flag bit"] pub type RxavlR = crate :: BitReader ;
#[doc = "Field `TXFULL` reader - Transmit buffer full flag bit"] pub type TxfullR = crate :: BitReader ;
#[doc = "Field `TXBUF_EMPTY` reader - Transmit buffer empty flag bit"] pub type TxbufEmptyR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Transmit complete flag bit"]
#[inline (always)] pub fn txc (& self) -> TxcR { TxcR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive valid data flag bit"]
#[inline (always)] pub fn rxavl (& self) -> RxavlR { RxavlR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmit buffer full flag bit"]
#[inline (always)] pub fn txfull (& self) -> TxfullR { TxfullR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Transmit buffer empty flag bit"]
#[inline (always)] pub fn txbuf_empty (& self) -> TxbufEmptyR { TxbufEmptyR :: new (((self . bits >> 3) & 1) != 0) } }
#[doc = "Current status register\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CsrSpec ; impl crate :: RegisterSpec for CsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`csr::R`](R) reader structure"] impl crate :: Readable for CsrSpec { }
#[doc = "`reset()` method sets CSR to value 0x09"] impl crate :: Resettable for CsrSpec { const RESET_VALUE : u32 = 0x09 ; } }
#[doc = "ISR (r) register accessor: Interrupt status register\n\nYou can [`read`](crate::Reg::read) this register and get [`isr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@isr`] module"]
#[doc (alias = "ISR")] pub type Isr = crate :: Reg < isr :: IsrSpec > ;
#[doc = "Interrupt status register"] pub mod isr {
#[doc = "Register `ISR` reader"] pub type R = crate :: R < IsrSpec > ;
#[doc = "Field `TX_INTF` reader - Transmit buffer empty interrupt flag bit"] pub type TxIntfR = crate :: BitReader ;
#[doc = "Field `RX_INTF` reader - Receive valid data interrupt flag bit"] pub type RxIntfR = crate :: BitReader ;
#[doc = "Field `TXC_INTF` reader - UART Transmit Complete Interrupt Flag bit"] pub type TxcIntfR = crate :: BitReader ;
#[doc = "Field `RXOERR_INTF` reader - Receive overflow error interrupt flag bit"] pub type RxoerrIntfR = crate :: BitReader ;
#[doc = "Field `RXPERR_INTF` reader - Parity error interrupt flag bit"] pub type RxperrIntfR = crate :: BitReader ;
#[doc = "Field `RXFERR_INTF` reader - Frame error interrupt flag bit"] pub type RxferrIntfR = crate :: BitReader ;
#[doc = "Field `RXBRK_INTF` reader - Receive frame break interrupt flag bit"] pub type RxbrkIntfR = crate :: BitReader ;
#[doc = "Field `TXBRK_INTF` reader - Transmit Break Frame Interrupt Flag Bit"] pub type TxbrkIntfR = crate :: BitReader ;
#[doc = "Field `RXB8_INTF` reader - Receive Bit 8 Interrupt Flag Bit"] pub type Rxb8IntfR = crate :: BitReader ;
#[doc = "Field `RXIDLE_INTF` reader - Receive frame idle interrupt flag bit"] pub type RxidleIntfR = crate :: BitReader ;
#[doc = "Field `ABREND_INTF` reader - Automatic baud rate end interrupt flag bit"] pub type AbrendIntfR = crate :: BitReader ;
#[doc = "Field `ABRERR_INTF` reader - Automatic baud rate error interrupt flag bit"] pub type AbrerrIntfR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Transmit buffer empty interrupt flag bit"]
#[inline (always)] pub fn tx_intf (& self) -> TxIntfR { TxIntfR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive valid data interrupt flag bit"]
#[inline (always)] pub fn rx_intf (& self) -> RxIntfR { RxIntfR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - UART Transmit Complete Interrupt Flag bit"]
#[inline (always)] pub fn txc_intf (& self) -> TxcIntfR { TxcIntfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Receive overflow error interrupt flag bit"]
#[inline (always)] pub fn rxoerr_intf (& self) -> RxoerrIntfR { RxoerrIntfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Parity error interrupt flag bit"]
#[inline (always)] pub fn rxperr_intf (& self) -> RxperrIntfR { RxperrIntfR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Frame error interrupt flag bit"]
#[inline (always)] pub fn rxferr_intf (& self) -> RxferrIntfR { RxferrIntfR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Receive frame break interrupt flag bit"]
#[inline (always)] pub fn rxbrk_intf (& self) -> RxbrkIntfR { RxbrkIntfR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Transmit Break Frame Interrupt Flag Bit"]
#[inline (always)] pub fn txbrk_intf (& self) -> TxbrkIntfR { TxbrkIntfR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Receive Bit 8 Interrupt Flag Bit"]
#[inline (always)] pub fn rxb8_intf (& self) -> Rxb8IntfR { Rxb8IntfR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Receive frame idle interrupt flag bit"]
#[inline (always)] pub fn rxidle_intf (& self) -> RxidleIntfR { RxidleIntfR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Automatic baud rate end interrupt flag bit"]
#[inline (always)] pub fn abrend_intf (& self) -> AbrendIntfR { AbrendIntfR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Automatic baud rate error interrupt flag bit"]
#[inline (always)] pub fn abrerr_intf (& self) -> AbrerrIntfR { AbrerrIntfR :: new (((self . bits >> 11) & 1) != 0) } }
#[doc = "Interrupt status register\n\nYou can [`read`](crate::Reg::read) this register and get [`isr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IsrSpec ; impl crate :: RegisterSpec for IsrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`isr::R`](R) reader structure"] impl crate :: Readable for IsrSpec { }
#[doc = "`reset()` method sets ISR to value 0"] impl crate :: Resettable for IsrSpec { } }
#[doc = "IER (rw) register accessor: Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ier::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ier::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ier`] module"]
#[doc (alias = "IER")] pub type Ier = crate :: Reg < ier :: IerSpec > ;
#[doc = "Interrupt enable register"] pub mod ier {
#[doc = "Register `IER` reader"] pub type R = crate :: R < IerSpec > ;
#[doc = "Register `IER` writer"] pub type W = crate :: W < IerSpec > ;
#[doc = "Field `TXIEN` reader - Transmit buffer empty interrupt enable bit"] pub type TxienR = crate :: BitReader ;
#[doc = "Field `TXIEN` writer - Transmit buffer empty interrupt enable bit"] pub type TxienW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXIEN` reader - Receive buffer interrupt enable bit"] pub type RxienR = crate :: BitReader ;
#[doc = "Field `RXIEN` writer - Receive buffer interrupt enable bit"] pub type RxienW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXC_IEN` reader - Transmit complete interrupt enable bit"] pub type TxcIenR = crate :: BitReader ;
#[doc = "Field `TXC_IEN` writer - Transmit complete interrupt enable bit"] pub type TxcIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXOERREN` reader - Receive overflow error interrupt enable bit"] pub type RxoerrenR = crate :: BitReader ;
#[doc = "Field `RXOERREN` writer - Receive overflow error interrupt enable bit"] pub type RxoerrenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXPERREN` reader - Parity error interrupt enable bit"] pub type RxperrenR = crate :: BitReader ;
#[doc = "Field `RXPERREN` writer - Parity error interrupt enable bit"] pub type RxperrenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXFERREN` reader - Frame error interrupt enable bit"] pub type RxferrenR = crate :: BitReader ;
#[doc = "Field `RXFERREN` writer - Frame error interrupt enable bit"] pub type RxferrenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXBRKEN` reader - Receive frame break interrupt enable bit"] pub type RxbrkenR = crate :: BitReader ;
#[doc = "Field `RXBRKEN` writer - Receive frame break interrupt enable bit"] pub type RxbrkenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXBRK_IEN` reader - Transmit Break Frame Interrupt Enable Bit"] pub type TxbrkIenR = crate :: BitReader ;
#[doc = "Field `TXBRK_IEN` writer - Transmit Break Frame Interrupt Enable Bit"] pub type TxbrkIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXB8_IEN` reader - Receive Bit 8 Interrupt Enable Bit"] pub type Rxb8IenR = crate :: BitReader ;
#[doc = "Field `RXB8_IEN` writer - Receive Bit 8 Interrupt Enable Bit"] pub type Rxb8IenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXIDLEN` reader - Receive frame idle interrupt enable bit"] pub type RxidlenR = crate :: BitReader ;
#[doc = "Field `RXIDLEN` writer - Receive frame idle interrupt enable bit"] pub type RxidlenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ABREND_IEN` reader - Automatic baud rate end interrupt enable"] pub type AbrendIenR = crate :: BitReader ;
#[doc = "Field `ABREND_IEN` writer - Automatic baud rate end interrupt enable"] pub type AbrendIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ABRERR_IEN` reader - Automatic baud rate error interrupt enable"] pub type AbrerrIenR = crate :: BitReader ;
#[doc = "Field `ABRERR_IEN` writer - Automatic baud rate error interrupt enable"] pub type AbrerrIenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Transmit buffer empty interrupt enable bit"]
#[inline (always)] pub fn txien (& self) -> TxienR { TxienR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Receive buffer interrupt enable bit"]
#[inline (always)] pub fn rxien (& self) -> RxienR { RxienR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Transmit complete interrupt enable bit"]
#[inline (always)] pub fn txc_ien (& self) -> TxcIenR { TxcIenR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Receive overflow error interrupt enable bit"]
#[inline (always)] pub fn rxoerren (& self) -> RxoerrenR { RxoerrenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Parity error interrupt enable bit"]
#[inline (always)] pub fn rxperren (& self) -> RxperrenR { RxperrenR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Frame error interrupt enable bit"]
#[inline (always)] pub fn rxferren (& self) -> RxferrenR { RxferrenR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Receive frame break interrupt enable bit"]
#[inline (always)] pub fn rxbrken (& self) -> RxbrkenR { RxbrkenR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Transmit Break Frame Interrupt Enable Bit"]
#[inline (always)] pub fn txbrk_ien (& self) -> TxbrkIenR { TxbrkIenR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Receive Bit 8 Interrupt Enable Bit"]
#[inline (always)] pub fn rxb8_ien (& self) -> Rxb8IenR { Rxb8IenR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Receive frame idle interrupt enable bit"]
#[inline (always)] pub fn rxidlen (& self) -> RxidlenR { RxidlenR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Automatic baud rate end interrupt enable"]
#[inline (always)] pub fn abrend_ien (& self) -> AbrendIenR { AbrendIenR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Automatic baud rate error interrupt enable"]
#[inline (always)] pub fn abrerr_ien (& self) -> AbrerrIenR { AbrerrIenR :: new (((self . bits >> 11) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Transmit buffer empty interrupt enable bit"]
#[inline (always)] pub fn txien (& mut self) -> TxienW < '_ , IerSpec > { TxienW :: new (self , 0) }
#[doc = "Bit 1 - Receive buffer interrupt enable bit"]
#[inline (always)] pub fn rxien (& mut self) -> RxienW < '_ , IerSpec > { RxienW :: new (self , 1) }
#[doc = "Bit 2 - Transmit complete interrupt enable bit"]
#[inline (always)] pub fn txc_ien (& mut self) -> TxcIenW < '_ , IerSpec > { TxcIenW :: new (self , 2) }
#[doc = "Bit 3 - Receive overflow error interrupt enable bit"]
#[inline (always)] pub fn rxoerren (& mut self) -> RxoerrenW < '_ , IerSpec > { RxoerrenW :: new (self , 3) }
#[doc = "Bit 4 - Parity error interrupt enable bit"]
#[inline (always)] pub fn rxperren (& mut self) -> RxperrenW < '_ , IerSpec > { RxperrenW :: new (self , 4) }
#[doc = "Bit 5 - Frame error interrupt enable bit"]
#[inline (always)] pub fn rxferren (& mut self) -> RxferrenW < '_ , IerSpec > { RxferrenW :: new (self , 5) }
#[doc = "Bit 6 - Receive frame break interrupt enable bit"]
#[inline (always)] pub fn rxbrken (& mut self) -> RxbrkenW < '_ , IerSpec > { RxbrkenW :: new (self , 6) }
#[doc = "Bit 7 - Transmit Break Frame Interrupt Enable Bit"]
#[inline (always)] pub fn txbrk_ien (& mut self) -> TxbrkIenW < '_ , IerSpec > { TxbrkIenW :: new (self , 7) }
#[doc = "Bit 8 - Receive Bit 8 Interrupt Enable Bit"]
#[inline (always)] pub fn rxb8_ien (& mut self) -> Rxb8IenW < '_ , IerSpec > { Rxb8IenW :: new (self , 8) }
#[doc = "Bit 9 - Receive frame idle interrupt enable bit"]
#[inline (always)] pub fn rxidlen (& mut self) -> RxidlenW < '_ , IerSpec > { RxidlenW :: new (self , 9) }
#[doc = "Bit 10 - Automatic baud rate end interrupt enable"]
#[inline (always)] pub fn abrend_ien (& mut self) -> AbrendIenW < '_ , IerSpec > { AbrendIenW :: new (self , 10) }
#[doc = "Bit 11 - Automatic baud rate error interrupt enable"]
#[inline (always)] pub fn abrerr_ien (& mut self) -> AbrerrIenW < '_ , IerSpec > { AbrerrIenW :: new (self , 11) } }
#[doc = "Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ier::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ier::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IerSpec ; impl crate :: RegisterSpec for IerSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ier::R`](R) reader structure"] impl crate :: Readable for IerSpec { }
#[doc = "`write(|w| ..)` method takes [`ier::W`](W) writer structure"] impl crate :: Writable for IerSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets IER to value 0"] impl crate :: Resettable for IerSpec { } }
#[doc = "ICR (w) register accessor: Interrupt Clear Register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`icr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@icr`] module"]
#[doc (alias = "ICR")] pub type Icr = crate :: Reg < icr :: IcrSpec > ;
#[doc = "Interrupt Clear Register"] pub mod icr {
#[doc = "Register `ICR` writer"] pub type W = crate :: W < IcrSpec > ;
#[doc = "Field `TXICLR` writer - Transmit buffer empty interrupt clear bit"] pub type TxiclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXICLR` writer - Receive interrupt clear bit"] pub type RxiclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXC_CLR` writer - Transmit complete interrupt clear bit"] pub type TxcClrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXOERRCLR` writer - Receive overflow error interrupt clear bit"] pub type RxoerrclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXPERRCLR` writer - Parity error interrupt clear bit"] pub type RxperrclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXFERRCLR` writer - Frame error interrupt clear bit"] pub type RxferrclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXBRKCLR` writer - Receive frame break interrupt clear bit"] pub type RxbrkclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXBRK_CLR` writer - Transmit Break Frame Interrupt clear Bit"] pub type TxbrkClrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXB8_CLR` writer - Receive Bit 8 Interrupt clear Bit"] pub type Rxb8ClrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXIDLCLR` writer - Receive Bit 8 Interrupt clear Bit"] pub type RxidlclrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ABREND_CLR` writer - Auto baud rate end interrupt clear bit"] pub type AbrendClrW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ABRERR_CLR` writer - Auto baud rate error interrupt clear bit"] pub type AbrerrClrW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl W {
#[doc = "Bit 0 - Transmit buffer empty interrupt clear bit"]
#[inline (always)] pub fn txiclr (& mut self) -> TxiclrW < '_ , IcrSpec > { TxiclrW :: new (self , 0) }
#[doc = "Bit 1 - Receive interrupt clear bit"]
#[inline (always)] pub fn rxiclr (& mut self) -> RxiclrW < '_ , IcrSpec > { RxiclrW :: new (self , 1) }
#[doc = "Bit 2 - Transmit complete interrupt clear bit"]
#[inline (always)] pub fn txc_clr (& mut self) -> TxcClrW < '_ , IcrSpec > { TxcClrW :: new (self , 2) }
#[doc = "Bit 3 - Receive overflow error interrupt clear bit"]
#[inline (always)] pub fn rxoerrclr (& mut self) -> RxoerrclrW < '_ , IcrSpec > { RxoerrclrW :: new (self , 3) }
#[doc = "Bit 4 - Parity error interrupt clear bit"]
#[inline (always)] pub fn rxperrclr (& mut self) -> RxperrclrW < '_ , IcrSpec > { RxperrclrW :: new (self , 4) }
#[doc = "Bit 5 - Frame error interrupt clear bit"]
#[inline (always)] pub fn rxferrclr (& mut self) -> RxferrclrW < '_ , IcrSpec > { RxferrclrW :: new (self , 5) }
#[doc = "Bit 6 - Receive frame break interrupt clear bit"]
#[inline (always)] pub fn rxbrkclr (& mut self) -> RxbrkclrW < '_ , IcrSpec > { RxbrkclrW :: new (self , 6) }
#[doc = "Bit 7 - Transmit Break Frame Interrupt clear Bit"]
#[inline (always)] pub fn txbrk_clr (& mut self) -> TxbrkClrW < '_ , IcrSpec > { TxbrkClrW :: new (self , 7) }
#[doc = "Bit 8 - Receive Bit 8 Interrupt clear Bit"]
#[inline (always)] pub fn rxb8_clr (& mut self) -> Rxb8ClrW < '_ , IcrSpec > { Rxb8ClrW :: new (self , 8) }
#[doc = "Bit 9 - Receive Bit 8 Interrupt clear Bit"]
#[inline (always)] pub fn rxidlclr (& mut self) -> RxidlclrW < '_ , IcrSpec > { RxidlclrW :: new (self , 9) }
#[doc = "Bit 10 - Auto baud rate end interrupt clear bit"]
#[inline (always)] pub fn abrend_clr (& mut self) -> AbrendClrW < '_ , IcrSpec > { AbrendClrW :: new (self , 10) }
#[doc = "Bit 11 - Auto baud rate error interrupt clear bit"]
#[inline (always)] pub fn abrerr_clr (& mut self) -> AbrerrClrW < '_ , IcrSpec > { AbrerrClrW :: new (self , 11) } }
#[doc = "Interrupt Clear Register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`icr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IcrSpec ; impl crate :: RegisterSpec for IcrSpec { type Ux = u32 ; }
#[doc = "`write(|w| ..)` method takes [`icr::W`](W) writer structure"] impl crate :: Writable for IcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ICR to value 0"] impl crate :: Resettable for IcrSpec { } }
#[doc = "GCR (rw) register accessor: Global control register\n\nYou can [`read`](crate::Reg::read) this register and get [`gcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@gcr`] module"]
#[doc (alias = "GCR")] pub type Gcr = crate :: Reg < gcr :: GcrSpec > ;
#[doc = "Global control register"] pub mod gcr {
#[doc = "Register `GCR` reader"] pub type R = crate :: R < GcrSpec > ;
#[doc = "Register `GCR` writer"] pub type W = crate :: W < GcrSpec > ;
#[doc = "Field `UARTEN` reader - UART mode selection bit"] pub type UartenR = crate :: BitReader ;
#[doc = "Field `UARTEN` writer - UART mode selection bit"] pub type UartenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DMAMODE` reader - DMA mode selection bit"] pub type DmamodeR = crate :: BitReader ;
#[doc = "Field `DMAMODE` writer - DMA mode selection bit"] pub type DmamodeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `AUTOFLOWEN` reader - Automatic flow control enable bit"] pub type AutoflowenR = crate :: BitReader ;
#[doc = "Field `AUTOFLOWEN` writer - Automatic flow control enable bit"] pub type AutoflowenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RXEN` reader - Enable receive"] pub type RxenR = crate :: BitReader ;
#[doc = "Field `RXEN` writer - Enable receive"] pub type RxenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TXEN` reader - Enable transmit"] pub type TxenR = crate :: BitReader ;
#[doc = "Field `TXEN` writer - Enable transmit"] pub type TxenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SEL_B8` reader - Select bit8"] pub type SelB8R = crate :: BitReader ;
#[doc = "Field `SEL_B8` writer - Select bit8"] pub type SelB8W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SWAP` reader - change swap"] pub type SwapR = crate :: BitReader ;
#[doc = "Field `SWAP` writer - change swap"] pub type SwapW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RX_TOG` reader - Toggle RX"] pub type RxTogR = crate :: BitReader ;
#[doc = "Field `RX_TOG` writer - Toggle RX"] pub type RxTogW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `TX_TOG` reader - Toggle TX"] pub type TxTogR = crate :: BitReader ;
#[doc = "Field `TX_TOG` writer - Toggle TX"] pub type TxTogW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - UART mode selection bit"]
#[inline (always)] pub fn uarten (& self) -> UartenR { UartenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - DMA mode selection bit"]
#[inline (always)] pub fn dmamode (& self) -> DmamodeR { DmamodeR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Automatic flow control enable bit"]
#[inline (always)] pub fn autoflowen (& self) -> AutoflowenR { AutoflowenR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Enable receive"]
#[inline (always)] pub fn rxen (& self) -> RxenR { RxenR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Enable transmit"]
#[inline (always)] pub fn txen (& self) -> TxenR { TxenR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 7 - Select bit8"]
#[inline (always)] pub fn sel_b8 (& self) -> SelB8R { SelB8R :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - change swap"]
#[inline (always)] pub fn swap (& self) -> SwapR { SwapR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Toggle RX"]
#[inline (always)] pub fn rx_tog (& self) -> RxTogR { RxTogR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Toggle TX"]
#[inline (always)] pub fn tx_tog (& self) -> TxTogR { TxTogR :: new (((self . bits >> 10) & 1) != 0) } } impl W {
#[doc = "Bit 0 - UART mode selection bit"]
#[inline (always)] pub fn uarten (& mut self) -> UartenW < '_ , GcrSpec > { UartenW :: new (self , 0) }
#[doc = "Bit 1 - DMA mode selection bit"]
#[inline (always)] pub fn dmamode (& mut self) -> DmamodeW < '_ , GcrSpec > { DmamodeW :: new (self , 1) }
#[doc = "Bit 2 - Automatic flow control enable bit"]
#[inline (always)] pub fn autoflowen (& mut self) -> AutoflowenW < '_ , GcrSpec > { AutoflowenW :: new (self , 2) }
#[doc = "Bit 3 - Enable receive"]
#[inline (always)] pub fn rxen (& mut self) -> RxenW < '_ , GcrSpec > { RxenW :: new (self , 3) }
#[doc = "Bit 4 - Enable transmit"]
#[inline (always)] pub fn txen (& mut self) -> TxenW < '_ , GcrSpec > { TxenW :: new (self , 4) }
#[doc = "Bit 7 - Select bit8"]
#[inline (always)] pub fn sel_b8 (& mut self) -> SelB8W < '_ , GcrSpec > { SelB8W :: new (self , 7) }
#[doc = "Bit 8 - change swap"]
#[inline (always)] pub fn swap (& mut self) -> SwapW < '_ , GcrSpec > { SwapW :: new (self , 8) }
#[doc = "Bit 9 - Toggle RX"]
#[inline (always)] pub fn rx_tog (& mut self) -> RxTogW < '_ , GcrSpec > { RxTogW :: new (self , 9) }
#[doc = "Bit 10 - Toggle TX"]
#[inline (always)] pub fn tx_tog (& mut self) -> TxTogW < '_ , GcrSpec > { TxTogW :: new (self , 10) } }
#[doc = "Global control register\n\nYou can [`read`](crate::Reg::read) this register and get [`gcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct GcrSpec ; impl crate :: RegisterSpec for GcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`gcr::R`](R) reader structure"] impl crate :: Readable for GcrSpec { }
#[doc = "`write(|w| ..)` method takes [`gcr::W`](W) writer structure"] impl crate :: Writable for GcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets GCR to value 0"] impl crate :: Resettable for GcrSpec { } }
#[doc = "CCR (rw) register accessor: common control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr`] module"]
#[doc (alias = "CCR")] pub type Ccr = crate :: Reg < ccr :: CcrSpec > ;
#[doc = "common control register"] pub mod ccr {
#[doc = "Register `CCR` reader"] pub type R = crate :: R < CcrSpec > ;
#[doc = "Register `CCR` writer"] pub type W = crate :: W < CcrSpec > ;
#[doc = "Field `PEN` reader - Parity enable bit"] pub type PenR = crate :: BitReader ;
#[doc = "Field `PEN` writer - Parity enable bit"] pub type PenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `PSEL` reader - Parity selection bit"] pub type PselR = crate :: BitReader ;
#[doc = "Field `PSEL` writer - Parity selection bit"] pub type PselW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SPB0` reader - Stop bit 0 selection"] pub type Spb0R = crate :: BitReader ;
#[doc = "Field `SPB0` writer - Stop bit 0 selection"] pub type Spb0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `BRK` reader - UART transmit frame break"] pub type BrkR = crate :: BitReader ;
#[doc = "Field `BRK` writer - UART transmit frame break"] pub type BrkW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CHAR` reader - UART width bit"] pub type CharR = crate :: FieldReader ;
#[doc = "Field `CHAR` writer - UART width bit"] pub type CharW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `SPB1` reader - Stop bit 1 selection bit"] pub type Spb1R = crate :: BitReader ;
#[doc = "Field `SPB1` writer - Stop bit 1 selection bit"] pub type Spb1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `B8RXD` reader - Synchronous frame receive"] pub type B8rxdR = crate :: BitReader ;
#[doc = "Field `B8RXD` writer - Synchronous frame receive"] pub type B8rxdW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `B8TXD` reader - Synchronous frame transmit"] pub type B8txdR = crate :: BitReader ;
#[doc = "Field `B8TXD` writer - Synchronous frame transmit"] pub type B8txdW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `B8POL` reader - Synchronous frame polarity control bit"] pub type B8polR = crate :: BitReader ;
#[doc = "Field `B8POL` writer - Synchronous frame polarity control bit"] pub type B8polW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `B8TOG` reader - Synchronous frame auto toggle bit"] pub type B8togR = crate :: BitReader ;
#[doc = "Field `B8TOG` writer - Synchronous frame auto toggle bit"] pub type B8togW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `B8EN` reader - Synchronous frame enable bit"] pub type B8enR = crate :: BitReader ;
#[doc = "Field `B8EN` writer - Synchronous frame enable bit"] pub type B8enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RWU` reader - Receive wake up method"] pub type RwuR = crate :: BitReader ;
#[doc = "Field `RWU` writer - Receive wake up method"] pub type RwuW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `WAKE` reader - Wake up method"] pub type WakeR = crate :: BitReader ;
#[doc = "Field `WAKE` writer - Wake up method"] pub type WakeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `LIN` reader - UART LIN enable bit"] pub type LinR = crate :: BitReader ;
#[doc = "Field `LIN` writer - UART LIN enable bit"] pub type LinW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Parity enable bit"]
#[inline (always)] pub fn pen (& self) -> PenR { PenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Parity selection bit"]
#[inline (always)] pub fn psel (& self) -> PselR { PselR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Stop bit 0 selection"]
#[inline (always)] pub fn spb0 (& self) -> Spb0R { Spb0R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - UART transmit frame break"]
#[inline (always)] pub fn brk (& self) -> BrkR { BrkR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bits 4:5 - UART width bit"]
#[inline (always)] pub fn char (& self) -> CharR { CharR :: new (((self . bits >> 4) & 3) as u8) }
#[doc = "Bit 6 - Stop bit 1 selection bit"]
#[inline (always)] pub fn spb1 (& self) -> Spb1R { Spb1R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Synchronous frame receive"]
#[inline (always)] pub fn b8rxd (& self) -> B8rxdR { B8rxdR :: new (((self . bits >> 7) & 1) != 0) }
#[doc = "Bit 8 - Synchronous frame transmit"]
#[inline (always)] pub fn b8txd (& self) -> B8txdR { B8txdR :: new (((self . bits >> 8) & 1) != 0) }
#[doc = "Bit 9 - Synchronous frame polarity control bit"]
#[inline (always)] pub fn b8pol (& self) -> B8polR { B8polR :: new (((self . bits >> 9) & 1) != 0) }
#[doc = "Bit 10 - Synchronous frame auto toggle bit"]
#[inline (always)] pub fn b8tog (& self) -> B8togR { B8togR :: new (((self . bits >> 10) & 1) != 0) }
#[doc = "Bit 11 - Synchronous frame enable bit"]
#[inline (always)] pub fn b8en (& self) -> B8enR { B8enR :: new (((self . bits >> 11) & 1) != 0) }
#[doc = "Bit 12 - Receive wake up method"]
#[inline (always)] pub fn rwu (& self) -> RwuR { RwuR :: new (((self . bits >> 12) & 1) != 0) }
#[doc = "Bit 13 - Wake up method"]
#[inline (always)] pub fn wake (& self) -> WakeR { WakeR :: new (((self . bits >> 13) & 1) != 0) }
#[doc = "Bit 14 - UART LIN enable bit"]
#[inline (always)] pub fn lin (& self) -> LinR { LinR :: new (((self . bits >> 14) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Parity enable bit"]
#[inline (always)] pub fn pen (& mut self) -> PenW < '_ , CcrSpec > { PenW :: new (self , 0) }
#[doc = "Bit 1 - Parity selection bit"]
#[inline (always)] pub fn psel (& mut self) -> PselW < '_ , CcrSpec > { PselW :: new (self , 1) }
#[doc = "Bit 2 - Stop bit 0 selection"]
#[inline (always)] pub fn spb0 (& mut self) -> Spb0W < '_ , CcrSpec > { Spb0W :: new (self , 2) }
#[doc = "Bit 3 - UART transmit frame break"]
#[inline (always)] pub fn brk (& mut self) -> BrkW < '_ , CcrSpec > { BrkW :: new (self , 3) }
#[doc = "Bits 4:5 - UART width bit"]
#[inline (always)] pub fn char (& mut self) -> CharW < '_ , CcrSpec > { CharW :: new (self , 4) }
#[doc = "Bit 6 - Stop bit 1 selection bit"]
#[inline (always)] pub fn spb1 (& mut self) -> Spb1W < '_ , CcrSpec > { Spb1W :: new (self , 6) }
#[doc = "Bit 7 - Synchronous frame receive"]
#[inline (always)] pub fn b8rxd (& mut self) -> B8rxdW < '_ , CcrSpec > { B8rxdW :: new (self , 7) }
#[doc = "Bit 8 - Synchronous frame transmit"]
#[inline (always)] pub fn b8txd (& mut self) -> B8txdW < '_ , CcrSpec > { B8txdW :: new (self , 8) }
#[doc = "Bit 9 - Synchronous frame polarity control bit"]
#[inline (always)] pub fn b8pol (& mut self) -> B8polW < '_ , CcrSpec > { B8polW :: new (self , 9) }
#[doc = "Bit 10 - Synchronous frame auto toggle bit"]
#[inline (always)] pub fn b8tog (& mut self) -> B8togW < '_ , CcrSpec > { B8togW :: new (self , 10) }
#[doc = "Bit 11 - Synchronous frame enable bit"]
#[inline (always)] pub fn b8en (& mut self) -> B8enW < '_ , CcrSpec > { B8enW :: new (self , 11) }
#[doc = "Bit 12 - Receive wake up method"]
#[inline (always)] pub fn rwu (& mut self) -> RwuW < '_ , CcrSpec > { RwuW :: new (self , 12) }
#[doc = "Bit 13 - Wake up method"]
#[inline (always)] pub fn wake (& mut self) -> WakeW < '_ , CcrSpec > { WakeW :: new (self , 13) }
#[doc = "Bit 14 - UART LIN enable bit"]
#[inline (always)] pub fn lin (& mut self) -> LinW < '_ , CcrSpec > { LinW :: new (self , 14) } }
#[doc = "common control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CcrSpec ; impl crate :: RegisterSpec for CcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`ccr::R`](R) reader structure"] impl crate :: Readable for CcrSpec { }
#[doc = "`write(|w| ..)` method takes [`ccr::W`](W) writer structure"] impl crate :: Writable for CcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CCR to value 0x30"] impl crate :: Resettable for CcrSpec { const RESET_VALUE : u32 = 0x30 ; } }
#[doc = "BRR (rw) register accessor: Baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`brr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`brr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@brr`] module"]
#[doc (alias = "BRR")] pub type Brr = crate :: Reg < brr :: BrrSpec > ;
#[doc = "Baud rate register"] pub mod brr {
#[doc = "Register `BRR` reader"] pub type R = crate :: R < BrrSpec > ;
#[doc = "Register `BRR` writer"] pub type W = crate :: W < BrrSpec > ;
#[doc = "Field `DIV_MANTISSA` reader - Mantissa part of UARTDIV"] pub type DivMantissaR = crate :: FieldReader < u16 > ;
#[doc = "Field `DIV_MANTISSA` writer - Mantissa part of UARTDIV"] pub type DivMantissaW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Mantissa part of UARTDIV"]
#[inline (always)] pub fn div_mantissa (& self) -> DivMantissaR { DivMantissaR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Mantissa part of UARTDIV"]
#[inline (always)] pub fn div_mantissa (& mut self) -> DivMantissaW < '_ , BrrSpec > { DivMantissaW :: new (self , 0) } }
#[doc = "Baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`brr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`brr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BrrSpec ; impl crate :: RegisterSpec for BrrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`brr::R`](R) reader structure"] impl crate :: Readable for BrrSpec { }
#[doc = "`write(|w| ..)` method takes [`brr::W`](W) writer structure"] impl crate :: Writable for BrrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets BRR to value 0x01"] impl crate :: Resettable for BrrSpec { const RESET_VALUE : u32 = 0x01 ; } }
#[doc = "FRA (rw) register accessor: Fractional baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`fra::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fra::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fra`] module"]
#[doc (alias = "FRA")] pub type Fra = crate :: Reg < fra :: FraSpec > ;
#[doc = "Fractional baud rate register"] pub mod fra {
#[doc = "Register `FRA` reader"] pub type R = crate :: R < FraSpec > ;
#[doc = "Register `FRA` writer"] pub type W = crate :: W < FraSpec > ;
#[doc = "Field `DIV_Fraction` reader - Fractional part of UARTDIV"] pub type DivFractionR = crate :: FieldReader ;
#[doc = "Field `DIV_Fraction` writer - Fractional part of UARTDIV"] pub type DivFractionW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - Fractional part of UARTDIV"]
#[inline (always)] pub fn div_fraction (& self) -> DivFractionR { DivFractionR :: new ((self . bits & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - Fractional part of UARTDIV"]
#[inline (always)] pub fn div_fraction (& mut self) -> DivFractionW < '_ , FraSpec > { DivFractionW :: new (self , 0) } }
#[doc = "Fractional baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`fra::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fra::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct FraSpec ; impl crate :: RegisterSpec for FraSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`fra::R`](R) reader structure"] impl crate :: Readable for FraSpec { }
#[doc = "`write(|w| ..)` method takes [`fra::W`](W) writer structure"] impl crate :: Writable for FraSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets FRA to value 0"] impl crate :: Resettable for FraSpec { } }
#[doc = "RXADDR (rw) register accessor: Receive Address Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rxaddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxaddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxaddr`] module"]
#[doc (alias = "RXADDR")] pub type Rxaddr = crate :: Reg < rxaddr :: RxaddrSpec > ;
#[doc = "Receive Address Register"] pub mod rxaddr {
#[doc = "Register `RXADDR` reader"] pub type R = crate :: R < RxaddrSpec > ;
#[doc = "Register `RXADDR` writer"] pub type W = crate :: W < RxaddrSpec > ;
#[doc = "Field `RXADDR` reader - Synchronous frame match address"] pub type RxaddrR = crate :: FieldReader ;
#[doc = "Field `RXADDR` writer - Synchronous frame match address"] pub type RxaddrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Synchronous frame match address"]
#[inline (always)] pub fn rxaddr (& self) -> RxaddrR { RxaddrR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Synchronous frame match address"]
#[inline (always)] pub fn rxaddr (& mut self) -> RxaddrW < '_ , RxaddrSpec > { RxaddrW :: new (self , 0) } }
#[doc = "Receive Address Register\n\nYou can [`read`](crate::Reg::read) this register and get [`rxaddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxaddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxaddrSpec ; impl crate :: RegisterSpec for RxaddrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rxaddr::R`](R) reader structure"] impl crate :: Readable for RxaddrSpec { }
#[doc = "`write(|w| ..)` method takes [`rxaddr::W`](W) writer structure"] impl crate :: Writable for RxaddrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RXADDR to value 0"] impl crate :: Resettable for RxaddrSpec { } }
#[doc = "RXMASK (rw) register accessor: Receive Mask Registe\n\nYou can [`read`](crate::Reg::read) this register and get [`rxmask::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxmask::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxmask`] module"]
#[doc (alias = "RXMASK")] pub type Rxmask = crate :: Reg < rxmask :: RxmaskSpec > ;
#[doc = "Receive Mask Registe"] pub mod rxmask {
#[doc = "Register `RXMASK` reader"] pub type R = crate :: R < RxmaskSpec > ;
#[doc = "Register `RXMASK` writer"] pub type W = crate :: W < RxmaskSpec > ;
#[doc = "Field `RXMASK` reader - Synchronous frame match address mask"] pub type RxmaskR = crate :: FieldReader ;
#[doc = "Field `RXMASK` writer - Synchronous frame match address mask"] pub type RxmaskW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - Synchronous frame match address mask"]
#[inline (always)] pub fn rxmask (& self) -> RxmaskR { RxmaskR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - Synchronous frame match address mask"]
#[inline (always)] pub fn rxmask (& mut self) -> RxmaskW < '_ , RxmaskSpec > { RxmaskW :: new (self , 0) } }
#[doc = "Receive Mask Registe\n\nYou can [`read`](crate::Reg::read) this register and get [`rxmask::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rxmask::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RxmaskSpec ; impl crate :: RegisterSpec for RxmaskSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`rxmask::R`](R) reader structure"] impl crate :: Readable for RxmaskSpec { }
#[doc = "`write(|w| ..)` method takes [`rxmask::W`](W) writer structure"] impl crate :: Writable for RxmaskSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets RXMASK to value 0xff"] impl crate :: Resettable for RxmaskSpec { const RESET_VALUE : u32 = 0xff ; } }
#[doc = "SCR (rw) register accessor: Slave Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`scr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`scr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@scr`] module"]
#[doc (alias = "SCR")] pub type Scr = crate :: Reg < scr :: ScrSpec > ;
#[doc = "Slave Control Register"] pub mod scr {
#[doc = "Register `SCR` reader"] pub type R = crate :: R < ScrSpec > ;
#[doc = "Register `SCR` writer"] pub type W = crate :: W < ScrSpec > ;
#[doc = "Field `SCEN` reader - ISO7816 enable control bit"] pub type ScenR = crate :: BitReader ;
#[doc = "Field `SCEN` writer - ISO7816 enable control bit"] pub type ScenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SCAEN` reader - ISO7816 check auto-response bit"] pub type ScaenR = crate :: BitReader ;
#[doc = "Field `SCAEN` writer - ISO7816 check auto-response bit"] pub type ScaenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `NACK` reader - Master receive frame answer bit"] pub type NackR = crate :: BitReader ;
#[doc = "Field `NACK` writer - Master receive frame answer bit"] pub type NackW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SCFCNT` reader - ISO7816 protection counter bit"] pub type ScfcntR = crate :: FieldReader ;
#[doc = "Field `SCFCNT` writer - ISO7816 protection counter bit"] pub type ScfcntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ;
#[doc = "Field `HDSEL` reader - Single-wire half-duplex mode selection bit"] pub type HdselR = crate :: BitReader ;
#[doc = "Field `HDSEL` writer - Single-wire half-duplex mode selection bit"] pub type HdselW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - ISO7816 enable control bit"]
#[inline (always)] pub fn scen (& self) -> ScenR { ScenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - ISO7816 check auto-response bit"]
#[inline (always)] pub fn scaen (& self) -> ScaenR { ScaenR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Master receive frame answer bit"]
#[inline (always)] pub fn nack (& self) -> NackR { NackR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bits 4:11 - ISO7816 protection counter bit"]
#[inline (always)] pub fn scfcnt (& self) -> ScfcntR { ScfcntR :: new (((self . bits >> 4) & 0xff) as u8) }
#[doc = "Bit 12 - Single-wire half-duplex mode selection bit"]
#[inline (always)] pub fn hdsel (& self) -> HdselR { HdselR :: new (((self . bits >> 12) & 1) != 0) } } impl W {
#[doc = "Bit 0 - ISO7816 enable control bit"]
#[inline (always)] pub fn scen (& mut self) -> ScenW < '_ , ScrSpec > { ScenW :: new (self , 0) }
#[doc = "Bit 1 - ISO7816 check auto-response bit"]
#[inline (always)] pub fn scaen (& mut self) -> ScaenW < '_ , ScrSpec > { ScaenW :: new (self , 1) }
#[doc = "Bit 2 - Master receive frame answer bit"]
#[inline (always)] pub fn nack (& mut self) -> NackW < '_ , ScrSpec > { NackW :: new (self , 2) }
#[doc = "Bits 4:11 - ISO7816 protection counter bit"]
#[inline (always)] pub fn scfcnt (& mut self) -> ScfcntW < '_ , ScrSpec > { ScfcntW :: new (self , 4) }
#[doc = "Bit 12 - Single-wire half-duplex mode selection bit"]
#[inline (always)] pub fn hdsel (& mut self) -> HdselW < '_ , ScrSpec > { HdselW :: new (self , 12) } }
#[doc = "Slave Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`scr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`scr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ScrSpec ; impl crate :: RegisterSpec for ScrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`scr::R`](R) reader structure"] impl crate :: Readable for ScrSpec { }
#[doc = "`write(|w| ..)` method takes [`scr::W`](W) writer structure"] impl crate :: Writable for ScrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets SCR to value 0"] impl crate :: Resettable for ScrSpec { } }
#[doc = "IDLR (rw) register accessor: Data length register\n\nYou can [`read`](crate::Reg::read) this register and get [`idlr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`idlr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idlr`] module"]
#[doc (alias = "IDLR")] pub type Idlr = crate :: Reg < idlr :: IdlrSpec > ;
#[doc = "Data length register"] pub mod idlr {
#[doc = "Register `IDLR` reader"] pub type R = crate :: R < IdlrSpec > ;
#[doc = "Register `IDLR` writer"] pub type W = crate :: W < IdlrSpec > ;
#[doc = "Field `IDLR` reader - Idle data length register"] pub type IdlrR = crate :: FieldReader < u16 > ;
#[doc = "Field `IDLR` writer - Idle data length register"] pub type IdlrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R {
#[doc = "Bits 0:15 - Idle data length register"]
#[inline (always)] pub fn idlr (& self) -> IdlrR { IdlrR :: new ((self . bits & 0xffff) as u16) } } impl W {
#[doc = "Bits 0:15 - Idle data length register"]
#[inline (always)] pub fn idlr (& mut self) -> IdlrW < '_ , IdlrSpec > { IdlrW :: new (self , 0) } }
#[doc = "Data length register\n\nYou can [`read`](crate::Reg::read) this register and get [`idlr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`idlr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IdlrSpec ; impl crate :: RegisterSpec for IdlrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`idlr::R`](R) reader structure"] impl crate :: Readable for IdlrSpec { }
#[doc = "`write(|w| ..)` method takes [`idlr::W`](W) writer structure"] impl crate :: Writable for IdlrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets IDLR to value 0x0c"] impl crate :: Resettable for IdlrSpec { const RESET_VALUE : u32 = 0x0c ; } }
#[doc = "ABRCR (rw) register accessor: Automatic Baud Rate Register\n\nYou can [`read`](crate::Reg::read) this register and get [`abrcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`abrcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@abrcr`] module"]
#[doc (alias = "ABRCR")] pub type Abrcr = crate :: Reg < abrcr :: AbrcrSpec > ;
#[doc = "Automatic Baud Rate Register"] pub mod abrcr {
#[doc = "Register `ABRCR` reader"] pub type R = crate :: R < AbrcrSpec > ;
#[doc = "Register `ABRCR` writer"] pub type W = crate :: W < AbrcrSpec > ;
#[doc = "Field `Abren` reader - Automatic baud rate enable"] pub type AbrenR = crate :: BitReader ;
#[doc = "Field `Abren` writer - Automatic baud rate enable"] pub type AbrenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `Abr_bitcnt` reader - Automatic baud rate detection length"] pub type AbrBitcntR = crate :: FieldReader ;
#[doc = "Field `Abr_bitcnt` writer - Automatic baud rate detection length"] pub type AbrBitcntW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `Former_edge` reader - Auto baud rate previous edge selection"] pub type FormerEdgeR = crate :: BitReader ;
#[doc = "Field `Former_edge` writer - Auto baud rate previous edge selection"] pub type FormerEdgeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `Later_edge` reader - Automatic baud rate after edge selection"] pub type LaterEdgeR = crate :: BitReader ;
#[doc = "Field `Later_edge` writer - Automatic baud rate after edge selection"] pub type LaterEdgeW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Automatic baud rate enable"]
#[inline (always)] pub fn abren (& self) -> AbrenR { AbrenR :: new ((self . bits & 1) != 0) }
#[doc = "Bits 1:2 - Automatic baud rate detection length"]
#[inline (always)] pub fn abr_bitcnt (& self) -> AbrBitcntR { AbrBitcntR :: new (((self . bits >> 1) & 3) as u8) }
#[doc = "Bit 3 - Auto baud rate previous edge selection"]
#[inline (always)] pub fn former_edge (& self) -> FormerEdgeR { FormerEdgeR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Automatic baud rate after edge selection"]
#[inline (always)] pub fn later_edge (& self) -> LaterEdgeR { LaterEdgeR :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Automatic baud rate enable"]
#[inline (always)] pub fn abren (& mut self) -> AbrenW < '_ , AbrcrSpec > { AbrenW :: new (self , 0) }
#[doc = "Bits 1:2 - Automatic baud rate detection length"]
#[inline (always)] pub fn abr_bitcnt (& mut self) -> AbrBitcntW < '_ , AbrcrSpec > { AbrBitcntW :: new (self , 1) }
#[doc = "Bit 3 - Auto baud rate previous edge selection"]
#[inline (always)] pub fn former_edge (& mut self) -> FormerEdgeW < '_ , AbrcrSpec > { FormerEdgeW :: new (self , 3) }
#[doc = "Bit 4 - Automatic baud rate after edge selection"]
#[inline (always)] pub fn later_edge (& mut self) -> LaterEdgeW < '_ , AbrcrSpec > { LaterEdgeW :: new (self , 4) } }
#[doc = "Automatic Baud Rate Register\n\nYou can [`read`](crate::Reg::read) this register and get [`abrcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`abrcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AbrcrSpec ; impl crate :: RegisterSpec for AbrcrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`abrcr::R`](R) reader structure"] impl crate :: Readable for AbrcrSpec { }
#[doc = "`write(|w| ..)` method takes [`abrcr::W`](W) writer structure"] impl crate :: Writable for AbrcrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ABRCR to value 0"] impl crate :: Resettable for AbrcrSpec { } } }
#[doc = "Universal asynchronous receiver transmitter"] pub type Uart2 = crate :: Periph < uart1 :: RegisterBlock , 0x4000_4400 > ; impl core :: fmt :: Debug for Uart2 { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Uart2") . finish () } }
#[doc = "Universal asynchronous receiver transmitter"] pub use self :: uart1 as uart2 ;
#[doc = "Universal serial bus full-speed device interface"] pub type Usb = crate :: Periph < usb :: RegisterBlock , 0x4000_5c00 > ; impl core :: fmt :: Debug for Usb { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Usb") . finish () } }
#[doc = "Universal serial bus full-speed device interface"] pub mod usb {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { top : Top , _reserved1 : [u8 ; 0x02] , int_state : IntState , _reserved2 : [u8 ; 0x02] , ep_int_state : EpIntState , _reserved3 : [u8 ; 0x02] , ep0_int_state : Ep0IntState , _reserved4 : [u8 ; 0x02] , int_en : IntEn , _reserved5 : [u8 ; 0x02] , ep_int_en : EpIntEn , _reserved6 : [u8 ; 0x02] , ep0_int_en : Ep0IntEn , _reserved7 : [u8 ; 0x06] , ep1_int_state : Ep1IntState , _reserved8 : [u8 ; 0x02] , ep2_int_state : Ep2IntState , _reserved9 : [u8 ; 0x02] , ep3_int_state : Ep3IntState , _reserved10 : [u8 ; 0x02] , ep4_int_state : Ep4IntState , _reserved11 : [u8 ; 0x12] , ep1_int_en : Ep1IntEn , _reserved12 : [u8 ; 0x02] , ep2_int_en : Ep2IntEn , _reserved13 : [u8 ; 0x02] , ep3_int_en : Ep3IntEn , _reserved14 : [u8 ; 0x02] , ep4_int_en : Ep4IntEn , _reserved15 : [u8 ; 0x12] , addr : Addr , _reserved16 : [u8 ; 0x02] , ep_en : EpEn , _reserved17 : [u8 ; 0x02] , ep_dma_dir : EpDmaDir , _reserved18 : [u8 ; 0x02] , ep_type : EpType , _reserved19 : [u8 ; 0x02] , ep_index1_2 : EpIndex1_2 , _reserved20 : [u8 ; 0x02] , ep_index3_4 : EpIndex3_4 , _reserved21 : [u8 ; 0x02] , tog_ctrl1_4 : TogCtrl1_4 , _reserved22 : [u8 ; 0x02] , tog_stat1_4 : TogStat1_4 , _reserved23 : [u8 ; 0x02] , setup0 : Setup0 , _reserved24 : [u8 ; 0x02] , setup1 : Setup1 , _reserved25 : [u8 ; 0x02] , setup2 : Setup2 , _reserved26 : [u8 ; 0x02] , setup3 : Setup3 , _reserved27 : [u8 ; 0x02] , setup4 : Setup4 , _reserved28 : [u8 ; 0x02] , setup5 : Setup5 , _reserved29 : [u8 ; 0x02] , setup6 : Setup6 , _reserved30 : [u8 ; 0x02] , setup7 : Setup7 , _reserved31 : [u8 ; 0x02] , packet_sizel : PacketSizel , _reserved32 : [u8 ; 0x02] , packet_sizeh : PacketSizeh , _reserved33 : [u8 ; 0x58] , ep0_avail : Ep0Avail , _reserved34 : [u8 ; 0x02] , ep1_avail : Ep1Avail , _reserved35 : [u8 ; 0x02] , ep2_avail : Ep2Avail , _reserved36 : [u8 ; 0x02] , ep3_avail : Ep3Avail , _reserved37 : [u8 ; 0x02] , ep4_avail : Ep4Avail , _reserved38 : [u8 ; 0x0e] , dam_addr0 : DamAddr0 , _reserved39 : [u8 ; 0x02] , dam_addr1 : DamAddr1 , _reserved40 : [u8 ; 0x02] , dam_addr2 : DamAddr2 , _reserved41 : [u8 ; 0x02] , dam_addr3 : DamAddr3 , _reserved42 : [u8 ; 0x02] , dma_numl : DmaNuml , _reserved43 : [u8 ; 0x02] , dma_numh : DmaNumh , _reserved44 : [u8 ; 0x0a] , ep0_ctrl : Ep0Ctrl , _reserved45 : [u8 ; 0x02] , ep1_ctrl : Ep1Ctrl , _reserved46 : [u8 ; 0x02] , ep2_ctrl : Ep2Ctrl , _reserved47 : [u8 ; 0x02] , ep3_ctrl : Ep3Ctrl , _reserved48 : [u8 ; 0x02] , ep4_ctrl : Ep4Ctrl , _reserved49 : [u8 ; 0x0e] , ep0_fifo : Ep0Fifo , _reserved50 : [u8 ; 0x02] , ep1_fifo : Ep1Fifo , _reserved51 : [u8 ; 0x02] , ep2_fifo : Ep2Fifo , _reserved52 : [u8 ; 0x02] , ep3_fifo : Ep3Fifo , _reserved53 : [u8 ; 0x02] , ep4_fifo : Ep4Fifo , _reserved54 : [u8 ; 0x0e] , ep_mem : EpMem , _reserved55 : [u8 ; 0x02] , ep_dma : EpDma , _reserved56 : [u8 ; 0x02] , ep_halt : EpHalt , _reserved57 : [u8 ; 0x36] , power : Power , _reserved58 : [u8 ; 0x02] , usb_ahb_dma : UsbAhbDma , _reserved59 : [u8 ; 0x02] , usb_ahb_rst : UsbAhbRst , } impl RegisterBlock {
#[doc = "0x00 - USB_TOP"]
#[inline (always)] pub const fn top (& self) -> & Top { & self . top }
#[doc = "0x04 - interrupt state register"]
#[inline (always)] pub const fn int_state (& self) -> & IntState { & self . int_state }
#[doc = "0x08 - EP interrupt state register"]
#[inline (always)] pub const fn ep_int_state (& self) -> & EpIntState { & self . ep_int_state }
#[doc = "0x0c - EP0 interrupt state register"]
#[inline (always)] pub const fn ep0_int_state (& self) -> & Ep0IntState { & self . ep0_int_state }
#[doc = "0x10 - interrupt enable register"]
#[inline (always)] pub const fn int_en (& self) -> & IntEn { & self . int_en }
#[doc = "0x14 - EP interrupt enable register"]
#[inline (always)] pub const fn ep_int_en (& self) -> & EpIntEn { & self . ep_int_en }
#[doc = "0x18 - EP0 interrupt enable register"]
#[inline (always)] pub const fn ep0_int_en (& self) -> & Ep0IntEn { & self . ep0_int_en }
#[doc = "0x20 - EP1 interrupt state register"]
#[inline (always)] pub const fn ep1_int_state (& self) -> & Ep1IntState { & self . ep1_int_state }
#[doc = "0x24 - EP2 interrupt state register"]
#[inline (always)] pub const fn ep2_int_state (& self) -> & Ep2IntState { & self . ep2_int_state }
#[doc = "0x28 - EP3 interrupt state register"]
#[inline (always)] pub const fn ep3_int_state (& self) -> & Ep3IntState { & self . ep3_int_state }
#[doc = "0x2c - EP4 interrupt state register"]
#[inline (always)] pub const fn ep4_int_state (& self) -> & Ep4IntState { & self . ep4_int_state }
#[doc = "0x40 - EP1 interrupt enable register"]
#[inline (always)] pub const fn ep1_int_en (& self) -> & Ep1IntEn { & self . ep1_int_en }
#[doc = "0x44 - EP2 interrupt enable register"]
#[inline (always)] pub const fn ep2_int_en (& self) -> & Ep2IntEn { & self . ep2_int_en }
#[doc = "0x48 - EP3 interrupt enable register"]
#[inline (always)] pub const fn ep3_int_en (& self) -> & Ep3IntEn { & self . ep3_int_en }
#[doc = "0x4c - EP4 interrupt enable register"]
#[inline (always)] pub const fn ep4_int_en (& self) -> & Ep4IntEn { & self . ep4_int_en }
#[doc = "0x60 - USB address"]
#[inline (always)] pub const fn addr (& self) -> & Addr { & self . addr }
#[doc = "0x64 - EP Enable End"]
#[inline (always)] pub const fn ep_en (& self) -> & EpEn { & self . ep_en }
#[doc = "0x68 - DMA End-point direction register"]
#[inline (always)] pub const fn ep_dma_dir (& self) -> & EpDmaDir { & self . ep_dma_dir }
#[doc = "0x6c - Endpoint type register"]
#[inline (always)] pub const fn ep_type (& self) -> & EpType { & self . ep_type }
#[doc = "0x70 - End-point index register 1_2"]
#[inline (always)] pub const fn ep_index1_2 (& self) -> & EpIndex1_2 { & self . ep_index1_2 }
#[doc = "0x74 - End-point index register 3_4"]
#[inline (always)] pub const fn ep_index3_4 (& self) -> & EpIndex3_4 { & self . ep_index3_4 }
#[doc = "0x78 - TOG CTRL1_4 register"]
#[inline (always)] pub const fn tog_ctrl1_4 (& self) -> & TogCtrl1_4 { & self . tog_ctrl1_4 }
#[doc = "0x7c - TOG STAT1_4 register"]
#[inline (always)] pub const fn tog_stat1_4 (& self) -> & TogStat1_4 { & self . tog_stat1_4 }
#[doc = "0x80 - Setup Date 0 register"]
#[inline (always)] pub const fn setup0 (& self) -> & Setup0 { & self . setup0 }
#[doc = "0x84 - Setup Date 1 register"]
#[inline (always)] pub const fn setup1 (& self) -> & Setup1 { & self . setup1 }
#[doc = "0x88 - Setup Date 2 register"]
#[inline (always)] pub const fn setup2 (& self) -> & Setup2 { & self . setup2 }
#[doc = "0x8c - Setup Date 3 register"]
#[inline (always)] pub const fn setup3 (& self) -> & Setup3 { & self . setup3 }
#[doc = "0x90 - Setup Date 4 register"]
#[inline (always)] pub const fn setup4 (& self) -> & Setup4 { & self . setup4 }
#[doc = "0x94 - Setup Date 5 register"]
#[inline (always)] pub const fn setup5 (& self) -> & Setup5 { & self . setup5 }
#[doc = "0x98 - Setup Date 6 register"]
#[inline (always)] pub const fn setup6 (& self) -> & Setup6 { & self . setup6 }
#[doc = "0x9c - Setup Date 7 register"]
#[inline (always)] pub const fn setup7 (& self) -> & Setup7 { & self . setup7 }
#[doc = "0xa0 - PACKET SIZEL register"]
#[inline (always)] pub const fn packet_sizel (& self) -> & PacketSizel { & self . packet_sizel }
#[doc = "0xa4 - PACKET SIZEH register"]
#[inline (always)] pub const fn packet_sizeh (& self) -> & PacketSizeh { & self . packet_sizeh }
#[doc = "0x100 - EP0 AVAIL register"]
#[inline (always)] pub const fn ep0_avail (& self) -> & Ep0Avail { & self . ep0_avail }
#[doc = "0x104 - EP1 AVAIL register"]
#[inline (always)] pub const fn ep1_avail (& self) -> & Ep1Avail { & self . ep1_avail }
#[doc = "0x108 - EP2 AVAIL register"]
#[inline (always)] pub const fn ep2_avail (& self) -> & Ep2Avail { & self . ep2_avail }
#[doc = "0x10c - EP3 AVAIL register"]
#[inline (always)] pub const fn ep3_avail (& self) -> & Ep3Avail { & self . ep3_avail }
#[doc = "0x110 - EP4 AVAIL register"]
#[inline (always)] pub const fn ep4_avail (& self) -> & Ep4Avail { & self . ep4_avail }
#[doc = "0x120 - DMA1 ADDR0 register"]
#[inline (always)] pub const fn dam_addr0 (& self) -> & DamAddr0 { & self . dam_addr0 }
#[doc = "0x124 - DMA1 ADDR1 register"]
#[inline (always)] pub const fn dam_addr1 (& self) -> & DamAddr1 { & self . dam_addr1 }
#[doc = "0x128 - DMA1 ADDR2 register"]
#[inline (always)] pub const fn dam_addr2 (& self) -> & DamAddr2 { & self . dam_addr2 }
#[doc = "0x12c - DMA1 ADDR3 register"]
#[inline (always)] pub const fn dam_addr3 (& self) -> & DamAddr3 { & self . dam_addr3 }
#[doc = "0x130 - DMA NUML register"]
#[inline (always)] pub const fn dma_numl (& self) -> & DmaNuml { & self . dma_numl }
#[doc = "0x134 - DMA NUMH register"]
#[inline (always)] pub const fn dma_numh (& self) -> & DmaNumh { & self . dma_numh }
#[doc = "0x140 - EP0 CTRL register"]
#[inline (always)] pub const fn ep0_ctrl (& self) -> & Ep0Ctrl { & self . ep0_ctrl }
#[doc = "0x144 - EP1 CTRL register"]
#[inline (always)] pub const fn ep1_ctrl (& self) -> & Ep1Ctrl { & self . ep1_ctrl }
#[doc = "0x148 - EP2 CTRL register"]
#[inline (always)] pub const fn ep2_ctrl (& self) -> & Ep2Ctrl { & self . ep2_ctrl }
#[doc = "0x14c - EP3 CTRL register"]
#[inline (always)] pub const fn ep3_ctrl (& self) -> & Ep3Ctrl { & self . ep3_ctrl }
#[doc = "0x150 - EP4 CTRL register"]
#[inline (always)] pub const fn ep4_ctrl (& self) -> & Ep4Ctrl { & self . ep4_ctrl }
#[doc = "0x160 - EP0 FIFO register"]
#[inline (always)] pub const fn ep0_fifo (& self) -> & Ep0Fifo { & self . ep0_fifo }
#[doc = "0x164 - EP1 FIFO register"]
#[inline (always)] pub const fn ep1_fifo (& self) -> & Ep1Fifo { & self . ep1_fifo }
#[doc = "0x168 - EP2 FIFO register"]
#[inline (always)] pub const fn ep2_fifo (& self) -> & Ep2Fifo { & self . ep2_fifo }
#[doc = "0x16c - EP3 FIFO register"]
#[inline (always)] pub const fn ep3_fifo (& self) -> & Ep3Fifo { & self . ep3_fifo }
#[doc = "0x170 - EP4 FIFO register"]
#[inline (always)] pub const fn ep4_fifo (& self) -> & Ep4Fifo { & self . ep4_fifo }
#[doc = "0x180 - EP MEM register"]
#[inline (always)] pub const fn ep_mem (& self) -> & EpMem { & self . ep_mem }
#[doc = "0x184 - EP DMA register"]
#[inline (always)] pub const fn ep_dma (& self) -> & EpDma { & self . ep_dma }
#[doc = "0x188 - EP HALT register"]
#[inline (always)] pub const fn ep_halt (& self) -> & EpHalt { & self . ep_halt }
#[doc = "0x1c0 - Power control register"]
#[inline (always)] pub const fn power (& self) -> & Power { & self . power }
#[doc = "0x1c4 - USB AHB DMA register"]
#[inline (always)] pub const fn usb_ahb_dma (& self) -> & UsbAhbDma { & self . usb_ahb_dma }
#[doc = "0x1c8 - USB AHB RST register"]
#[inline (always)] pub const fn usb_ahb_rst (& self) -> & UsbAhbRst { & self . usb_ahb_rst } }
#[doc = "TOP (rw) register accessor: USB_TOP\n\nYou can [`read`](crate::Reg::read) this register and get [`top::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`top::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@top`] module"]
#[doc (alias = "TOP")] pub type Top = crate :: Reg < top :: TopSpec > ;
#[doc = "USB_TOP"] pub mod top {
#[doc = "Register `TOP` reader"] pub type R = crate :: R < TopSpec > ;
#[doc = "Register `TOP` writer"] pub type W = crate :: W < TopSpec > ;
#[doc = "Field `SPEED` reader - SPEED"] pub type SpeedR = crate :: BitReader ;
#[doc = "Field `SPEED` writer - SPEED"] pub type SpeedW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `CONNECT` reader - USB connection"] pub type ConnectR = crate :: BitReader ;
#[doc = "Field `CONNECT` writer - USB connection"] pub type ConnectW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RESET` reader - Reset EP and FIFO in USB controller"] pub type ResetR = crate :: BitReader ;
#[doc = "Field `RESET` writer - Reset EP and FIFO in USB controller"] pub type ResetW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SUSPEND` reader - USB suspend state"] pub type SuspendR = crate :: BitReader ;
#[doc = "Field `SUSPEND` writer - USB suspend state"] pub type SuspendW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DP_DMSTATE` reader - Current USB DP/DM line state"] pub type DpDmstateR = crate :: FieldReader ;
#[doc = "Field `DP_DMSTATE` writer - Current USB DP/DM line state"] pub type DpDmstateW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `ACTIVE` reader - USB bus is active"] pub type ActiveR = crate :: BitReader ;
#[doc = "Field `ACTIVE` writer - USB bus is active"] pub type ActiveW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - SPEED"]
#[inline (always)] pub fn speed (& self) -> SpeedR { SpeedR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - USB connection"]
#[inline (always)] pub fn connect (& self) -> ConnectR { ConnectR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 3 - Reset EP and FIFO in USB controller"]
#[inline (always)] pub fn reset (& self) -> ResetR { ResetR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - USB suspend state"]
#[inline (always)] pub fn suspend (& self) -> SuspendR { SuspendR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bits 5:6 - Current USB DP/DM line state"]
#[inline (always)] pub fn dp_dmstate (& self) -> DpDmstateR { DpDmstateR :: new (((self . bits >> 5) & 3) as u8) }
#[doc = "Bit 7 - USB bus is active"]
#[inline (always)] pub fn active (& self) -> ActiveR { ActiveR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - SPEED"]
#[inline (always)] pub fn speed (& mut self) -> SpeedW < '_ , TopSpec > { SpeedW :: new (self , 0) }
#[doc = "Bit 1 - USB connection"]
#[inline (always)] pub fn connect (& mut self) -> ConnectW < '_ , TopSpec > { ConnectW :: new (self , 1) }
#[doc = "Bit 3 - Reset EP and FIFO in USB controller"]
#[inline (always)] pub fn reset (& mut self) -> ResetW < '_ , TopSpec > { ResetW :: new (self , 3) }
#[doc = "Bit 4 - USB suspend state"]
#[inline (always)] pub fn suspend (& mut self) -> SuspendW < '_ , TopSpec > { SuspendW :: new (self , 4) }
#[doc = "Bits 5:6 - Current USB DP/DM line state"]
#[inline (always)] pub fn dp_dmstate (& mut self) -> DpDmstateW < '_ , TopSpec > { DpDmstateW :: new (self , 5) }
#[doc = "Bit 7 - USB bus is active"]
#[inline (always)] pub fn active (& mut self) -> ActiveW < '_ , TopSpec > { ActiveW :: new (self , 7) } }
#[doc = "USB_TOP\n\nYou can [`read`](crate::Reg::read) this register and get [`top::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`top::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TopSpec ; impl crate :: RegisterSpec for TopSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`top::R`](R) reader structure"] impl crate :: Readable for TopSpec { }
#[doc = "`write(|w| ..)` method takes [`top::W`](W) writer structure"] impl crate :: Writable for TopSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TOP to value 0x02"] impl crate :: Resettable for TopSpec { const RESET_VALUE : u16 = 0x02 ; } }
#[doc = "INT_STATE (rw) register accessor: interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`int_state::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`int_state::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_state`] module"]
#[doc (alias = "INT_STATE")] pub type IntState = crate :: Reg < int_state :: IntStateSpec > ;
#[doc = "interrupt state register"] pub mod int_state {
#[doc = "Register `INT_STATE` reader"] pub type R = crate :: R < IntStateSpec > ;
#[doc = "Register `INT_STATE` writer"] pub type W = crate :: W < IntStateSpec > ;
#[doc = "Field `RSTF` reader - BUS reset received"] pub type RstfR = crate :: BitReader ;
#[doc = "Field `RSTF` writer - BUS reset received"] pub type RstfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SUSPENDF` reader - BUS suspend received"] pub type SuspendfR = crate :: BitReader ;
#[doc = "Field `SUSPENDF` writer - BUS suspend received"] pub type SuspendfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RESUMF` reader - BUS resume received"] pub type ResumfR = crate :: BitReader ;
#[doc = "Field `RESUMF` writer - BUS resume received"] pub type ResumfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SOFF` reader - BUS received"] pub type SoffR = crate :: BitReader ;
#[doc = "Field `SOFF` writer - BUS received"] pub type SoffW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EPINTF` reader - EP interrupt received"] pub type EpintfR = crate :: BitReader ;
#[doc = "Field `EPINTF` writer - EP interrupt received"] pub type EpintfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - BUS reset received"]
#[inline (always)] pub fn rstf (& self) -> RstfR { RstfR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - BUS suspend received"]
#[inline (always)] pub fn suspendf (& self) -> SuspendfR { SuspendfR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - BUS resume received"]
#[inline (always)] pub fn resumf (& self) -> ResumfR { ResumfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - BUS received"]
#[inline (always)] pub fn soff (& self) -> SoffR { SoffR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - EP interrupt received"]
#[inline (always)] pub fn epintf (& self) -> EpintfR { EpintfR :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - BUS reset received"]
#[inline (always)] pub fn rstf (& mut self) -> RstfW < '_ , IntStateSpec > { RstfW :: new (self , 0) }
#[doc = "Bit 1 - BUS suspend received"]
#[inline (always)] pub fn suspendf (& mut self) -> SuspendfW < '_ , IntStateSpec > { SuspendfW :: new (self , 1) }
#[doc = "Bit 2 - BUS resume received"]
#[inline (always)] pub fn resumf (& mut self) -> ResumfW < '_ , IntStateSpec > { ResumfW :: new (self , 2) }
#[doc = "Bit 3 - BUS received"]
#[inline (always)] pub fn soff (& mut self) -> SoffW < '_ , IntStateSpec > { SoffW :: new (self , 3) }
#[doc = "Bit 4 - EP interrupt received"]
#[inline (always)] pub fn epintf (& mut self) -> EpintfW < '_ , IntStateSpec > { EpintfW :: new (self , 4) } }
#[doc = "interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`int_state::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`int_state::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IntStateSpec ; impl crate :: RegisterSpec for IntStateSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`int_state::R`](R) reader structure"] impl crate :: Readable for IntStateSpec { }
#[doc = "`write(|w| ..)` method takes [`int_state::W`](W) writer structure"] impl crate :: Writable for IntStateSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets INT_STATE to value 0"] impl crate :: Resettable for IntStateSpec { } }
#[doc = "EP_INT_STATE (r) register accessor: EP interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_int_state::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_int_state`] module"]
#[doc (alias = "EP_INT_STATE")] pub type EpIntState = crate :: Reg < ep_int_state :: EpIntStateSpec > ;
#[doc = "EP interrupt state register"] pub mod ep_int_state {
#[doc = "Register `EP_INT_STATE` reader"] pub type R = crate :: R < EpIntStateSpec > ;
#[doc = "Field `EP0F` reader - EP0 interrupt received"] pub type Ep0fR = crate :: BitReader ;
#[doc = "Field `EP1F` reader - EP1 interrupt received"] pub type Ep1fR = crate :: BitReader ;
#[doc = "Field `EP2F` reader - EP2 interrupt received"] pub type Ep2fR = crate :: BitReader ;
#[doc = "Field `EP3F` reader - EP3 interrupt received"] pub type Ep3fR = crate :: BitReader ;
#[doc = "Field `EP4F` reader - EP4 interrupt received"] pub type Ep4fR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - EP0 interrupt received"]
#[inline (always)] pub fn ep0f (& self) -> Ep0fR { Ep0fR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - EP1 interrupt received"]
#[inline (always)] pub fn ep1f (& self) -> Ep1fR { Ep1fR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - EP2 interrupt received"]
#[inline (always)] pub fn ep2f (& self) -> Ep2fR { Ep2fR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - EP3 interrupt received"]
#[inline (always)] pub fn ep3f (& self) -> Ep3fR { Ep3fR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - EP4 interrupt received"]
#[inline (always)] pub fn ep4f (& self) -> Ep4fR { Ep4fR :: new (((self . bits >> 4) & 1) != 0) } }
#[doc = "EP interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_int_state::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpIntStateSpec ; impl crate :: RegisterSpec for EpIntStateSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_int_state::R`](R) reader structure"] impl crate :: Readable for EpIntStateSpec { }
#[doc = "`reset()` method sets EP_INT_STATE to value 0"] impl crate :: Resettable for EpIntStateSpec { } }
#[doc = "EP0_INT_STATE (rw) register accessor: EP0 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_int_state::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0_int_state::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep0_int_state`] module"]
#[doc (alias = "EP0_INT_STATE")] pub type Ep0IntState = crate :: Reg < ep0_int_state :: Ep0IntStateSpec > ;
#[doc = "EP0 interrupt state register"] pub mod ep0_int_state {
#[doc = "Register `EP0_INT_STATE` reader"] pub type R = crate :: R < Ep0IntStateSpec > ;
#[doc = "Register `EP0_INT_STATE` writer"] pub type W = crate :: W < Ep0IntStateSpec > ;
#[doc = "Field `SETUP` reader - SETUP packet received"] pub type SetupR = crate :: BitReader ;
#[doc = "Field `SETUP` writer - SETUP packet received"] pub type SetupW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `END` reader - Status stage finished"] pub type EndR = crate :: BitReader ;
#[doc = "Field `END` writer - Status stage finished"] pub type EndW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACKF` reader - IN-NACK received"] pub type InNackfR = crate :: BitReader ;
#[doc = "Field `IN_NACKF` writer - IN-NACK received"] pub type InNackfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKF` reader - IN-ACK received"] pub type InAckfR = crate :: BitReader ;
#[doc = "Field `IN_ACKF` writer - IN-ACK received"] pub type InAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLF` reader - IN-STALL received"] pub type InStallfR = crate :: BitReader ;
#[doc = "Field `IN_STALLF` writer - IN-STALL received"] pub type InStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKF` reader - OUT-NACK received"] pub type OutNackfR = crate :: BitReader ;
#[doc = "Field `OUT_NACKF` writer - OUT-NACK received"] pub type OutNackfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKF` reader - OUT-ACK received"] pub type OutAckfR = crate :: BitReader ;
#[doc = "Field `OUT_ACKF` writer - OUT-ACK received"] pub type OutAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLF` reader - OUT-STALL received"] pub type OutStallfR = crate :: BitReader ;
#[doc = "Field `OUT_STALLF` writer - OUT-STALL received"] pub type OutStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - SETUP packet received"]
#[inline (always)] pub fn setup (& self) -> SetupR { SetupR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& self) -> EndR { EndR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nackf (& self) -> InNackfR { InNackfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& self) -> InAckfR { InAckfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& self) -> InStallfR { InStallfR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& self) -> OutNackfR { OutNackfR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& self) -> OutAckfR { OutAckfR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& self) -> OutStallfR { OutStallfR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - SETUP packet received"]
#[inline (always)] pub fn setup (& mut self) -> SetupW < '_ , Ep0IntStateSpec > { SetupW :: new (self , 0) }
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& mut self) -> EndW < '_ , Ep0IntStateSpec > { EndW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nackf (& mut self) -> InNackfW < '_ , Ep0IntStateSpec > { InNackfW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& mut self) -> InAckfW < '_ , Ep0IntStateSpec > { InAckfW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& mut self) -> InStallfW < '_ , Ep0IntStateSpec > { InStallfW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& mut self) -> OutNackfW < '_ , Ep0IntStateSpec > { OutNackfW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& mut self) -> OutAckfW < '_ , Ep0IntStateSpec > { OutAckfW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& mut self) -> OutStallfW < '_ , Ep0IntStateSpec > { OutStallfW :: new (self , 7) } }
#[doc = "EP0 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_int_state::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0_int_state::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep0IntStateSpec ; impl crate :: RegisterSpec for Ep0IntStateSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep0_int_state::R`](R) reader structure"] impl crate :: Readable for Ep0IntStateSpec { }
#[doc = "`write(|w| ..)` method takes [`ep0_int_state::W`](W) writer structure"] impl crate :: Writable for Ep0IntStateSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP0_INT_STATE to value 0"] impl crate :: Resettable for Ep0IntStateSpec { } }
#[doc = "INT_EN (rw) register accessor: interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`int_en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`int_en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int_en`] module"]
#[doc (alias = "INT_EN")] pub type IntEn = crate :: Reg < int_en :: IntEnSpec > ;
#[doc = "interrupt enable register"] pub mod int_en {
#[doc = "Register `INT_EN` reader"] pub type R = crate :: R < IntEnSpec > ;
#[doc = "Register `INT_EN` writer"] pub type W = crate :: W < IntEnSpec > ;
#[doc = "Field `RSTIE` reader - BUS reset interrupt enable"] pub type RstieR = crate :: BitReader ;
#[doc = "Field `RSTIE` writer - BUS reset interrupt enable"] pub type RstieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SUSPENDIE` reader - BUS suspend interrupt enable"] pub type SuspendieR = crate :: BitReader ;
#[doc = "Field `SUSPENDIE` writer - BUS suspend interrupt enable"] pub type SuspendieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `RESUMIE` reader - BUS resume interrupt enable"] pub type ResumieR = crate :: BitReader ;
#[doc = "Field `RESUMIE` writer - BUS resume interrupt enable"] pub type ResumieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SOFIE` reader - SOF interrupt enable"] pub type SofieR = crate :: BitReader ;
#[doc = "Field `SOFIE` writer - SOF interrupt enable"] pub type SofieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EPIE` reader - EP interrupt enable"] pub type EpieR = crate :: BitReader ;
#[doc = "Field `EPIE` writer - EP interrupt enable"] pub type EpieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `INTMASK` reader - interrupt mask"] pub type IntmaskR = crate :: BitReader ;
#[doc = "Field `INTMASK` writer - interrupt mask"] pub type IntmaskW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - BUS reset interrupt enable"]
#[inline (always)] pub fn rstie (& self) -> RstieR { RstieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - BUS suspend interrupt enable"]
#[inline (always)] pub fn suspendie (& self) -> SuspendieR { SuspendieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - BUS resume interrupt enable"]
#[inline (always)] pub fn resumie (& self) -> ResumieR { ResumieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - SOF interrupt enable"]
#[inline (always)] pub fn sofie (& self) -> SofieR { SofieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - EP interrupt enable"]
#[inline (always)] pub fn epie (& self) -> EpieR { EpieR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 7 - interrupt mask"]
#[inline (always)] pub fn intmask (& self) -> IntmaskR { IntmaskR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - BUS reset interrupt enable"]
#[inline (always)] pub fn rstie (& mut self) -> RstieW < '_ , IntEnSpec > { RstieW :: new (self , 0) }
#[doc = "Bit 1 - BUS suspend interrupt enable"]
#[inline (always)] pub fn suspendie (& mut self) -> SuspendieW < '_ , IntEnSpec > { SuspendieW :: new (self , 1) }
#[doc = "Bit 2 - BUS resume interrupt enable"]
#[inline (always)] pub fn resumie (& mut self) -> ResumieW < '_ , IntEnSpec > { ResumieW :: new (self , 2) }
#[doc = "Bit 3 - SOF interrupt enable"]
#[inline (always)] pub fn sofie (& mut self) -> SofieW < '_ , IntEnSpec > { SofieW :: new (self , 3) }
#[doc = "Bit 4 - EP interrupt enable"]
#[inline (always)] pub fn epie (& mut self) -> EpieW < '_ , IntEnSpec > { EpieW :: new (self , 4) }
#[doc = "Bit 7 - interrupt mask"]
#[inline (always)] pub fn intmask (& mut self) -> IntmaskW < '_ , IntEnSpec > { IntmaskW :: new (self , 7) } }
#[doc = "interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`int_en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`int_en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IntEnSpec ; impl crate :: RegisterSpec for IntEnSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`int_en::R`](R) reader structure"] impl crate :: Readable for IntEnSpec { }
#[doc = "`write(|w| ..)` method takes [`int_en::W`](W) writer structure"] impl crate :: Writable for IntEnSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets INT_EN to value 0"] impl crate :: Resettable for IntEnSpec { } }
#[doc = "EP_INT_EN (rw) register accessor: EP interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_int_en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_int_en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_int_en`] module"]
#[doc (alias = "EP_INT_EN")] pub type EpIntEn = crate :: Reg < ep_int_en :: EpIntEnSpec > ;
#[doc = "EP interrupt enable register"] pub mod ep_int_en {
#[doc = "Register `EP_INT_EN` reader"] pub type R = crate :: R < EpIntEnSpec > ;
#[doc = "Register `EP_INT_EN` writer"] pub type W = crate :: W < EpIntEnSpec > ;
#[doc = "Field `EP0IE` reader - EP0 interrupt enable"] pub type Ep0ieR = crate :: BitReader ;
#[doc = "Field `EP0IE` writer - EP0 interrupt enable"] pub type Ep0ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP1IE` reader - EP1 interrupt enable"] pub type Ep1ieR = crate :: BitReader ;
#[doc = "Field `EP1IE` writer - EP1 interrupt enable"] pub type Ep1ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP2IE` reader - EP2 interrupt enable"] pub type Ep2ieR = crate :: BitReader ;
#[doc = "Field `EP2IE` writer - EP2 interrupt enable"] pub type Ep2ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP3IE` reader - EP3 interrupt enable"] pub type Ep3ieR = crate :: BitReader ;
#[doc = "Field `EP3IE` writer - EP3 interrupt enable"] pub type Ep3ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP4IE` reader - EP4 interrupt enable"] pub type Ep4ieR = crate :: BitReader ;
#[doc = "Field `EP4IE` writer - EP4 interrupt enable"] pub type Ep4ieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - EP0 interrupt enable"]
#[inline (always)] pub fn ep0ie (& self) -> Ep0ieR { Ep0ieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - EP1 interrupt enable"]
#[inline (always)] pub fn ep1ie (& self) -> Ep1ieR { Ep1ieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - EP2 interrupt enable"]
#[inline (always)] pub fn ep2ie (& self) -> Ep2ieR { Ep2ieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - EP3 interrupt enable"]
#[inline (always)] pub fn ep3ie (& self) -> Ep3ieR { Ep3ieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - EP4 interrupt enable"]
#[inline (always)] pub fn ep4ie (& self) -> Ep4ieR { Ep4ieR :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - EP0 interrupt enable"]
#[inline (always)] pub fn ep0ie (& mut self) -> Ep0ieW < '_ , EpIntEnSpec > { Ep0ieW :: new (self , 0) }
#[doc = "Bit 1 - EP1 interrupt enable"]
#[inline (always)] pub fn ep1ie (& mut self) -> Ep1ieW < '_ , EpIntEnSpec > { Ep1ieW :: new (self , 1) }
#[doc = "Bit 2 - EP2 interrupt enable"]
#[inline (always)] pub fn ep2ie (& mut self) -> Ep2ieW < '_ , EpIntEnSpec > { Ep2ieW :: new (self , 2) }
#[doc = "Bit 3 - EP3 interrupt enable"]
#[inline (always)] pub fn ep3ie (& mut self) -> Ep3ieW < '_ , EpIntEnSpec > { Ep3ieW :: new (self , 3) }
#[doc = "Bit 4 - EP4 interrupt enable"]
#[inline (always)] pub fn ep4ie (& mut self) -> Ep4ieW < '_ , EpIntEnSpec > { Ep4ieW :: new (self , 4) } }
#[doc = "EP interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_int_en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_int_en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpIntEnSpec ; impl crate :: RegisterSpec for EpIntEnSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_int_en::R`](R) reader structure"] impl crate :: Readable for EpIntEnSpec { }
#[doc = "`write(|w| ..)` method takes [`ep_int_en::W`](W) writer structure"] impl crate :: Writable for EpIntEnSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP_INT_EN to value 0"] impl crate :: Resettable for EpIntEnSpec { } }
#[doc = "EP0_INT_EN (rw) register accessor: EP0 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_int_en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0_int_en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep0_int_en`] module"]
#[doc (alias = "EP0_INT_EN")] pub type Ep0IntEn = crate :: Reg < ep0_int_en :: Ep0IntEnSpec > ;
#[doc = "EP0 interrupt enable register"] pub mod ep0_int_en {
#[doc = "Register `EP0_INT_EN` reader"] pub type R = crate :: R < Ep0IntEnSpec > ;
#[doc = "Register `EP0_INT_EN` writer"] pub type W = crate :: W < Ep0IntEnSpec > ;
#[doc = "Field `SETUPIE` reader - SETUP packet interrupt enable"] pub type SetupieR = crate :: BitReader ;
#[doc = "Field `SETUPIE` writer - SETUP packet interrupt enable"] pub type SetupieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `ENDIE` reader - Status stage finished interrupt enable"] pub type EndieR = crate :: BitReader ;
#[doc = "Field `ENDIE` writer - Status stage finished interrupt enable"] pub type EndieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACKIE` reader - IN-NACK interrupt enable"] pub type InNackieR = crate :: BitReader ;
#[doc = "Field `IN_NACKIE` writer - IN-NACK interrupt enable"] pub type InNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKIE` reader - IN-ACK interrupt enable"] pub type InAckieR = crate :: BitReader ;
#[doc = "Field `IN_ACKIE` writer - IN-ACK interrupt enable"] pub type InAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLIE` reader - IN-STALL interrupt enable"] pub type InStallieR = crate :: BitReader ;
#[doc = "Field `IN_STALLIE` writer - IN-STALL interrupt enable"] pub type InStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKIE` reader - OUT-NACK interrupt enable"] pub type OutNackieR = crate :: BitReader ;
#[doc = "Field `OUT_NACKIE` writer - OUT-NACK interrupt enable"] pub type OutNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKIE` reader - OUT-ACK interrupt enable"] pub type OutAckieR = crate :: BitReader ;
#[doc = "Field `OUT_ACKIE` writer - OUT-ACK interrupt enable"] pub type OutAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLIE` reader - OUT-STALL interrupt enable"] pub type OutStallieR = crate :: BitReader ;
#[doc = "Field `OUT_STALLIE` writer - OUT-STALL interrupt enable"] pub type OutStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - SETUP packet interrupt enable"]
#[inline (always)] pub fn setupie (& self) -> SetupieR { SetupieR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& self) -> EndieR { EndieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& self) -> InNackieR { InNackieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& self) -> InAckieR { InAckieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& self) -> InStallieR { InStallieR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& self) -> OutNackieR { OutNackieR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& self) -> OutAckieR { OutAckieR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& self) -> OutStallieR { OutStallieR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - SETUP packet interrupt enable"]
#[inline (always)] pub fn setupie (& mut self) -> SetupieW < '_ , Ep0IntEnSpec > { SetupieW :: new (self , 0) }
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& mut self) -> EndieW < '_ , Ep0IntEnSpec > { EndieW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& mut self) -> InNackieW < '_ , Ep0IntEnSpec > { InNackieW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& mut self) -> InAckieW < '_ , Ep0IntEnSpec > { InAckieW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& mut self) -> InStallieW < '_ , Ep0IntEnSpec > { InStallieW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& mut self) -> OutNackieW < '_ , Ep0IntEnSpec > { OutNackieW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& mut self) -> OutAckieW < '_ , Ep0IntEnSpec > { OutAckieW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& mut self) -> OutStallieW < '_ , Ep0IntEnSpec > { OutStallieW :: new (self , 7) } }
#[doc = "EP0 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_int_en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0_int_en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep0IntEnSpec ; impl crate :: RegisterSpec for Ep0IntEnSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep0_int_en::R`](R) reader structure"] impl crate :: Readable for Ep0IntEnSpec { }
#[doc = "`write(|w| ..)` method takes [`ep0_int_en::W`](W) writer structure"] impl crate :: Writable for Ep0IntEnSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP0_INT_EN to value 0"] impl crate :: Resettable for Ep0IntEnSpec { } }
#[doc = "EP1_INT_STATE (rw) register accessor: EP1 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_int_state::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1_int_state::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep1_int_state`] module"]
#[doc (alias = "EP1_INT_STATE")] pub type Ep1IntState = crate :: Reg < ep1_int_state :: Ep1IntStateSpec > ;
#[doc = "EP1 interrupt state register"] pub mod ep1_int_state {
#[doc = "Register `EP1_INT_STATE` reader"] pub type R = crate :: R < Ep1IntStateSpec > ;
#[doc = "Register `EP1_INT_STATE` writer"] pub type W = crate :: W < Ep1IntStateSpec > ;
#[doc = "Field `END` reader - Status stage finished"] pub type EndR = crate :: BitReader ;
#[doc = "Field `END` writer - Status stage finished"] pub type EndW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACF` reader - IN-NACK received"] pub type InNacfR = crate :: BitReader ;
#[doc = "Field `IN_NACF` writer - IN-NACK received"] pub type InNacfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKF` reader - IN-ACK received"] pub type InAckfR = crate :: BitReader ;
#[doc = "Field `IN_ACKF` writer - IN-ACK received"] pub type InAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLF` reader - IN-STALL received"] pub type InStallfR = crate :: BitReader ;
#[doc = "Field `IN_STALLF` writer - IN-STALL received"] pub type InStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKF` reader - OUT-NACK received"] pub type OutNackfR = crate :: BitReader ;
#[doc = "Field `OUT_NACKF` writer - OUT-NACK received"] pub type OutNackfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKF` reader - OUT-ACK received"] pub type OutAckfR = crate :: BitReader ;
#[doc = "Field `OUT_ACKF` writer - OUT-ACK received"] pub type OutAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLF` reader - OUT-STALL received"] pub type OutStallfR = crate :: BitReader ;
#[doc = "Field `OUT_STALLF` writer - OUT-STALL received"] pub type OutStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& self) -> EndR { EndR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nacf (& self) -> InNacfR { InNacfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& self) -> InAckfR { InAckfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& self) -> InStallfR { InStallfR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& self) -> OutNackfR { OutNackfR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& self) -> OutAckfR { OutAckfR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& self) -> OutStallfR { OutStallfR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& mut self) -> EndW < '_ , Ep1IntStateSpec > { EndW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nacf (& mut self) -> InNacfW < '_ , Ep1IntStateSpec > { InNacfW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& mut self) -> InAckfW < '_ , Ep1IntStateSpec > { InAckfW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& mut self) -> InStallfW < '_ , Ep1IntStateSpec > { InStallfW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& mut self) -> OutNackfW < '_ , Ep1IntStateSpec > { OutNackfW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& mut self) -> OutAckfW < '_ , Ep1IntStateSpec > { OutAckfW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& mut self) -> OutStallfW < '_ , Ep1IntStateSpec > { OutStallfW :: new (self , 7) } }
#[doc = "EP1 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_int_state::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1_int_state::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep1IntStateSpec ; impl crate :: RegisterSpec for Ep1IntStateSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep1_int_state::R`](R) reader structure"] impl crate :: Readable for Ep1IntStateSpec { }
#[doc = "`write(|w| ..)` method takes [`ep1_int_state::W`](W) writer structure"] impl crate :: Writable for Ep1IntStateSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP1_INT_STATE to value 0"] impl crate :: Resettable for Ep1IntStateSpec { } }
#[doc = "EP2_INT_STATE (rw) register accessor: EP2 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_int_state::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2_int_state::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep2_int_state`] module"]
#[doc (alias = "EP2_INT_STATE")] pub type Ep2IntState = crate :: Reg < ep2_int_state :: Ep2IntStateSpec > ;
#[doc = "EP2 interrupt state register"] pub mod ep2_int_state {
#[doc = "Register `EP2_INT_STATE` reader"] pub type R = crate :: R < Ep2IntStateSpec > ;
#[doc = "Register `EP2_INT_STATE` writer"] pub type W = crate :: W < Ep2IntStateSpec > ;
#[doc = "Field `END` reader - Status stage finished"] pub type EndR = crate :: BitReader ;
#[doc = "Field `END` writer - Status stage finished"] pub type EndW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACF` reader - IN-NACK received"] pub type InNacfR = crate :: BitReader ;
#[doc = "Field `IN_NACF` writer - IN-NACK received"] pub type InNacfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKF` reader - IN-ACK received"] pub type InAckfR = crate :: BitReader ;
#[doc = "Field `IN_ACKF` writer - IN-ACK received"] pub type InAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLF` reader - IN-STALL received"] pub type InStallfR = crate :: BitReader ;
#[doc = "Field `IN_STALLF` writer - IN-STALL received"] pub type InStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKF` reader - OUT-NACK received"] pub type OutNackfR = crate :: BitReader ;
#[doc = "Field `OUT_NACKF` writer - OUT-NACK received"] pub type OutNackfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKF` reader - OUT-ACK received"] pub type OutAckfR = crate :: BitReader ;
#[doc = "Field `OUT_ACKF` writer - OUT-ACK received"] pub type OutAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLF` reader - OUT-STALL received"] pub type OutStallfR = crate :: BitReader ;
#[doc = "Field `OUT_STALLF` writer - OUT-STALL received"] pub type OutStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& self) -> EndR { EndR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nacf (& self) -> InNacfR { InNacfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& self) -> InAckfR { InAckfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& self) -> InStallfR { InStallfR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& self) -> OutNackfR { OutNackfR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& self) -> OutAckfR { OutAckfR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& self) -> OutStallfR { OutStallfR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& mut self) -> EndW < '_ , Ep2IntStateSpec > { EndW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nacf (& mut self) -> InNacfW < '_ , Ep2IntStateSpec > { InNacfW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& mut self) -> InAckfW < '_ , Ep2IntStateSpec > { InAckfW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& mut self) -> InStallfW < '_ , Ep2IntStateSpec > { InStallfW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& mut self) -> OutNackfW < '_ , Ep2IntStateSpec > { OutNackfW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& mut self) -> OutAckfW < '_ , Ep2IntStateSpec > { OutAckfW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& mut self) -> OutStallfW < '_ , Ep2IntStateSpec > { OutStallfW :: new (self , 7) } }
#[doc = "EP2 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_int_state::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2_int_state::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep2IntStateSpec ; impl crate :: RegisterSpec for Ep2IntStateSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep2_int_state::R`](R) reader structure"] impl crate :: Readable for Ep2IntStateSpec { }
#[doc = "`write(|w| ..)` method takes [`ep2_int_state::W`](W) writer structure"] impl crate :: Writable for Ep2IntStateSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP2_INT_STATE to value 0"] impl crate :: Resettable for Ep2IntStateSpec { } }
#[doc = "EP3_INT_STATE (rw) register accessor: EP3 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_int_state::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3_int_state::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep3_int_state`] module"]
#[doc (alias = "EP3_INT_STATE")] pub type Ep3IntState = crate :: Reg < ep3_int_state :: Ep3IntStateSpec > ;
#[doc = "EP3 interrupt state register"] pub mod ep3_int_state {
#[doc = "Register `EP3_INT_STATE` reader"] pub type R = crate :: R < Ep3IntStateSpec > ;
#[doc = "Register `EP3_INT_STATE` writer"] pub type W = crate :: W < Ep3IntStateSpec > ;
#[doc = "Field `END` reader - Status stage finished"] pub type EndR = crate :: BitReader ;
#[doc = "Field `END` writer - Status stage finished"] pub type EndW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACF` reader - IN-NACK received"] pub type InNacfR = crate :: BitReader ;
#[doc = "Field `IN_NACF` writer - IN-NACK received"] pub type InNacfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKF` reader - IN-ACK received"] pub type InAckfR = crate :: BitReader ;
#[doc = "Field `IN_ACKF` writer - IN-ACK received"] pub type InAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLF` reader - IN-STALL received"] pub type InStallfR = crate :: BitReader ;
#[doc = "Field `IN_STALLF` writer - IN-STALL received"] pub type InStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKF` reader - OUT-NACK received"] pub type OutNackfR = crate :: BitReader ;
#[doc = "Field `OUT_NACKF` writer - OUT-NACK received"] pub type OutNackfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKF` reader - OUT-ACK received"] pub type OutAckfR = crate :: BitReader ;
#[doc = "Field `OUT_ACKF` writer - OUT-ACK received"] pub type OutAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLF` reader - OUT-STALL received"] pub type OutStallfR = crate :: BitReader ;
#[doc = "Field `OUT_STALLF` writer - OUT-STALL received"] pub type OutStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& self) -> EndR { EndR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nacf (& self) -> InNacfR { InNacfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& self) -> InAckfR { InAckfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& self) -> InStallfR { InStallfR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& self) -> OutNackfR { OutNackfR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& self) -> OutAckfR { OutAckfR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& self) -> OutStallfR { OutStallfR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& mut self) -> EndW < '_ , Ep3IntStateSpec > { EndW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nacf (& mut self) -> InNacfW < '_ , Ep3IntStateSpec > { InNacfW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& mut self) -> InAckfW < '_ , Ep3IntStateSpec > { InAckfW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& mut self) -> InStallfW < '_ , Ep3IntStateSpec > { InStallfW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& mut self) -> OutNackfW < '_ , Ep3IntStateSpec > { OutNackfW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& mut self) -> OutAckfW < '_ , Ep3IntStateSpec > { OutAckfW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& mut self) -> OutStallfW < '_ , Ep3IntStateSpec > { OutStallfW :: new (self , 7) } }
#[doc = "EP3 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_int_state::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3_int_state::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep3IntStateSpec ; impl crate :: RegisterSpec for Ep3IntStateSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep3_int_state::R`](R) reader structure"] impl crate :: Readable for Ep3IntStateSpec { }
#[doc = "`write(|w| ..)` method takes [`ep3_int_state::W`](W) writer structure"] impl crate :: Writable for Ep3IntStateSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP3_INT_STATE to value 0"] impl crate :: Resettable for Ep3IntStateSpec { } }
#[doc = "EP4_INT_STATE (rw) register accessor: EP4 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_int_state::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4_int_state::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep4_int_state`] module"]
#[doc (alias = "EP4_INT_STATE")] pub type Ep4IntState = crate :: Reg < ep4_int_state :: Ep4IntStateSpec > ;
#[doc = "EP4 interrupt state register"] pub mod ep4_int_state {
#[doc = "Register `EP4_INT_STATE` reader"] pub type R = crate :: R < Ep4IntStateSpec > ;
#[doc = "Register `EP4_INT_STATE` writer"] pub type W = crate :: W < Ep4IntStateSpec > ;
#[doc = "Field `END` reader - Status stage finished"] pub type EndR = crate :: BitReader ;
#[doc = "Field `END` writer - Status stage finished"] pub type EndW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACF` reader - IN-NACK received"] pub type InNacfR = crate :: BitReader ;
#[doc = "Field `IN_NACF` writer - IN-NACK received"] pub type InNacfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKF` reader - IN-ACK received"] pub type InAckfR = crate :: BitReader ;
#[doc = "Field `IN_ACKF` writer - IN-ACK received"] pub type InAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLF` reader - IN-STALL received"] pub type InStallfR = crate :: BitReader ;
#[doc = "Field `IN_STALLF` writer - IN-STALL received"] pub type InStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKF` reader - OUT-NACK received"] pub type OutNackfR = crate :: BitReader ;
#[doc = "Field `OUT_NACKF` writer - OUT-NACK received"] pub type OutNackfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKF` reader - OUT-ACK received"] pub type OutAckfR = crate :: BitReader ;
#[doc = "Field `OUT_ACKF` writer - OUT-ACK received"] pub type OutAckfW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLF` reader - OUT-STALL received"] pub type OutStallfR = crate :: BitReader ;
#[doc = "Field `OUT_STALLF` writer - OUT-STALL received"] pub type OutStallfW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& self) -> EndR { EndR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nacf (& self) -> InNacfR { InNacfR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& self) -> InAckfR { InAckfR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& self) -> InStallfR { InStallfR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& self) -> OutNackfR { OutNackfR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& self) -> OutAckfR { OutAckfR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& self) -> OutStallfR { OutStallfR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 1 - Status stage finished"]
#[inline (always)] pub fn end (& mut self) -> EndW < '_ , Ep4IntStateSpec > { EndW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK received"]
#[inline (always)] pub fn in_nacf (& mut self) -> InNacfW < '_ , Ep4IntStateSpec > { InNacfW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK received"]
#[inline (always)] pub fn in_ackf (& mut self) -> InAckfW < '_ , Ep4IntStateSpec > { InAckfW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL received"]
#[inline (always)] pub fn in_stallf (& mut self) -> InStallfW < '_ , Ep4IntStateSpec > { InStallfW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK received"]
#[inline (always)] pub fn out_nackf (& mut self) -> OutNackfW < '_ , Ep4IntStateSpec > { OutNackfW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK received"]
#[inline (always)] pub fn out_ackf (& mut self) -> OutAckfW < '_ , Ep4IntStateSpec > { OutAckfW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL received"]
#[inline (always)] pub fn out_stallf (& mut self) -> OutStallfW < '_ , Ep4IntStateSpec > { OutStallfW :: new (self , 7) } }
#[doc = "EP4 interrupt state register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_int_state::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4_int_state::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep4IntStateSpec ; impl crate :: RegisterSpec for Ep4IntStateSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep4_int_state::R`](R) reader structure"] impl crate :: Readable for Ep4IntStateSpec { }
#[doc = "`write(|w| ..)` method takes [`ep4_int_state::W`](W) writer structure"] impl crate :: Writable for Ep4IntStateSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP4_INT_STATE to value 0"] impl crate :: Resettable for Ep4IntStateSpec { } }
#[doc = "EP1_INT_EN (rw) register accessor: EP1 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_int_en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1_int_en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep1_int_en`] module"]
#[doc (alias = "EP1_INT_EN")] pub type Ep1IntEn = crate :: Reg < ep1_int_en :: Ep1IntEnSpec > ;
#[doc = "EP1 interrupt enable register"] pub mod ep1_int_en {
#[doc = "Register `EP1_INT_EN` reader"] pub type R = crate :: R < Ep1IntEnSpec > ;
#[doc = "Register `EP1_INT_EN` writer"] pub type W = crate :: W < Ep1IntEnSpec > ;
#[doc = "Field `ENDIE` reader - Status stage finished interrupt enable"] pub type EndieR = crate :: BitReader ;
#[doc = "Field `ENDIE` writer - Status stage finished interrupt enable"] pub type EndieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACKIE` reader - IN-NACK interrupt enable"] pub type InNackieR = crate :: BitReader ;
#[doc = "Field `IN_NACKIE` writer - IN-NACK interrupt enable"] pub type InNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKIE` reader - IN-ACK interrupt enable"] pub type InAckieR = crate :: BitReader ;
#[doc = "Field `IN_ACKIE` writer - IN-ACK interrupt enable"] pub type InAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLIE` reader - IN-STALL interrupt enable"] pub type InStallieR = crate :: BitReader ;
#[doc = "Field `IN_STALLIE` writer - IN-STALL interrupt enable"] pub type InStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKIE` reader - OUT-NACK interrupt enable"] pub type OutNackieR = crate :: BitReader ;
#[doc = "Field `OUT_NACKIE` writer - OUT-NACK interrupt enable"] pub type OutNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKIE` reader - OUT-ACK interrupt enable"] pub type OutAckieR = crate :: BitReader ;
#[doc = "Field `OUT_ACKIE` writer - OUT-ACK interrupt enable"] pub type OutAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLIE` reader - OUT-STALL interrupt enable"] pub type OutStallieR = crate :: BitReader ;
#[doc = "Field `OUT_STALLIE` writer - OUT-STALL interrupt enable"] pub type OutStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& self) -> EndieR { EndieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& self) -> InNackieR { InNackieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& self) -> InAckieR { InAckieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& self) -> InStallieR { InStallieR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& self) -> OutNackieR { OutNackieR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& self) -> OutAckieR { OutAckieR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& self) -> OutStallieR { OutStallieR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& mut self) -> EndieW < '_ , Ep1IntEnSpec > { EndieW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& mut self) -> InNackieW < '_ , Ep1IntEnSpec > { InNackieW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& mut self) -> InAckieW < '_ , Ep1IntEnSpec > { InAckieW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& mut self) -> InStallieW < '_ , Ep1IntEnSpec > { InStallieW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& mut self) -> OutNackieW < '_ , Ep1IntEnSpec > { OutNackieW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& mut self) -> OutAckieW < '_ , Ep1IntEnSpec > { OutAckieW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& mut self) -> OutStallieW < '_ , Ep1IntEnSpec > { OutStallieW :: new (self , 7) } }
#[doc = "EP1 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_int_en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1_int_en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep1IntEnSpec ; impl crate :: RegisterSpec for Ep1IntEnSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep1_int_en::R`](R) reader structure"] impl crate :: Readable for Ep1IntEnSpec { }
#[doc = "`write(|w| ..)` method takes [`ep1_int_en::W`](W) writer structure"] impl crate :: Writable for Ep1IntEnSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP1_INT_EN to value 0"] impl crate :: Resettable for Ep1IntEnSpec { } }
#[doc = "EP2_INT_EN (rw) register accessor: EP2 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_int_en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2_int_en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep2_int_en`] module"]
#[doc (alias = "EP2_INT_EN")] pub type Ep2IntEn = crate :: Reg < ep2_int_en :: Ep2IntEnSpec > ;
#[doc = "EP2 interrupt enable register"] pub mod ep2_int_en {
#[doc = "Register `EP2_INT_EN` reader"] pub type R = crate :: R < Ep2IntEnSpec > ;
#[doc = "Register `EP2_INT_EN` writer"] pub type W = crate :: W < Ep2IntEnSpec > ;
#[doc = "Field `ENDIE` reader - Status stage finished interrupt enable"] pub type EndieR = crate :: BitReader ;
#[doc = "Field `ENDIE` writer - Status stage finished interrupt enable"] pub type EndieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACKIE` reader - IN-NACK interrupt enable"] pub type InNackieR = crate :: BitReader ;
#[doc = "Field `IN_NACKIE` writer - IN-NACK interrupt enable"] pub type InNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKIE` reader - IN-ACK interrupt enable"] pub type InAckieR = crate :: BitReader ;
#[doc = "Field `IN_ACKIE` writer - IN-ACK interrupt enable"] pub type InAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLIE` reader - IN-STALL interrupt enable"] pub type InStallieR = crate :: BitReader ;
#[doc = "Field `IN_STALLIE` writer - IN-STALL interrupt enable"] pub type InStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKIE` reader - OUT-NACK interrupt enable"] pub type OutNackieR = crate :: BitReader ;
#[doc = "Field `OUT_NACKIE` writer - OUT-NACK interrupt enable"] pub type OutNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKIE` reader - OUT-ACK interrupt enable"] pub type OutAckieR = crate :: BitReader ;
#[doc = "Field `OUT_ACKIE` writer - OUT-ACK interrupt enable"] pub type OutAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLIE` reader - OUT-STALL interrupt enable"] pub type OutStallieR = crate :: BitReader ;
#[doc = "Field `OUT_STALLIE` writer - OUT-STALL interrupt enable"] pub type OutStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& self) -> EndieR { EndieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& self) -> InNackieR { InNackieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& self) -> InAckieR { InAckieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& self) -> InStallieR { InStallieR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& self) -> OutNackieR { OutNackieR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& self) -> OutAckieR { OutAckieR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& self) -> OutStallieR { OutStallieR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& mut self) -> EndieW < '_ , Ep2IntEnSpec > { EndieW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& mut self) -> InNackieW < '_ , Ep2IntEnSpec > { InNackieW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& mut self) -> InAckieW < '_ , Ep2IntEnSpec > { InAckieW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& mut self) -> InStallieW < '_ , Ep2IntEnSpec > { InStallieW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& mut self) -> OutNackieW < '_ , Ep2IntEnSpec > { OutNackieW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& mut self) -> OutAckieW < '_ , Ep2IntEnSpec > { OutAckieW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& mut self) -> OutStallieW < '_ , Ep2IntEnSpec > { OutStallieW :: new (self , 7) } }
#[doc = "EP2 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_int_en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2_int_en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep2IntEnSpec ; impl crate :: RegisterSpec for Ep2IntEnSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep2_int_en::R`](R) reader structure"] impl crate :: Readable for Ep2IntEnSpec { }
#[doc = "`write(|w| ..)` method takes [`ep2_int_en::W`](W) writer structure"] impl crate :: Writable for Ep2IntEnSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP2_INT_EN to value 0"] impl crate :: Resettable for Ep2IntEnSpec { } }
#[doc = "EP3_INT_EN (rw) register accessor: EP3 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_int_en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3_int_en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep3_int_en`] module"]
#[doc (alias = "EP3_INT_EN")] pub type Ep3IntEn = crate :: Reg < ep3_int_en :: Ep3IntEnSpec > ;
#[doc = "EP3 interrupt enable register"] pub mod ep3_int_en {
#[doc = "Register `EP3_INT_EN` reader"] pub type R = crate :: R < Ep3IntEnSpec > ;
#[doc = "Register `EP3_INT_EN` writer"] pub type W = crate :: W < Ep3IntEnSpec > ;
#[doc = "Field `ENDIE` reader - Status stage finished interrupt enable"] pub type EndieR = crate :: BitReader ;
#[doc = "Field `ENDIE` writer - Status stage finished interrupt enable"] pub type EndieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACKIE` reader - IN-NACK interrupt enable"] pub type InNackieR = crate :: BitReader ;
#[doc = "Field `IN_NACKIE` writer - IN-NACK interrupt enable"] pub type InNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKIE` reader - IN-ACK interrupt enable"] pub type InAckieR = crate :: BitReader ;
#[doc = "Field `IN_ACKIE` writer - IN-ACK interrupt enable"] pub type InAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLIE` reader - IN-STALL interrupt enable"] pub type InStallieR = crate :: BitReader ;
#[doc = "Field `IN_STALLIE` writer - IN-STALL interrupt enable"] pub type InStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKIE` reader - OUT-NACK interrupt enable"] pub type OutNackieR = crate :: BitReader ;
#[doc = "Field `OUT_NACKIE` writer - OUT-NACK interrupt enable"] pub type OutNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKIE` reader - OUT-ACK interrupt enable"] pub type OutAckieR = crate :: BitReader ;
#[doc = "Field `OUT_ACKIE` writer - OUT-ACK interrupt enable"] pub type OutAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLIE` reader - OUT-STALL interrupt enable"] pub type OutStallieR = crate :: BitReader ;
#[doc = "Field `OUT_STALLIE` writer - OUT-STALL interrupt enable"] pub type OutStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& self) -> EndieR { EndieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& self) -> InNackieR { InNackieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& self) -> InAckieR { InAckieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& self) -> InStallieR { InStallieR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& self) -> OutNackieR { OutNackieR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& self) -> OutAckieR { OutAckieR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& self) -> OutStallieR { OutStallieR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& mut self) -> EndieW < '_ , Ep3IntEnSpec > { EndieW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& mut self) -> InNackieW < '_ , Ep3IntEnSpec > { InNackieW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& mut self) -> InAckieW < '_ , Ep3IntEnSpec > { InAckieW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& mut self) -> InStallieW < '_ , Ep3IntEnSpec > { InStallieW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& mut self) -> OutNackieW < '_ , Ep3IntEnSpec > { OutNackieW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& mut self) -> OutAckieW < '_ , Ep3IntEnSpec > { OutAckieW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& mut self) -> OutStallieW < '_ , Ep3IntEnSpec > { OutStallieW :: new (self , 7) } }
#[doc = "EP3 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_int_en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3_int_en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep3IntEnSpec ; impl crate :: RegisterSpec for Ep3IntEnSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep3_int_en::R`](R) reader structure"] impl crate :: Readable for Ep3IntEnSpec { }
#[doc = "`write(|w| ..)` method takes [`ep3_int_en::W`](W) writer structure"] impl crate :: Writable for Ep3IntEnSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP3_INT_EN to value 0"] impl crate :: Resettable for Ep3IntEnSpec { } }
#[doc = "EP4_INT_EN (rw) register accessor: EP4 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_int_en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4_int_en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep4_int_en`] module"]
#[doc (alias = "EP4_INT_EN")] pub type Ep4IntEn = crate :: Reg < ep4_int_en :: Ep4IntEnSpec > ;
#[doc = "EP4 interrupt enable register"] pub mod ep4_int_en {
#[doc = "Register `EP4_INT_EN` reader"] pub type R = crate :: R < Ep4IntEnSpec > ;
#[doc = "Register `EP4_INT_EN` writer"] pub type W = crate :: W < Ep4IntEnSpec > ;
#[doc = "Field `ENDIE` reader - Status stage finished interrupt enable"] pub type EndieR = crate :: BitReader ;
#[doc = "Field `ENDIE` writer - Status stage finished interrupt enable"] pub type EndieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_NACKIE` reader - IN-NACK interrupt enable"] pub type InNackieR = crate :: BitReader ;
#[doc = "Field `IN_NACKIE` writer - IN-NACK interrupt enable"] pub type InNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_ACKIE` reader - IN-ACK interrupt enable"] pub type InAckieR = crate :: BitReader ;
#[doc = "Field `IN_ACKIE` writer - IN-ACK interrupt enable"] pub type InAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_STALLIE` reader - IN-STALL interrupt enable"] pub type InStallieR = crate :: BitReader ;
#[doc = "Field `IN_STALLIE` writer - IN-STALL interrupt enable"] pub type InStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_NACKIE` reader - OUT-NACK interrupt enable"] pub type OutNackieR = crate :: BitReader ;
#[doc = "Field `OUT_NACKIE` writer - OUT-NACK interrupt enable"] pub type OutNackieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_ACKIE` reader - OUT-ACK interrupt enable"] pub type OutAckieR = crate :: BitReader ;
#[doc = "Field `OUT_ACKIE` writer - OUT-ACK interrupt enable"] pub type OutAckieW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_STALLIE` reader - OUT-STALL interrupt enable"] pub type OutStallieR = crate :: BitReader ;
#[doc = "Field `OUT_STALLIE` writer - OUT-STALL interrupt enable"] pub type OutStallieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& self) -> EndieR { EndieR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& self) -> InNackieR { InNackieR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& self) -> InAckieR { InAckieR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& self) -> InStallieR { InStallieR :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& self) -> OutNackieR { OutNackieR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& self) -> OutAckieR { OutAckieR :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& self) -> OutStallieR { OutStallieR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 1 - Status stage finished interrupt enable"]
#[inline (always)] pub fn endie (& mut self) -> EndieW < '_ , Ep4IntEnSpec > { EndieW :: new (self , 1) }
#[doc = "Bit 2 - IN-NACK interrupt enable"]
#[inline (always)] pub fn in_nackie (& mut self) -> InNackieW < '_ , Ep4IntEnSpec > { InNackieW :: new (self , 2) }
#[doc = "Bit 3 - IN-ACK interrupt enable"]
#[inline (always)] pub fn in_ackie (& mut self) -> InAckieW < '_ , Ep4IntEnSpec > { InAckieW :: new (self , 3) }
#[doc = "Bit 4 - IN-STALL interrupt enable"]
#[inline (always)] pub fn in_stallie (& mut self) -> InStallieW < '_ , Ep4IntEnSpec > { InStallieW :: new (self , 4) }
#[doc = "Bit 5 - OUT-NACK interrupt enable"]
#[inline (always)] pub fn out_nackie (& mut self) -> OutNackieW < '_ , Ep4IntEnSpec > { OutNackieW :: new (self , 5) }
#[doc = "Bit 6 - OUT-ACK interrupt enable"]
#[inline (always)] pub fn out_ackie (& mut self) -> OutAckieW < '_ , Ep4IntEnSpec > { OutAckieW :: new (self , 6) }
#[doc = "Bit 7 - OUT-STALL interrupt enable"]
#[inline (always)] pub fn out_stallie (& mut self) -> OutStallieW < '_ , Ep4IntEnSpec > { OutStallieW :: new (self , 7) } }
#[doc = "EP4 interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_int_en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4_int_en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep4IntEnSpec ; impl crate :: RegisterSpec for Ep4IntEnSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep4_int_en::R`](R) reader structure"] impl crate :: Readable for Ep4IntEnSpec { }
#[doc = "`write(|w| ..)` method takes [`ep4_int_en::W`](W) writer structure"] impl crate :: Writable for Ep4IntEnSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP4_INT_EN to value 0"] impl crate :: Resettable for Ep4IntEnSpec { } }
#[doc = "ADDR (rw) register accessor: USB address\n\nYou can [`read`](crate::Reg::read) this register and get [`addr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`addr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@addr`] module"]
#[doc (alias = "ADDR")] pub type Addr = crate :: Reg < addr :: AddrSpec > ;
#[doc = "USB address"] pub mod addr {
#[doc = "Register `ADDR` reader"] pub type R = crate :: R < AddrSpec > ;
#[doc = "Register `ADDR` writer"] pub type W = crate :: W < AddrSpec > ;
#[doc = "Field `ADDR` reader - USB address"] pub type AddrR = crate :: FieldReader ;
#[doc = "Field `ADDR` writer - USB address"] pub type AddrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ; impl R {
#[doc = "Bits 0:6 - USB address"]
#[inline (always)] pub fn addr (& self) -> AddrR { AddrR :: new ((self . bits & 0x7f) as u8) } } impl W {
#[doc = "Bits 0:6 - USB address"]
#[inline (always)] pub fn addr (& mut self) -> AddrW < '_ , AddrSpec > { AddrW :: new (self , 0) } }
#[doc = "USB address\n\nYou can [`read`](crate::Reg::read) this register and get [`addr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`addr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AddrSpec ; impl crate :: RegisterSpec for AddrSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`addr::R`](R) reader structure"] impl crate :: Readable for AddrSpec { }
#[doc = "`write(|w| ..)` method takes [`addr::W`](W) writer structure"] impl crate :: Writable for AddrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets ADDR to value 0"] impl crate :: Resettable for AddrSpec { } }
#[doc = "EP_EN (rw) register accessor: EP Enable End\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_en`] module"]
#[doc (alias = "EP_EN")] pub type EpEn = crate :: Reg < ep_en :: EpEnSpec > ;
#[doc = "EP Enable End"] pub mod ep_en {
#[doc = "Register `EP_EN` reader"] pub type R = crate :: R < EpEnSpec > ;
#[doc = "Register `EP_EN` writer"] pub type W = crate :: W < EpEnSpec > ;
#[doc = "Field `EP0EN` reader - Enable End Point 0"] pub type Ep0enR = crate :: BitReader ;
#[doc = "Field `EP0EN` writer - Enable End Point 0"] pub type Ep0enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP1EN` reader - Enable End Point 1"] pub type Ep1enR = crate :: BitReader ;
#[doc = "Field `EP1EN` writer - Enable End Point 1"] pub type Ep1enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP2EN` reader - Enable End Point 2"] pub type Ep2enR = crate :: BitReader ;
#[doc = "Field `EP2EN` writer - Enable End Point 2"] pub type Ep2enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP3EN` reader - Enable End Point 3"] pub type Ep3enR = crate :: BitReader ;
#[doc = "Field `EP3EN` writer - Enable End Point 3"] pub type Ep3enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP4EN` reader - Enable End Point 4"] pub type Ep4enR = crate :: BitReader ;
#[doc = "Field `EP4EN` writer - Enable End Point 4"] pub type Ep4enW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Enable End Point 0"]
#[inline (always)] pub fn ep0en (& self) -> Ep0enR { Ep0enR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Enable End Point 1"]
#[inline (always)] pub fn ep1en (& self) -> Ep1enR { Ep1enR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Enable End Point 2"]
#[inline (always)] pub fn ep2en (& self) -> Ep2enR { Ep2enR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Enable End Point 3"]
#[inline (always)] pub fn ep3en (& self) -> Ep3enR { Ep3enR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Enable End Point 4"]
#[inline (always)] pub fn ep4en (& self) -> Ep4enR { Ep4enR :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Enable End Point 0"]
#[inline (always)] pub fn ep0en (& mut self) -> Ep0enW < '_ , EpEnSpec > { Ep0enW :: new (self , 0) }
#[doc = "Bit 1 - Enable End Point 1"]
#[inline (always)] pub fn ep1en (& mut self) -> Ep1enW < '_ , EpEnSpec > { Ep1enW :: new (self , 1) }
#[doc = "Bit 2 - Enable End Point 2"]
#[inline (always)] pub fn ep2en (& mut self) -> Ep2enW < '_ , EpEnSpec > { Ep2enW :: new (self , 2) }
#[doc = "Bit 3 - Enable End Point 3"]
#[inline (always)] pub fn ep3en (& mut self) -> Ep3enW < '_ , EpEnSpec > { Ep3enW :: new (self , 3) }
#[doc = "Bit 4 - Enable End Point 4"]
#[inline (always)] pub fn ep4en (& mut self) -> Ep4enW < '_ , EpEnSpec > { Ep4enW :: new (self , 4) } }
#[doc = "EP Enable End\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpEnSpec ; impl crate :: RegisterSpec for EpEnSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_en::R`](R) reader structure"] impl crate :: Readable for EpEnSpec { }
#[doc = "`write(|w| ..)` method takes [`ep_en::W`](W) writer structure"] impl crate :: Writable for EpEnSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP_EN to value 0"] impl crate :: Resettable for EpEnSpec { } }
#[doc = "EP_DMA_DIR (rw) register accessor: DMA End-point direction register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_dma_dir::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_dma_dir::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_dma_dir`] module"]
#[doc (alias = "EP_DMA_DIR")] pub type EpDmaDir = crate :: Reg < ep_dma_dir :: EpDmaDirSpec > ;
#[doc = "DMA End-point direction register"] pub mod ep_dma_dir {
#[doc = "Register `EP_DMA_DIR` reader"] pub type R = crate :: R < EpDmaDirSpec > ;
#[doc = "Register `EP_DMA_DIR` writer"] pub type W = crate :: W < EpDmaDirSpec > ;
#[doc = "Field `DAM_DIR1` reader - Point 1 Dma Dir"] pub type DamDir1R = crate :: BitReader ;
#[doc = "Field `DAM_DIR1` writer - Point 1 Dma Dir"] pub type DamDir1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DAM_DIR2` reader - Point 2 Dma Dir"] pub type DamDir2R = crate :: BitReader ;
#[doc = "Field `DAM_DIR2` writer - Point 2 Dma Dir"] pub type DamDir2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DAM_DIR3` reader - Point 3 Dma Dir"] pub type DamDir3R = crate :: BitReader ;
#[doc = "Field `DAM_DIR3` writer - Point 3 Dma Dir"] pub type DamDir3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DAM_DIR4` reader - Point 4 Dma Dir"] pub type DamDir4R = crate :: BitReader ;
#[doc = "Field `DAM_DIR4` writer - Point 4 Dma Dir"] pub type DamDir4W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Point 1 Dma Dir"]
#[inline (always)] pub fn dam_dir1 (& self) -> DamDir1R { DamDir1R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Point 2 Dma Dir"]
#[inline (always)] pub fn dam_dir2 (& self) -> DamDir2R { DamDir2R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Point 3 Dma Dir"]
#[inline (always)] pub fn dam_dir3 (& self) -> DamDir3R { DamDir3R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Point 4 Dma Dir"]
#[inline (always)] pub fn dam_dir4 (& self) -> DamDir4R { DamDir4R :: new (((self . bits >> 3) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Point 1 Dma Dir"]
#[inline (always)] pub fn dam_dir1 (& mut self) -> DamDir1W < '_ , EpDmaDirSpec > { DamDir1W :: new (self , 0) }
#[doc = "Bit 1 - Point 2 Dma Dir"]
#[inline (always)] pub fn dam_dir2 (& mut self) -> DamDir2W < '_ , EpDmaDirSpec > { DamDir2W :: new (self , 1) }
#[doc = "Bit 2 - Point 3 Dma Dir"]
#[inline (always)] pub fn dam_dir3 (& mut self) -> DamDir3W < '_ , EpDmaDirSpec > { DamDir3W :: new (self , 2) }
#[doc = "Bit 3 - Point 4 Dma Dir"]
#[inline (always)] pub fn dam_dir4 (& mut self) -> DamDir4W < '_ , EpDmaDirSpec > { DamDir4W :: new (self , 3) } }
#[doc = "DMA End-point direction register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_dma_dir::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_dma_dir::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpDmaDirSpec ; impl crate :: RegisterSpec for EpDmaDirSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_dma_dir::R`](R) reader structure"] impl crate :: Readable for EpDmaDirSpec { }
#[doc = "`write(|w| ..)` method takes [`ep_dma_dir::W`](W) writer structure"] impl crate :: Writable for EpDmaDirSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP_DMA_DIR to value 0x01"] impl crate :: Resettable for EpDmaDirSpec { const RESET_VALUE : u16 = 0x01 ; } }
#[doc = "EP_TYPE (rw) register accessor: Endpoint type register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_type::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_type::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_type`] module"]
#[doc (alias = "EP_TYPE")] pub type EpType = crate :: Reg < ep_type :: EpTypeSpec > ;
#[doc = "Endpoint type register"] pub mod ep_type {
#[doc = "Register `EP_TYPE` reader"] pub type R = crate :: R < EpTypeSpec > ;
#[doc = "Register `EP_TYPE` writer"] pub type W = crate :: W < EpTypeSpec > ;
#[doc = "Field `EP1_TYPE` reader - Point 1 type"] pub type Ep1TypeR = crate :: BitReader ;
#[doc = "Field `EP1_TYPE` writer - Point 1 type"] pub type Ep1TypeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP2_TYPE` reader - Point 2 type"] pub type Ep2TypeR = crate :: BitReader ;
#[doc = "Field `EP2_TYPE` writer - Point 2 type"] pub type Ep2TypeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP3_TYPE` reader - Point 3 type"] pub type Ep3TypeR = crate :: BitReader ;
#[doc = "Field `EP3_TYPE` writer - Point 3 type"] pub type Ep3TypeW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP4_TYPE` reader - Point 4 type"] pub type Ep4TypeR = crate :: BitReader ;
#[doc = "Field `EP4_TYPE` writer - Point 4 type"] pub type Ep4TypeW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Point 1 type"]
#[inline (always)] pub fn ep1_type (& self) -> Ep1TypeR { Ep1TypeR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Point 2 type"]
#[inline (always)] pub fn ep2_type (& self) -> Ep2TypeR { Ep2TypeR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Point 3 type"]
#[inline (always)] pub fn ep3_type (& self) -> Ep3TypeR { Ep3TypeR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Point 4 type"]
#[inline (always)] pub fn ep4_type (& self) -> Ep4TypeR { Ep4TypeR :: new (((self . bits >> 3) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Point 1 type"]
#[inline (always)] pub fn ep1_type (& mut self) -> Ep1TypeW < '_ , EpTypeSpec > { Ep1TypeW :: new (self , 0) }
#[doc = "Bit 1 - Point 2 type"]
#[inline (always)] pub fn ep2_type (& mut self) -> Ep2TypeW < '_ , EpTypeSpec > { Ep2TypeW :: new (self , 1) }
#[doc = "Bit 2 - Point 3 type"]
#[inline (always)] pub fn ep3_type (& mut self) -> Ep3TypeW < '_ , EpTypeSpec > { Ep3TypeW :: new (self , 2) }
#[doc = "Bit 3 - Point 4 type"]
#[inline (always)] pub fn ep4_type (& mut self) -> Ep4TypeW < '_ , EpTypeSpec > { Ep4TypeW :: new (self , 3) } }
#[doc = "Endpoint type register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_type::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_type::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpTypeSpec ; impl crate :: RegisterSpec for EpTypeSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_type::R`](R) reader structure"] impl crate :: Readable for EpTypeSpec { }
#[doc = "`write(|w| ..)` method takes [`ep_type::W`](W) writer structure"] impl crate :: Writable for EpTypeSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP_TYPE to value 0"] impl crate :: Resettable for EpTypeSpec { } }
#[doc = "EP_INDEX1_2 (rw) register accessor: End-point index register 1_2\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_index1_2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_index1_2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_index1_2`] module"]
#[doc (alias = "EP_INDEX1_2")] pub type EpIndex1_2 = crate :: Reg < ep_index1_2 :: EpIndex1_2Spec > ;
#[doc = "End-point index register 1_2"] pub mod ep_index1_2 {
#[doc = "Register `EP_INDEX1_2` reader"] pub type R = crate :: R < EpIndex1_2Spec > ;
#[doc = "Register `EP_INDEX1_2` writer"] pub type W = crate :: W < EpIndex1_2Spec > ;
#[doc = "Field `INDEX1` reader - Point 1 index"] pub type Index1R = crate :: FieldReader ;
#[doc = "Field `INDEX1` writer - Point 1 index"] pub type Index1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `INDEX2` reader - Point 2 index"] pub type Index2R = crate :: FieldReader ;
#[doc = "Field `INDEX2` writer - Point 2 index"] pub type Index2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - Point 1 index"]
#[inline (always)] pub fn index1 (& self) -> Index1R { Index1R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - Point 2 index"]
#[inline (always)] pub fn index2 (& self) -> Index2R { Index2R :: new (((self . bits >> 4) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - Point 1 index"]
#[inline (always)] pub fn index1 (& mut self) -> Index1W < '_ , EpIndex1_2Spec > { Index1W :: new (self , 0) }
#[doc = "Bits 4:7 - Point 2 index"]
#[inline (always)] pub fn index2 (& mut self) -> Index2W < '_ , EpIndex1_2Spec > { Index2W :: new (self , 4) } }
#[doc = "End-point index register 1_2\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_index1_2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_index1_2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpIndex1_2Spec ; impl crate :: RegisterSpec for EpIndex1_2Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_index1_2::R`](R) reader structure"] impl crate :: Readable for EpIndex1_2Spec { }
#[doc = "`write(|w| ..)` method takes [`ep_index1_2::W`](W) writer structure"] impl crate :: Writable for EpIndex1_2Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP_INDEX1_2 to value 0x21"] impl crate :: Resettable for EpIndex1_2Spec { const RESET_VALUE : u16 = 0x21 ; } }
#[doc = "EP_INDEX3_4 (rw) register accessor: End-point index register 3_4\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_index3_4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_index3_4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_index3_4`] module"]
#[doc (alias = "EP_INDEX3_4")] pub type EpIndex3_4 = crate :: Reg < ep_index3_4 :: EpIndex3_4Spec > ;
#[doc = "End-point index register 3_4"] pub mod ep_index3_4 {
#[doc = "Register `EP_INDEX3_4` reader"] pub type R = crate :: R < EpIndex3_4Spec > ;
#[doc = "Register `EP_INDEX3_4` writer"] pub type W = crate :: W < EpIndex3_4Spec > ;
#[doc = "Field `INDEX3` reader - Point 3 index"] pub type Index3R = crate :: FieldReader ;
#[doc = "Field `INDEX3` writer - Point 3 index"] pub type Index3W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ;
#[doc = "Field `INDEX4` reader - Point 4 index"] pub type Index4R = crate :: FieldReader ;
#[doc = "Field `INDEX4` writer - Point 4 index"] pub type Index4W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R {
#[doc = "Bits 0:3 - Point 3 index"]
#[inline (always)] pub fn index3 (& self) -> Index3R { Index3R :: new ((self . bits & 0x0f) as u8) }
#[doc = "Bits 4:7 - Point 4 index"]
#[inline (always)] pub fn index4 (& self) -> Index4R { Index4R :: new (((self . bits >> 4) & 0x0f) as u8) } } impl W {
#[doc = "Bits 0:3 - Point 3 index"]
#[inline (always)] pub fn index3 (& mut self) -> Index3W < '_ , EpIndex3_4Spec > { Index3W :: new (self , 0) }
#[doc = "Bits 4:7 - Point 4 index"]
#[inline (always)] pub fn index4 (& mut self) -> Index4W < '_ , EpIndex3_4Spec > { Index4W :: new (self , 4) } }
#[doc = "End-point index register 3_4\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_index3_4::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_index3_4::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpIndex3_4Spec ; impl crate :: RegisterSpec for EpIndex3_4Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_index3_4::R`](R) reader structure"] impl crate :: Readable for EpIndex3_4Spec { }
#[doc = "`write(|w| ..)` method takes [`ep_index3_4::W`](W) writer structure"] impl crate :: Writable for EpIndex3_4Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP_INDEX3_4 to value 0x43"] impl crate :: Resettable for EpIndex3_4Spec { const RESET_VALUE : u16 = 0x43 ; } }
#[doc = "TOG_CTRL1_4 (rw) register accessor: TOG CTRL1_4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tog_ctrl1_4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tog_ctrl1_4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tog_ctrl1_4`] module"]
#[doc (alias = "TOG_CTRL1_4")] pub type TogCtrl1_4 = crate :: Reg < tog_ctrl1_4 :: TogCtrl1_4Spec > ;
#[doc = "TOG CTRL1_4 register"] pub mod tog_ctrl1_4 {
#[doc = "Register `TOG_CTRL1_4` reader"] pub type R = crate :: R < TogCtrl1_4Spec > ;
#[doc = "Register `TOG_CTRL1_4` writer"] pub type W = crate :: W < TogCtrl1_4Spec > ;
#[doc = "Field `DTOG1` reader - Set End Point 1 Toggle"] pub type Dtog1R = crate :: BitReader ;
#[doc = "Field `DTOG1` writer - Set End Point 1 Toggle"] pub type Dtog1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DTOG1EN` reader - Set End Point 1 enable"] pub type Dtog1enR = crate :: BitReader ;
#[doc = "Field `DTOG1EN` writer - Set End Point 1 enable"] pub type Dtog1enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DTOG2` reader - Set End Point 2 Toggle"] pub type Dtog2R = crate :: BitReader ;
#[doc = "Field `DTOG2` writer - Set End Point 2 Toggle"] pub type Dtog2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DTOG2EN` reader - Set End Point 2 enable"] pub type Dtog2enR = crate :: BitReader ;
#[doc = "Field `DTOG2EN` writer - Set End Point 2 enable"] pub type Dtog2enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DTOG3` reader - Set End Point 3 Toggle"] pub type Dtog3R = crate :: BitReader ;
#[doc = "Field `DTOG3` writer - Set End Point 3 Toggle"] pub type Dtog3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DTOG3EN` reader - Set End Point 3 enable"] pub type Dtog3enR = crate :: BitReader ;
#[doc = "Field `DTOG3EN` writer - Set End Point 3 enable"] pub type Dtog3enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DTOG4` reader - Set End Point 4 Toggle"] pub type Dtog4R = crate :: BitReader ;
#[doc = "Field `DTOG4` writer - Set End Point 4 Toggle"] pub type Dtog4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DTOG4EN` reader - Set End Point 4 enable"] pub type Dtog4enR = crate :: BitReader ;
#[doc = "Field `DTOG4EN` writer - Set End Point 4 enable"] pub type Dtog4enW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Set End Point 1 Toggle"]
#[inline (always)] pub fn dtog1 (& self) -> Dtog1R { Dtog1R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Set End Point 1 enable"]
#[inline (always)] pub fn dtog1en (& self) -> Dtog1enR { Dtog1enR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Set End Point 2 Toggle"]
#[inline (always)] pub fn dtog2 (& self) -> Dtog2R { Dtog2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Set End Point 2 enable"]
#[inline (always)] pub fn dtog2en (& self) -> Dtog2enR { Dtog2enR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - Set End Point 3 Toggle"]
#[inline (always)] pub fn dtog3 (& self) -> Dtog3R { Dtog3R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - Set End Point 3 enable"]
#[inline (always)] pub fn dtog3en (& self) -> Dtog3enR { Dtog3enR :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - Set End Point 4 Toggle"]
#[inline (always)] pub fn dtog4 (& self) -> Dtog4R { Dtog4R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - Set End Point 4 enable"]
#[inline (always)] pub fn dtog4en (& self) -> Dtog4enR { Dtog4enR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Set End Point 1 Toggle"]
#[inline (always)] pub fn dtog1 (& mut self) -> Dtog1W < '_ , TogCtrl1_4Spec > { Dtog1W :: new (self , 0) }
#[doc = "Bit 1 - Set End Point 1 enable"]
#[inline (always)] pub fn dtog1en (& mut self) -> Dtog1enW < '_ , TogCtrl1_4Spec > { Dtog1enW :: new (self , 1) }
#[doc = "Bit 2 - Set End Point 2 Toggle"]
#[inline (always)] pub fn dtog2 (& mut self) -> Dtog2W < '_ , TogCtrl1_4Spec > { Dtog2W :: new (self , 2) }
#[doc = "Bit 3 - Set End Point 2 enable"]
#[inline (always)] pub fn dtog2en (& mut self) -> Dtog2enW < '_ , TogCtrl1_4Spec > { Dtog2enW :: new (self , 3) }
#[doc = "Bit 4 - Set End Point 3 Toggle"]
#[inline (always)] pub fn dtog3 (& mut self) -> Dtog3W < '_ , TogCtrl1_4Spec > { Dtog3W :: new (self , 4) }
#[doc = "Bit 5 - Set End Point 3 enable"]
#[inline (always)] pub fn dtog3en (& mut self) -> Dtog3enW < '_ , TogCtrl1_4Spec > { Dtog3enW :: new (self , 5) }
#[doc = "Bit 6 - Set End Point 4 Toggle"]
#[inline (always)] pub fn dtog4 (& mut self) -> Dtog4W < '_ , TogCtrl1_4Spec > { Dtog4W :: new (self , 6) }
#[doc = "Bit 7 - Set End Point 4 enable"]
#[inline (always)] pub fn dtog4en (& mut self) -> Dtog4enW < '_ , TogCtrl1_4Spec > { Dtog4enW :: new (self , 7) } }
#[doc = "TOG CTRL1_4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tog_ctrl1_4::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tog_ctrl1_4::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TogCtrl1_4Spec ; impl crate :: RegisterSpec for TogCtrl1_4Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`tog_ctrl1_4::R`](R) reader structure"] impl crate :: Readable for TogCtrl1_4Spec { }
#[doc = "`write(|w| ..)` method takes [`tog_ctrl1_4::W`](W) writer structure"] impl crate :: Writable for TogCtrl1_4Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TOG_CTRL1_4 to value 0"] impl crate :: Resettable for TogCtrl1_4Spec { } }
#[doc = "TOG_STAT1_4 (rw) register accessor: TOG STAT1_4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tog_stat1_4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tog_stat1_4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tog_stat1_4`] module"]
#[doc (alias = "TOG_STAT1_4")] pub type TogStat1_4 = crate :: Reg < tog_stat1_4 :: TogStat1_4Spec > ;
#[doc = "TOG STAT1_4 register"] pub mod tog_stat1_4 {
#[doc = "Register `TOG_STAT1_4` reader"] pub type R = crate :: R < TogStat1_4Spec > ;
#[doc = "Register `TOG_STAT1_4` writer"] pub type W = crate :: W < TogStat1_4Spec > ;
#[doc = "Field `IN_TOG1` reader - End Point 1 Toggle IN State"] pub type InTog1R = crate :: BitReader ;
#[doc = "Field `IN_TOG1` writer - End Point 1 Toggle IN State"] pub type InTog1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_TOG1` reader - End Point 1 Toggle ON State"] pub type OutTog1R = crate :: BitReader ;
#[doc = "Field `OUT_TOG1` writer - End Point 1 Toggle ON State"] pub type OutTog1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_TOG2` reader - End Point 2 Toggle IN State"] pub type InTog2R = crate :: BitReader ;
#[doc = "Field `IN_TOG2` writer - End Point 2 Toggle IN State"] pub type InTog2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_TOG2` reader - End Point 2 Toggle ON State"] pub type OutTog2R = crate :: BitReader ;
#[doc = "Field `OUT_TOG2` writer - End Point 2 Toggle ON State"] pub type OutTog2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_TOG3` reader - End Point 3 Toggle IN State"] pub type InTog3R = crate :: BitReader ;
#[doc = "Field `IN_TOG3` writer - End Point 3 Toggle IN State"] pub type InTog3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_TOG3` reader - End Point 3 Toggle ON State"] pub type OutTog3R = crate :: BitReader ;
#[doc = "Field `OUT_TOG3` writer - End Point 3 Toggle ON State"] pub type OutTog3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `IN_TOG4` reader - End Point 4 Toggle IN State"] pub type InTog4R = crate :: BitReader ;
#[doc = "Field `IN_TOG4` writer - End Point 4 Toggle IN State"] pub type InTog4W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `OUT_TOG4` reader - End Point 4 Toggle ON State"] pub type OutTog4R = crate :: BitReader ;
#[doc = "Field `OUT_TOG4` writer - End Point 4 Toggle ON State"] pub type OutTog4W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - End Point 1 Toggle IN State"]
#[inline (always)] pub fn in_tog1 (& self) -> InTog1R { InTog1R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - End Point 1 Toggle ON State"]
#[inline (always)] pub fn out_tog1 (& self) -> OutTog1R { OutTog1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - End Point 2 Toggle IN State"]
#[inline (always)] pub fn in_tog2 (& self) -> InTog2R { InTog2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - End Point 2 Toggle ON State"]
#[inline (always)] pub fn out_tog2 (& self) -> OutTog2R { OutTog2R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - End Point 3 Toggle IN State"]
#[inline (always)] pub fn in_tog3 (& self) -> InTog3R { InTog3R :: new (((self . bits >> 4) & 1) != 0) }
#[doc = "Bit 5 - End Point 3 Toggle ON State"]
#[inline (always)] pub fn out_tog3 (& self) -> OutTog3R { OutTog3R :: new (((self . bits >> 5) & 1) != 0) }
#[doc = "Bit 6 - End Point 4 Toggle IN State"]
#[inline (always)] pub fn in_tog4 (& self) -> InTog4R { InTog4R :: new (((self . bits >> 6) & 1) != 0) }
#[doc = "Bit 7 - End Point 4 Toggle ON State"]
#[inline (always)] pub fn out_tog4 (& self) -> OutTog4R { OutTog4R :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bit 0 - End Point 1 Toggle IN State"]
#[inline (always)] pub fn in_tog1 (& mut self) -> InTog1W < '_ , TogStat1_4Spec > { InTog1W :: new (self , 0) }
#[doc = "Bit 1 - End Point 1 Toggle ON State"]
#[inline (always)] pub fn out_tog1 (& mut self) -> OutTog1W < '_ , TogStat1_4Spec > { OutTog1W :: new (self , 1) }
#[doc = "Bit 2 - End Point 2 Toggle IN State"]
#[inline (always)] pub fn in_tog2 (& mut self) -> InTog2W < '_ , TogStat1_4Spec > { InTog2W :: new (self , 2) }
#[doc = "Bit 3 - End Point 2 Toggle ON State"]
#[inline (always)] pub fn out_tog2 (& mut self) -> OutTog2W < '_ , TogStat1_4Spec > { OutTog2W :: new (self , 3) }
#[doc = "Bit 4 - End Point 3 Toggle IN State"]
#[inline (always)] pub fn in_tog3 (& mut self) -> InTog3W < '_ , TogStat1_4Spec > { InTog3W :: new (self , 4) }
#[doc = "Bit 5 - End Point 3 Toggle ON State"]
#[inline (always)] pub fn out_tog3 (& mut self) -> OutTog3W < '_ , TogStat1_4Spec > { OutTog3W :: new (self , 5) }
#[doc = "Bit 6 - End Point 4 Toggle IN State"]
#[inline (always)] pub fn in_tog4 (& mut self) -> InTog4W < '_ , TogStat1_4Spec > { InTog4W :: new (self , 6) }
#[doc = "Bit 7 - End Point 4 Toggle ON State"]
#[inline (always)] pub fn out_tog4 (& mut self) -> OutTog4W < '_ , TogStat1_4Spec > { OutTog4W :: new (self , 7) } }
#[doc = "TOG STAT1_4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tog_stat1_4::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tog_stat1_4::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TogStat1_4Spec ; impl crate :: RegisterSpec for TogStat1_4Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`tog_stat1_4::R`](R) reader structure"] impl crate :: Readable for TogStat1_4Spec { }
#[doc = "`write(|w| ..)` method takes [`tog_stat1_4::W`](W) writer structure"] impl crate :: Writable for TogStat1_4Spec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets TOG_STAT1_4 to value 0"] impl crate :: Resettable for TogStat1_4Spec { } }
#[doc = "SETUP0 (r) register accessor: Setup Date 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup0::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@setup0`] module"]
#[doc (alias = "SETUP0")] pub type Setup0 = crate :: Reg < setup0 :: Setup0Spec > ;
#[doc = "Setup Date 0 register"] pub mod setup0 {
#[doc = "Register `SETUP0` reader"] pub type R = crate :: R < Setup0Spec > ;
#[doc = "Field `SETUPD0` reader - Setup Data 0"] pub type Setupd0R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - Setup Data 0"]
#[inline (always)] pub fn setupd0 (& self) -> Setupd0R { Setupd0R :: new ((self . bits & 0xff) as u8) } }
#[doc = "Setup Date 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup0::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Setup0Spec ; impl crate :: RegisterSpec for Setup0Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`setup0::R`](R) reader structure"] impl crate :: Readable for Setup0Spec { }
#[doc = "`reset()` method sets SETUP0 to value 0"] impl crate :: Resettable for Setup0Spec { } }
#[doc = "SETUP1 (r) register accessor: Setup Date 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@setup1`] module"]
#[doc (alias = "SETUP1")] pub type Setup1 = crate :: Reg < setup1 :: Setup1Spec > ;
#[doc = "Setup Date 1 register"] pub mod setup1 {
#[doc = "Register `SETUP1` reader"] pub type R = crate :: R < Setup1Spec > ;
#[doc = "Field `SETUPD1` reader - Setup Data 1"] pub type Setupd1R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - Setup Data 1"]
#[inline (always)] pub fn setupd1 (& self) -> Setupd1R { Setupd1R :: new ((self . bits & 0xff) as u8) } }
#[doc = "Setup Date 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Setup1Spec ; impl crate :: RegisterSpec for Setup1Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`setup1::R`](R) reader structure"] impl crate :: Readable for Setup1Spec { }
#[doc = "`reset()` method sets SETUP1 to value 0"] impl crate :: Resettable for Setup1Spec { } }
#[doc = "SETUP2 (r) register accessor: Setup Date 2 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@setup2`] module"]
#[doc (alias = "SETUP2")] pub type Setup2 = crate :: Reg < setup2 :: Setup2Spec > ;
#[doc = "Setup Date 2 register"] pub mod setup2 {
#[doc = "Register `SETUP2` reader"] pub type R = crate :: R < Setup2Spec > ;
#[doc = "Field `SETUPD2` reader - Setup Data 2"] pub type Setupd2R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - Setup Data 2"]
#[inline (always)] pub fn setupd2 (& self) -> Setupd2R { Setupd2R :: new ((self . bits & 0xff) as u8) } }
#[doc = "Setup Date 2 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup2::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Setup2Spec ; impl crate :: RegisterSpec for Setup2Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`setup2::R`](R) reader structure"] impl crate :: Readable for Setup2Spec { }
#[doc = "`reset()` method sets SETUP2 to value 0"] impl crate :: Resettable for Setup2Spec { } }
#[doc = "SETUP3 (r) register accessor: Setup Date 3 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup3::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@setup3`] module"]
#[doc (alias = "SETUP3")] pub type Setup3 = crate :: Reg < setup3 :: Setup3Spec > ;
#[doc = "Setup Date 3 register"] pub mod setup3 {
#[doc = "Register `SETUP3` reader"] pub type R = crate :: R < Setup3Spec > ;
#[doc = "Field `SETUPD3` reader - Setup Data 3"] pub type Setupd3R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - Setup Data 3"]
#[inline (always)] pub fn setupd3 (& self) -> Setupd3R { Setupd3R :: new ((self . bits & 0xff) as u8) } }
#[doc = "Setup Date 3 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup3::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Setup3Spec ; impl crate :: RegisterSpec for Setup3Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`setup3::R`](R) reader structure"] impl crate :: Readable for Setup3Spec { }
#[doc = "`reset()` method sets SETUP3 to value 0"] impl crate :: Resettable for Setup3Spec { } }
#[doc = "SETUP4 (r) register accessor: Setup Date 4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup4::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@setup4`] module"]
#[doc (alias = "SETUP4")] pub type Setup4 = crate :: Reg < setup4 :: Setup4Spec > ;
#[doc = "Setup Date 4 register"] pub mod setup4 {
#[doc = "Register `SETUP4` reader"] pub type R = crate :: R < Setup4Spec > ;
#[doc = "Field `SETUPD4` reader - Setup Data 4"] pub type Setupd4R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - Setup Data 4"]
#[inline (always)] pub fn setupd4 (& self) -> Setupd4R { Setupd4R :: new ((self . bits & 0xff) as u8) } }
#[doc = "Setup Date 4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup4::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Setup4Spec ; impl crate :: RegisterSpec for Setup4Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`setup4::R`](R) reader structure"] impl crate :: Readable for Setup4Spec { }
#[doc = "`reset()` method sets SETUP4 to value 0"] impl crate :: Resettable for Setup4Spec { } }
#[doc = "SETUP5 (r) register accessor: Setup Date 5 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup5::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@setup5`] module"]
#[doc (alias = "SETUP5")] pub type Setup5 = crate :: Reg < setup5 :: Setup5Spec > ;
#[doc = "Setup Date 5 register"] pub mod setup5 {
#[doc = "Register `SETUP5` reader"] pub type R = crate :: R < Setup5Spec > ;
#[doc = "Field `SETUPD5` reader - Setup Data 5"] pub type Setupd5R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - Setup Data 5"]
#[inline (always)] pub fn setupd5 (& self) -> Setupd5R { Setupd5R :: new ((self . bits & 0xff) as u8) } }
#[doc = "Setup Date 5 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup5::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Setup5Spec ; impl crate :: RegisterSpec for Setup5Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`setup5::R`](R) reader structure"] impl crate :: Readable for Setup5Spec { }
#[doc = "`reset()` method sets SETUP5 to value 0"] impl crate :: Resettable for Setup5Spec { } }
#[doc = "SETUP6 (r) register accessor: Setup Date 6 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup6::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@setup6`] module"]
#[doc (alias = "SETUP6")] pub type Setup6 = crate :: Reg < setup6 :: Setup6Spec > ;
#[doc = "Setup Date 6 register"] pub mod setup6 {
#[doc = "Register `SETUP6` reader"] pub type R = crate :: R < Setup6Spec > ;
#[doc = "Field `SETUPD6` reader - Setup Data 6"] pub type Setupd6R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - Setup Data 6"]
#[inline (always)] pub fn setupd6 (& self) -> Setupd6R { Setupd6R :: new ((self . bits & 0xff) as u8) } }
#[doc = "Setup Date 6 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup6::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Setup6Spec ; impl crate :: RegisterSpec for Setup6Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`setup6::R`](R) reader structure"] impl crate :: Readable for Setup6Spec { }
#[doc = "`reset()` method sets SETUP6 to value 0"] impl crate :: Resettable for Setup6Spec { } }
#[doc = "SETUP7 (r) register accessor: Setup Date 7 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup7::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@setup7`] module"]
#[doc (alias = "SETUP7")] pub type Setup7 = crate :: Reg < setup7 :: Setup7Spec > ;
#[doc = "Setup Date 7 register"] pub mod setup7 {
#[doc = "Register `SETUP7` reader"] pub type R = crate :: R < Setup7Spec > ;
#[doc = "Field `SETUPD7` reader - Setup Data 7"] pub type Setupd7R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - Setup Data 7"]
#[inline (always)] pub fn setupd7 (& self) -> Setupd7R { Setupd7R :: new ((self . bits & 0xff) as u8) } }
#[doc = "Setup Date 7 register\n\nYou can [`read`](crate::Reg::read) this register and get [`setup7::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Setup7Spec ; impl crate :: RegisterSpec for Setup7Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`setup7::R`](R) reader structure"] impl crate :: Readable for Setup7Spec { }
#[doc = "`reset()` method sets SETUP7 to value 0"] impl crate :: Resettable for Setup7Spec { } }
#[doc = "PACKET_SIZEL (rw) register accessor: PACKET SIZEL register\n\nYou can [`read`](crate::Reg::read) this register and get [`packet_sizel::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`packet_sizel::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@packet_sizel`] module"]
#[doc (alias = "PACKET_SIZEL")] pub type PacketSizel = crate :: Reg < packet_sizel :: PacketSizelSpec > ;
#[doc = "PACKET SIZEL register"] pub mod packet_sizel {
#[doc = "Register `PACKET_SIZEL` reader"] pub type R = crate :: R < PacketSizelSpec > ;
#[doc = "Register `PACKET_SIZEL` writer"] pub type W = crate :: W < PacketSizelSpec > ;
#[doc = "Field `SIZE0` reader - USB Max Packet Size"] pub type Size0R = crate :: FieldReader ;
#[doc = "Field `SIZE0` writer - USB Max Packet Size"] pub type Size0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - USB Max Packet Size"]
#[inline (always)] pub fn size0 (& self) -> Size0R { Size0R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - USB Max Packet Size"]
#[inline (always)] pub fn size0 (& mut self) -> Size0W < '_ , PacketSizelSpec > { Size0W :: new (self , 0) } }
#[doc = "PACKET SIZEL register\n\nYou can [`read`](crate::Reg::read) this register and get [`packet_sizel::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`packet_sizel::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PacketSizelSpec ; impl crate :: RegisterSpec for PacketSizelSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`packet_sizel::R`](R) reader structure"] impl crate :: Readable for PacketSizelSpec { }
#[doc = "`write(|w| ..)` method takes [`packet_sizel::W`](W) writer structure"] impl crate :: Writable for PacketSizelSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PACKET_SIZEL to value 0x40"] impl crate :: Resettable for PacketSizelSpec { const RESET_VALUE : u16 = 0x40 ; } }
#[doc = "PACKET_SIZEH (rw) register accessor: PACKET SIZEH register\n\nYou can [`read`](crate::Reg::read) this register and get [`packet_sizeh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`packet_sizeh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@packet_sizeh`] module"]
#[doc (alias = "PACKET_SIZEH")] pub type PacketSizeh = crate :: Reg < packet_sizeh :: PacketSizehSpec > ;
#[doc = "PACKET SIZEH register"] pub mod packet_sizeh {
#[doc = "Register `PACKET_SIZEH` reader"] pub type R = crate :: R < PacketSizehSpec > ;
#[doc = "Register `PACKET_SIZEH` writer"] pub type W = crate :: W < PacketSizehSpec > ;
#[doc = "Field `SIZE1` reader - USB Max Packet Size"] pub type Size1R = crate :: FieldReader ;
#[doc = "Field `SIZE1` writer - USB Max Packet Size"] pub type Size1W < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - USB Max Packet Size"]
#[inline (always)] pub fn size1 (& self) -> Size1R { Size1R :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - USB Max Packet Size"]
#[inline (always)] pub fn size1 (& mut self) -> Size1W < '_ , PacketSizehSpec > { Size1W :: new (self , 0) } }
#[doc = "PACKET SIZEH register\n\nYou can [`read`](crate::Reg::read) this register and get [`packet_sizeh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`packet_sizeh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PacketSizehSpec ; impl crate :: RegisterSpec for PacketSizehSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`packet_sizeh::R`](R) reader structure"] impl crate :: Readable for PacketSizehSpec { }
#[doc = "`write(|w| ..)` method takes [`packet_sizeh::W`](W) writer structure"] impl crate :: Writable for PacketSizehSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets PACKET_SIZEH to value 0x40"] impl crate :: Resettable for PacketSizehSpec { const RESET_VALUE : u32 = 0x40 ; } }
#[doc = "EP0_AVAIL (r) register accessor: EP0 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_avail::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep0_avail`] module"]
#[doc (alias = "EP0_AVAIL")] pub type Ep0Avail = crate :: Reg < ep0_avail :: Ep0AvailSpec > ;
#[doc = "EP0 AVAIL register"] pub mod ep0_avail {
#[doc = "Register `EP0_AVAIL` reader"] pub type R = crate :: R < Ep0AvailSpec > ;
#[doc = "Field `EP0AVIL` reader - EP0 FIFO available data number"] pub type Ep0avilR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - EP0 FIFO available data number"]
#[inline (always)] pub fn ep0avil (& self) -> Ep0avilR { Ep0avilR :: new ((self . bits & 0xff) as u8) } }
#[doc = "EP0 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_avail::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep0AvailSpec ; impl crate :: RegisterSpec for Ep0AvailSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep0_avail::R`](R) reader structure"] impl crate :: Readable for Ep0AvailSpec { }
#[doc = "`reset()` method sets EP0_AVAIL to value 0"] impl crate :: Resettable for Ep0AvailSpec { } }
#[doc = "EP1_AVAIL (r) register accessor: EP1 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_avail::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep1_avail`] module"]
#[doc (alias = "EP1_AVAIL")] pub type Ep1Avail = crate :: Reg < ep1_avail :: Ep1AvailSpec > ;
#[doc = "EP1 AVAIL register"] pub mod ep1_avail {
#[doc = "Register `EP1_AVAIL` reader"] pub type R = crate :: R < Ep1AvailSpec > ;
#[doc = "Field `EP1AVIL` reader - EP1 FIFO available data number"] pub type Ep1avilR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - EP1 FIFO available data number"]
#[inline (always)] pub fn ep1avil (& self) -> Ep1avilR { Ep1avilR :: new ((self . bits & 0xff) as u8) } }
#[doc = "EP1 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_avail::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep1AvailSpec ; impl crate :: RegisterSpec for Ep1AvailSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep1_avail::R`](R) reader structure"] impl crate :: Readable for Ep1AvailSpec { }
#[doc = "`reset()` method sets EP1_AVAIL to value 0"] impl crate :: Resettable for Ep1AvailSpec { } }
#[doc = "EP2_AVAIL (r) register accessor: EP2 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_avail::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep2_avail`] module"]
#[doc (alias = "EP2_AVAIL")] pub type Ep2Avail = crate :: Reg < ep2_avail :: Ep2AvailSpec > ;
#[doc = "EP2 AVAIL register"] pub mod ep2_avail {
#[doc = "Register `EP2_AVAIL` reader"] pub type R = crate :: R < Ep2AvailSpec > ;
#[doc = "Field `EP2AVIL` reader - EP2 FIFO available data number"] pub type Ep2avilR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - EP2 FIFO available data number"]
#[inline (always)] pub fn ep2avil (& self) -> Ep2avilR { Ep2avilR :: new ((self . bits & 0xff) as u8) } }
#[doc = "EP2 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_avail::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep2AvailSpec ; impl crate :: RegisterSpec for Ep2AvailSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep2_avail::R`](R) reader structure"] impl crate :: Readable for Ep2AvailSpec { }
#[doc = "`reset()` method sets EP2_AVAIL to value 0"] impl crate :: Resettable for Ep2AvailSpec { } }
#[doc = "EP3_AVAIL (r) register accessor: EP3 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_avail::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep3_avail`] module"]
#[doc (alias = "EP3_AVAIL")] pub type Ep3Avail = crate :: Reg < ep3_avail :: Ep3AvailSpec > ;
#[doc = "EP3 AVAIL register"] pub mod ep3_avail {
#[doc = "Register `EP3_AVAIL` reader"] pub type R = crate :: R < Ep3AvailSpec > ;
#[doc = "Field `EP3AVIL` reader - EP3 FIFO available data number"] pub type Ep3avilR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - EP3 FIFO available data number"]
#[inline (always)] pub fn ep3avil (& self) -> Ep3avilR { Ep3avilR :: new ((self . bits & 0xff) as u8) } }
#[doc = "EP3 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_avail::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep3AvailSpec ; impl crate :: RegisterSpec for Ep3AvailSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep3_avail::R`](R) reader structure"] impl crate :: Readable for Ep3AvailSpec { }
#[doc = "`reset()` method sets EP3_AVAIL to value 0"] impl crate :: Resettable for Ep3AvailSpec { } }
#[doc = "EP4_AVAIL (r) register accessor: EP4 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_avail::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep4_avail`] module"]
#[doc (alias = "EP4_AVAIL")] pub type Ep4Avail = crate :: Reg < ep4_avail :: Ep4AvailSpec > ;
#[doc = "EP4 AVAIL register"] pub mod ep4_avail {
#[doc = "Register `EP4_AVAIL` reader"] pub type R = crate :: R < Ep4AvailSpec > ;
#[doc = "Field `EP4AVIL` reader - EP4 FIFO available data number"] pub type Ep4avilR = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - EP4 FIFO available data number"]
#[inline (always)] pub fn ep4avil (& self) -> Ep4avilR { Ep4avilR :: new ((self . bits & 0xff) as u8) } }
#[doc = "EP4 AVAIL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_avail::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep4AvailSpec ; impl crate :: RegisterSpec for Ep4AvailSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep4_avail::R`](R) reader structure"] impl crate :: Readable for Ep4AvailSpec { }
#[doc = "`reset()` method sets EP4_AVAIL to value 0"] impl crate :: Resettable for Ep4AvailSpec { } }
#[doc = "DAM_ADDR0 (r) register accessor: DMA1 ADDR0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`dam_addr0::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dam_addr0`] module"]
#[doc (alias = "DAM_ADDR0")] pub type DamAddr0 = crate :: Reg < dam_addr0 :: DamAddr0Spec > ;
#[doc = "DMA1 ADDR0 register"] pub mod dam_addr0 {
#[doc = "Register `DAM_ADDR0` reader"] pub type R = crate :: R < DamAddr0Spec > ;
#[doc = "Field `DMA_ADDR0` reader - USB DAM address0\\[7:0\\]"] pub type DmaAddr0R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - USB DAM address0\\[7:0\\]"]
#[inline (always)] pub fn dma_addr0 (& self) -> DmaAddr0R { DmaAddr0R :: new ((self . bits & 0xff) as u8) } }
#[doc = "DMA1 ADDR0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`dam_addr0::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DamAddr0Spec ; impl crate :: RegisterSpec for DamAddr0Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`dam_addr0::R`](R) reader structure"] impl crate :: Readable for DamAddr0Spec { }
#[doc = "`reset()` method sets DAM_ADDR0 to value 0"] impl crate :: Resettable for DamAddr0Spec { } }
#[doc = "DAM_ADDR1 (r) register accessor: DMA1 ADDR1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`dam_addr1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dam_addr1`] module"]
#[doc (alias = "DAM_ADDR1")] pub type DamAddr1 = crate :: Reg < dam_addr1 :: DamAddr1Spec > ;
#[doc = "DMA1 ADDR1 register"] pub mod dam_addr1 {
#[doc = "Register `DAM_ADDR1` reader"] pub type R = crate :: R < DamAddr1Spec > ;
#[doc = "Field `DMA_ADDR1` reader - USB DAM address1\\[15:8\\]"] pub type DmaAddr1R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - USB DAM address1\\[15:8\\]"]
#[inline (always)] pub fn dma_addr1 (& self) -> DmaAddr1R { DmaAddr1R :: new ((self . bits & 0xff) as u8) } }
#[doc = "DMA1 ADDR1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`dam_addr1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DamAddr1Spec ; impl crate :: RegisterSpec for DamAddr1Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`dam_addr1::R`](R) reader structure"] impl crate :: Readable for DamAddr1Spec { }
#[doc = "`reset()` method sets DAM_ADDR1 to value 0"] impl crate :: Resettable for DamAddr1Spec { } }
#[doc = "DAM_ADDR2 (r) register accessor: DMA1 ADDR2 register\n\nYou can [`read`](crate::Reg::read) this register and get [`dam_addr2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dam_addr2`] module"]
#[doc (alias = "DAM_ADDR2")] pub type DamAddr2 = crate :: Reg < dam_addr2 :: DamAddr2Spec > ;
#[doc = "DMA1 ADDR2 register"] pub mod dam_addr2 {
#[doc = "Register `DAM_ADDR2` reader"] pub type R = crate :: R < DamAddr2Spec > ;
#[doc = "Field `DMA_ADDR2` reader - USB DAM address2\\[23:16\\]"] pub type DmaAddr2R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - USB DAM address2\\[23:16\\]"]
#[inline (always)] pub fn dma_addr2 (& self) -> DmaAddr2R { DmaAddr2R :: new ((self . bits & 0xff) as u8) } }
#[doc = "DMA1 ADDR2 register\n\nYou can [`read`](crate::Reg::read) this register and get [`dam_addr2::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DamAddr2Spec ; impl crate :: RegisterSpec for DamAddr2Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`dam_addr2::R`](R) reader structure"] impl crate :: Readable for DamAddr2Spec { }
#[doc = "`reset()` method sets DAM_ADDR2 to value 0"] impl crate :: Resettable for DamAddr2Spec { } }
#[doc = "DAM_ADDR3 (r) register accessor: DMA1 ADDR3 register\n\nYou can [`read`](crate::Reg::read) this register and get [`dam_addr3::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dam_addr3`] module"]
#[doc (alias = "DAM_ADDR3")] pub type DamAddr3 = crate :: Reg < dam_addr3 :: DamAddr3Spec > ;
#[doc = "DMA1 ADDR3 register"] pub mod dam_addr3 {
#[doc = "Register `DAM_ADDR3` reader"] pub type R = crate :: R < DamAddr3Spec > ;
#[doc = "Field `DMA_ADDR3` reader - USB DAM address3\\[31:24\\]"] pub type DmaAddr3R = crate :: FieldReader ; impl R {
#[doc = "Bits 0:7 - USB DAM address3\\[31:24\\]"]
#[inline (always)] pub fn dma_addr3 (& self) -> DmaAddr3R { DmaAddr3R :: new ((self . bits & 0xff) as u8) } }
#[doc = "DMA1 ADDR3 register\n\nYou can [`read`](crate::Reg::read) this register and get [`dam_addr3::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DamAddr3Spec ; impl crate :: RegisterSpec for DamAddr3Spec { type Ux = u16 ; }
#[doc = "`read()` method returns [`dam_addr3::R`](R) reader structure"] impl crate :: Readable for DamAddr3Spec { }
#[doc = "`reset()` method sets DAM_ADDR3 to value 0"] impl crate :: Resettable for DamAddr3Spec { } }
#[doc = "DMA_NUML (rw) register accessor: DMA NUML register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_numl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_numl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_numl`] module"]
#[doc (alias = "DMA_NUML")] pub type DmaNuml = crate :: Reg < dma_numl :: DmaNumlSpec > ;
#[doc = "DMA NUML register"] pub mod dma_numl {
#[doc = "Register `DMA_NUML` reader"] pub type R = crate :: R < DmaNumlSpec > ;
#[doc = "Register `DMA_NUML` writer"] pub type W = crate :: W < DmaNumlSpec > ;
#[doc = "Field `DMA_NUML` reader - EP2 DMA number 0-7"] pub type DmaNumlR = crate :: FieldReader ;
#[doc = "Field `DMA_NUML` writer - EP2 DMA number 0-7"] pub type DmaNumlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - EP2 DMA number 0-7"]
#[inline (always)] pub fn dma_numl (& self) -> DmaNumlR { DmaNumlR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - EP2 DMA number 0-7"]
#[inline (always)] pub fn dma_numl (& mut self) -> DmaNumlW < '_ , DmaNumlSpec > { DmaNumlW :: new (self , 0) } }
#[doc = "DMA NUML register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_numl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_numl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaNumlSpec ; impl crate :: RegisterSpec for DmaNumlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`dma_numl::R`](R) reader structure"] impl crate :: Readable for DmaNumlSpec { }
#[doc = "`write(|w| ..)` method takes [`dma_numl::W`](W) writer structure"] impl crate :: Writable for DmaNumlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMA_NUML to value 0"] impl crate :: Resettable for DmaNumlSpec { } }
#[doc = "DMA_NUMH (rw) register accessor: DMA NUMH register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_numh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_numh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_numh`] module"]
#[doc (alias = "DMA_NUMH")] pub type DmaNumh = crate :: Reg < dma_numh :: DmaNumhSpec > ;
#[doc = "DMA NUMH register"] pub mod dma_numh {
#[doc = "Register `DMA_NUMH` reader"] pub type R = crate :: R < DmaNumhSpec > ;
#[doc = "Register `DMA_NUMH` writer"] pub type W = crate :: W < DmaNumhSpec > ;
#[doc = "Field `DMA1_NUMH` reader - EP2 DMA number 8-15"] pub type Dma1NumhR = crate :: FieldReader ;
#[doc = "Field `DMA1_NUMH` writer - EP2 DMA number 8-15"] pub type Dma1NumhW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - EP2 DMA number 8-15"]
#[inline (always)] pub fn dma1_numh (& self) -> Dma1NumhR { Dma1NumhR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - EP2 DMA number 8-15"]
#[inline (always)] pub fn dma1_numh (& mut self) -> Dma1NumhW < '_ , DmaNumhSpec > { Dma1NumhW :: new (self , 0) } }
#[doc = "DMA NUMH register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma_numh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma_numh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaNumhSpec ; impl crate :: RegisterSpec for DmaNumhSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`dma_numh::R`](R) reader structure"] impl crate :: Readable for DmaNumhSpec { }
#[doc = "`write(|w| ..)` method takes [`dma_numh::W`](W) writer structure"] impl crate :: Writable for DmaNumhSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets DMA_NUMH to value 0"] impl crate :: Resettable for DmaNumhSpec { } }
#[doc = "EP0_CTRL (rw) register accessor: EP0 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_ctrl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0_ctrl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep0_ctrl`] module"]
#[doc (alias = "EP0_CTRL")] pub type Ep0Ctrl = crate :: Reg < ep0_ctrl :: Ep0CtrlSpec > ;
#[doc = "EP0 CTRL register"] pub mod ep0_ctrl {
#[doc = "Register `EP0_CTRL` reader"] pub type R = crate :: R < Ep0CtrlSpec > ;
#[doc = "Register `EP0_CTRL` writer"] pub type W = crate :: W < Ep0CtrlSpec > ;
#[doc = "Field `TRANCOUNT` reader - EP0 transfer counter"] pub type TrancountR = crate :: FieldReader ;
#[doc = "Field `TRANCOUNT` writer - EP0 transfer counter"] pub type TrancountW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ;
#[doc = "Field `TRANEN` reader - EP0 transfer enable"] pub type TranenR = crate :: BitReader ;
#[doc = "Field `TRANEN` writer - EP0 transfer enable"] pub type TranenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:6 - EP0 transfer counter"]
#[inline (always)] pub fn trancount (& self) -> TrancountR { TrancountR :: new ((self . bits & 0x7f) as u8) }
#[doc = "Bit 7 - EP0 transfer enable"]
#[inline (always)] pub fn tranen (& self) -> TranenR { TranenR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bits 0:6 - EP0 transfer counter"]
#[inline (always)] pub fn trancount (& mut self) -> TrancountW < '_ , Ep0CtrlSpec > { TrancountW :: new (self , 0) }
#[doc = "Bit 7 - EP0 transfer enable"]
#[inline (always)] pub fn tranen (& mut self) -> TranenW < '_ , Ep0CtrlSpec > { TranenW :: new (self , 7) } }
#[doc = "EP0 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_ctrl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0_ctrl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep0CtrlSpec ; impl crate :: RegisterSpec for Ep0CtrlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep0_ctrl::R`](R) reader structure"] impl crate :: Readable for Ep0CtrlSpec { }
#[doc = "`write(|w| ..)` method takes [`ep0_ctrl::W`](W) writer structure"] impl crate :: Writable for Ep0CtrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP0_CTRL to value 0"] impl crate :: Resettable for Ep0CtrlSpec { } }
#[doc = "EP1_CTRL (rw) register accessor: EP1 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_ctrl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1_ctrl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep1_ctrl`] module"]
#[doc (alias = "EP1_CTRL")] pub type Ep1Ctrl = crate :: Reg < ep1_ctrl :: Ep1CtrlSpec > ;
#[doc = "EP1 CTRL register"] pub mod ep1_ctrl {
#[doc = "Register `EP1_CTRL` reader"] pub type R = crate :: R < Ep1CtrlSpec > ;
#[doc = "Register `EP1_CTRL` writer"] pub type W = crate :: W < Ep1CtrlSpec > ;
#[doc = "Field `TRANCOUNT` reader - EP1 transfer counter"] pub type TrancountR = crate :: FieldReader ;
#[doc = "Field `TRANCOUNT` writer - EP1 transfer counter"] pub type TrancountW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ;
#[doc = "Field `TRANEN` reader - EP1 transfer enable"] pub type TranenR = crate :: BitReader ;
#[doc = "Field `TRANEN` writer - EP1 transfer enable"] pub type TranenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:6 - EP1 transfer counter"]
#[inline (always)] pub fn trancount (& self) -> TrancountR { TrancountR :: new ((self . bits & 0x7f) as u8) }
#[doc = "Bit 7 - EP1 transfer enable"]
#[inline (always)] pub fn tranen (& self) -> TranenR { TranenR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bits 0:6 - EP1 transfer counter"]
#[inline (always)] pub fn trancount (& mut self) -> TrancountW < '_ , Ep1CtrlSpec > { TrancountW :: new (self , 0) }
#[doc = "Bit 7 - EP1 transfer enable"]
#[inline (always)] pub fn tranen (& mut self) -> TranenW < '_ , Ep1CtrlSpec > { TranenW :: new (self , 7) } }
#[doc = "EP1 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_ctrl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1_ctrl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep1CtrlSpec ; impl crate :: RegisterSpec for Ep1CtrlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep1_ctrl::R`](R) reader structure"] impl crate :: Readable for Ep1CtrlSpec { }
#[doc = "`write(|w| ..)` method takes [`ep1_ctrl::W`](W) writer structure"] impl crate :: Writable for Ep1CtrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP1_CTRL to value 0"] impl crate :: Resettable for Ep1CtrlSpec { } }
#[doc = "EP2_CTRL (rw) register accessor: EP2 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_ctrl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2_ctrl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep2_ctrl`] module"]
#[doc (alias = "EP2_CTRL")] pub type Ep2Ctrl = crate :: Reg < ep2_ctrl :: Ep2CtrlSpec > ;
#[doc = "EP2 CTRL register"] pub mod ep2_ctrl {
#[doc = "Register `EP2_CTRL` reader"] pub type R = crate :: R < Ep2CtrlSpec > ;
#[doc = "Register `EP2_CTRL` writer"] pub type W = crate :: W < Ep2CtrlSpec > ;
#[doc = "Field `TRANCOUNT` reader - EP2 transfer counter"] pub type TrancountR = crate :: FieldReader ;
#[doc = "Field `TRANCOUNT` writer - EP2 transfer counter"] pub type TrancountW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ;
#[doc = "Field `TRANEN` reader - EP2 transfer enable"] pub type TranenR = crate :: BitReader ;
#[doc = "Field `TRANEN` writer - EP2 transfer enable"] pub type TranenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:6 - EP2 transfer counter"]
#[inline (always)] pub fn trancount (& self) -> TrancountR { TrancountR :: new ((self . bits & 0x7f) as u8) }
#[doc = "Bit 7 - EP2 transfer enable"]
#[inline (always)] pub fn tranen (& self) -> TranenR { TranenR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bits 0:6 - EP2 transfer counter"]
#[inline (always)] pub fn trancount (& mut self) -> TrancountW < '_ , Ep2CtrlSpec > { TrancountW :: new (self , 0) }
#[doc = "Bit 7 - EP2 transfer enable"]
#[inline (always)] pub fn tranen (& mut self) -> TranenW < '_ , Ep2CtrlSpec > { TranenW :: new (self , 7) } }
#[doc = "EP2 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_ctrl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2_ctrl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep2CtrlSpec ; impl crate :: RegisterSpec for Ep2CtrlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep2_ctrl::R`](R) reader structure"] impl crate :: Readable for Ep2CtrlSpec { }
#[doc = "`write(|w| ..)` method takes [`ep2_ctrl::W`](W) writer structure"] impl crate :: Writable for Ep2CtrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP2_CTRL to value 0"] impl crate :: Resettable for Ep2CtrlSpec { } }
#[doc = "EP3_CTRL (rw) register accessor: EP3 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_ctrl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3_ctrl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep3_ctrl`] module"]
#[doc (alias = "EP3_CTRL")] pub type Ep3Ctrl = crate :: Reg < ep3_ctrl :: Ep3CtrlSpec > ;
#[doc = "EP3 CTRL register"] pub mod ep3_ctrl {
#[doc = "Register `EP3_CTRL` reader"] pub type R = crate :: R < Ep3CtrlSpec > ;
#[doc = "Register `EP3_CTRL` writer"] pub type W = crate :: W < Ep3CtrlSpec > ;
#[doc = "Field `TRANCOUNT` reader - EP3 transfer counter"] pub type TrancountR = crate :: FieldReader ;
#[doc = "Field `TRANCOUNT` writer - EP3 transfer counter"] pub type TrancountW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ;
#[doc = "Field `TRANEN` reader - EP3 transfer enable"] pub type TranenR = crate :: BitReader ;
#[doc = "Field `TRANEN` writer - EP3 transfer enable"] pub type TranenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:6 - EP3 transfer counter"]
#[inline (always)] pub fn trancount (& self) -> TrancountR { TrancountR :: new ((self . bits & 0x7f) as u8) }
#[doc = "Bit 7 - EP3 transfer enable"]
#[inline (always)] pub fn tranen (& self) -> TranenR { TranenR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bits 0:6 - EP3 transfer counter"]
#[inline (always)] pub fn trancount (& mut self) -> TrancountW < '_ , Ep3CtrlSpec > { TrancountW :: new (self , 0) }
#[doc = "Bit 7 - EP3 transfer enable"]
#[inline (always)] pub fn tranen (& mut self) -> TranenW < '_ , Ep3CtrlSpec > { TranenW :: new (self , 7) } }
#[doc = "EP3 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_ctrl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3_ctrl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep3CtrlSpec ; impl crate :: RegisterSpec for Ep3CtrlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep3_ctrl::R`](R) reader structure"] impl crate :: Readable for Ep3CtrlSpec { }
#[doc = "`write(|w| ..)` method takes [`ep3_ctrl::W`](W) writer structure"] impl crate :: Writable for Ep3CtrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP3_CTRL to value 0"] impl crate :: Resettable for Ep3CtrlSpec { } }
#[doc = "EP4_CTRL (rw) register accessor: EP4 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_ctrl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4_ctrl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep4_ctrl`] module"]
#[doc (alias = "EP4_CTRL")] pub type Ep4Ctrl = crate :: Reg < ep4_ctrl :: Ep4CtrlSpec > ;
#[doc = "EP4 CTRL register"] pub mod ep4_ctrl {
#[doc = "Register `EP4_CTRL` reader"] pub type R = crate :: R < Ep4CtrlSpec > ;
#[doc = "Register `EP4_CTRL` writer"] pub type W = crate :: W < Ep4CtrlSpec > ;
#[doc = "Field `TRANCOUNT` reader - EP4 transfer counter"] pub type TrancountR = crate :: FieldReader ;
#[doc = "Field `TRANCOUNT` writer - EP4 transfer counter"] pub type TrancountW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ;
#[doc = "Field `TRANEN` reader - EP4 transfer enable"] pub type TranenR = crate :: BitReader ;
#[doc = "Field `TRANEN` writer - EP4 transfer enable"] pub type TranenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:6 - EP4 transfer counter"]
#[inline (always)] pub fn trancount (& self) -> TrancountR { TrancountR :: new ((self . bits & 0x7f) as u8) }
#[doc = "Bit 7 - EP4 transfer enable"]
#[inline (always)] pub fn tranen (& self) -> TranenR { TranenR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bits 0:6 - EP4 transfer counter"]
#[inline (always)] pub fn trancount (& mut self) -> TrancountW < '_ , Ep4CtrlSpec > { TrancountW :: new (self , 0) }
#[doc = "Bit 7 - EP4 transfer enable"]
#[inline (always)] pub fn tranen (& mut self) -> TranenW < '_ , Ep4CtrlSpec > { TranenW :: new (self , 7) } }
#[doc = "EP4 CTRL register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_ctrl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4_ctrl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep4CtrlSpec ; impl crate :: RegisterSpec for Ep4CtrlSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep4_ctrl::R`](R) reader structure"] impl crate :: Readable for Ep4CtrlSpec { }
#[doc = "`write(|w| ..)` method takes [`ep4_ctrl::W`](W) writer structure"] impl crate :: Writable for Ep4CtrlSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP4_CTRL to value 0"] impl crate :: Resettable for Ep4CtrlSpec { } }
#[doc = "EP0_FIFO (rw) register accessor: EP0 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_fifo::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0_fifo::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep0_fifo`] module"]
#[doc (alias = "EP0_FIFO")] pub type Ep0Fifo = crate :: Reg < ep0_fifo :: Ep0FifoSpec > ;
#[doc = "EP0 FIFO register"] pub mod ep0_fifo {
#[doc = "Register `EP0_FIFO` reader"] pub type R = crate :: R < Ep0FifoSpec > ;
#[doc = "Register `EP0_FIFO` writer"] pub type W = crate :: W < Ep0FifoSpec > ;
#[doc = "Field `EP0_FIFO` reader - EP0 FIFO port"] pub type Ep0FifoR = crate :: FieldReader ;
#[doc = "Field `EP0_FIFO` writer - EP0 FIFO port"] pub type Ep0FifoW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - EP0 FIFO port"]
#[inline (always)] pub fn ep0_fifo (& self) -> Ep0FifoR { Ep0FifoR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - EP0 FIFO port"]
#[inline (always)] pub fn ep0_fifo (& mut self) -> Ep0FifoW < '_ , Ep0FifoSpec > { Ep0FifoW :: new (self , 0) } }
#[doc = "EP0 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0_fifo::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0_fifo::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep0FifoSpec ; impl crate :: RegisterSpec for Ep0FifoSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep0_fifo::R`](R) reader structure"] impl crate :: Readable for Ep0FifoSpec { }
#[doc = "`write(|w| ..)` method takes [`ep0_fifo::W`](W) writer structure"] impl crate :: Writable for Ep0FifoSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP0_FIFO to value 0"] impl crate :: Resettable for Ep0FifoSpec { } }
#[doc = "EP1_FIFO (rw) register accessor: EP1 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_fifo::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1_fifo::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep1_fifo`] module"]
#[doc (alias = "EP1_FIFO")] pub type Ep1Fifo = crate :: Reg < ep1_fifo :: Ep1FifoSpec > ;
#[doc = "EP1 FIFO register"] pub mod ep1_fifo {
#[doc = "Register `EP1_FIFO` reader"] pub type R = crate :: R < Ep1FifoSpec > ;
#[doc = "Register `EP1_FIFO` writer"] pub type W = crate :: W < Ep1FifoSpec > ;
#[doc = "Field `EP1_FIFO` reader - EP1 FIFO port"] pub type Ep1FifoR = crate :: FieldReader ;
#[doc = "Field `EP1_FIFO` writer - EP1 FIFO port"] pub type Ep1FifoW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - EP1 FIFO port"]
#[inline (always)] pub fn ep1_fifo (& self) -> Ep1FifoR { Ep1FifoR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - EP1 FIFO port"]
#[inline (always)] pub fn ep1_fifo (& mut self) -> Ep1FifoW < '_ , Ep1FifoSpec > { Ep1FifoW :: new (self , 0) } }
#[doc = "EP1 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1_fifo::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1_fifo::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep1FifoSpec ; impl crate :: RegisterSpec for Ep1FifoSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep1_fifo::R`](R) reader structure"] impl crate :: Readable for Ep1FifoSpec { }
#[doc = "`write(|w| ..)` method takes [`ep1_fifo::W`](W) writer structure"] impl crate :: Writable for Ep1FifoSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP1_FIFO to value 0"] impl crate :: Resettable for Ep1FifoSpec { } }
#[doc = "EP2_FIFO (rw) register accessor: EP2 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_fifo::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2_fifo::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep2_fifo`] module"]
#[doc (alias = "EP2_FIFO")] pub type Ep2Fifo = crate :: Reg < ep2_fifo :: Ep2FifoSpec > ;
#[doc = "EP2 FIFO register"] pub mod ep2_fifo {
#[doc = "Register `EP2_FIFO` reader"] pub type R = crate :: R < Ep2FifoSpec > ;
#[doc = "Register `EP2_FIFO` writer"] pub type W = crate :: W < Ep2FifoSpec > ;
#[doc = "Field `EP2_FIFO` reader - EP2 FIFO port"] pub type Ep2FifoR = crate :: FieldReader ;
#[doc = "Field `EP2_FIFO` writer - EP2 FIFO port"] pub type Ep2FifoW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - EP2 FIFO port"]
#[inline (always)] pub fn ep2_fifo (& self) -> Ep2FifoR { Ep2FifoR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - EP2 FIFO port"]
#[inline (always)] pub fn ep2_fifo (& mut self) -> Ep2FifoW < '_ , Ep2FifoSpec > { Ep2FifoW :: new (self , 0) } }
#[doc = "EP2 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2_fifo::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2_fifo::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep2FifoSpec ; impl crate :: RegisterSpec for Ep2FifoSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep2_fifo::R`](R) reader structure"] impl crate :: Readable for Ep2FifoSpec { }
#[doc = "`write(|w| ..)` method takes [`ep2_fifo::W`](W) writer structure"] impl crate :: Writable for Ep2FifoSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP2_FIFO to value 0"] impl crate :: Resettable for Ep2FifoSpec { } }
#[doc = "EP3_FIFO (rw) register accessor: EP3 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_fifo::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3_fifo::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep3_fifo`] module"]
#[doc (alias = "EP3_FIFO")] pub type Ep3Fifo = crate :: Reg < ep3_fifo :: Ep3FifoSpec > ;
#[doc = "EP3 FIFO register"] pub mod ep3_fifo {
#[doc = "Register `EP3_FIFO` reader"] pub type R = crate :: R < Ep3FifoSpec > ;
#[doc = "Register `EP3_FIFO` writer"] pub type W = crate :: W < Ep3FifoSpec > ;
#[doc = "Field `EP3_FIFO` reader - EP3 FIFO port"] pub type Ep3FifoR = crate :: FieldReader ;
#[doc = "Field `EP3_FIFO` writer - EP3 FIFO port"] pub type Ep3FifoW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - EP3 FIFO port"]
#[inline (always)] pub fn ep3_fifo (& self) -> Ep3FifoR { Ep3FifoR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - EP3 FIFO port"]
#[inline (always)] pub fn ep3_fifo (& mut self) -> Ep3FifoW < '_ , Ep3FifoSpec > { Ep3FifoW :: new (self , 0) } }
#[doc = "EP3 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3_fifo::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3_fifo::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep3FifoSpec ; impl crate :: RegisterSpec for Ep3FifoSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep3_fifo::R`](R) reader structure"] impl crate :: Readable for Ep3FifoSpec { }
#[doc = "`write(|w| ..)` method takes [`ep3_fifo::W`](W) writer structure"] impl crate :: Writable for Ep3FifoSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP3_FIFO to value 0"] impl crate :: Resettable for Ep3FifoSpec { } }
#[doc = "EP4_FIFO (rw) register accessor: EP4 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_fifo::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4_fifo::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep4_fifo`] module"]
#[doc (alias = "EP4_FIFO")] pub type Ep4Fifo = crate :: Reg < ep4_fifo :: Ep4FifoSpec > ;
#[doc = "EP4 FIFO register"] pub mod ep4_fifo {
#[doc = "Register `EP4_FIFO` reader"] pub type R = crate :: R < Ep4FifoSpec > ;
#[doc = "Register `EP4_FIFO` writer"] pub type W = crate :: W < Ep4FifoSpec > ;
#[doc = "Field `EP4_FIFO` reader - EP4 FIFO port"] pub type Ep4FifoR = crate :: FieldReader ;
#[doc = "Field `EP4_FIFO` writer - EP4 FIFO port"] pub type Ep4FifoW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R {
#[doc = "Bits 0:7 - EP4 FIFO port"]
#[inline (always)] pub fn ep4_fifo (& self) -> Ep4FifoR { Ep4FifoR :: new ((self . bits & 0xff) as u8) } } impl W {
#[doc = "Bits 0:7 - EP4 FIFO port"]
#[inline (always)] pub fn ep4_fifo (& mut self) -> Ep4FifoW < '_ , Ep4FifoSpec > { Ep4FifoW :: new (self , 0) } }
#[doc = "EP4 FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4_fifo::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4_fifo::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ep4FifoSpec ; impl crate :: RegisterSpec for Ep4FifoSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep4_fifo::R`](R) reader structure"] impl crate :: Readable for Ep4FifoSpec { }
#[doc = "`write(|w| ..)` method takes [`ep4_fifo::W`](W) writer structure"] impl crate :: Writable for Ep4FifoSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP4_FIFO to value 0"] impl crate :: Resettable for Ep4FifoSpec { } }
#[doc = "EP_MEM (rw) register accessor: EP MEM register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_mem::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_mem::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_mem`] module"]
#[doc (alias = "EP_MEM")] pub type EpMem = crate :: Reg < ep_mem :: EpMemSpec > ;
#[doc = "EP MEM register"] pub mod ep_mem {
#[doc = "Register `EP_MEM` reader"] pub type R = crate :: R < EpMemSpec > ;
#[doc = "Register `EP_MEM` writer"] pub type W = crate :: W < EpMemSpec > ;
#[doc = "Field `EP_MEM` reader - EP memory"] pub type EpMemR = crate :: FieldReader ;
#[doc = "Field `EP_MEM` writer - EP memory"] pub type EpMemW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 > ; impl R {
#[doc = "Bits 0:2 - EP memory"]
#[inline (always)] pub fn ep_mem (& self) -> EpMemR { EpMemR :: new ((self . bits & 7) as u8) } } impl W {
#[doc = "Bits 0:2 - EP memory"]
#[inline (always)] pub fn ep_mem (& mut self) -> EpMemW < '_ , EpMemSpec > { EpMemW :: new (self , 0) } }
#[doc = "EP MEM register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_mem::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_mem::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpMemSpec ; impl crate :: RegisterSpec for EpMemSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_mem::R`](R) reader structure"] impl crate :: Readable for EpMemSpec { }
#[doc = "`write(|w| ..)` method takes [`ep_mem::W`](W) writer structure"] impl crate :: Writable for EpMemSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP_MEM to value 0"] impl crate :: Resettable for EpMemSpec { } }
#[doc = "EP_DMA (rw) register accessor: EP DMA register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_dma::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_dma::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_dma`] module"]
#[doc (alias = "EP_DMA")] pub type EpDma = crate :: Reg < ep_dma :: EpDmaSpec > ;
#[doc = "EP DMA register"] pub mod ep_dma {
#[doc = "Register `EP_DMA` reader"] pub type R = crate :: R < EpDmaSpec > ;
#[doc = "Register `EP_DMA` writer"] pub type W = crate :: W < EpDmaSpec > ;
#[doc = "Field `DMA0EN` reader - EP0 DMA enable"] pub type Dma0enR = crate :: BitReader ;
#[doc = "Field `DMA0EN` writer - EP0 DMA enable"] pub type Dma0enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DMA1EN` reader - EP1 DMA enable"] pub type Dma1enR = crate :: BitReader ;
#[doc = "Field `DMA1EN` writer - EP1 DMA enable"] pub type Dma1enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DMA2EN` reader - EP2 DMA enable"] pub type Dma2enR = crate :: BitReader ;
#[doc = "Field `DMA2EN` writer - EP2 DMA enable"] pub type Dma2enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DMA3EN` reader - EP3 DMA enable"] pub type Dma3enR = crate :: BitReader ;
#[doc = "Field `DMA3EN` writer - EP3 DMA enable"] pub type Dma3enW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `DMA4EN` reader - EP4 DMA enable"] pub type Dma4enR = crate :: BitReader ;
#[doc = "Field `DMA4EN` writer - EP4 DMA enable"] pub type Dma4enW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - EP0 DMA enable"]
#[inline (always)] pub fn dma0en (& self) -> Dma0enR { Dma0enR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - EP1 DMA enable"]
#[inline (always)] pub fn dma1en (& self) -> Dma1enR { Dma1enR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - EP2 DMA enable"]
#[inline (always)] pub fn dma2en (& self) -> Dma2enR { Dma2enR :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - EP3 DMA enable"]
#[inline (always)] pub fn dma3en (& self) -> Dma3enR { Dma3enR :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - EP4 DMA enable"]
#[inline (always)] pub fn dma4en (& self) -> Dma4enR { Dma4enR :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - EP0 DMA enable"]
#[inline (always)] pub fn dma0en (& mut self) -> Dma0enW < '_ , EpDmaSpec > { Dma0enW :: new (self , 0) }
#[doc = "Bit 1 - EP1 DMA enable"]
#[inline (always)] pub fn dma1en (& mut self) -> Dma1enW < '_ , EpDmaSpec > { Dma1enW :: new (self , 1) }
#[doc = "Bit 2 - EP2 DMA enable"]
#[inline (always)] pub fn dma2en (& mut self) -> Dma2enW < '_ , EpDmaSpec > { Dma2enW :: new (self , 2) }
#[doc = "Bit 3 - EP3 DMA enable"]
#[inline (always)] pub fn dma3en (& mut self) -> Dma3enW < '_ , EpDmaSpec > { Dma3enW :: new (self , 3) }
#[doc = "Bit 4 - EP4 DMA enable"]
#[inline (always)] pub fn dma4en (& mut self) -> Dma4enW < '_ , EpDmaSpec > { Dma4enW :: new (self , 4) } }
#[doc = "EP DMA register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_dma::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_dma::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpDmaSpec ; impl crate :: RegisterSpec for EpDmaSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_dma::R`](R) reader structure"] impl crate :: Readable for EpDmaSpec { }
#[doc = "`write(|w| ..)` method takes [`ep_dma::W`](W) writer structure"] impl crate :: Writable for EpDmaSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP_DMA to value 0"] impl crate :: Resettable for EpDmaSpec { } }
#[doc = "EP_HALT (rw) register accessor: EP HALT register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_halt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_halt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep_halt`] module"]
#[doc (alias = "EP_HALT")] pub type EpHalt = crate :: Reg < ep_halt :: EpHaltSpec > ;
#[doc = "EP HALT register"] pub mod ep_halt {
#[doc = "Register `EP_HALT` reader"] pub type R = crate :: R < EpHaltSpec > ;
#[doc = "Register `EP_HALT` writer"] pub type W = crate :: W < EpHaltSpec > ;
#[doc = "Field `HALT0` reader - EP0 halt"] pub type Halt0R = crate :: BitReader ;
#[doc = "Field `HALT0` writer - EP0 halt"] pub type Halt0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HALT1` reader - EP1 halt"] pub type Halt1R = crate :: BitReader ;
#[doc = "Field `HALT1` writer - EP1 halt"] pub type Halt1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HALT2` reader - EP2 halt"] pub type Halt2R = crate :: BitReader ;
#[doc = "Field `HALT2` writer - EP2 halt"] pub type Halt2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HALT3` reader - EP3 halt"] pub type Halt3R = crate :: BitReader ;
#[doc = "Field `HALT3` writer - EP3 halt"] pub type Halt3W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `HALT4` reader - EP4 halt"] pub type Halt4R = crate :: BitReader ;
#[doc = "Field `HALT4` writer - EP4 halt"] pub type Halt4W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - EP0 halt"]
#[inline (always)] pub fn halt0 (& self) -> Halt0R { Halt0R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - EP1 halt"]
#[inline (always)] pub fn halt1 (& self) -> Halt1R { Halt1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - EP2 halt"]
#[inline (always)] pub fn halt2 (& self) -> Halt2R { Halt2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - EP3 halt"]
#[inline (always)] pub fn halt3 (& self) -> Halt3R { Halt3R :: new (((self . bits >> 3) & 1) != 0) }
#[doc = "Bit 4 - EP4 halt"]
#[inline (always)] pub fn halt4 (& self) -> Halt4R { Halt4R :: new (((self . bits >> 4) & 1) != 0) } } impl W {
#[doc = "Bit 0 - EP0 halt"]
#[inline (always)] pub fn halt0 (& mut self) -> Halt0W < '_ , EpHaltSpec > { Halt0W :: new (self , 0) }
#[doc = "Bit 1 - EP1 halt"]
#[inline (always)] pub fn halt1 (& mut self) -> Halt1W < '_ , EpHaltSpec > { Halt1W :: new (self , 1) }
#[doc = "Bit 2 - EP2 halt"]
#[inline (always)] pub fn halt2 (& mut self) -> Halt2W < '_ , EpHaltSpec > { Halt2W :: new (self , 2) }
#[doc = "Bit 3 - EP3 halt"]
#[inline (always)] pub fn halt3 (& mut self) -> Halt3W < '_ , EpHaltSpec > { Halt3W :: new (self , 3) }
#[doc = "Bit 4 - EP4 halt"]
#[inline (always)] pub fn halt4 (& mut self) -> Halt4W < '_ , EpHaltSpec > { Halt4W :: new (self , 4) } }
#[doc = "EP HALT register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep_halt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep_halt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EpHaltSpec ; impl crate :: RegisterSpec for EpHaltSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`ep_halt::R`](R) reader structure"] impl crate :: Readable for EpHaltSpec { }
#[doc = "`write(|w| ..)` method takes [`ep_halt::W`](W) writer structure"] impl crate :: Writable for EpHaltSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets EP_HALT to value 0"] impl crate :: Resettable for EpHaltSpec { } }
#[doc = "POWER (rw) register accessor: Power control register\n\nYou can [`read`](crate::Reg::read) this register and get [`power::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`power::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@power`] module"]
#[doc (alias = "POWER")] pub type Power = crate :: Reg < power :: PowerSpec > ;
#[doc = "Power control register"] pub mod power {
#[doc = "Register `POWER` reader"] pub type R = crate :: R < PowerSpec > ;
#[doc = "Register `POWER` writer"] pub type W = crate :: W < PowerSpec > ;
#[doc = "Field `SUSPEN` reader - BUS suspend enable bit"] pub type SuspenR = crate :: BitReader ;
#[doc = "Field `SUSPEN` writer - BUS suspend enable bit"] pub type SuspenW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `SUSP` reader - suspend"] pub type SuspR = crate :: BitReader ;
#[doc = "Field `SUSP` writer - suspend"] pub type SuspW < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `WKUP` reader - Enable controller wake up from suspend state"] pub type WkupR = crate :: BitReader ;
#[doc = "Field `WKUP` writer - Enable controller wake up from suspend state"] pub type WkupW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - BUS suspend enable bit"]
#[inline (always)] pub fn suspen (& self) -> SuspenR { SuspenR :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - suspend"]
#[inline (always)] pub fn susp (& self) -> SuspR { SuspR :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 3 - Enable controller wake up from suspend state"]
#[inline (always)] pub fn wkup (& self) -> WkupR { WkupR :: new (((self . bits >> 3) & 1) != 0) } } impl W {
#[doc = "Bit 0 - BUS suspend enable bit"]
#[inline (always)] pub fn suspen (& mut self) -> SuspenW < '_ , PowerSpec > { SuspenW :: new (self , 0) }
#[doc = "Bit 1 - suspend"]
#[inline (always)] pub fn susp (& mut self) -> SuspW < '_ , PowerSpec > { SuspW :: new (self , 1) }
#[doc = "Bit 3 - Enable controller wake up from suspend state"]
#[inline (always)] pub fn wkup (& mut self) -> WkupW < '_ , PowerSpec > { WkupW :: new (self , 3) } }
#[doc = "Power control register\n\nYou can [`read`](crate::Reg::read) this register and get [`power::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`power::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PowerSpec ; impl crate :: RegisterSpec for PowerSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`power::R`](R) reader structure"] impl crate :: Readable for PowerSpec { }
#[doc = "`write(|w| ..)` method takes [`power::W`](W) writer structure"] impl crate :: Writable for PowerSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets POWER to value 0"] impl crate :: Resettable for PowerSpec { } }
#[doc = "USB_AHB_DMA (rw) register accessor: USB AHB DMA register\n\nYou can [`read`](crate::Reg::read) this register and get [`usb_ahb_dma::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`usb_ahb_dma::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@usb_ahb_dma`] module"]
#[doc (alias = "USB_AHB_DMA")] pub type UsbAhbDma = crate :: Reg < usb_ahb_dma :: UsbAhbDmaSpec > ;
#[doc = "USB AHB DMA register"] pub mod usb_ahb_dma {
#[doc = "Register `USB_AHB_DMA` reader"] pub type R = crate :: R < UsbAhbDmaSpec > ;
#[doc = "Register `USB_AHB_DMA` writer"] pub type W = crate :: W < UsbAhbDmaSpec > ;
#[doc = "Field `CH0_BS` reader - Channel 0 burst set"] pub type Ch0BsR = crate :: FieldReader ;
#[doc = "Field `CH0_BS` writer - Channel 0 burst set"] pub type Ch0BsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CH1_BS` reader - Channel 1 burst set"] pub type Ch1BsR = crate :: FieldReader ;
#[doc = "Field `CH1_BS` writer - Channel 1 burst set"] pub type Ch1BsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CH2_BS` reader - Channel 2 burst set"] pub type Ch2BsR = crate :: FieldReader ;
#[doc = "Field `CH2_BS` writer - Channel 2 burst set"] pub type Ch2BsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `CH3_BS` reader - Channel 3 burst set"] pub type Ch3BsR = crate :: FieldReader ;
#[doc = "Field `CH3_BS` writer - Channel 3 burst set"] pub type Ch3BsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; impl R {
#[doc = "Bits 0:1 - Channel 0 burst set"]
#[inline (always)] pub fn ch0_bs (& self) -> Ch0BsR { Ch0BsR :: new ((self . bits & 3) as u8) }
#[doc = "Bits 2:3 - Channel 1 burst set"]
#[inline (always)] pub fn ch1_bs (& self) -> Ch1BsR { Ch1BsR :: new (((self . bits >> 2) & 3) as u8) }
#[doc = "Bits 4:5 - Channel 2 burst set"]
#[inline (always)] pub fn ch2_bs (& self) -> Ch2BsR { Ch2BsR :: new (((self . bits >> 4) & 3) as u8) }
#[doc = "Bits 6:7 - Channel 3 burst set"]
#[inline (always)] pub fn ch3_bs (& self) -> Ch3BsR { Ch3BsR :: new (((self . bits >> 6) & 3) as u8) } } impl W {
#[doc = "Bits 0:1 - Channel 0 burst set"]
#[inline (always)] pub fn ch0_bs (& mut self) -> Ch0BsW < '_ , UsbAhbDmaSpec > { Ch0BsW :: new (self , 0) }
#[doc = "Bits 2:3 - Channel 1 burst set"]
#[inline (always)] pub fn ch1_bs (& mut self) -> Ch1BsW < '_ , UsbAhbDmaSpec > { Ch1BsW :: new (self , 2) }
#[doc = "Bits 4:5 - Channel 2 burst set"]
#[inline (always)] pub fn ch2_bs (& mut self) -> Ch2BsW < '_ , UsbAhbDmaSpec > { Ch2BsW :: new (self , 4) }
#[doc = "Bits 6:7 - Channel 3 burst set"]
#[inline (always)] pub fn ch3_bs (& mut self) -> Ch3BsW < '_ , UsbAhbDmaSpec > { Ch3BsW :: new (self , 6) } }
#[doc = "USB AHB DMA register\n\nYou can [`read`](crate::Reg::read) this register and get [`usb_ahb_dma::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`usb_ahb_dma::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct UsbAhbDmaSpec ; impl crate :: RegisterSpec for UsbAhbDmaSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`usb_ahb_dma::R`](R) reader structure"] impl crate :: Readable for UsbAhbDmaSpec { }
#[doc = "`write(|w| ..)` method takes [`usb_ahb_dma::W`](W) writer structure"] impl crate :: Writable for UsbAhbDmaSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets USB_AHB_DMA to value 0"] impl crate :: Resettable for UsbAhbDmaSpec { } }
#[doc = "USB_AHB_RST (rw) register accessor: USB AHB RST register\n\nYou can [`read`](crate::Reg::read) this register and get [`usb_ahb_rst::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`usb_ahb_rst::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@usb_ahb_rst`] module"]
#[doc (alias = "USB_AHB_RST")] pub type UsbAhbRst = crate :: Reg < usb_ahb_rst :: UsbAhbRstSpec > ;
#[doc = "USB AHB RST register"] pub mod usb_ahb_rst {
#[doc = "Register `USB_AHB_RST` reader"] pub type R = crate :: R < UsbAhbRstSpec > ;
#[doc = "Register `USB_AHB_RST` writer"] pub type W = crate :: W < UsbAhbRstSpec > ;
#[doc = "Field `EP0` reader - Endpoint 0 reset"] pub type Ep0R = crate :: BitReader ;
#[doc = "Field `EP0` writer - Endpoint 0 reset"] pub type Ep0W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP1` reader - Endpoint 1 reset"] pub type Ep1R = crate :: BitReader ;
#[doc = "Field `EP1` writer - Endpoint 1 reset"] pub type Ep1W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP2` reader - Endpoint 2 reset"] pub type Ep2R = crate :: BitReader ;
#[doc = "Field `EP2` writer - Endpoint 2 reset"] pub type Ep2W < 'a , REG > = crate :: BitWriter < 'a , REG > ;
#[doc = "Field `EP3` reader - Endpoint 3 reset"] pub type Ep3R = crate :: BitReader ;
#[doc = "Field `EP3` writer - Endpoint 3 reset"] pub type Ep3W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bit 0 - Endpoint 0 reset"]
#[inline (always)] pub fn ep0 (& self) -> Ep0R { Ep0R :: new ((self . bits & 1) != 0) }
#[doc = "Bit 1 - Endpoint 1 reset"]
#[inline (always)] pub fn ep1 (& self) -> Ep1R { Ep1R :: new (((self . bits >> 1) & 1) != 0) }
#[doc = "Bit 2 - Endpoint 2 reset"]
#[inline (always)] pub fn ep2 (& self) -> Ep2R { Ep2R :: new (((self . bits >> 2) & 1) != 0) }
#[doc = "Bit 3 - Endpoint 3 reset"]
#[inline (always)] pub fn ep3 (& self) -> Ep3R { Ep3R :: new (((self . bits >> 3) & 1) != 0) } } impl W {
#[doc = "Bit 0 - Endpoint 0 reset"]
#[inline (always)] pub fn ep0 (& mut self) -> Ep0W < '_ , UsbAhbRstSpec > { Ep0W :: new (self , 0) }
#[doc = "Bit 1 - Endpoint 1 reset"]
#[inline (always)] pub fn ep1 (& mut self) -> Ep1W < '_ , UsbAhbRstSpec > { Ep1W :: new (self , 1) }
#[doc = "Bit 2 - Endpoint 2 reset"]
#[inline (always)] pub fn ep2 (& mut self) -> Ep2W < '_ , UsbAhbRstSpec > { Ep2W :: new (self , 2) }
#[doc = "Bit 3 - Endpoint 3 reset"]
#[inline (always)] pub fn ep3 (& mut self) -> Ep3W < '_ , UsbAhbRstSpec > { Ep3W :: new (self , 3) } }
#[doc = "USB AHB RST register\n\nYou can [`read`](crate::Reg::read) this register and get [`usb_ahb_rst::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`usb_ahb_rst::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct UsbAhbRstSpec ; impl crate :: RegisterSpec for UsbAhbRstSpec { type Ux = u16 ; }
#[doc = "`read()` method returns [`usb_ahb_rst::R`](R) reader structure"] impl crate :: Readable for UsbAhbRstSpec { }
#[doc = "`write(|w| ..)` method takes [`usb_ahb_rst::W`](W) writer structure"] impl crate :: Writable for UsbAhbRstSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets USB_AHB_RST to value 0"] impl crate :: Resettable for UsbAhbRstSpec { } } }
#[doc = "Window watchdog"] pub type Wwdg = crate :: Periph < wwdg :: RegisterBlock , 0x4000_2c00 > ; impl core :: fmt :: Debug for Wwdg { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("Wwdg") . finish () } }
#[doc = "Window watchdog"] pub mod wwdg {
#[repr (C)]
#[doc = "Register block"] pub struct RegisterBlock { cr : Cr , cfgr : Cfgr , sr : Sr , } impl RegisterBlock {
#[doc = "0x00 - Control register"]
#[inline (always)] pub const fn cr (& self) -> & Cr { & self . cr }
#[doc = "0x04 - Configuration register"]
#[inline (always)] pub const fn cfgr (& self) -> & Cfgr { & self . cfgr }
#[doc = "0x08 - Status register"]
#[inline (always)] pub const fn sr (& self) -> & Sr { & self . sr } }
#[doc = "CR (rw) register accessor: Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"]
#[doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ;
#[doc = "Control register"] pub mod cr {
#[doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ;
#[doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ;
#[doc = "Field `T` reader - 7-bit counter"] pub type TR = crate :: FieldReader ;
#[doc = "Field `T` writer - 7-bit counter"] pub type TW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ;
#[doc = "Field `WDGA` reader - Activation bit"] pub type WdgaR = crate :: BitReader ;
#[doc = "Field `WDGA` writer - Activation bit"] pub type WdgaW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:6 - 7-bit counter"]
#[inline (always)] pub fn t (& self) -> TR { TR :: new ((self . bits & 0x7f) as u8) }
#[doc = "Bit 7 - Activation bit"]
#[inline (always)] pub fn wdga (& self) -> WdgaR { WdgaR :: new (((self . bits >> 7) & 1) != 0) } } impl W {
#[doc = "Bits 0:6 - 7-bit counter"]
#[inline (always)] pub fn t (& mut self) -> TW < '_ , CrSpec > { TW :: new (self , 0) }
#[doc = "Bit 7 - Activation bit"]
#[inline (always)] pub fn wdga (& mut self) -> WdgaW < '_ , CrSpec > { WdgaW :: new (self , 7) } }
#[doc = "Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { }
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CR to value 0x7f"] impl crate :: Resettable for CrSpec { const RESET_VALUE : u32 = 0x7f ; } }
#[doc = "CFGR (rw) register accessor: Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cfgr`] module"]
#[doc (alias = "CFGR")] pub type Cfgr = crate :: Reg < cfgr :: CfgrSpec > ;
#[doc = "Configuration register"] pub mod cfgr {
#[doc = "Register `CFGR` reader"] pub type R = crate :: R < CfgrSpec > ;
#[doc = "Register `CFGR` writer"] pub type W = crate :: W < CfgrSpec > ;
#[doc = "Field `WINDOW` reader - 7-bit window value"] pub type WindowR = crate :: FieldReader ;
#[doc = "Field `WINDOW` writer - 7-bit window value"] pub type WindowW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ;
#[doc = "Field `WDGTB` reader - Timer base"] pub type WdgtbR = crate :: FieldReader ;
#[doc = "Field `WDGTB` writer - Timer base"] pub type WdgtbW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ;
#[doc = "Field `EWI` reader - Early wakeup interrupt"] pub type EwiR = crate :: BitReader ;
#[doc = "Field `EWI` writer - Early wakeup interrupt"] pub type EwiW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R {
#[doc = "Bits 0:6 - 7-bit window value"]
#[inline (always)] pub fn window (& self) -> WindowR { WindowR :: new ((self . bits & 0x7f) as u8) }
#[doc = "Bits 7:8 - Timer base"]
#[inline (always)] pub fn wdgtb (& self) -> WdgtbR { WdgtbR :: new (((self . bits >> 7) & 3) as u8) }
#[doc = "Bit 9 - Early wakeup interrupt"]
#[inline (always)] pub fn ewi (& self) -> EwiR { EwiR :: new (((self . bits >> 9) & 1) != 0) } } impl W {
#[doc = "Bits 0:6 - 7-bit window value"]
#[inline (always)] pub fn window (& mut self) -> WindowW < '_ , CfgrSpec > { WindowW :: new (self , 0) }
#[doc = "Bits 7:8 - Timer base"]
#[inline (always)] pub fn wdgtb (& mut self) -> WdgtbW < '_ , CfgrSpec > { WdgtbW :: new (self , 7) }
#[doc = "Bit 9 - Early wakeup interrupt"]
#[inline (always)] pub fn ewi (& mut self) -> EwiW < '_ , CfgrSpec > { EwiW :: new (self , 9) } }
#[doc = "Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfgr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfgr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CfgrSpec ; impl crate :: RegisterSpec for CfgrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`cfgr::R`](R) reader structure"] impl crate :: Readable for CfgrSpec { }
#[doc = "`write(|w| ..)` method takes [`cfgr::W`](W) writer structure"] impl crate :: Writable for CfgrSpec { type Safety = crate :: Unsafe ; }
#[doc = "`reset()` method sets CFGR to value 0x7f"] impl crate :: Resettable for CfgrSpec { const RESET_VALUE : u32 = 0x7f ; } }
#[doc = "SR (r) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"]
#[doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ;
#[doc = "Status register"] pub mod sr {
#[doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ;
#[doc = "Field `EWIF` reader - Early wakeup interrupt flag"] pub type EwifR = crate :: BitReader ; impl R {
#[doc = "Bit 0 - Early wakeup interrupt flag"]
#[inline (always)] pub fn ewif (& self) -> EwifR { EwifR :: new ((self . bits & 1) != 0) } }
#[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; }
#[doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { }
#[doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { } } }
#[no_mangle] static mut DEVICE_PERIPHERALS : bool = false ;
#[doc = r" All the peripherals."]
#[allow (non_snake_case)] pub struct Peripherals {
#[doc = "ADC1"] pub adc1 : Adc1 ,
#[doc = "BKP"] pub bkp : Bkp ,
#[doc = "CAN"] pub can : Can ,
#[doc = "COMP"] pub comp : Comp ,
#[doc = "CRC"] pub crc : Crc ,
#[doc = "CSM"] pub csm : Csm ,
#[doc = "DBG"] pub dbg : Dbg ,
#[doc = "DEVICE"] pub device : Device ,
#[doc = "DMA1"] pub dma1 : Dma1 ,
#[doc = "EXTI"] pub exti : Exti ,
#[doc = "FLASH"] pub flash : Flash ,
#[doc = "GPIOA"] pub gpioa : Gpioa ,
#[doc = "GPIOB"] pub gpiob : Gpiob ,
#[doc = "GPIOC"] pub gpioc : Gpioc ,
#[doc = "GPIOD"] pub gpiod : Gpiod ,
#[doc = "HWDIV"] pub hwdiv : Hwdiv ,
#[doc = "I2C1"] pub i2c1 : I2c1 ,
#[doc = "IWDG"] pub iwdg : Iwdg ,
#[doc = "PWR"] pub pwr : Pwr ,
#[doc = "RCC"] pub rcc : Rcc ,
#[doc = "RTC"] pub rtc : Rtc ,
#[doc = "SPI1"] pub spi1 : Spi1 ,
#[doc = "SPI2"] pub spi2 : Spi2 ,
#[doc = "TIM1"] pub tim1 : Tim1 ,
#[doc = "TIM2"] pub tim2 : Tim2 ,
#[doc = "TIM3"] pub tim3 : Tim3 ,
#[doc = "TIM14"] pub tim14 : Tim14 ,
#[doc = "TIM16"] pub tim16 : Tim16 ,
#[doc = "TIM17"] pub tim17 : Tim17 ,
#[doc = "UART1"] pub uart1 : Uart1 ,
#[doc = "UART2"] pub uart2 : Uart2 ,
#[doc = "USB"] pub usb : Usb ,
#[doc = "WWDG"] pub wwdg : Wwdg , } impl Peripherals {
#[doc = r" Returns all the peripherals *once*."]
#[cfg (feature = "critical-section")]
#[inline] pub fn take () -> Option < Self > { critical_section :: with (| _ | { if unsafe { DEVICE_PERIPHERALS } { return None } Some (unsafe { Peripherals :: steal () }) }) }
#[doc = r" Unchecked version of `Peripherals::take`."]
#[doc = r""]
#[doc = r" # Safety"]
#[doc = r""]
#[doc = r" Each of the returned peripherals must be used at most once."]
#[inline] pub unsafe fn steal () -> Self { DEVICE_PERIPHERALS = true ; Peripherals { adc1 : Adc1 :: steal () , bkp : Bkp :: steal () , can : Can :: steal () , comp : Comp :: steal () , crc : Crc :: steal () , csm : Csm :: steal () , dbg : Dbg :: steal () , device : Device :: steal () , dma1 : Dma1 :: steal () , exti : Exti :: steal () , flash : Flash :: steal () , gpioa : Gpioa :: steal () , gpiob : Gpiob :: steal () , gpioc : Gpioc :: steal () , gpiod : Gpiod :: steal () , hwdiv : Hwdiv :: steal () , i2c1 : I2c1 :: steal () , iwdg : Iwdg :: steal () , pwr : Pwr :: steal () , rcc : Rcc :: steal () , rtc : Rtc :: steal () , spi1 : Spi1 :: steal () , spi2 : Spi2 :: steal () , tim1 : Tim1 :: steal () , tim2 : Tim2 :: steal () , tim3 : Tim3 :: steal () , tim14 : Tim14 :: steal () , tim16 : Tim16 :: steal () , tim17 : Tim17 :: steal () , uart1 : Uart1 :: steal () , uart2 : Uart2 :: steal () , usb : Usb :: steal () , wwdg : Wwdg :: steal () , } } }